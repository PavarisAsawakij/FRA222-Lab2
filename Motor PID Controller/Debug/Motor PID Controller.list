
Motor PID Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008acc  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08008ca4  08008ca4  00018ca4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ce4  08008ce4  0002002c  2**0
                  CONTENTS
  4 .ARM          00000008  08008ce4  08008ce4  00018ce4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008cec  08008cec  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008cec  08008cec  00018cec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008cf0  08008cf0  00018cf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  08008cf4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ac8  20000030  08008d20  00020030  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000af8  08008d20  00020af8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001854d  00000000  00000000  0002009f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002afd  00000000  00000000  000385ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001530  00000000  00000000  0003b0f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010a5  00000000  00000000  0003c620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028d3c  00000000  00000000  0003d6c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017fa2  00000000  00000000  00066401  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001140d5  00000000  00000000  0007e3a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005c04  00000000  00000000  00192478  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007e  00000000  00000000  0019807c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000030 	.word	0x20000030
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08008c8c 	.word	0x08008c8c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000034 	.word	0x20000034
 8000214:	08008c8c 	.word	0x08008c8c

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000518:	f001 fc01 	bl	8001d1e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051c:	f000 f8a6 	bl	800066c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000520:	f000 fc48 	bl	8000db4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000524:	f000 fc00 	bl	8000d28 <MX_DMA_Init>
  MX_TIM3_Init();
 8000528:	f000 faae 	bl	8000a88 <MX_TIM3_Init>
  MX_ADC1_Init();
 800052c:	f000 f8ea 	bl	8000704 <MX_ADC1_Init>
  MX_TIM15_Init();
 8000530:	f000 fba8 	bl	8000c84 <MX_TIM15_Init>
  MX_TIM5_Init();
 8000534:	f000 fb58 	bl	8000be8 <MX_TIM5_Init>
  MX_TIM4_Init();
 8000538:	f000 fafc 	bl	8000b34 <MX_TIM4_Init>
  MX_LPUART1_UART_Init();
 800053c:	f000 f96c 	bl	8000818 <MX_LPUART1_UART_Init>
  MX_TIM1_Init();
 8000540:	f000 f9b4 	bl	80008ac <MX_TIM1_Init>
  MX_TIM2_Init();
 8000544:	f000 fa52 	bl	80009ec <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	//-------------------------------Part1&3:Motor PID-------------------------------//
	UARTDMAconfig();
 8000548:	f000 ff00 	bl	800134c <UARTDMAconfig>

//	HAL_UART_Receive_DMA(&hlpuart1, RxBuffer, 4);
	HAL_ADC_Start_DMA(&hadc1, InputRead, 400); // DMA Read
 800054c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000550:	4937      	ldr	r1, [pc, #220]	; (8000630 <main+0x11c>)
 8000552:	4838      	ldr	r0, [pc, #224]	; (8000634 <main+0x120>)
 8000554:	f002 f850 	bl	80025f8 <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start_IT(&htim15);
 8000558:	4837      	ldr	r0, [pc, #220]	; (8000638 <main+0x124>)
 800055a:	f005 f979 	bl	8005850 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(&htim5); // system time clock
 800055e:	4837      	ldr	r0, [pc, #220]	; (800063c <main+0x128>)
 8000560:	f005 f906 	bl	8005770 <HAL_TIM_Base_Start>

	HAL_TIM_Base_Start(&htim4);  //motor A2
 8000564:	4836      	ldr	r0, [pc, #216]	; (8000640 <main+0x12c>)
 8000566:	f005 f903 	bl	8005770 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800056a:	2100      	movs	r1, #0
 800056c:	4834      	ldr	r0, [pc, #208]	; (8000640 <main+0x12c>)
 800056e:	f005 fa3f 	bl	80059f0 <HAL_TIM_PWM_Start>

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0); //for Check Timer
 8000572:	4b33      	ldr	r3, [pc, #204]	; (8000640 <main+0x12c>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	2200      	movs	r2, #0
 8000578:	635a      	str	r2, [r3, #52]	; 0x34

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, SET);
 800057a:	2201      	movs	r2, #1
 800057c:	2101      	movs	r1, #1
 800057e:	4831      	ldr	r0, [pc, #196]	; (8000644 <main+0x130>)
 8000580:	f004 f824 	bl	80045cc <HAL_GPIO_WritePin>
	//-------------------------------------------------------------------------------//
	//----------------------------------Part2:QEI------------------------------------//
	HAL_TIM_Base_Start(&htim3);
 8000584:	4830      	ldr	r0, [pc, #192]	; (8000648 <main+0x134>)
 8000586:	f005 f8f3 	bl	8005770 <HAL_TIM_Base_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 800058a:	213c      	movs	r1, #60	; 0x3c
 800058c:	482e      	ldr	r0, [pc, #184]	; (8000648 <main+0x134>)
 800058e:	f005 fbe7 	bl	8005d60 <HAL_TIM_Encoder_Start>

	HAL_TIM_Base_Start_IT(&htim2);
 8000592:	482e      	ldr	r0, [pc, #184]	; (800064c <main+0x138>)
 8000594:	f005 f95c 	bl	8005850 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(&htim2);
 8000598:	482c      	ldr	r0, [pc, #176]	; (800064c <main+0x138>)
 800059a:	f005 f8e9 	bl	8005770 <HAL_TIM_Base_Start>

	HAL_TIM_Base_Start(&htim1);
 800059e:	482c      	ldr	r0, [pc, #176]	; (8000650 <main+0x13c>)
 80005a0:	f005 f8e6 	bl	8005770 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80005a4:	2100      	movs	r1, #0
 80005a6:	482a      	ldr	r0, [pc, #168]	; (8000650 <main+0x13c>)
 80005a8:	f005 fa22 	bl	80059f0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80005ac:	2104      	movs	r1, #4
 80005ae:	4828      	ldr	r0, [pc, #160]	; (8000650 <main+0x13c>)
 80005b0:	f005 fa1e 	bl	80059f0 <HAL_TIM_PWM_Start>

	HAL_ADC_Start_DMA(&hadc1, ADC, 400);
 80005b4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80005b8:	4926      	ldr	r1, [pc, #152]	; (8000654 <main+0x140>)
 80005ba:	481e      	ldr	r0, [pc, #120]	; (8000634 <main+0x120>)
 80005bc:	f002 f81c 	bl	80025f8 <HAL_ADC_Start_DMA>
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//	  test = __HAL_TIM_GET_COUNTER(&htim5);
		Mode_LD2();
 80005c0:	f001 f808 	bl	80015d4 <Mode_LD2>
		Communication();
 80005c4:	f000 fdba 	bl	800113c <Communication>
		//QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim3);
		if (mode_status == 1) {
 80005c8:	4b23      	ldr	r3, [pc, #140]	; (8000658 <main+0x144>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	2b01      	cmp	r3, #1
 80005ce:	d103      	bne.n	80005d8 <main+0xc4>
			//PWM = 0;

			duty = 0;
 80005d0:	4b22      	ldr	r3, [pc, #136]	; (800065c <main+0x148>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	801a      	strh	r2, [r3, #0]
 80005d6:	e025      	b.n	8000624 <main+0x110>
		} else if (mode_status == 2) {
 80005d8:	4b1f      	ldr	r3, [pc, #124]	; (8000658 <main+0x144>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	2b02      	cmp	r3, #2
 80005de:	d105      	bne.n	80005ec <main+0xd8>
			PWM = 0;
 80005e0:	4b1f      	ldr	r3, [pc, #124]	; (8000660 <main+0x14c>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	801a      	strh	r2, [r3, #0]
			PID_QEI();
 80005e6:	f000 ff2b 	bl	8001440 <PID_QEI>
 80005ea:	e01b      	b.n	8000624 <main+0x110>


		} else if (mode_status == 3) {
 80005ec:	4b1a      	ldr	r3, [pc, #104]	; (8000658 <main+0x144>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	2b03      	cmp	r3, #3
 80005f2:	d117      	bne.n	8000624 <main+0x110>
			PWM = abs(RxInt);
 80005f4:	4b1b      	ldr	r3, [pc, #108]	; (8000664 <main+0x150>)
 80005f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	bfb8      	it	lt
 80005fe:	425b      	neglt	r3, r3
 8000600:	b29a      	uxth	r2, r3
 8000602:	4b17      	ldr	r3, [pc, #92]	; (8000660 <main+0x14c>)
 8000604:	801a      	strh	r2, [r3, #0]
			duty = 0;
 8000606:	4b15      	ldr	r3, [pc, #84]	; (800065c <main+0x148>)
 8000608:	2200      	movs	r2, #0
 800060a:	801a      	strh	r2, [r3, #0]
			if (RxInt >= 0)
 800060c:	4b15      	ldr	r3, [pc, #84]	; (8000664 <main+0x150>)
 800060e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000612:	2b00      	cmp	r3, #0
 8000614:	db03      	blt.n	800061e <main+0x10a>
				direction = 1;
 8000616:	4b14      	ldr	r3, [pc, #80]	; (8000668 <main+0x154>)
 8000618:	2201      	movs	r2, #1
 800061a:	701a      	strb	r2, [r3, #0]
 800061c:	e002      	b.n	8000624 <main+0x110>
			else
				direction = 0;
 800061e:	4b12      	ldr	r3, [pc, #72]	; (8000668 <main+0x154>)
 8000620:	2200      	movs	r2, #0
 8000622:	701a      	strb	r2, [r3, #0]
		}
		motorControl();
 8000624:	f000 fd60 	bl	80010e8 <motorControl>
		motor();
 8000628:	f000 fea8 	bl	800137c <motor>
		Mode_LD2();
 800062c:	e7c8      	b.n	80005c0 <main+0xac>
 800062e:	bf00      	nop
 8000630:	20000440 	.word	0x20000440
 8000634:	2000004c 	.word	0x2000004c
 8000638:	200003e8 	.word	0x200003e8
 800063c:	2000039c 	.word	0x2000039c
 8000640:	20000350 	.word	0x20000350
 8000644:	48000800 	.word	0x48000800
 8000648:	20000304 	.word	0x20000304
 800064c:	200002b8 	.word	0x200002b8
 8000650:	2000026c 	.word	0x2000026c
 8000654:	200007ac 	.word	0x200007ac
 8000658:	20000000 	.word	0x20000000
 800065c:	20000ad4 	.word	0x20000ad4
 8000660:	20000788 	.word	0x20000788
 8000664:	20000776 	.word	0x20000776
 8000668:	2000078a 	.word	0x2000078a

0800066c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b094      	sub	sp, #80	; 0x50
 8000670:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000672:	f107 0318 	add.w	r3, r7, #24
 8000676:	2238      	movs	r2, #56	; 0x38
 8000678:	2100      	movs	r1, #0
 800067a:	4618      	mov	r0, r3
 800067c:	f008 fada 	bl	8008c34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000680:	1d3b      	adds	r3, r7, #4
 8000682:	2200      	movs	r2, #0
 8000684:	601a      	str	r2, [r3, #0]
 8000686:	605a      	str	r2, [r3, #4]
 8000688:	609a      	str	r2, [r3, #8]
 800068a:	60da      	str	r2, [r3, #12]
 800068c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800068e:	2000      	movs	r0, #0
 8000690:	f003 ffe6 	bl	8004660 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000694:	2302      	movs	r3, #2
 8000696:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000698:	f44f 7380 	mov.w	r3, #256	; 0x100
 800069c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800069e:	2340      	movs	r3, #64	; 0x40
 80006a0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a2:	2302      	movs	r3, #2
 80006a4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006a6:	2302      	movs	r3, #2
 80006a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80006aa:	2304      	movs	r3, #4
 80006ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80006ae:	2355      	movs	r3, #85	; 0x55
 80006b0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006b2:	2302      	movs	r3, #2
 80006b4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006b6:	2302      	movs	r3, #2
 80006b8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006ba:	2302      	movs	r3, #2
 80006bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006be:	f107 0318 	add.w	r3, r7, #24
 80006c2:	4618      	mov	r0, r3
 80006c4:	f004 f880 	bl	80047c8 <HAL_RCC_OscConfig>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80006ce:	f000 ffb7 	bl	8001640 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d2:	230f      	movs	r3, #15
 80006d4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d6:	2303      	movs	r3, #3
 80006d8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006da:	2300      	movs	r3, #0
 80006dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006de:	2300      	movs	r3, #0
 80006e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006e2:	2300      	movs	r3, #0
 80006e4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006e6:	1d3b      	adds	r3, r7, #4
 80006e8:	2104      	movs	r1, #4
 80006ea:	4618      	mov	r0, r3
 80006ec:	f004 fb7e 	bl	8004dec <HAL_RCC_ClockConfig>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80006f6:	f000 ffa3 	bl	8001640 <Error_Handler>
  }
}
 80006fa:	bf00      	nop
 80006fc:	3750      	adds	r7, #80	; 0x50
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
	...

08000704 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b08c      	sub	sp, #48	; 0x30
 8000708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800070a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800070e:	2200      	movs	r2, #0
 8000710:	601a      	str	r2, [r3, #0]
 8000712:	605a      	str	r2, [r3, #4]
 8000714:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000716:	1d3b      	adds	r3, r7, #4
 8000718:	2220      	movs	r2, #32
 800071a:	2100      	movs	r1, #0
 800071c:	4618      	mov	r0, r3
 800071e:	f008 fa89 	bl	8008c34 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000722:	4b3a      	ldr	r3, [pc, #232]	; (800080c <MX_ADC1_Init+0x108>)
 8000724:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000728:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800072a:	4b38      	ldr	r3, [pc, #224]	; (800080c <MX_ADC1_Init+0x108>)
 800072c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000730:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000732:	4b36      	ldr	r3, [pc, #216]	; (800080c <MX_ADC1_Init+0x108>)
 8000734:	2200      	movs	r2, #0
 8000736:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000738:	4b34      	ldr	r3, [pc, #208]	; (800080c <MX_ADC1_Init+0x108>)
 800073a:	2200      	movs	r2, #0
 800073c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800073e:	4b33      	ldr	r3, [pc, #204]	; (800080c <MX_ADC1_Init+0x108>)
 8000740:	2200      	movs	r2, #0
 8000742:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000744:	4b31      	ldr	r3, [pc, #196]	; (800080c <MX_ADC1_Init+0x108>)
 8000746:	2201      	movs	r2, #1
 8000748:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800074a:	4b30      	ldr	r3, [pc, #192]	; (800080c <MX_ADC1_Init+0x108>)
 800074c:	2204      	movs	r2, #4
 800074e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000750:	4b2e      	ldr	r3, [pc, #184]	; (800080c <MX_ADC1_Init+0x108>)
 8000752:	2200      	movs	r2, #0
 8000754:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000756:	4b2d      	ldr	r3, [pc, #180]	; (800080c <MX_ADC1_Init+0x108>)
 8000758:	2201      	movs	r2, #1
 800075a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 800075c:	4b2b      	ldr	r3, [pc, #172]	; (800080c <MX_ADC1_Init+0x108>)
 800075e:	2202      	movs	r2, #2
 8000760:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000762:	4b2a      	ldr	r3, [pc, #168]	; (800080c <MX_ADC1_Init+0x108>)
 8000764:	2200      	movs	r2, #0
 8000766:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T15_TRGO;
 800076a:	4b28      	ldr	r3, [pc, #160]	; (800080c <MX_ADC1_Init+0x108>)
 800076c:	f44f 62b8 	mov.w	r2, #1472	; 0x5c0
 8000770:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000772:	4b26      	ldr	r3, [pc, #152]	; (800080c <MX_ADC1_Init+0x108>)
 8000774:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000778:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800077a:	4b24      	ldr	r3, [pc, #144]	; (800080c <MX_ADC1_Init+0x108>)
 800077c:	2201      	movs	r2, #1
 800077e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000782:	4b22      	ldr	r3, [pc, #136]	; (800080c <MX_ADC1_Init+0x108>)
 8000784:	2200      	movs	r2, #0
 8000786:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000788:	4b20      	ldr	r3, [pc, #128]	; (800080c <MX_ADC1_Init+0x108>)
 800078a:	2200      	movs	r2, #0
 800078c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000790:	481e      	ldr	r0, [pc, #120]	; (800080c <MX_ADC1_Init+0x108>)
 8000792:	f001 fd75 	bl	8002280 <HAL_ADC_Init>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 800079c:	f000 ff50 	bl	8001640 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80007a0:	2300      	movs	r3, #0
 80007a2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80007a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007a8:	4619      	mov	r1, r3
 80007aa:	4818      	ldr	r0, [pc, #96]	; (800080c <MX_ADC1_Init+0x108>)
 80007ac:	f003 f842 	bl	8003834 <HAL_ADCEx_MultiModeConfigChannel>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 80007b6:	f000 ff43 	bl	8001640 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80007ba:	4b15      	ldr	r3, [pc, #84]	; (8000810 <MX_ADC1_Init+0x10c>)
 80007bc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007be:	2306      	movs	r3, #6
 80007c0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80007c2:	2307      	movs	r3, #7
 80007c4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007c6:	237f      	movs	r3, #127	; 0x7f
 80007c8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007ca:	2304      	movs	r3, #4
 80007cc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80007ce:	2300      	movs	r3, #0
 80007d0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007d2:	1d3b      	adds	r3, r7, #4
 80007d4:	4619      	mov	r1, r3
 80007d6:	480d      	ldr	r0, [pc, #52]	; (800080c <MX_ADC1_Init+0x108>)
 80007d8:	f002 fa6a 	bl	8002cb0 <HAL_ADC_ConfigChannel>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 80007e2:	f000 ff2d 	bl	8001640 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80007e6:	4b0b      	ldr	r3, [pc, #44]	; (8000814 <MX_ADC1_Init+0x110>)
 80007e8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80007ea:	230c      	movs	r3, #12
 80007ec:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007ee:	1d3b      	adds	r3, r7, #4
 80007f0:	4619      	mov	r1, r3
 80007f2:	4806      	ldr	r0, [pc, #24]	; (800080c <MX_ADC1_Init+0x108>)
 80007f4:	f002 fa5c 	bl	8002cb0 <HAL_ADC_ConfigChannel>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 80007fe:	f000 ff1f 	bl	8001640 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000802:	bf00      	nop
 8000804:	3730      	adds	r7, #48	; 0x30
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	2000004c 	.word	0x2000004c
 8000810:	04300002 	.word	0x04300002
 8000814:	08600004 	.word	0x08600004

08000818 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800081c:	4b21      	ldr	r3, [pc, #132]	; (80008a4 <MX_LPUART1_UART_Init+0x8c>)
 800081e:	4a22      	ldr	r2, [pc, #136]	; (80008a8 <MX_LPUART1_UART_Init+0x90>)
 8000820:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000822:	4b20      	ldr	r3, [pc, #128]	; (80008a4 <MX_LPUART1_UART_Init+0x8c>)
 8000824:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000828:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800082a:	4b1e      	ldr	r3, [pc, #120]	; (80008a4 <MX_LPUART1_UART_Init+0x8c>)
 800082c:	2200      	movs	r2, #0
 800082e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000830:	4b1c      	ldr	r3, [pc, #112]	; (80008a4 <MX_LPUART1_UART_Init+0x8c>)
 8000832:	2200      	movs	r2, #0
 8000834:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000836:	4b1b      	ldr	r3, [pc, #108]	; (80008a4 <MX_LPUART1_UART_Init+0x8c>)
 8000838:	2200      	movs	r2, #0
 800083a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800083c:	4b19      	ldr	r3, [pc, #100]	; (80008a4 <MX_LPUART1_UART_Init+0x8c>)
 800083e:	220c      	movs	r2, #12
 8000840:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000842:	4b18      	ldr	r3, [pc, #96]	; (80008a4 <MX_LPUART1_UART_Init+0x8c>)
 8000844:	2200      	movs	r2, #0
 8000846:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000848:	4b16      	ldr	r3, [pc, #88]	; (80008a4 <MX_LPUART1_UART_Init+0x8c>)
 800084a:	2200      	movs	r2, #0
 800084c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800084e:	4b15      	ldr	r3, [pc, #84]	; (80008a4 <MX_LPUART1_UART_Init+0x8c>)
 8000850:	2200      	movs	r2, #0
 8000852:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000854:	4b13      	ldr	r3, [pc, #76]	; (80008a4 <MX_LPUART1_UART_Init+0x8c>)
 8000856:	2200      	movs	r2, #0
 8000858:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800085a:	4812      	ldr	r0, [pc, #72]	; (80008a4 <MX_LPUART1_UART_Init+0x8c>)
 800085c:	f006 fcc0 	bl	80071e0 <HAL_UART_Init>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8000866:	f000 feeb 	bl	8001640 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800086a:	2100      	movs	r1, #0
 800086c:	480d      	ldr	r0, [pc, #52]	; (80008a4 <MX_LPUART1_UART_Init+0x8c>)
 800086e:	f008 f916 	bl	8008a9e <HAL_UARTEx_SetTxFifoThreshold>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000878:	f000 fee2 	bl	8001640 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800087c:	2100      	movs	r1, #0
 800087e:	4809      	ldr	r0, [pc, #36]	; (80008a4 <MX_LPUART1_UART_Init+0x8c>)
 8000880:	f008 f94b 	bl	8008b1a <HAL_UARTEx_SetRxFifoThreshold>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 800088a:	f000 fed9 	bl	8001640 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800088e:	4805      	ldr	r0, [pc, #20]	; (80008a4 <MX_LPUART1_UART_Init+0x8c>)
 8000890:	f008 f8cc 	bl	8008a2c <HAL_UARTEx_DisableFifoMode>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800089a:	f000 fed1 	bl	8001640 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800089e:	bf00      	nop
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	20000118 	.word	0x20000118
 80008a8:	40008000 	.word	0x40008000

080008ac <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b098      	sub	sp, #96	; 0x60
 80008b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008b2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80008b6:	2200      	movs	r2, #0
 80008b8:	601a      	str	r2, [r3, #0]
 80008ba:	605a      	str	r2, [r3, #4]
 80008bc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008be:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80008c2:	2200      	movs	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
 80008c6:	605a      	str	r2, [r3, #4]
 80008c8:	609a      	str	r2, [r3, #8]
 80008ca:	60da      	str	r2, [r3, #12]
 80008cc:	611a      	str	r2, [r3, #16]
 80008ce:	615a      	str	r2, [r3, #20]
 80008d0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80008d2:	1d3b      	adds	r3, r7, #4
 80008d4:	2234      	movs	r2, #52	; 0x34
 80008d6:	2100      	movs	r1, #0
 80008d8:	4618      	mov	r0, r3
 80008da:	f008 f9ab 	bl	8008c34 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80008de:	4b41      	ldr	r3, [pc, #260]	; (80009e4 <MX_TIM1_Init+0x138>)
 80008e0:	4a41      	ldr	r2, [pc, #260]	; (80009e8 <MX_TIM1_Init+0x13c>)
 80008e2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 169;
 80008e4:	4b3f      	ldr	r3, [pc, #252]	; (80009e4 <MX_TIM1_Init+0x138>)
 80008e6:	22a9      	movs	r2, #169	; 0xa9
 80008e8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ea:	4b3e      	ldr	r3, [pc, #248]	; (80009e4 <MX_TIM1_Init+0x138>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 80008f0:	4b3c      	ldr	r3, [pc, #240]	; (80009e4 <MX_TIM1_Init+0x138>)
 80008f2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80008f6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008f8:	4b3a      	ldr	r3, [pc, #232]	; (80009e4 <MX_TIM1_Init+0x138>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80008fe:	4b39      	ldr	r3, [pc, #228]	; (80009e4 <MX_TIM1_Init+0x138>)
 8000900:	2200      	movs	r2, #0
 8000902:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000904:	4b37      	ldr	r3, [pc, #220]	; (80009e4 <MX_TIM1_Init+0x138>)
 8000906:	2200      	movs	r2, #0
 8000908:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800090a:	4836      	ldr	r0, [pc, #216]	; (80009e4 <MX_TIM1_Init+0x138>)
 800090c:	f005 f818 	bl	8005940 <HAL_TIM_PWM_Init>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000916:	f000 fe93 	bl	8001640 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800091a:	2300      	movs	r3, #0
 800091c:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800091e:	2300      	movs	r3, #0
 8000920:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000922:	2300      	movs	r3, #0
 8000924:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000926:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800092a:	4619      	mov	r1, r3
 800092c:	482d      	ldr	r0, [pc, #180]	; (80009e4 <MX_TIM1_Init+0x138>)
 800092e:	f006 fae7 	bl	8006f00 <HAL_TIMEx_MasterConfigSynchronization>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000938:	f000 fe82 	bl	8001640 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800093c:	2360      	movs	r3, #96	; 0x60
 800093e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000940:	2300      	movs	r3, #0
 8000942:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000944:	2300      	movs	r3, #0
 8000946:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000948:	2300      	movs	r3, #0
 800094a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800094c:	2300      	movs	r3, #0
 800094e:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000950:	2300      	movs	r3, #0
 8000952:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000954:	2300      	movs	r3, #0
 8000956:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000958:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800095c:	2200      	movs	r2, #0
 800095e:	4619      	mov	r1, r3
 8000960:	4820      	ldr	r0, [pc, #128]	; (80009e4 <MX_TIM1_Init+0x138>)
 8000962:	f005 fbdb 	bl	800611c <HAL_TIM_PWM_ConfigChannel>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800096c:	f000 fe68 	bl	8001640 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000970:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000974:	2204      	movs	r2, #4
 8000976:	4619      	mov	r1, r3
 8000978:	481a      	ldr	r0, [pc, #104]	; (80009e4 <MX_TIM1_Init+0x138>)
 800097a:	f005 fbcf 	bl	800611c <HAL_TIM_PWM_ConfigChannel>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8000984:	f000 fe5c 	bl	8001640 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000988:	2300      	movs	r3, #0
 800098a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800098c:	2300      	movs	r3, #0
 800098e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000990:	2300      	movs	r3, #0
 8000992:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000994:	2300      	movs	r3, #0
 8000996:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000998:	2300      	movs	r3, #0
 800099a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800099c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009a0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80009a2:	2300      	movs	r3, #0
 80009a4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80009a6:	2300      	movs	r3, #0
 80009a8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80009aa:	2300      	movs	r3, #0
 80009ac:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80009ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80009b2:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80009b4:	2300      	movs	r3, #0
 80009b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80009b8:	2300      	movs	r3, #0
 80009ba:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80009bc:	2300      	movs	r3, #0
 80009be:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80009c0:	1d3b      	adds	r3, r7, #4
 80009c2:	4619      	mov	r1, r3
 80009c4:	4807      	ldr	r0, [pc, #28]	; (80009e4 <MX_TIM1_Init+0x138>)
 80009c6:	f006 fb31 	bl	800702c <HAL_TIMEx_ConfigBreakDeadTime>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80009d0:	f000 fe36 	bl	8001640 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80009d4:	4803      	ldr	r0, [pc, #12]	; (80009e4 <MX_TIM1_Init+0x138>)
 80009d6:	f001 f88d 	bl	8001af4 <HAL_TIM_MspPostInit>

}
 80009da:	bf00      	nop
 80009dc:	3760      	adds	r7, #96	; 0x60
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	2000026c 	.word	0x2000026c
 80009e8:	40012c00 	.word	0x40012c00

080009ec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b088      	sub	sp, #32
 80009f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009f2:	f107 0310 	add.w	r3, r7, #16
 80009f6:	2200      	movs	r2, #0
 80009f8:	601a      	str	r2, [r3, #0]
 80009fa:	605a      	str	r2, [r3, #4]
 80009fc:	609a      	str	r2, [r3, #8]
 80009fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a00:	1d3b      	adds	r3, r7, #4
 8000a02:	2200      	movs	r2, #0
 8000a04:	601a      	str	r2, [r3, #0]
 8000a06:	605a      	str	r2, [r3, #4]
 8000a08:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a0a:	4b1e      	ldr	r3, [pc, #120]	; (8000a84 <MX_TIM2_Init+0x98>)
 8000a0c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a10:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 8000a12:	4b1c      	ldr	r3, [pc, #112]	; (8000a84 <MX_TIM2_Init+0x98>)
 8000a14:	22a9      	movs	r2, #169	; 0xa9
 8000a16:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a18:	4b1a      	ldr	r3, [pc, #104]	; (8000a84 <MX_TIM2_Init+0x98>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000a1e:	4b19      	ldr	r3, [pc, #100]	; (8000a84 <MX_TIM2_Init+0x98>)
 8000a20:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a24:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a26:	4b17      	ldr	r3, [pc, #92]	; (8000a84 <MX_TIM2_Init+0x98>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a2c:	4b15      	ldr	r3, [pc, #84]	; (8000a84 <MX_TIM2_Init+0x98>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a32:	4814      	ldr	r0, [pc, #80]	; (8000a84 <MX_TIM2_Init+0x98>)
 8000a34:	f004 fe44 	bl	80056c0 <HAL_TIM_Base_Init>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000a3e:	f000 fdff 	bl	8001640 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a46:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a48:	f107 0310 	add.w	r3, r7, #16
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	480d      	ldr	r0, [pc, #52]	; (8000a84 <MX_TIM2_Init+0x98>)
 8000a50:	f005 fc78 	bl	8006344 <HAL_TIM_ConfigClockSource>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000a5a:	f000 fdf1 	bl	8001640 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a62:	2300      	movs	r3, #0
 8000a64:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a66:	1d3b      	adds	r3, r7, #4
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4806      	ldr	r0, [pc, #24]	; (8000a84 <MX_TIM2_Init+0x98>)
 8000a6c:	f006 fa48 	bl	8006f00 <HAL_TIMEx_MasterConfigSynchronization>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000a76:	f000 fde3 	bl	8001640 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a7a:	bf00      	nop
 8000a7c:	3720      	adds	r7, #32
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	200002b8 	.word	0x200002b8

08000a88 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b08c      	sub	sp, #48	; 0x30
 8000a8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000a8e:	f107 030c 	add.w	r3, r7, #12
 8000a92:	2224      	movs	r2, #36	; 0x24
 8000a94:	2100      	movs	r1, #0
 8000a96:	4618      	mov	r0, r3
 8000a98:	f008 f8cc 	bl	8008c34 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a9c:	463b      	mov	r3, r7
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	601a      	str	r2, [r3, #0]
 8000aa2:	605a      	str	r2, [r3, #4]
 8000aa4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000aa6:	4b21      	ldr	r3, [pc, #132]	; (8000b2c <MX_TIM3_Init+0xa4>)
 8000aa8:	4a21      	ldr	r2, [pc, #132]	; (8000b30 <MX_TIM3_Init+0xa8>)
 8000aaa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000aac:	4b1f      	ldr	r3, [pc, #124]	; (8000b2c <MX_TIM3_Init+0xa4>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ab2:	4b1e      	ldr	r3, [pc, #120]	; (8000b2c <MX_TIM3_Init+0xa4>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3071;
 8000ab8:	4b1c      	ldr	r3, [pc, #112]	; (8000b2c <MX_TIM3_Init+0xa4>)
 8000aba:	f640 32ff 	movw	r2, #3071	; 0xbff
 8000abe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ac0:	4b1a      	ldr	r3, [pc, #104]	; (8000b2c <MX_TIM3_Init+0xa4>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ac6:	4b19      	ldr	r3, [pc, #100]	; (8000b2c <MX_TIM3_Init+0xa4>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000acc:	2303      	movs	r3, #3
 8000ace:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000adc:	2300      	movs	r3, #0
 8000ade:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000aec:	2300      	movs	r3, #0
 8000aee:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000af0:	f107 030c 	add.w	r3, r7, #12
 8000af4:	4619      	mov	r1, r3
 8000af6:	480d      	ldr	r0, [pc, #52]	; (8000b2c <MX_TIM3_Init+0xa4>)
 8000af8:	f005 f88c 	bl	8005c14 <HAL_TIM_Encoder_Init>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000b02:	f000 fd9d 	bl	8001640 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b06:	2300      	movs	r3, #0
 8000b08:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b0e:	463b      	mov	r3, r7
 8000b10:	4619      	mov	r1, r3
 8000b12:	4806      	ldr	r0, [pc, #24]	; (8000b2c <MX_TIM3_Init+0xa4>)
 8000b14:	f006 f9f4 	bl	8006f00 <HAL_TIMEx_MasterConfigSynchronization>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000b1e:	f000 fd8f 	bl	8001640 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000b22:	bf00      	nop
 8000b24:	3730      	adds	r7, #48	; 0x30
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	20000304 	.word	0x20000304
 8000b30:	40000400 	.word	0x40000400

08000b34 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b08a      	sub	sp, #40	; 0x28
 8000b38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b3a:	f107 031c 	add.w	r3, r7, #28
 8000b3e:	2200      	movs	r2, #0
 8000b40:	601a      	str	r2, [r3, #0]
 8000b42:	605a      	str	r2, [r3, #4]
 8000b44:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b46:	463b      	mov	r3, r7
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
 8000b4c:	605a      	str	r2, [r3, #4]
 8000b4e:	609a      	str	r2, [r3, #8]
 8000b50:	60da      	str	r2, [r3, #12]
 8000b52:	611a      	str	r2, [r3, #16]
 8000b54:	615a      	str	r2, [r3, #20]
 8000b56:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000b58:	4b21      	ldr	r3, [pc, #132]	; (8000be0 <MX_TIM4_Init+0xac>)
 8000b5a:	4a22      	ldr	r2, [pc, #136]	; (8000be4 <MX_TIM4_Init+0xb0>)
 8000b5c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 169;
 8000b5e:	4b20      	ldr	r3, [pc, #128]	; (8000be0 <MX_TIM4_Init+0xac>)
 8000b60:	22a9      	movs	r2, #169	; 0xa9
 8000b62:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b64:	4b1e      	ldr	r3, [pc, #120]	; (8000be0 <MX_TIM4_Init+0xac>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8000b6a:	4b1d      	ldr	r3, [pc, #116]	; (8000be0 <MX_TIM4_Init+0xac>)
 8000b6c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b70:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b72:	4b1b      	ldr	r3, [pc, #108]	; (8000be0 <MX_TIM4_Init+0xac>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b78:	4b19      	ldr	r3, [pc, #100]	; (8000be0 <MX_TIM4_Init+0xac>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000b7e:	4818      	ldr	r0, [pc, #96]	; (8000be0 <MX_TIM4_Init+0xac>)
 8000b80:	f004 fede 	bl	8005940 <HAL_TIM_PWM_Init>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8000b8a:	f000 fd59 	bl	8001640 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b92:	2300      	movs	r3, #0
 8000b94:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000b96:	f107 031c 	add.w	r3, r7, #28
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	4810      	ldr	r0, [pc, #64]	; (8000be0 <MX_TIM4_Init+0xac>)
 8000b9e:	f006 f9af 	bl	8006f00 <HAL_TIMEx_MasterConfigSynchronization>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8000ba8:	f000 fd4a 	bl	8001640 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bac:	2360      	movs	r3, #96	; 0x60
 8000bae:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bbc:	463b      	mov	r3, r7
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4807      	ldr	r0, [pc, #28]	; (8000be0 <MX_TIM4_Init+0xac>)
 8000bc4:	f005 faaa 	bl	800611c <HAL_TIM_PWM_ConfigChannel>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8000bce:	f000 fd37 	bl	8001640 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000bd2:	4803      	ldr	r0, [pc, #12]	; (8000be0 <MX_TIM4_Init+0xac>)
 8000bd4:	f000 ff8e 	bl	8001af4 <HAL_TIM_MspPostInit>

}
 8000bd8:	bf00      	nop
 8000bda:	3728      	adds	r7, #40	; 0x28
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	20000350 	.word	0x20000350
 8000be4:	40000800 	.word	0x40000800

08000be8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b088      	sub	sp, #32
 8000bec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bee:	f107 0310 	add.w	r3, r7, #16
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	601a      	str	r2, [r3, #0]
 8000bf6:	605a      	str	r2, [r3, #4]
 8000bf8:	609a      	str	r2, [r3, #8]
 8000bfa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bfc:	1d3b      	adds	r3, r7, #4
 8000bfe:	2200      	movs	r2, #0
 8000c00:	601a      	str	r2, [r3, #0]
 8000c02:	605a      	str	r2, [r3, #4]
 8000c04:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000c06:	4b1d      	ldr	r3, [pc, #116]	; (8000c7c <MX_TIM5_Init+0x94>)
 8000c08:	4a1d      	ldr	r2, [pc, #116]	; (8000c80 <MX_TIM5_Init+0x98>)
 8000c0a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 169;
 8000c0c:	4b1b      	ldr	r3, [pc, #108]	; (8000c7c <MX_TIM5_Init+0x94>)
 8000c0e:	22a9      	movs	r2, #169	; 0xa9
 8000c10:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c12:	4b1a      	ldr	r3, [pc, #104]	; (8000c7c <MX_TIM5_Init+0x94>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4.294967295E9;
 8000c18:	4b18      	ldr	r3, [pc, #96]	; (8000c7c <MX_TIM5_Init+0x94>)
 8000c1a:	f04f 32ff 	mov.w	r2, #4294967295
 8000c1e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c20:	4b16      	ldr	r3, [pc, #88]	; (8000c7c <MX_TIM5_Init+0x94>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c26:	4b15      	ldr	r3, [pc, #84]	; (8000c7c <MX_TIM5_Init+0x94>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000c2c:	4813      	ldr	r0, [pc, #76]	; (8000c7c <MX_TIM5_Init+0x94>)
 8000c2e:	f004 fd47 	bl	80056c0 <HAL_TIM_Base_Init>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8000c38:	f000 fd02 	bl	8001640 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c40:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000c42:	f107 0310 	add.w	r3, r7, #16
 8000c46:	4619      	mov	r1, r3
 8000c48:	480c      	ldr	r0, [pc, #48]	; (8000c7c <MX_TIM5_Init+0x94>)
 8000c4a:	f005 fb7b 	bl	8006344 <HAL_TIM_ConfigClockSource>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8000c54:	f000 fcf4 	bl	8001640 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000c60:	1d3b      	adds	r3, r7, #4
 8000c62:	4619      	mov	r1, r3
 8000c64:	4805      	ldr	r0, [pc, #20]	; (8000c7c <MX_TIM5_Init+0x94>)
 8000c66:	f006 f94b 	bl	8006f00 <HAL_TIMEx_MasterConfigSynchronization>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8000c70:	f000 fce6 	bl	8001640 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000c74:	bf00      	nop
 8000c76:	3720      	adds	r7, #32
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	2000039c 	.word	0x2000039c
 8000c80:	40000c00 	.word	0x40000c00

08000c84 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b088      	sub	sp, #32
 8000c88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c8a:	f107 0310 	add.w	r3, r7, #16
 8000c8e:	2200      	movs	r2, #0
 8000c90:	601a      	str	r2, [r3, #0]
 8000c92:	605a      	str	r2, [r3, #4]
 8000c94:	609a      	str	r2, [r3, #8]
 8000c96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c98:	1d3b      	adds	r3, r7, #4
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	601a      	str	r2, [r3, #0]
 8000c9e:	605a      	str	r2, [r3, #4]
 8000ca0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000ca2:	4b1f      	ldr	r3, [pc, #124]	; (8000d20 <MX_TIM15_Init+0x9c>)
 8000ca4:	4a1f      	ldr	r2, [pc, #124]	; (8000d24 <MX_TIM15_Init+0xa0>)
 8000ca6:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 169;
 8000ca8:	4b1d      	ldr	r3, [pc, #116]	; (8000d20 <MX_TIM15_Init+0x9c>)
 8000caa:	22a9      	movs	r2, #169	; 0xa9
 8000cac:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cae:	4b1c      	ldr	r3, [pc, #112]	; (8000d20 <MX_TIM15_Init+0x9c>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 999;
 8000cb4:	4b1a      	ldr	r3, [pc, #104]	; (8000d20 <MX_TIM15_Init+0x9c>)
 8000cb6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000cba:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cbc:	4b18      	ldr	r3, [pc, #96]	; (8000d20 <MX_TIM15_Init+0x9c>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000cc2:	4b17      	ldr	r3, [pc, #92]	; (8000d20 <MX_TIM15_Init+0x9c>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cc8:	4b15      	ldr	r3, [pc, #84]	; (8000d20 <MX_TIM15_Init+0x9c>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8000cce:	4814      	ldr	r0, [pc, #80]	; (8000d20 <MX_TIM15_Init+0x9c>)
 8000cd0:	f004 fcf6 	bl	80056c0 <HAL_TIM_Base_Init>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 8000cda:	f000 fcb1 	bl	8001640 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ce2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8000ce4:	f107 0310 	add.w	r3, r7, #16
 8000ce8:	4619      	mov	r1, r3
 8000cea:	480d      	ldr	r0, [pc, #52]	; (8000d20 <MX_TIM15_Init+0x9c>)
 8000cec:	f005 fb2a 	bl	8006344 <HAL_TIM_ConfigClockSource>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 8000cf6:	f000 fca3 	bl	8001640 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000cfa:	2320      	movs	r3, #32
 8000cfc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000d02:	1d3b      	adds	r3, r7, #4
 8000d04:	4619      	mov	r1, r3
 8000d06:	4806      	ldr	r0, [pc, #24]	; (8000d20 <MX_TIM15_Init+0x9c>)
 8000d08:	f006 f8fa 	bl	8006f00 <HAL_TIMEx_MasterConfigSynchronization>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 8000d12:	f000 fc95 	bl	8001640 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8000d16:	bf00      	nop
 8000d18:	3720      	adds	r7, #32
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	200003e8 	.word	0x200003e8
 8000d24:	40014000 	.word	0x40014000

08000d28 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b084      	sub	sp, #16
 8000d2c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000d2e:	4b20      	ldr	r3, [pc, #128]	; (8000db0 <MX_DMA_Init+0x88>)
 8000d30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d32:	4a1f      	ldr	r2, [pc, #124]	; (8000db0 <MX_DMA_Init+0x88>)
 8000d34:	f043 0304 	orr.w	r3, r3, #4
 8000d38:	6493      	str	r3, [r2, #72]	; 0x48
 8000d3a:	4b1d      	ldr	r3, [pc, #116]	; (8000db0 <MX_DMA_Init+0x88>)
 8000d3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d3e:	f003 0304 	and.w	r3, r3, #4
 8000d42:	60fb      	str	r3, [r7, #12]
 8000d44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000d46:	4b1a      	ldr	r3, [pc, #104]	; (8000db0 <MX_DMA_Init+0x88>)
 8000d48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d4a:	4a19      	ldr	r2, [pc, #100]	; (8000db0 <MX_DMA_Init+0x88>)
 8000d4c:	f043 0302 	orr.w	r3, r3, #2
 8000d50:	6493      	str	r3, [r2, #72]	; 0x48
 8000d52:	4b17      	ldr	r3, [pc, #92]	; (8000db0 <MX_DMA_Init+0x88>)
 8000d54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d56:	f003 0302 	and.w	r3, r3, #2
 8000d5a:	60bb      	str	r3, [r7, #8]
 8000d5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d5e:	4b14      	ldr	r3, [pc, #80]	; (8000db0 <MX_DMA_Init+0x88>)
 8000d60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d62:	4a13      	ldr	r2, [pc, #76]	; (8000db0 <MX_DMA_Init+0x88>)
 8000d64:	f043 0301 	orr.w	r3, r3, #1
 8000d68:	6493      	str	r3, [r2, #72]	; 0x48
 8000d6a:	4b11      	ldr	r3, [pc, #68]	; (8000db0 <MX_DMA_Init+0x88>)
 8000d6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d6e:	f003 0301 	and.w	r3, r3, #1
 8000d72:	607b      	str	r3, [r7, #4]
 8000d74:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000d76:	2200      	movs	r2, #0
 8000d78:	2100      	movs	r1, #0
 8000d7a:	200b      	movs	r0, #11
 8000d7c:	f002 ff3d 	bl	8003bfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000d80:	200b      	movs	r0, #11
 8000d82:	f002 ff54 	bl	8003c2e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000d86:	2200      	movs	r2, #0
 8000d88:	2100      	movs	r1, #0
 8000d8a:	200c      	movs	r0, #12
 8000d8c:	f002 ff35 	bl	8003bfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000d90:	200c      	movs	r0, #12
 8000d92:	f002 ff4c 	bl	8003c2e <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 8000d96:	2200      	movs	r2, #0
 8000d98:	2100      	movs	r1, #0
 8000d9a:	2038      	movs	r0, #56	; 0x38
 8000d9c:	f002 ff2d 	bl	8003bfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8000da0:	2038      	movs	r0, #56	; 0x38
 8000da2:	f002 ff44 	bl	8003c2e <HAL_NVIC_EnableIRQ>

}
 8000da6:	bf00      	nop
 8000da8:	3710      	adds	r7, #16
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	40021000 	.word	0x40021000

08000db4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b08a      	sub	sp, #40	; 0x28
 8000db8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dba:	f107 0314 	add.w	r3, r7, #20
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	601a      	str	r2, [r3, #0]
 8000dc2:	605a      	str	r2, [r3, #4]
 8000dc4:	609a      	str	r2, [r3, #8]
 8000dc6:	60da      	str	r2, [r3, #12]
 8000dc8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dca:	4b39      	ldr	r3, [pc, #228]	; (8000eb0 <MX_GPIO_Init+0xfc>)
 8000dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dce:	4a38      	ldr	r2, [pc, #224]	; (8000eb0 <MX_GPIO_Init+0xfc>)
 8000dd0:	f043 0304 	orr.w	r3, r3, #4
 8000dd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dd6:	4b36      	ldr	r3, [pc, #216]	; (8000eb0 <MX_GPIO_Init+0xfc>)
 8000dd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dda:	f003 0304 	and.w	r3, r3, #4
 8000dde:	613b      	str	r3, [r7, #16]
 8000de0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000de2:	4b33      	ldr	r3, [pc, #204]	; (8000eb0 <MX_GPIO_Init+0xfc>)
 8000de4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000de6:	4a32      	ldr	r2, [pc, #200]	; (8000eb0 <MX_GPIO_Init+0xfc>)
 8000de8:	f043 0320 	orr.w	r3, r3, #32
 8000dec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dee:	4b30      	ldr	r3, [pc, #192]	; (8000eb0 <MX_GPIO_Init+0xfc>)
 8000df0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000df2:	f003 0320 	and.w	r3, r3, #32
 8000df6:	60fb      	str	r3, [r7, #12]
 8000df8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dfa:	4b2d      	ldr	r3, [pc, #180]	; (8000eb0 <MX_GPIO_Init+0xfc>)
 8000dfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dfe:	4a2c      	ldr	r2, [pc, #176]	; (8000eb0 <MX_GPIO_Init+0xfc>)
 8000e00:	f043 0301 	orr.w	r3, r3, #1
 8000e04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e06:	4b2a      	ldr	r3, [pc, #168]	; (8000eb0 <MX_GPIO_Init+0xfc>)
 8000e08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e0a:	f003 0301 	and.w	r3, r3, #1
 8000e0e:	60bb      	str	r3, [r7, #8]
 8000e10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e12:	4b27      	ldr	r3, [pc, #156]	; (8000eb0 <MX_GPIO_Init+0xfc>)
 8000e14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e16:	4a26      	ldr	r2, [pc, #152]	; (8000eb0 <MX_GPIO_Init+0xfc>)
 8000e18:	f043 0302 	orr.w	r3, r3, #2
 8000e1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e1e:	4b24      	ldr	r3, [pc, #144]	; (8000eb0 <MX_GPIO_Init+0xfc>)
 8000e20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e22:	f003 0302 	and.w	r3, r3, #2
 8000e26:	607b      	str	r3, [r7, #4]
 8000e28:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	2101      	movs	r1, #1
 8000e2e:	4821      	ldr	r0, [pc, #132]	; (8000eb4 <MX_GPIO_Init+0x100>)
 8000e30:	f003 fbcc 	bl	80045cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000e34:	2200      	movs	r2, #0
 8000e36:	2120      	movs	r1, #32
 8000e38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e3c:	f003 fbc6 	bl	80045cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e46:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e50:	f107 0314 	add.w	r3, r7, #20
 8000e54:	4619      	mov	r1, r3
 8000e56:	4817      	ldr	r0, [pc, #92]	; (8000eb4 <MX_GPIO_Init+0x100>)
 8000e58:	f003 fa36 	bl	80042c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e60:	2301      	movs	r3, #1
 8000e62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e64:	2300      	movs	r3, #0
 8000e66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e6c:	f107 0314 	add.w	r3, r7, #20
 8000e70:	4619      	mov	r1, r3
 8000e72:	4810      	ldr	r0, [pc, #64]	; (8000eb4 <MX_GPIO_Init+0x100>)
 8000e74:	f003 fa28 	bl	80042c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000e78:	2320      	movs	r3, #32
 8000e7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e80:	2300      	movs	r3, #0
 8000e82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e84:	2300      	movs	r3, #0
 8000e86:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000e88:	f107 0314 	add.w	r3, r7, #20
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e92:	f003 fa19 	bl	80042c8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000e96:	2200      	movs	r2, #0
 8000e98:	2100      	movs	r1, #0
 8000e9a:	2028      	movs	r0, #40	; 0x28
 8000e9c:	f002 fead 	bl	8003bfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ea0:	2028      	movs	r0, #40	; 0x28
 8000ea2:	f002 fec4 	bl	8003c2e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ea6:	bf00      	nop
 8000ea8:	3728      	adds	r7, #40	; 0x28
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	40021000 	.word	0x40021000
 8000eb4:	48000800 	.word	0x48000800

08000eb8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
//------------------------------Part1&3:Motor PID----------------------------------//


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000eb8:	b5b0      	push	{r4, r5, r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
	if (htim == &htim5) {
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	4a0d      	ldr	r2, [pc, #52]	; (8000ef8 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000ec4:	4293      	cmp	r3, r2
 8000ec6:	d108      	bne.n	8000eda <HAL_TIM_PeriodElapsedCallback+0x22>
		_micros += UINT32_MAX;
 8000ec8:	4b0c      	ldr	r3, [pc, #48]	; (8000efc <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ece:	1e54      	subs	r4, r2, #1
 8000ed0:	f143 0500 	adc.w	r5, r3, #0
 8000ed4:	4b09      	ldr	r3, [pc, #36]	; (8000efc <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000ed6:	e9c3 4500 	strd	r4, r5, [r3]
	}
	if (htim == &htim2) {
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4a08      	ldr	r2, [pc, #32]	; (8000f00 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d106      	bne.n	8000ef0 <HAL_TIM_PeriodElapsedCallback+0x38>
			updateInput();
 8000ee2:	f000 f82d 	bl	8000f40 <updateInput>
			QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim3);
 8000ee6:	4b07      	ldr	r3, [pc, #28]	; (8000f04 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eec:	4a06      	ldr	r2, [pc, #24]	; (8000f08 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000eee:	6013      	str	r3, [r2, #0]
		}
}
 8000ef0:	bf00      	nop
 8000ef2:	3708      	adds	r7, #8
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bdb0      	pop	{r4, r5, r7, pc}
 8000ef8:	2000039c 	.word	0x2000039c
 8000efc:	20000438 	.word	0x20000438
 8000f00:	200002b8 	.word	0x200002b8
 8000f04:	20000304 	.word	0x20000304
 8000f08:	200007a8 	.word	0x200007a8

08000f0c <micros>:

uint64_t micros() {
 8000f0c:	b4b0      	push	{r4, r5, r7}
 8000f0e:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim5) + _micros;
 8000f10:	4b09      	ldr	r3, [pc, #36]	; (8000f38 <micros+0x2c>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f16:	2200      	movs	r2, #0
 8000f18:	4618      	mov	r0, r3
 8000f1a:	4611      	mov	r1, r2
 8000f1c:	4b07      	ldr	r3, [pc, #28]	; (8000f3c <micros+0x30>)
 8000f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f22:	1884      	adds	r4, r0, r2
 8000f24:	eb41 0503 	adc.w	r5, r1, r3
 8000f28:	4622      	mov	r2, r4
 8000f2a:	462b      	mov	r3, r5
}
 8000f2c:	4610      	mov	r0, r2
 8000f2e:	4619      	mov	r1, r3
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bcb0      	pop	{r4, r5, r7}
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	2000039c 	.word	0x2000039c
 8000f3c:	20000438 	.word	0x20000438

08000f40 <updateInput>:

void updateInput() {
 8000f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f44:	b083      	sub	sp, #12
 8000f46:	af00      	add	r7, sp, #0
	sumEncode = 0;
 8000f48:	4e5c      	ldr	r6, [pc, #368]	; (80010bc <updateInput+0x17c>)
 8000f4a:	f04f 0200 	mov.w	r2, #0
 8000f4e:	f04f 0300 	mov.w	r3, #0
 8000f52:	e9c6 2300 	strd	r2, r3, [r6]
	sumTrimpot = 0;
 8000f56:	4e5a      	ldr	r6, [pc, #360]	; (80010c0 <updateInput+0x180>)
 8000f58:	f04f 0200 	mov.w	r2, #0
 8000f5c:	f04f 0300 	mov.w	r3, #0
 8000f60:	e9c6 2300 	strd	r2, r3, [r6]
	for (int i = 0; i < 200; i++) {
 8000f64:	2300      	movs	r3, #0
 8000f66:	607b      	str	r3, [r7, #4]
 8000f68:	e029      	b.n	8000fbe <updateInput+0x7e>
		sumEncode += InputRead[2 * i];
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	005b      	lsls	r3, r3, #1
 8000f6e:	4a55      	ldr	r2, [pc, #340]	; (80010c4 <updateInput+0x184>)
 8000f70:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f74:	b29b      	uxth	r3, r3
 8000f76:	2200      	movs	r2, #0
 8000f78:	4618      	mov	r0, r3
 8000f7a:	4611      	mov	r1, r2
 8000f7c:	4b4f      	ldr	r3, [pc, #316]	; (80010bc <updateInput+0x17c>)
 8000f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f82:	eb10 0802 	adds.w	r8, r0, r2
 8000f86:	eb41 0903 	adc.w	r9, r1, r3
 8000f8a:	4b4c      	ldr	r3, [pc, #304]	; (80010bc <updateInput+0x17c>)
 8000f8c:	e9c3 8900 	strd	r8, r9, [r3]
		sumTrimpot += InputRead[1 + (2 * i)];
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	005b      	lsls	r3, r3, #1
 8000f94:	3301      	adds	r3, #1
 8000f96:	4a4b      	ldr	r2, [pc, #300]	; (80010c4 <updateInput+0x184>)
 8000f98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f9c:	b29b      	uxth	r3, r3
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	461c      	mov	r4, r3
 8000fa2:	4615      	mov	r5, r2
 8000fa4:	4b46      	ldr	r3, [pc, #280]	; (80010c0 <updateInput+0x180>)
 8000fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000faa:	eb14 0a02 	adds.w	sl, r4, r2
 8000fae:	eb45 0b03 	adc.w	fp, r5, r3
 8000fb2:	4b43      	ldr	r3, [pc, #268]	; (80010c0 <updateInput+0x180>)
 8000fb4:	e9c3 ab00 	strd	sl, fp, [r3]
	for (int i = 0; i < 200; i++) {
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	3301      	adds	r3, #1
 8000fbc:	607b      	str	r3, [r7, #4]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2bc7      	cmp	r3, #199	; 0xc7
 8000fc2:	ddd2      	ble.n	8000f6a <updateInput+0x2a>
	}


	avgEncode = sumEncode / 200;
 8000fc4:	4b3d      	ldr	r3, [pc, #244]	; (80010bc <updateInput+0x17c>)
 8000fc6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000fca:	f04f 02c8 	mov.w	r2, #200	; 0xc8
 8000fce:	f04f 0300 	mov.w	r3, #0
 8000fd2:	f7ff f921 	bl	8000218 <__aeabi_uldivmod>
 8000fd6:	4602      	mov	r2, r0
 8000fd8:	460b      	mov	r3, r1
 8000fda:	4b3b      	ldr	r3, [pc, #236]	; (80010c8 <updateInput+0x188>)
 8000fdc:	601a      	str	r2, [r3, #0]
	avgTrimpot = sumTrimpot / 200;
 8000fde:	4b38      	ldr	r3, [pc, #224]	; (80010c0 <updateInput+0x180>)
 8000fe0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000fe4:	f04f 02c8 	mov.w	r2, #200	; 0xc8
 8000fe8:	f04f 0300 	mov.w	r3, #0
 8000fec:	f7ff f914 	bl	8000218 <__aeabi_uldivmod>
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	460b      	mov	r3, r1
 8000ff4:	b292      	uxth	r2, r2
 8000ff6:	4b35      	ldr	r3, [pc, #212]	; (80010cc <updateInput+0x18c>)
 8000ff8:	801a      	strh	r2, [r3, #0]
		if (mode_status == 2)
		{
			avgTrimpot = 2048;
		}
*/
	directError = avgTrimpot - avgEncode;
 8000ffa:	4b34      	ldr	r3, [pc, #208]	; (80010cc <updateInput+0x18c>)
 8000ffc:	881a      	ldrh	r2, [r3, #0]
 8000ffe:	4b32      	ldr	r3, [pc, #200]	; (80010c8 <updateInput+0x188>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	b29b      	uxth	r3, r3
 8001004:	1ad3      	subs	r3, r2, r3
 8001006:	b29b      	uxth	r3, r3
 8001008:	b21a      	sxth	r2, r3
 800100a:	4b31      	ldr	r3, [pc, #196]	; (80010d0 <updateInput+0x190>)
 800100c:	801a      	strh	r2, [r3, #0]



	if (directError > 0) {
 800100e:	4b30      	ldr	r3, [pc, #192]	; (80010d0 <updateInput+0x190>)
 8001010:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001014:	2b00      	cmp	r3, #0
 8001016:	dd0a      	ble.n	800102e <updateInput+0xee>
		wrappedError = directError - 4096; // Moving backward with wrap-around
 8001018:	4b2d      	ldr	r3, [pc, #180]	; (80010d0 <updateInput+0x190>)
 800101a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800101e:	b29b      	uxth	r3, r3
 8001020:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 8001024:	b29b      	uxth	r3, r3
 8001026:	b21a      	sxth	r2, r3
 8001028:	4b2a      	ldr	r3, [pc, #168]	; (80010d4 <updateInput+0x194>)
 800102a:	801a      	strh	r2, [r3, #0]
 800102c:	e009      	b.n	8001042 <updateInput+0x102>
	} else {
		wrappedError = directError + 4096; // Moving forward with wrap-around
 800102e:	4b28      	ldr	r3, [pc, #160]	; (80010d0 <updateInput+0x190>)
 8001030:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001034:	b29b      	uxth	r3, r3
 8001036:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800103a:	b29b      	uxth	r3, r3
 800103c:	b21a      	sxth	r2, r3
 800103e:	4b25      	ldr	r3, [pc, #148]	; (80010d4 <updateInput+0x194>)
 8001040:	801a      	strh	r2, [r3, #0]
	}

	if (abs(directError) < abs(wrappedError)) {
 8001042:	4b23      	ldr	r3, [pc, #140]	; (80010d0 <updateInput+0x190>)
 8001044:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001048:	2b00      	cmp	r3, #0
 800104a:	bfb8      	it	lt
 800104c:	425b      	neglt	r3, r3
 800104e:	b29a      	uxth	r2, r3
 8001050:	4b20      	ldr	r3, [pc, #128]	; (80010d4 <updateInput+0x194>)
 8001052:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001056:	2b00      	cmp	r3, #0
 8001058:	bfb8      	it	lt
 800105a:	425b      	neglt	r3, r3
 800105c:	b29b      	uxth	r3, r3
 800105e:	429a      	cmp	r2, r3
 8001060:	d205      	bcs.n	800106e <updateInput+0x12e>
		Error = directError;
 8001062:	4b1b      	ldr	r3, [pc, #108]	; (80010d0 <updateInput+0x190>)
 8001064:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001068:	4b1b      	ldr	r3, [pc, #108]	; (80010d8 <updateInput+0x198>)
 800106a:	801a      	strh	r2, [r3, #0]
 800106c:	e004      	b.n	8001078 <updateInput+0x138>
	} else {
		Error = wrappedError;
 800106e:	4b19      	ldr	r3, [pc, #100]	; (80010d4 <updateInput+0x194>)
 8001070:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001074:	4b18      	ldr	r3, [pc, #96]	; (80010d8 <updateInput+0x198>)
 8001076:	801a      	strh	r2, [r3, #0]
	}

	if (Error < 0) {
 8001078:	4b17      	ldr	r3, [pc, #92]	; (80010d8 <updateInput+0x198>)
 800107a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800107e:	2b00      	cmp	r3, #0
 8001080:	da03      	bge.n	800108a <updateInput+0x14a>
		direction = 0; // Counter-clockwise / backward
 8001082:	4b16      	ldr	r3, [pc, #88]	; (80010dc <updateInput+0x19c>)
 8001084:	2200      	movs	r2, #0
 8001086:	701a      	strb	r2, [r3, #0]
 8001088:	e002      	b.n	8001090 <updateInput+0x150>
	} else {
		direction = 1; // Clockwise / forward
 800108a:	4b14      	ldr	r3, [pc, #80]	; (80010dc <updateInput+0x19c>)
 800108c:	2201      	movs	r2, #1
 800108e:	701a      	strb	r2, [r3, #0]
	}


	PIDcalculate();
 8001090:	f000 f89c 	bl	80011cc <PIDcalculate>
	RxInt = (((int16_t)RxBuffer[2] << 8)) + ((int8_t)(RxBuffer[1]));
 8001094:	4b12      	ldr	r3, [pc, #72]	; (80010e0 <updateInput+0x1a0>)
 8001096:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800109a:	b29b      	uxth	r3, r3
 800109c:	021b      	lsls	r3, r3, #8
 800109e:	b29a      	uxth	r2, r3
 80010a0:	4b0f      	ldr	r3, [pc, #60]	; (80010e0 <updateInput+0x1a0>)
 80010a2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80010a6:	b29b      	uxth	r3, r3
 80010a8:	4413      	add	r3, r2
 80010aa:	b29b      	uxth	r3, r3
 80010ac:	b21a      	sxth	r2, r3
 80010ae:	4b0d      	ldr	r3, [pc, #52]	; (80010e4 <updateInput+0x1a4>)
 80010b0:	801a      	strh	r2, [r3, #0]


//	PWM = arm_pid_f32(&PID, Error);
}
 80010b2:	bf00      	nop
 80010b4:	370c      	adds	r7, #12
 80010b6:	46bd      	mov	sp, r7
 80010b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80010bc:	20000760 	.word	0x20000760
 80010c0:	20000768 	.word	0x20000768
 80010c4:	20000440 	.word	0x20000440
 80010c8:	20000770 	.word	0x20000770
 80010cc:	20000774 	.word	0x20000774
 80010d0:	20000786 	.word	0x20000786
 80010d4:	2000078c 	.word	0x2000078c
 80010d8:	20000780 	.word	0x20000780
 80010dc:	2000078a 	.word	0x2000078a
 80010e0:	200007a0 	.word	0x200007a0
 80010e4:	20000776 	.word	0x20000776

080010e8 <motorControl>:

void motorControl() {
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
		if (direction == 0) // ทว�?เ�?�?ม
 80010ec:	4b0f      	ldr	r3, [pc, #60]	; (800112c <motorControl+0x44>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d10a      	bne.n	800110a <motorControl+0x22>
				{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, RESET);
 80010f4:	2200      	movs	r2, #0
 80010f6:	2101      	movs	r1, #1
 80010f8:	480d      	ldr	r0, [pc, #52]	; (8001130 <motorControl+0x48>)
 80010fa:	f003 fa67 	bl	80045cc <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, PWM);
 80010fe:	4b0d      	ldr	r3, [pc, #52]	; (8001134 <motorControl+0x4c>)
 8001100:	881a      	ldrh	r2, [r3, #0]
 8001102:	4b0d      	ldr	r3, [pc, #52]	; (8001138 <motorControl+0x50>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	635a      	str	r2, [r3, #52]	; 0x34
		} else if (direction == 1) // ตามเ�?�?ม
				{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, SET);
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, PWM);
		}
}
 8001108:	e00d      	b.n	8001126 <motorControl+0x3e>
		} else if (direction == 1) // ตามเ�?�?ม
 800110a:	4b08      	ldr	r3, [pc, #32]	; (800112c <motorControl+0x44>)
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	2b01      	cmp	r3, #1
 8001110:	d109      	bne.n	8001126 <motorControl+0x3e>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, SET);
 8001112:	2201      	movs	r2, #1
 8001114:	2101      	movs	r1, #1
 8001116:	4806      	ldr	r0, [pc, #24]	; (8001130 <motorControl+0x48>)
 8001118:	f003 fa58 	bl	80045cc <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, PWM);
 800111c:	4b05      	ldr	r3, [pc, #20]	; (8001134 <motorControl+0x4c>)
 800111e:	881a      	ldrh	r2, [r3, #0]
 8001120:	4b05      	ldr	r3, [pc, #20]	; (8001138 <motorControl+0x50>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001126:	bf00      	nop
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	2000078a 	.word	0x2000078a
 8001130:	48000800 	.word	0x48000800
 8001134:	20000788 	.word	0x20000788
 8001138:	20000350 	.word	0x20000350

0800113c <Communication>:

void Communication() {
 800113c:	b5b0      	push	{r4, r5, r7, lr}
 800113e:	af00      	add	r7, sp, #0
	static uint16_t CommTime = 0;
	if (CommTime < micros()) {
 8001140:	4b1c      	ldr	r3, [pc, #112]	; (80011b4 <Communication+0x78>)
 8001142:	881b      	ldrh	r3, [r3, #0]
 8001144:	b29b      	uxth	r3, r3
 8001146:	2200      	movs	r2, #0
 8001148:	461c      	mov	r4, r3
 800114a:	4615      	mov	r5, r2
 800114c:	f7ff fede 	bl	8000f0c <micros>
 8001150:	4602      	mov	r2, r0
 8001152:	460b      	mov	r3, r1
 8001154:	4294      	cmp	r4, r2
 8001156:	eb75 0303 	sbcs.w	r3, r5, r3
 800115a:	d228      	bcs.n	80011ae <Communication+0x72>
		CommTime = micros() + 5000;
 800115c:	f7ff fed6 	bl	8000f0c <micros>
 8001160:	4602      	mov	r2, r0
 8001162:	460b      	mov	r3, r1
 8001164:	b293      	uxth	r3, r2
 8001166:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800116a:	3308      	adds	r3, #8
 800116c:	b29a      	uxth	r2, r3
 800116e:	4b11      	ldr	r3, [pc, #68]	; (80011b4 <Communication+0x78>)
 8001170:	801a      	strh	r2, [r3, #0]
		HigherPos = (uint8_t) (avgEncode >> 8);
 8001172:	4b11      	ldr	r3, [pc, #68]	; (80011b8 <Communication+0x7c>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	0a1b      	lsrs	r3, r3, #8
 8001178:	b2da      	uxtb	r2, r3
 800117a:	4b10      	ldr	r3, [pc, #64]	; (80011bc <Communication+0x80>)
 800117c:	701a      	strb	r2, [r3, #0]
		LowerPos = (uint8_t) avgEncode;
 800117e:	4b0e      	ldr	r3, [pc, #56]	; (80011b8 <Communication+0x7c>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	b2da      	uxtb	r2, r3
 8001184:	4b0e      	ldr	r3, [pc, #56]	; (80011c0 <Communication+0x84>)
 8001186:	701a      	strb	r2, [r3, #0]
		TxBuffer[0] = 69;
 8001188:	4b0e      	ldr	r3, [pc, #56]	; (80011c4 <Communication+0x88>)
 800118a:	2245      	movs	r2, #69	; 0x45
 800118c:	701a      	strb	r2, [r3, #0]
		TxBuffer[1] = HigherPos;
 800118e:	4b0b      	ldr	r3, [pc, #44]	; (80011bc <Communication+0x80>)
 8001190:	781a      	ldrb	r2, [r3, #0]
 8001192:	4b0c      	ldr	r3, [pc, #48]	; (80011c4 <Communication+0x88>)
 8001194:	705a      	strb	r2, [r3, #1]
		TxBuffer[2] = LowerPos;
 8001196:	4b0a      	ldr	r3, [pc, #40]	; (80011c0 <Communication+0x84>)
 8001198:	781a      	ldrb	r2, [r3, #0]
 800119a:	4b0a      	ldr	r3, [pc, #40]	; (80011c4 <Communication+0x88>)
 800119c:	709a      	strb	r2, [r3, #2]
		TxBuffer[3] = 10;
 800119e:	4b09      	ldr	r3, [pc, #36]	; (80011c4 <Communication+0x88>)
 80011a0:	220a      	movs	r2, #10
 80011a2:	70da      	strb	r2, [r3, #3]
		HAL_UART_Transmit_DMA(&hlpuart1, TxBuffer, 4);
 80011a4:	2204      	movs	r2, #4
 80011a6:	4907      	ldr	r1, [pc, #28]	; (80011c4 <Communication+0x88>)
 80011a8:	4807      	ldr	r0, [pc, #28]	; (80011c8 <Communication+0x8c>)
 80011aa:	f006 f869 	bl	8007280 <HAL_UART_Transmit_DMA>
	}
}
 80011ae:	bf00      	nop
 80011b0:	bdb0      	pop	{r4, r5, r7, pc}
 80011b2:	bf00      	nop
 80011b4:	20000aec 	.word	0x20000aec
 80011b8:	20000770 	.word	0x20000770
 80011bc:	200007a4 	.word	0x200007a4
 80011c0:	200007a5 	.word	0x200007a5
 80011c4:	2000079c 	.word	0x2000079c
 80011c8:	20000118 	.word	0x20000118

080011cc <PIDcalculate>:

void PIDcalculate() {
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
	/* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
	A0 = Kp + Ki + Kd;
 80011d0:	4b4d      	ldr	r3, [pc, #308]	; (8001308 <PIDcalculate+0x13c>)
 80011d2:	ed93 7a00 	vldr	s14, [r3]
 80011d6:	4b4d      	ldr	r3, [pc, #308]	; (800130c <PIDcalculate+0x140>)
 80011d8:	edd3 7a00 	vldr	s15, [r3]
 80011dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80011e0:	4b4b      	ldr	r3, [pc, #300]	; (8001310 <PIDcalculate+0x144>)
 80011e2:	edd3 7a00 	vldr	s15, [r3]
 80011e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011ea:	4b4a      	ldr	r3, [pc, #296]	; (8001314 <PIDcalculate+0x148>)
 80011ec:	edc3 7a00 	vstr	s15, [r3]
	A1 = -Kp - (2 * Kd);
 80011f0:	4b45      	ldr	r3, [pc, #276]	; (8001308 <PIDcalculate+0x13c>)
 80011f2:	edd3 7a00 	vldr	s15, [r3]
 80011f6:	eeb1 7a67 	vneg.f32	s14, s15
 80011fa:	4b45      	ldr	r3, [pc, #276]	; (8001310 <PIDcalculate+0x144>)
 80011fc:	edd3 7a00 	vldr	s15, [r3]
 8001200:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001204:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001208:	4b43      	ldr	r3, [pc, #268]	; (8001318 <PIDcalculate+0x14c>)
 800120a:	edc3 7a00 	vstr	s15, [r3]
	A2 = Kd;
 800120e:	4b40      	ldr	r3, [pc, #256]	; (8001310 <PIDcalculate+0x144>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4a42      	ldr	r2, [pc, #264]	; (800131c <PIDcalculate+0x150>)
 8001214:	6013      	str	r3, [r2, #0]

	cmd = cmd_1 + A0 * Error + A1 * Error_1 + A2 * Error_2;
 8001216:	4b42      	ldr	r3, [pc, #264]	; (8001320 <PIDcalculate+0x154>)
 8001218:	f9b3 3000 	ldrsh.w	r3, [r3]
 800121c:	ee07 3a90 	vmov	s15, r3
 8001220:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001224:	4b3b      	ldr	r3, [pc, #236]	; (8001314 <PIDcalculate+0x148>)
 8001226:	edd3 7a00 	vldr	s15, [r3]
 800122a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800122e:	4b3d      	ldr	r3, [pc, #244]	; (8001324 <PIDcalculate+0x158>)
 8001230:	edd3 7a00 	vldr	s15, [r3]
 8001234:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001238:	4b3b      	ldr	r3, [pc, #236]	; (8001328 <PIDcalculate+0x15c>)
 800123a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800123e:	ee07 3a90 	vmov	s15, r3
 8001242:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001246:	4b34      	ldr	r3, [pc, #208]	; (8001318 <PIDcalculate+0x14c>)
 8001248:	edd3 7a00 	vldr	s15, [r3]
 800124c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001250:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001254:	4b35      	ldr	r3, [pc, #212]	; (800132c <PIDcalculate+0x160>)
 8001256:	f9b3 3000 	ldrsh.w	r3, [r3]
 800125a:	ee07 3a90 	vmov	s15, r3
 800125e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001262:	4b2e      	ldr	r3, [pc, #184]	; (800131c <PIDcalculate+0x150>)
 8001264:	edd3 7a00 	vldr	s15, [r3]
 8001268:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800126c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001270:	4b2f      	ldr	r3, [pc, #188]	; (8001330 <PIDcalculate+0x164>)
 8001272:	edc3 7a00 	vstr	s15, [r3]
	if (cmd > 1000 && direction == 1) // ตามเ�?�?ม Anti windup
 8001276:	4b2e      	ldr	r3, [pc, #184]	; (8001330 <PIDcalculate+0x164>)
 8001278:	edd3 7a00 	vldr	s15, [r3]
 800127c:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8001334 <PIDcalculate+0x168>
 8001280:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001284:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001288:	dd0a      	ble.n	80012a0 <PIDcalculate+0xd4>
 800128a:	4b2b      	ldr	r3, [pc, #172]	; (8001338 <PIDcalculate+0x16c>)
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	2b01      	cmp	r3, #1
 8001290:	d106      	bne.n	80012a0 <PIDcalculate+0xd4>
			{
		cmd = 1000;
 8001292:	4b27      	ldr	r3, [pc, #156]	; (8001330 <PIDcalculate+0x164>)
 8001294:	4a29      	ldr	r2, [pc, #164]	; (800133c <PIDcalculate+0x170>)
 8001296:	601a      	str	r2, [r3, #0]
		direction = 1;
 8001298:	4b27      	ldr	r3, [pc, #156]	; (8001338 <PIDcalculate+0x16c>)
 800129a:	2201      	movs	r2, #1
 800129c:	701a      	strb	r2, [r3, #0]
 800129e:	e013      	b.n	80012c8 <PIDcalculate+0xfc>
	} else if (cmd < -1000 && direction == 0) // ทว�?เ�?�?ม
 80012a0:	4b23      	ldr	r3, [pc, #140]	; (8001330 <PIDcalculate+0x164>)
 80012a2:	edd3 7a00 	vldr	s15, [r3]
 80012a6:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8001340 <PIDcalculate+0x174>
 80012aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012b2:	d509      	bpl.n	80012c8 <PIDcalculate+0xfc>
 80012b4:	4b20      	ldr	r3, [pc, #128]	; (8001338 <PIDcalculate+0x16c>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d105      	bne.n	80012c8 <PIDcalculate+0xfc>
			{
		cmd = -1000;
 80012bc:	4b1c      	ldr	r3, [pc, #112]	; (8001330 <PIDcalculate+0x164>)
 80012be:	4a21      	ldr	r2, [pc, #132]	; (8001344 <PIDcalculate+0x178>)
 80012c0:	601a      	str	r2, [r3, #0]
		direction = 0;
 80012c2:	4b1d      	ldr	r3, [pc, #116]	; (8001338 <PIDcalculate+0x16c>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	701a      	strb	r2, [r3, #0]
	}
	cmd_1 = cmd;
 80012c8:	4b19      	ldr	r3, [pc, #100]	; (8001330 <PIDcalculate+0x164>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a15      	ldr	r2, [pc, #84]	; (8001324 <PIDcalculate+0x158>)
 80012ce:	6013      	str	r3, [r2, #0]
	Error_2 = Error_1;
 80012d0:	4b15      	ldr	r3, [pc, #84]	; (8001328 <PIDcalculate+0x15c>)
 80012d2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80012d6:	4b15      	ldr	r3, [pc, #84]	; (800132c <PIDcalculate+0x160>)
 80012d8:	801a      	strh	r2, [r3, #0]
	Error_1 = Error;
 80012da:	4b11      	ldr	r3, [pc, #68]	; (8001320 <PIDcalculate+0x154>)
 80012dc:	f9b3 2000 	ldrsh.w	r2, [r3]
 80012e0:	4b11      	ldr	r3, [pc, #68]	; (8001328 <PIDcalculate+0x15c>)
 80012e2:	801a      	strh	r2, [r3, #0]

	PWM = fabs(cmd);
 80012e4:	4b12      	ldr	r3, [pc, #72]	; (8001330 <PIDcalculate+0x164>)
 80012e6:	edd3 7a00 	vldr	s15, [r3]
 80012ea:	eef0 7ae7 	vabs.f32	s15, s15
 80012ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012f2:	ee17 3a90 	vmov	r3, s15
 80012f6:	b29a      	uxth	r2, r3
 80012f8:	4b13      	ldr	r3, [pc, #76]	; (8001348 <PIDcalculate+0x17c>)
 80012fa:	801a      	strh	r2, [r3, #0]
}
 80012fc:	bf00      	nop
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	20000004 	.word	0x20000004
 800130c:	20000008 	.word	0x20000008
 8001310:	2000000c 	.word	0x2000000c
 8001314:	20000790 	.word	0x20000790
 8001318:	20000794 	.word	0x20000794
 800131c:	20000798 	.word	0x20000798
 8001320:	20000780 	.word	0x20000780
 8001324:	2000077c 	.word	0x2000077c
 8001328:	20000782 	.word	0x20000782
 800132c:	20000784 	.word	0x20000784
 8001330:	20000778 	.word	0x20000778
 8001334:	447a0000 	.word	0x447a0000
 8001338:	2000078a 	.word	0x2000078a
 800133c:	447a0000 	.word	0x447a0000
 8001340:	c47a0000 	.word	0xc47a0000
 8001344:	c47a0000 	.word	0xc47a0000
 8001348:	20000788 	.word	0x20000788

0800134c <UARTDMAconfig>:

void UARTDMAconfig() {
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(&hlpuart1, RxBuffer, 4);
 8001350:	2204      	movs	r2, #4
 8001352:	4903      	ldr	r1, [pc, #12]	; (8001360 <UARTDMAconfig+0x14>)
 8001354:	4803      	ldr	r0, [pc, #12]	; (8001364 <UARTDMAconfig+0x18>)
 8001356:	f006 f813 	bl	8007380 <HAL_UART_Receive_DMA>
}
 800135a:	bf00      	nop
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	200007a0 	.word	0x200007a0
 8001364:	20000118 	.word	0x20000118

08001368 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *uart) {
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]

}
 8001370:	bf00      	nop
 8001372:	370c      	adds	r7, #12
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr

0800137c <motor>:
//------------------------------------------------------------------------------//
//----------------------------------Part2:QEI-----------------------------------//
void motor() {
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
	x = (period / 100) * duty;
 8001380:	4b28      	ldr	r3, [pc, #160]	; (8001424 <motor+0xa8>)
 8001382:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001386:	4a28      	ldr	r2, [pc, #160]	; (8001428 <motor+0xac>)
 8001388:	fb82 1203 	smull	r1, r2, r2, r3
 800138c:	1152      	asrs	r2, r2, #5
 800138e:	17db      	asrs	r3, r3, #31
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	b21b      	sxth	r3, r3
 8001394:	b29a      	uxth	r2, r3
 8001396:	4b25      	ldr	r3, [pc, #148]	; (800142c <motor+0xb0>)
 8001398:	f9b3 3000 	ldrsh.w	r3, [r3]
 800139c:	b29b      	uxth	r3, r3
 800139e:	fb12 f303 	smulbb	r3, r2, r3
 80013a2:	b29b      	uxth	r3, r3
 80013a4:	b21a      	sxth	r2, r3
 80013a6:	4b22      	ldr	r3, [pc, #136]	; (8001430 <motor+0xb4>)
 80013a8:	801a      	strh	r2, [r3, #0]

	if (duty > 0) {
 80013aa:	4b20      	ldr	r3, [pc, #128]	; (800142c <motor+0xb0>)
 80013ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	dd09      	ble.n	80013c8 <motor+0x4c>
		InA = x;
 80013b4:	4b1e      	ldr	r3, [pc, #120]	; (8001430 <motor+0xb4>)
 80013b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013ba:	461a      	mov	r2, r3
 80013bc:	4b1d      	ldr	r3, [pc, #116]	; (8001434 <motor+0xb8>)
 80013be:	601a      	str	r2, [r3, #0]
		InB = 0;
 80013c0:	4b1d      	ldr	r3, [pc, #116]	; (8001438 <motor+0xbc>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	601a      	str	r2, [r3, #0]
 80013c6:	e01d      	b.n	8001404 <motor+0x88>
	}

	else if (duty < 0) {
 80013c8:	4b18      	ldr	r3, [pc, #96]	; (800142c <motor+0xb0>)
 80013ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	da0d      	bge.n	80013ee <motor+0x72>
		InA = 0;
 80013d2:	4b18      	ldr	r3, [pc, #96]	; (8001434 <motor+0xb8>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
		InB = abs(x);
 80013d8:	4b15      	ldr	r3, [pc, #84]	; (8001430 <motor+0xb4>)
 80013da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	bfb8      	it	lt
 80013e2:	425b      	neglt	r3, r3
 80013e4:	b29b      	uxth	r3, r3
 80013e6:	461a      	mov	r2, r3
 80013e8:	4b13      	ldr	r3, [pc, #76]	; (8001438 <motor+0xbc>)
 80013ea:	601a      	str	r2, [r3, #0]
 80013ec:	e00a      	b.n	8001404 <motor+0x88>
	}

	else if (duty == 0) {
 80013ee:	4b0f      	ldr	r3, [pc, #60]	; (800142c <motor+0xb0>)
 80013f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d105      	bne.n	8001404 <motor+0x88>
		InA = 0;
 80013f8:	4b0e      	ldr	r3, [pc, #56]	; (8001434 <motor+0xb8>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	601a      	str	r2, [r3, #0]
		InB = 0;
 80013fe:	4b0e      	ldr	r3, [pc, #56]	; (8001438 <motor+0xbc>)
 8001400:	2200      	movs	r2, #0
 8001402:	601a      	str	r2, [r3, #0]
	}

	//__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, InA);
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, InA);
 8001404:	4b0b      	ldr	r3, [pc, #44]	; (8001434 <motor+0xb8>)
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	4b0c      	ldr	r3, [pc, #48]	; (800143c <motor+0xc0>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, InB);
 800140e:	4b0a      	ldr	r3, [pc, #40]	; (8001438 <motor+0xbc>)
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	4b0a      	ldr	r3, [pc, #40]	; (800143c <motor+0xc0>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001418:	bf00      	nop
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	20000010 	.word	0x20000010
 8001428:	51eb851f 	.word	0x51eb851f
 800142c:	20000ad4 	.word	0x20000ad4
 8001430:	20000ad6 	.word	0x20000ad6
 8001434:	20000acc 	.word	0x20000acc
 8001438:	20000ad0 	.word	0x20000ad0
 800143c:	2000026c 	.word	0x2000026c

08001440 <PID_QEI>:

void PID_QEI()
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
	error = avgTrimpot - (QEIReadRaw*4096)/3072;
 8001444:	4b3f      	ldr	r3, [pc, #252]	; (8001544 <PID_QEI+0x104>)
 8001446:	881a      	ldrh	r2, [r3, #0]
 8001448:	4b3f      	ldr	r3, [pc, #252]	; (8001548 <PID_QEI+0x108>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	031b      	lsls	r3, r3, #12
 800144e:	493f      	ldr	r1, [pc, #252]	; (800154c <PID_QEI+0x10c>)
 8001450:	fba1 1303 	umull	r1, r3, r1, r3
 8001454:	0adb      	lsrs	r3, r3, #11
 8001456:	b29b      	uxth	r3, r3
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	b29b      	uxth	r3, r3
 800145c:	b21a      	sxth	r2, r3
 800145e:	4b3c      	ldr	r3, [pc, #240]	; (8001550 <PID_QEI+0x110>)
 8001460:	801a      	strh	r2, [r3, #0]

	delta_u = (Kp_QEI+Ki_QEI+Kd_QEI)*error-(Kp_QEI+2*Kd_QEI)*pe1+(Kd_QEI)*pe2;
 8001462:	4b3c      	ldr	r3, [pc, #240]	; (8001554 <PID_QEI+0x114>)
 8001464:	ed93 7a00 	vldr	s14, [r3]
 8001468:	4b3b      	ldr	r3, [pc, #236]	; (8001558 <PID_QEI+0x118>)
 800146a:	edd3 7a00 	vldr	s15, [r3]
 800146e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001472:	4b3a      	ldr	r3, [pc, #232]	; (800155c <PID_QEI+0x11c>)
 8001474:	edd3 7a00 	vldr	s15, [r3]
 8001478:	ee37 7a27 	vadd.f32	s14, s14, s15
 800147c:	4b34      	ldr	r3, [pc, #208]	; (8001550 <PID_QEI+0x110>)
 800147e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001482:	ee07 3a90 	vmov	s15, r3
 8001486:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800148a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800148e:	4b33      	ldr	r3, [pc, #204]	; (800155c <PID_QEI+0x11c>)
 8001490:	edd3 7a00 	vldr	s15, [r3]
 8001494:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001498:	4b2e      	ldr	r3, [pc, #184]	; (8001554 <PID_QEI+0x114>)
 800149a:	edd3 7a00 	vldr	s15, [r3]
 800149e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80014a2:	4b2f      	ldr	r3, [pc, #188]	; (8001560 <PID_QEI+0x120>)
 80014a4:	edd3 7a00 	vldr	s15, [r3]
 80014a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014ac:	ee37 7a67 	vsub.f32	s14, s14, s15
 80014b0:	4b2a      	ldr	r3, [pc, #168]	; (800155c <PID_QEI+0x11c>)
 80014b2:	edd3 6a00 	vldr	s13, [r3]
 80014b6:	4b2b      	ldr	r3, [pc, #172]	; (8001564 <PID_QEI+0x124>)
 80014b8:	edd3 7a00 	vldr	s15, [r3]
 80014bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014c4:	4b28      	ldr	r3, [pc, #160]	; (8001568 <PID_QEI+0x128>)
 80014c6:	edc3 7a00 	vstr	s15, [r3]
	u = delta_u;
 80014ca:	4b27      	ldr	r3, [pc, #156]	; (8001568 <PID_QEI+0x128>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a27      	ldr	r2, [pc, #156]	; (800156c <PID_QEI+0x12c>)
 80014d0:	6013      	str	r3, [r2, #0]

	if (u > 100)
 80014d2:	4b26      	ldr	r3, [pc, #152]	; (800156c <PID_QEI+0x12c>)
 80014d4:	edd3 7a00 	vldr	s15, [r3]
 80014d8:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8001570 <PID_QEI+0x130>
 80014dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014e4:	dd03      	ble.n	80014ee <PID_QEI+0xae>
	{
		u = 100;
 80014e6:	4b21      	ldr	r3, [pc, #132]	; (800156c <PID_QEI+0x12c>)
 80014e8:	4a22      	ldr	r2, [pc, #136]	; (8001574 <PID_QEI+0x134>)
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	e00c      	b.n	8001508 <PID_QEI+0xc8>
	}
	else if (u < -100)
 80014ee:	4b1f      	ldr	r3, [pc, #124]	; (800156c <PID_QEI+0x12c>)
 80014f0:	edd3 7a00 	vldr	s15, [r3]
 80014f4:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8001578 <PID_QEI+0x138>
 80014f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001500:	d502      	bpl.n	8001508 <PID_QEI+0xc8>
	{
		u = -100;
 8001502:	4b1a      	ldr	r3, [pc, #104]	; (800156c <PID_QEI+0x12c>)
 8001504:	4a1d      	ldr	r2, [pc, #116]	; (800157c <PID_QEI+0x13c>)
 8001506:	601a      	str	r2, [r3, #0]
	}
	duty = u;
 8001508:	4b18      	ldr	r3, [pc, #96]	; (800156c <PID_QEI+0x12c>)
 800150a:	edd3 7a00 	vldr	s15, [r3]
 800150e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001512:	ee17 3a90 	vmov	r3, s15
 8001516:	b21a      	sxth	r2, r3
 8001518:	4b19      	ldr	r3, [pc, #100]	; (8001580 <PID_QEI+0x140>)
 800151a:	801a      	strh	r2, [r3, #0]
	pe2 = pe1;
 800151c:	4b10      	ldr	r3, [pc, #64]	; (8001560 <PID_QEI+0x120>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a10      	ldr	r2, [pc, #64]	; (8001564 <PID_QEI+0x124>)
 8001522:	6013      	str	r3, [r2, #0]
	pe1 = error;
 8001524:	4b0a      	ldr	r3, [pc, #40]	; (8001550 <PID_QEI+0x110>)
 8001526:	f9b3 3000 	ldrsh.w	r3, [r3]
 800152a:	ee07 3a90 	vmov	s15, r3
 800152e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001532:	4b0b      	ldr	r3, [pc, #44]	; (8001560 <PID_QEI+0x120>)
 8001534:	edc3 7a00 	vstr	s15, [r3]
}
 8001538:	bf00      	nop
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	20000774 	.word	0x20000774
 8001548:	200007a8 	.word	0x200007a8
 800154c:	aaaaaaab 	.word	0xaaaaaaab
 8001550:	20000ad8 	.word	0x20000ad8
 8001554:	20000014 	.word	0x20000014
 8001558:	20000018 	.word	0x20000018
 800155c:	2000001c 	.word	0x2000001c
 8001560:	20000ae0 	.word	0x20000ae0
 8001564:	20000ae4 	.word	0x20000ae4
 8001568:	20000ae8 	.word	0x20000ae8
 800156c:	20000adc 	.word	0x20000adc
 8001570:	42c80000 	.word	0x42c80000
 8001574:	42c80000 	.word	0x42c80000
 8001578:	c2c80000 	.word	0xc2c80000
 800157c:	c2c80000 	.word	0xc2c80000
 8001580:	20000ad4 	.word	0x20000ad4

08001584 <HAL_GPIO_EXTI_Callback>:
//-------------------------------------------------------------------------------//
//-------------------------------------Mode--------------------------------------//
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001584:	b480      	push	{r7}
 8001586:	b085      	sub	sp, #20
 8001588:	af00      	add	r7, sp, #0
 800158a:	4603      	mov	r3, r0
 800158c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_13) {
 800158e:	88fb      	ldrh	r3, [r7, #6]
 8001590:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001594:	d116      	bne.n	80015c4 <HAL_GPIO_EXTI_Callback+0x40>
		int pre_mode_status = mode_status;
 8001596:	4b0e      	ldr	r3, [pc, #56]	; (80015d0 <HAL_GPIO_EXTI_Callback+0x4c>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	60fb      	str	r3, [r7, #12]
		if (pre_mode_status == 3) {
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	2b03      	cmp	r3, #3
 80015a0:	d103      	bne.n	80015aa <HAL_GPIO_EXTI_Callback+0x26>
			mode_status = 1;
 80015a2:	4b0b      	ldr	r3, [pc, #44]	; (80015d0 <HAL_GPIO_EXTI_Callback+0x4c>)
 80015a4:	2201      	movs	r2, #1
 80015a6:	601a      	str	r2, [r3, #0]
			mode_status = 2;
		} else if (pre_mode_status == 2) {
			mode_status = 3;
		}
	}
}
 80015a8:	e00c      	b.n	80015c4 <HAL_GPIO_EXTI_Callback+0x40>
		} else if (pre_mode_status == 1) {
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d103      	bne.n	80015b8 <HAL_GPIO_EXTI_Callback+0x34>
			mode_status = 2;
 80015b0:	4b07      	ldr	r3, [pc, #28]	; (80015d0 <HAL_GPIO_EXTI_Callback+0x4c>)
 80015b2:	2202      	movs	r2, #2
 80015b4:	601a      	str	r2, [r3, #0]
}
 80015b6:	e005      	b.n	80015c4 <HAL_GPIO_EXTI_Callback+0x40>
		} else if (pre_mode_status == 2) {
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	2b02      	cmp	r3, #2
 80015bc:	d102      	bne.n	80015c4 <HAL_GPIO_EXTI_Callback+0x40>
			mode_status = 3;
 80015be:	4b04      	ldr	r3, [pc, #16]	; (80015d0 <HAL_GPIO_EXTI_Callback+0x4c>)
 80015c0:	2203      	movs	r2, #3
 80015c2:	601a      	str	r2, [r3, #0]
}
 80015c4:	bf00      	nop
 80015c6:	3714      	adds	r7, #20
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr
 80015d0:	20000000 	.word	0x20000000

080015d4 <Mode_LD2>:
void Mode_LD2() {
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
	if (mode_status == 1) {
 80015d8:	4b17      	ldr	r3, [pc, #92]	; (8001638 <Mode_LD2+0x64>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	2b01      	cmp	r3, #1
 80015de:	d106      	bne.n	80015ee <Mode_LD2+0x1a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET); //เปิดไฟ
 80015e0:	2201      	movs	r2, #1
 80015e2:	2120      	movs	r1, #32
 80015e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015e8:	f002 fff0 	bl	80045cc <HAL_GPIO_WritePin>
		if (timestamp <= HAL_GetTick()) {
			timestamp = HAL_GetTick() + 1000;
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5); // สลับสถานะของ LED
		}
	}
}
 80015ec:	e021      	b.n	8001632 <Mode_LD2+0x5e>
	} else if (mode_status == 2) {
 80015ee:	4b12      	ldr	r3, [pc, #72]	; (8001638 <Mode_LD2+0x64>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	2b02      	cmp	r3, #2
 80015f4:	d106      	bne.n	8001604 <Mode_LD2+0x30>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET); //เปิดไฟ
 80015f6:	2200      	movs	r2, #0
 80015f8:	2120      	movs	r1, #32
 80015fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015fe:	f002 ffe5 	bl	80045cc <HAL_GPIO_WritePin>
}
 8001602:	e016      	b.n	8001632 <Mode_LD2+0x5e>
	} else if (mode_status == 3) {
 8001604:	4b0c      	ldr	r3, [pc, #48]	; (8001638 <Mode_LD2+0x64>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	2b03      	cmp	r3, #3
 800160a:	d112      	bne.n	8001632 <Mode_LD2+0x5e>
		if (timestamp <= HAL_GetTick()) {
 800160c:	f000 fbec 	bl	8001de8 <HAL_GetTick>
 8001610:	4602      	mov	r2, r0
 8001612:	4b0a      	ldr	r3, [pc, #40]	; (800163c <Mode_LD2+0x68>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	429a      	cmp	r2, r3
 8001618:	d30b      	bcc.n	8001632 <Mode_LD2+0x5e>
			timestamp = HAL_GetTick() + 1000;
 800161a:	f000 fbe5 	bl	8001de8 <HAL_GetTick>
 800161e:	4603      	mov	r3, r0
 8001620:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001624:	4a05      	ldr	r2, [pc, #20]	; (800163c <Mode_LD2+0x68>)
 8001626:	6013      	str	r3, [r2, #0]
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5); // สลับสถานะของ LED
 8001628:	2120      	movs	r1, #32
 800162a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800162e:	f002 ffe5 	bl	80045fc <HAL_GPIO_TogglePin>
}
 8001632:	bf00      	nop
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	20000000 	.word	0x20000000
 800163c:	20000af0 	.word	0x20000af0

08001640 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001644:	b672      	cpsid	i
}
 8001646:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001648:	e7fe      	b.n	8001648 <Error_Handler+0x8>
	...

0800164c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001652:	4b0f      	ldr	r3, [pc, #60]	; (8001690 <HAL_MspInit+0x44>)
 8001654:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001656:	4a0e      	ldr	r2, [pc, #56]	; (8001690 <HAL_MspInit+0x44>)
 8001658:	f043 0301 	orr.w	r3, r3, #1
 800165c:	6613      	str	r3, [r2, #96]	; 0x60
 800165e:	4b0c      	ldr	r3, [pc, #48]	; (8001690 <HAL_MspInit+0x44>)
 8001660:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001662:	f003 0301 	and.w	r3, r3, #1
 8001666:	607b      	str	r3, [r7, #4]
 8001668:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800166a:	4b09      	ldr	r3, [pc, #36]	; (8001690 <HAL_MspInit+0x44>)
 800166c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800166e:	4a08      	ldr	r2, [pc, #32]	; (8001690 <HAL_MspInit+0x44>)
 8001670:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001674:	6593      	str	r3, [r2, #88]	; 0x58
 8001676:	4b06      	ldr	r3, [pc, #24]	; (8001690 <HAL_MspInit+0x44>)
 8001678:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800167a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800167e:	603b      	str	r3, [r7, #0]
 8001680:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001682:	f003 f891 	bl	80047a8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001686:	bf00      	nop
 8001688:	3708      	adds	r7, #8
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	40021000 	.word	0x40021000

08001694 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b0a0      	sub	sp, #128	; 0x80
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800169c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80016a0:	2200      	movs	r2, #0
 80016a2:	601a      	str	r2, [r3, #0]
 80016a4:	605a      	str	r2, [r3, #4]
 80016a6:	609a      	str	r2, [r3, #8]
 80016a8:	60da      	str	r2, [r3, #12]
 80016aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016ac:	f107 0318 	add.w	r3, r7, #24
 80016b0:	2254      	movs	r2, #84	; 0x54
 80016b2:	2100      	movs	r1, #0
 80016b4:	4618      	mov	r0, r3
 80016b6:	f007 fabd 	bl	8008c34 <memset>
  if(hadc->Instance==ADC1)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80016c2:	d17f      	bne.n	80017c4 <HAL_ADC_MspInit+0x130>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80016c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80016c8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80016ca:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80016ce:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016d0:	f107 0318 	add.w	r3, r7, #24
 80016d4:	4618      	mov	r0, r3
 80016d6:	f003 fda5 	bl	8005224 <HAL_RCCEx_PeriphCLKConfig>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80016e0:	f7ff ffae 	bl	8001640 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80016e4:	4b39      	ldr	r3, [pc, #228]	; (80017cc <HAL_ADC_MspInit+0x138>)
 80016e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016e8:	4a38      	ldr	r2, [pc, #224]	; (80017cc <HAL_ADC_MspInit+0x138>)
 80016ea:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80016ee:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016f0:	4b36      	ldr	r3, [pc, #216]	; (80017cc <HAL_ADC_MspInit+0x138>)
 80016f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016f8:	617b      	str	r3, [r7, #20]
 80016fa:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016fc:	4b33      	ldr	r3, [pc, #204]	; (80017cc <HAL_ADC_MspInit+0x138>)
 80016fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001700:	4a32      	ldr	r2, [pc, #200]	; (80017cc <HAL_ADC_MspInit+0x138>)
 8001702:	f043 0304 	orr.w	r3, r3, #4
 8001706:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001708:	4b30      	ldr	r3, [pc, #192]	; (80017cc <HAL_ADC_MspInit+0x138>)
 800170a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800170c:	f003 0304 	and.w	r3, r3, #4
 8001710:	613b      	str	r3, [r7, #16]
 8001712:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001714:	4b2d      	ldr	r3, [pc, #180]	; (80017cc <HAL_ADC_MspInit+0x138>)
 8001716:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001718:	4a2c      	ldr	r2, [pc, #176]	; (80017cc <HAL_ADC_MspInit+0x138>)
 800171a:	f043 0301 	orr.w	r3, r3, #1
 800171e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001720:	4b2a      	ldr	r3, [pc, #168]	; (80017cc <HAL_ADC_MspInit+0x138>)
 8001722:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001724:	f003 0301 	and.w	r3, r3, #1
 8001728:	60fb      	str	r3, [r7, #12]
 800172a:	68fb      	ldr	r3, [r7, #12]
    PC1     ------> ADC1_IN7
    PC2     ------> ADC1_IN8
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 800172c:	2306      	movs	r3, #6
 800172e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001730:	2303      	movs	r3, #3
 8001732:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001734:	2300      	movs	r3, #0
 8001736:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001738:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800173c:	4619      	mov	r1, r3
 800173e:	4824      	ldr	r0, [pc, #144]	; (80017d0 <HAL_ADC_MspInit+0x13c>)
 8001740:	f002 fdc2 	bl	80042c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001744:	2303      	movs	r3, #3
 8001746:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001748:	2303      	movs	r3, #3
 800174a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174c:	2300      	movs	r3, #0
 800174e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001750:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001754:	4619      	mov	r1, r3
 8001756:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800175a:	f002 fdb5 	bl	80042c8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Channel1;
 800175e:	4b1d      	ldr	r3, [pc, #116]	; (80017d4 <HAL_ADC_MspInit+0x140>)
 8001760:	4a1d      	ldr	r2, [pc, #116]	; (80017d8 <HAL_ADC_MspInit+0x144>)
 8001762:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001764:	4b1b      	ldr	r3, [pc, #108]	; (80017d4 <HAL_ADC_MspInit+0x140>)
 8001766:	2205      	movs	r2, #5
 8001768:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800176a:	4b1a      	ldr	r3, [pc, #104]	; (80017d4 <HAL_ADC_MspInit+0x140>)
 800176c:	2200      	movs	r2, #0
 800176e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001770:	4b18      	ldr	r3, [pc, #96]	; (80017d4 <HAL_ADC_MspInit+0x140>)
 8001772:	2200      	movs	r2, #0
 8001774:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001776:	4b17      	ldr	r3, [pc, #92]	; (80017d4 <HAL_ADC_MspInit+0x140>)
 8001778:	2280      	movs	r2, #128	; 0x80
 800177a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800177c:	4b15      	ldr	r3, [pc, #84]	; (80017d4 <HAL_ADC_MspInit+0x140>)
 800177e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001782:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001784:	4b13      	ldr	r3, [pc, #76]	; (80017d4 <HAL_ADC_MspInit+0x140>)
 8001786:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800178a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800178c:	4b11      	ldr	r3, [pc, #68]	; (80017d4 <HAL_ADC_MspInit+0x140>)
 800178e:	2220      	movs	r2, #32
 8001790:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001792:	4b10      	ldr	r3, [pc, #64]	; (80017d4 <HAL_ADC_MspInit+0x140>)
 8001794:	2200      	movs	r2, #0
 8001796:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001798:	480e      	ldr	r0, [pc, #56]	; (80017d4 <HAL_ADC_MspInit+0x140>)
 800179a:	f002 fa63 	bl	8003c64 <HAL_DMA_Init>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <HAL_ADC_MspInit+0x114>
    {
      Error_Handler();
 80017a4:	f7ff ff4c 	bl	8001640 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	4a0a      	ldr	r2, [pc, #40]	; (80017d4 <HAL_ADC_MspInit+0x140>)
 80017ac:	655a      	str	r2, [r3, #84]	; 0x54
 80017ae:	4a09      	ldr	r2, [pc, #36]	; (80017d4 <HAL_ADC_MspInit+0x140>)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80017b4:	2200      	movs	r2, #0
 80017b6:	2100      	movs	r1, #0
 80017b8:	2012      	movs	r0, #18
 80017ba:	f002 fa1e 	bl	8003bfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80017be:	2012      	movs	r0, #18
 80017c0:	f002 fa35 	bl	8003c2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80017c4:	bf00      	nop
 80017c6:	3780      	adds	r7, #128	; 0x80
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	40021000 	.word	0x40021000
 80017d0:	48000800 	.word	0x48000800
 80017d4:	200000b8 	.word	0x200000b8
 80017d8:	40020408 	.word	0x40020408

080017dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b09e      	sub	sp, #120	; 0x78
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80017e8:	2200      	movs	r2, #0
 80017ea:	601a      	str	r2, [r3, #0]
 80017ec:	605a      	str	r2, [r3, #4]
 80017ee:	609a      	str	r2, [r3, #8]
 80017f0:	60da      	str	r2, [r3, #12]
 80017f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017f4:	f107 0310 	add.w	r3, r7, #16
 80017f8:	2254      	movs	r2, #84	; 0x54
 80017fa:	2100      	movs	r1, #0
 80017fc:	4618      	mov	r0, r3
 80017fe:	f007 fa19 	bl	8008c34 <memset>
  if(huart->Instance==LPUART1)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a4d      	ldr	r2, [pc, #308]	; (800193c <HAL_UART_MspInit+0x160>)
 8001808:	4293      	cmp	r3, r2
 800180a:	f040 8092 	bne.w	8001932 <HAL_UART_MspInit+0x156>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800180e:	2320      	movs	r3, #32
 8001810:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001812:	2300      	movs	r3, #0
 8001814:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001816:	f107 0310 	add.w	r3, r7, #16
 800181a:	4618      	mov	r0, r3
 800181c:	f003 fd02 	bl	8005224 <HAL_RCCEx_PeriphCLKConfig>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001826:	f7ff ff0b 	bl	8001640 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800182a:	4b45      	ldr	r3, [pc, #276]	; (8001940 <HAL_UART_MspInit+0x164>)
 800182c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800182e:	4a44      	ldr	r2, [pc, #272]	; (8001940 <HAL_UART_MspInit+0x164>)
 8001830:	f043 0301 	orr.w	r3, r3, #1
 8001834:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001836:	4b42      	ldr	r3, [pc, #264]	; (8001940 <HAL_UART_MspInit+0x164>)
 8001838:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800183a:	f003 0301 	and.w	r3, r3, #1
 800183e:	60fb      	str	r3, [r7, #12]
 8001840:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001842:	4b3f      	ldr	r3, [pc, #252]	; (8001940 <HAL_UART_MspInit+0x164>)
 8001844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001846:	4a3e      	ldr	r2, [pc, #248]	; (8001940 <HAL_UART_MspInit+0x164>)
 8001848:	f043 0301 	orr.w	r3, r3, #1
 800184c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800184e:	4b3c      	ldr	r3, [pc, #240]	; (8001940 <HAL_UART_MspInit+0x164>)
 8001850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001852:	f003 0301 	and.w	r3, r3, #1
 8001856:	60bb      	str	r3, [r7, #8]
 8001858:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|LPUART1_RX_Pin;
 800185a:	230c      	movs	r3, #12
 800185c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800185e:	2302      	movs	r3, #2
 8001860:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001862:	2300      	movs	r3, #0
 8001864:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001866:	2300      	movs	r3, #0
 8001868:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 800186a:	230c      	movs	r3, #12
 800186c:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800186e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001872:	4619      	mov	r1, r3
 8001874:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001878:	f002 fd26 	bl	80042c8 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel1;
 800187c:	4b31      	ldr	r3, [pc, #196]	; (8001944 <HAL_UART_MspInit+0x168>)
 800187e:	4a32      	ldr	r2, [pc, #200]	; (8001948 <HAL_UART_MspInit+0x16c>)
 8001880:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8001882:	4b30      	ldr	r3, [pc, #192]	; (8001944 <HAL_UART_MspInit+0x168>)
 8001884:	2222      	movs	r2, #34	; 0x22
 8001886:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001888:	4b2e      	ldr	r3, [pc, #184]	; (8001944 <HAL_UART_MspInit+0x168>)
 800188a:	2200      	movs	r2, #0
 800188c:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800188e:	4b2d      	ldr	r3, [pc, #180]	; (8001944 <HAL_UART_MspInit+0x168>)
 8001890:	2200      	movs	r2, #0
 8001892:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001894:	4b2b      	ldr	r3, [pc, #172]	; (8001944 <HAL_UART_MspInit+0x168>)
 8001896:	2280      	movs	r2, #128	; 0x80
 8001898:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800189a:	4b2a      	ldr	r3, [pc, #168]	; (8001944 <HAL_UART_MspInit+0x168>)
 800189c:	2200      	movs	r2, #0
 800189e:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018a0:	4b28      	ldr	r3, [pc, #160]	; (8001944 <HAL_UART_MspInit+0x168>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 80018a6:	4b27      	ldr	r3, [pc, #156]	; (8001944 <HAL_UART_MspInit+0x168>)
 80018a8:	2220      	movs	r2, #32
 80018aa:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80018ac:	4b25      	ldr	r3, [pc, #148]	; (8001944 <HAL_UART_MspInit+0x168>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 80018b2:	4824      	ldr	r0, [pc, #144]	; (8001944 <HAL_UART_MspInit+0x168>)
 80018b4:	f002 f9d6 	bl	8003c64 <HAL_DMA_Init>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 80018be:	f7ff febf 	bl	8001640 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_lpuart1_rx);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4a1f      	ldr	r2, [pc, #124]	; (8001944 <HAL_UART_MspInit+0x168>)
 80018c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80018ca:	4a1e      	ldr	r2, [pc, #120]	; (8001944 <HAL_UART_MspInit+0x168>)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel2;
 80018d0:	4b1e      	ldr	r3, [pc, #120]	; (800194c <HAL_UART_MspInit+0x170>)
 80018d2:	4a1f      	ldr	r2, [pc, #124]	; (8001950 <HAL_UART_MspInit+0x174>)
 80018d4:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 80018d6:	4b1d      	ldr	r3, [pc, #116]	; (800194c <HAL_UART_MspInit+0x170>)
 80018d8:	2223      	movs	r2, #35	; 0x23
 80018da:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80018dc:	4b1b      	ldr	r3, [pc, #108]	; (800194c <HAL_UART_MspInit+0x170>)
 80018de:	2210      	movs	r2, #16
 80018e0:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018e2:	4b1a      	ldr	r3, [pc, #104]	; (800194c <HAL_UART_MspInit+0x170>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80018e8:	4b18      	ldr	r3, [pc, #96]	; (800194c <HAL_UART_MspInit+0x170>)
 80018ea:	2280      	movs	r2, #128	; 0x80
 80018ec:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018ee:	4b17      	ldr	r3, [pc, #92]	; (800194c <HAL_UART_MspInit+0x170>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018f4:	4b15      	ldr	r3, [pc, #84]	; (800194c <HAL_UART_MspInit+0x170>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 80018fa:	4b14      	ldr	r3, [pc, #80]	; (800194c <HAL_UART_MspInit+0x170>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001900:	4b12      	ldr	r3, [pc, #72]	; (800194c <HAL_UART_MspInit+0x170>)
 8001902:	2200      	movs	r2, #0
 8001904:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8001906:	4811      	ldr	r0, [pc, #68]	; (800194c <HAL_UART_MspInit+0x170>)
 8001908:	f002 f9ac 	bl	8003c64 <HAL_DMA_Init>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 8001912:	f7ff fe95 	bl	8001640 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4a0c      	ldr	r2, [pc, #48]	; (800194c <HAL_UART_MspInit+0x170>)
 800191a:	67da      	str	r2, [r3, #124]	; 0x7c
 800191c:	4a0b      	ldr	r2, [pc, #44]	; (800194c <HAL_UART_MspInit+0x170>)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8001922:	2200      	movs	r2, #0
 8001924:	2100      	movs	r1, #0
 8001926:	205b      	movs	r0, #91	; 0x5b
 8001928:	f002 f967 	bl	8003bfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 800192c:	205b      	movs	r0, #91	; 0x5b
 800192e:	f002 f97e 	bl	8003c2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8001932:	bf00      	nop
 8001934:	3778      	adds	r7, #120	; 0x78
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	40008000 	.word	0x40008000
 8001940:	40021000 	.word	0x40021000
 8001944:	200001ac 	.word	0x200001ac
 8001948:	40020008 	.word	0x40020008
 800194c:	2000020c 	.word	0x2000020c
 8001950:	4002001c 	.word	0x4002001c

08001954 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b084      	sub	sp, #16
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a16      	ldr	r2, [pc, #88]	; (80019bc <HAL_TIM_PWM_MspInit+0x68>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d114      	bne.n	8001990 <HAL_TIM_PWM_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001966:	4b16      	ldr	r3, [pc, #88]	; (80019c0 <HAL_TIM_PWM_MspInit+0x6c>)
 8001968:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800196a:	4a15      	ldr	r2, [pc, #84]	; (80019c0 <HAL_TIM_PWM_MspInit+0x6c>)
 800196c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001970:	6613      	str	r3, [r2, #96]	; 0x60
 8001972:	4b13      	ldr	r3, [pc, #76]	; (80019c0 <HAL_TIM_PWM_MspInit+0x6c>)
 8001974:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001976:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800197a:	60fb      	str	r3, [r7, #12]
 800197c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 800197e:	2200      	movs	r2, #0
 8001980:	2100      	movs	r1, #0
 8001982:	2018      	movs	r0, #24
 8001984:	f002 f939 	bl	8003bfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001988:	2018      	movs	r0, #24
 800198a:	f002 f950 	bl	8003c2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800198e:	e010      	b.n	80019b2 <HAL_TIM_PWM_MspInit+0x5e>
  else if(htim_pwm->Instance==TIM4)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a0b      	ldr	r2, [pc, #44]	; (80019c4 <HAL_TIM_PWM_MspInit+0x70>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d10b      	bne.n	80019b2 <HAL_TIM_PWM_MspInit+0x5e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800199a:	4b09      	ldr	r3, [pc, #36]	; (80019c0 <HAL_TIM_PWM_MspInit+0x6c>)
 800199c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800199e:	4a08      	ldr	r2, [pc, #32]	; (80019c0 <HAL_TIM_PWM_MspInit+0x6c>)
 80019a0:	f043 0304 	orr.w	r3, r3, #4
 80019a4:	6593      	str	r3, [r2, #88]	; 0x58
 80019a6:	4b06      	ldr	r3, [pc, #24]	; (80019c0 <HAL_TIM_PWM_MspInit+0x6c>)
 80019a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019aa:	f003 0304 	and.w	r3, r3, #4
 80019ae:	60bb      	str	r3, [r7, #8]
 80019b0:	68bb      	ldr	r3, [r7, #8]
}
 80019b2:	bf00      	nop
 80019b4:	3710      	adds	r7, #16
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	40012c00 	.word	0x40012c00
 80019c0:	40021000 	.word	0x40021000
 80019c4:	40000800 	.word	0x40000800

080019c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b086      	sub	sp, #24
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019d8:	d114      	bne.n	8001a04 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80019da:	4b22      	ldr	r3, [pc, #136]	; (8001a64 <HAL_TIM_Base_MspInit+0x9c>)
 80019dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019de:	4a21      	ldr	r2, [pc, #132]	; (8001a64 <HAL_TIM_Base_MspInit+0x9c>)
 80019e0:	f043 0301 	orr.w	r3, r3, #1
 80019e4:	6593      	str	r3, [r2, #88]	; 0x58
 80019e6:	4b1f      	ldr	r3, [pc, #124]	; (8001a64 <HAL_TIM_Base_MspInit+0x9c>)
 80019e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ea:	f003 0301 	and.w	r3, r3, #1
 80019ee:	617b      	str	r3, [r7, #20]
 80019f0:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80019f2:	2200      	movs	r2, #0
 80019f4:	2100      	movs	r1, #0
 80019f6:	201c      	movs	r0, #28
 80019f8:	f002 f8ff 	bl	8003bfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80019fc:	201c      	movs	r0, #28
 80019fe:	f002 f916 	bl	8003c2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8001a02:	e02a      	b.n	8001a5a <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM5)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a17      	ldr	r2, [pc, #92]	; (8001a68 <HAL_TIM_Base_MspInit+0xa0>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d10c      	bne.n	8001a28 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001a0e:	4b15      	ldr	r3, [pc, #84]	; (8001a64 <HAL_TIM_Base_MspInit+0x9c>)
 8001a10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a12:	4a14      	ldr	r2, [pc, #80]	; (8001a64 <HAL_TIM_Base_MspInit+0x9c>)
 8001a14:	f043 0308 	orr.w	r3, r3, #8
 8001a18:	6593      	str	r3, [r2, #88]	; 0x58
 8001a1a:	4b12      	ldr	r3, [pc, #72]	; (8001a64 <HAL_TIM_Base_MspInit+0x9c>)
 8001a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a1e:	f003 0308 	and.w	r3, r3, #8
 8001a22:	613b      	str	r3, [r7, #16]
 8001a24:	693b      	ldr	r3, [r7, #16]
}
 8001a26:	e018      	b.n	8001a5a <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM15)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a0f      	ldr	r2, [pc, #60]	; (8001a6c <HAL_TIM_Base_MspInit+0xa4>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d113      	bne.n	8001a5a <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001a32:	4b0c      	ldr	r3, [pc, #48]	; (8001a64 <HAL_TIM_Base_MspInit+0x9c>)
 8001a34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a36:	4a0b      	ldr	r2, [pc, #44]	; (8001a64 <HAL_TIM_Base_MspInit+0x9c>)
 8001a38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a3c:	6613      	str	r3, [r2, #96]	; 0x60
 8001a3e:	4b09      	ldr	r3, [pc, #36]	; (8001a64 <HAL_TIM_Base_MspInit+0x9c>)
 8001a40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a46:	60fb      	str	r3, [r7, #12]
 8001a48:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	2100      	movs	r1, #0
 8001a4e:	2018      	movs	r0, #24
 8001a50:	f002 f8d3 	bl	8003bfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001a54:	2018      	movs	r0, #24
 8001a56:	f002 f8ea 	bl	8003c2e <HAL_NVIC_EnableIRQ>
}
 8001a5a:	bf00      	nop
 8001a5c:	3718      	adds	r7, #24
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	40021000 	.word	0x40021000
 8001a68:	40000c00 	.word	0x40000c00
 8001a6c:	40014000 	.word	0x40014000

08001a70 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b08a      	sub	sp, #40	; 0x28
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a78:	f107 0314 	add.w	r3, r7, #20
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	601a      	str	r2, [r3, #0]
 8001a80:	605a      	str	r2, [r3, #4]
 8001a82:	609a      	str	r2, [r3, #8]
 8001a84:	60da      	str	r2, [r3, #12]
 8001a86:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a17      	ldr	r2, [pc, #92]	; (8001aec <HAL_TIM_Encoder_MspInit+0x7c>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d128      	bne.n	8001ae4 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a92:	4b17      	ldr	r3, [pc, #92]	; (8001af0 <HAL_TIM_Encoder_MspInit+0x80>)
 8001a94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a96:	4a16      	ldr	r2, [pc, #88]	; (8001af0 <HAL_TIM_Encoder_MspInit+0x80>)
 8001a98:	f043 0302 	orr.w	r3, r3, #2
 8001a9c:	6593      	str	r3, [r2, #88]	; 0x58
 8001a9e:	4b14      	ldr	r3, [pc, #80]	; (8001af0 <HAL_TIM_Encoder_MspInit+0x80>)
 8001aa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aa2:	f003 0302 	and.w	r3, r3, #2
 8001aa6:	613b      	str	r3, [r7, #16]
 8001aa8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aaa:	4b11      	ldr	r3, [pc, #68]	; (8001af0 <HAL_TIM_Encoder_MspInit+0x80>)
 8001aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aae:	4a10      	ldr	r2, [pc, #64]	; (8001af0 <HAL_TIM_Encoder_MspInit+0x80>)
 8001ab0:	f043 0301 	orr.w	r3, r3, #1
 8001ab4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ab6:	4b0e      	ldr	r3, [pc, #56]	; (8001af0 <HAL_TIM_Encoder_MspInit+0x80>)
 8001ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aba:	f003 0301 	and.w	r3, r3, #1
 8001abe:	60fb      	str	r3, [r7, #12]
 8001ac0:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ac2:	23c0      	movs	r3, #192	; 0xc0
 8001ac4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac6:	2302      	movs	r3, #2
 8001ac8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aca:	2300      	movs	r3, #0
 8001acc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001ad2:	2302      	movs	r3, #2
 8001ad4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ad6:	f107 0314 	add.w	r3, r7, #20
 8001ada:	4619      	mov	r1, r3
 8001adc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ae0:	f002 fbf2 	bl	80042c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001ae4:	bf00      	nop
 8001ae6:	3728      	adds	r7, #40	; 0x28
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	40000400 	.word	0x40000400
 8001af0:	40021000 	.word	0x40021000

08001af4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b08a      	sub	sp, #40	; 0x28
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001afc:	f107 0314 	add.w	r3, r7, #20
 8001b00:	2200      	movs	r2, #0
 8001b02:	601a      	str	r2, [r3, #0]
 8001b04:	605a      	str	r2, [r3, #4]
 8001b06:	609a      	str	r2, [r3, #8]
 8001b08:	60da      	str	r2, [r3, #12]
 8001b0a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a23      	ldr	r2, [pc, #140]	; (8001ba0 <HAL_TIM_MspPostInit+0xac>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d11e      	bne.n	8001b54 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b16:	4b23      	ldr	r3, [pc, #140]	; (8001ba4 <HAL_TIM_MspPostInit+0xb0>)
 8001b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b1a:	4a22      	ldr	r2, [pc, #136]	; (8001ba4 <HAL_TIM_MspPostInit+0xb0>)
 8001b1c:	f043 0301 	orr.w	r3, r3, #1
 8001b20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b22:	4b20      	ldr	r3, [pc, #128]	; (8001ba4 <HAL_TIM_MspPostInit+0xb0>)
 8001b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b26:	f003 0301 	and.w	r3, r3, #1
 8001b2a:	613b      	str	r3, [r7, #16]
 8001b2c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001b2e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b34:	2302      	movs	r3, #2
 8001b36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001b40:	2306      	movs	r3, #6
 8001b42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b44:	f107 0314 	add.w	r3, r7, #20
 8001b48:	4619      	mov	r1, r3
 8001b4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b4e:	f002 fbbb 	bl	80042c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001b52:	e020      	b.n	8001b96 <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM4)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a13      	ldr	r2, [pc, #76]	; (8001ba8 <HAL_TIM_MspPostInit+0xb4>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d11b      	bne.n	8001b96 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b5e:	4b11      	ldr	r3, [pc, #68]	; (8001ba4 <HAL_TIM_MspPostInit+0xb0>)
 8001b60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b62:	4a10      	ldr	r2, [pc, #64]	; (8001ba4 <HAL_TIM_MspPostInit+0xb0>)
 8001b64:	f043 0302 	orr.w	r3, r3, #2
 8001b68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b6a:	4b0e      	ldr	r3, [pc, #56]	; (8001ba4 <HAL_TIM_MspPostInit+0xb0>)
 8001b6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b6e:	f003 0302 	and.w	r3, r3, #2
 8001b72:	60fb      	str	r3, [r7, #12]
 8001b74:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001b76:	2340      	movs	r3, #64	; 0x40
 8001b78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b7a:	2302      	movs	r3, #2
 8001b7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b82:	2300      	movs	r3, #0
 8001b84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001b86:	2302      	movs	r3, #2
 8001b88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b8a:	f107 0314 	add.w	r3, r7, #20
 8001b8e:	4619      	mov	r1, r3
 8001b90:	4806      	ldr	r0, [pc, #24]	; (8001bac <HAL_TIM_MspPostInit+0xb8>)
 8001b92:	f002 fb99 	bl	80042c8 <HAL_GPIO_Init>
}
 8001b96:	bf00      	nop
 8001b98:	3728      	adds	r7, #40	; 0x28
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	40012c00 	.word	0x40012c00
 8001ba4:	40021000 	.word	0x40021000
 8001ba8:	40000800 	.word	0x40000800
 8001bac:	48000400 	.word	0x48000400

08001bb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001bb4:	e7fe      	b.n	8001bb4 <NMI_Handler+0x4>

08001bb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bb6:	b480      	push	{r7}
 8001bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bba:	e7fe      	b.n	8001bba <HardFault_Handler+0x4>

08001bbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bc0:	e7fe      	b.n	8001bc0 <MemManage_Handler+0x4>

08001bc2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bc2:	b480      	push	{r7}
 8001bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bc6:	e7fe      	b.n	8001bc6 <BusFault_Handler+0x4>

08001bc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bcc:	e7fe      	b.n	8001bcc <UsageFault_Handler+0x4>

08001bce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bce:	b480      	push	{r7}
 8001bd0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bd2:	bf00      	nop
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr

08001bdc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001be0:	bf00      	nop
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr

08001bea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bea:	b480      	push	{r7}
 8001bec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bee:	bf00      	nop
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr

08001bf8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bfc:	f000 f8e2 	bl	8001dc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c00:	bf00      	nop
 8001c02:	bd80      	pop	{r7, pc}

08001c04 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8001c08:	4802      	ldr	r0, [pc, #8]	; (8001c14 <DMA1_Channel1_IRQHandler+0x10>)
 8001c0a:	f002 fa0e 	bl	800402a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001c0e:	bf00      	nop
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	200001ac 	.word	0x200001ac

08001c18 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8001c1c:	4802      	ldr	r0, [pc, #8]	; (8001c28 <DMA1_Channel2_IRQHandler+0x10>)
 8001c1e:	f002 fa04 	bl	800402a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001c22:	bf00      	nop
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	2000020c 	.word	0x2000020c

08001c2c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001c30:	4802      	ldr	r0, [pc, #8]	; (8001c3c <ADC1_2_IRQHandler+0x10>)
 8001c32:	f000 fdb5 	bl	80027a0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001c36:	bf00      	nop
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	2000004c 	.word	0x2000004c

08001c40 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c44:	4803      	ldr	r0, [pc, #12]	; (8001c54 <TIM1_BRK_TIM15_IRQHandler+0x14>)
 8001c46:	f004 f919 	bl	8005e7c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 8001c4a:	4803      	ldr	r0, [pc, #12]	; (8001c58 <TIM1_BRK_TIM15_IRQHandler+0x18>)
 8001c4c:	f004 f916 	bl	8005e7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8001c50:	bf00      	nop
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	2000026c 	.word	0x2000026c
 8001c58:	200003e8 	.word	0x200003e8

08001c5c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001c60:	4802      	ldr	r0, [pc, #8]	; (8001c6c <TIM2_IRQHandler+0x10>)
 8001c62:	f004 f90b 	bl	8005e7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001c66:	bf00      	nop
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	200002b8 	.word	0x200002b8

08001c70 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001c74:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001c78:	f002 fcda 	bl	8004630 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001c7c:	bf00      	nop
 8001c7e:	bd80      	pop	{r7, pc}

08001c80 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001c84:	4802      	ldr	r0, [pc, #8]	; (8001c90 <DMA2_Channel1_IRQHandler+0x10>)
 8001c86:	f002 f9d0 	bl	800402a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8001c8a:	bf00      	nop
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	200000b8 	.word	0x200000b8

08001c94 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8001c98:	4802      	ldr	r0, [pc, #8]	; (8001ca4 <LPUART1_IRQHandler+0x10>)
 8001c9a:	f005 fbbd 	bl	8007418 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8001c9e:	bf00      	nop
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	20000118 	.word	0x20000118

08001ca8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001cac:	4b06      	ldr	r3, [pc, #24]	; (8001cc8 <SystemInit+0x20>)
 8001cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cb2:	4a05      	ldr	r2, [pc, #20]	; (8001cc8 <SystemInit+0x20>)
 8001cb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cb8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cbc:	bf00      	nop
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	e000ed00 	.word	0xe000ed00

08001ccc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
ldr   r0, =_estack
 8001ccc:	480d      	ldr	r0, [pc, #52]	; (8001d04 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001cce:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001cd0:	f7ff ffea 	bl	8001ca8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001cd4:	480c      	ldr	r0, [pc, #48]	; (8001d08 <LoopForever+0x6>)
  ldr r1, =_edata
 8001cd6:	490d      	ldr	r1, [pc, #52]	; (8001d0c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001cd8:	4a0d      	ldr	r2, [pc, #52]	; (8001d10 <LoopForever+0xe>)
  movs r3, #0
 8001cda:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001cdc:	e002      	b.n	8001ce4 <LoopCopyDataInit>

08001cde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ce0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ce2:	3304      	adds	r3, #4

08001ce4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ce4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ce6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ce8:	d3f9      	bcc.n	8001cde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cea:	4a0a      	ldr	r2, [pc, #40]	; (8001d14 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001cec:	4c0a      	ldr	r4, [pc, #40]	; (8001d18 <LoopForever+0x16>)
  movs r3, #0
 8001cee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cf0:	e001      	b.n	8001cf6 <LoopFillZerobss>

08001cf2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cf2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cf4:	3204      	adds	r2, #4

08001cf6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cf6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cf8:	d3fb      	bcc.n	8001cf2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001cfa:	f006 ffa3 	bl	8008c44 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001cfe:	f7fe fc09 	bl	8000514 <main>

08001d02 <LoopForever>:

LoopForever:
    b LoopForever
 8001d02:	e7fe      	b.n	8001d02 <LoopForever>
ldr   r0, =_estack
 8001d04:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d0c:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8001d10:	08008cf4 	.word	0x08008cf4
  ldr r2, =_sbss
 8001d14:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 8001d18:	20000af8 	.word	0x20000af8

08001d1c <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d1c:	e7fe      	b.n	8001d1c <ADC3_IRQHandler>

08001d1e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d1e:	b580      	push	{r7, lr}
 8001d20:	b082      	sub	sp, #8
 8001d22:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d24:	2300      	movs	r3, #0
 8001d26:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d28:	2003      	movs	r0, #3
 8001d2a:	f001 ff5b 	bl	8003be4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d2e:	2000      	movs	r0, #0
 8001d30:	f000 f80e 	bl	8001d50 <HAL_InitTick>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d002      	beq.n	8001d40 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	71fb      	strb	r3, [r7, #7]
 8001d3e:	e001      	b.n	8001d44 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d40:	f7ff fc84 	bl	800164c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d44:	79fb      	ldrb	r3, [r7, #7]

}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
	...

08001d50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b084      	sub	sp, #16
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001d5c:	4b16      	ldr	r3, [pc, #88]	; (8001db8 <HAL_InitTick+0x68>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d022      	beq.n	8001daa <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001d64:	4b15      	ldr	r3, [pc, #84]	; (8001dbc <HAL_InitTick+0x6c>)
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	4b13      	ldr	r3, [pc, #76]	; (8001db8 <HAL_InitTick+0x68>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001d70:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d74:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f001 ff66 	bl	8003c4a <HAL_SYSTICK_Config>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d10f      	bne.n	8001da4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2b0f      	cmp	r3, #15
 8001d88:	d809      	bhi.n	8001d9e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	6879      	ldr	r1, [r7, #4]
 8001d8e:	f04f 30ff 	mov.w	r0, #4294967295
 8001d92:	f001 ff32 	bl	8003bfa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d96:	4a0a      	ldr	r2, [pc, #40]	; (8001dc0 <HAL_InitTick+0x70>)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6013      	str	r3, [r2, #0]
 8001d9c:	e007      	b.n	8001dae <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	73fb      	strb	r3, [r7, #15]
 8001da2:	e004      	b.n	8001dae <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	73fb      	strb	r3, [r7, #15]
 8001da8:	e001      	b.n	8001dae <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001dae:	7bfb      	ldrb	r3, [r7, #15]
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3710      	adds	r7, #16
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	20000028 	.word	0x20000028
 8001dbc:	20000020 	.word	0x20000020
 8001dc0:	20000024 	.word	0x20000024

08001dc4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001dc8:	4b05      	ldr	r3, [pc, #20]	; (8001de0 <HAL_IncTick+0x1c>)
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	4b05      	ldr	r3, [pc, #20]	; (8001de4 <HAL_IncTick+0x20>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4413      	add	r3, r2
 8001dd2:	4a03      	ldr	r2, [pc, #12]	; (8001de0 <HAL_IncTick+0x1c>)
 8001dd4:	6013      	str	r3, [r2, #0]
}
 8001dd6:	bf00      	nop
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr
 8001de0:	20000af4 	.word	0x20000af4
 8001de4:	20000028 	.word	0x20000028

08001de8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
  return uwTick;
 8001dec:	4b03      	ldr	r3, [pc, #12]	; (8001dfc <HAL_GetTick+0x14>)
 8001dee:	681b      	ldr	r3, [r3, #0]
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	20000af4 	.word	0x20000af4

08001e00 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	431a      	orrs	r2, r3
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	609a      	str	r2, [r3, #8]
}
 8001e1a:	bf00      	nop
 8001e1c:	370c      	adds	r7, #12
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr

08001e26 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001e26:	b480      	push	{r7}
 8001e28:	b083      	sub	sp, #12
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	6078      	str	r0, [r7, #4]
 8001e2e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	431a      	orrs	r2, r3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	609a      	str	r2, [r3, #8]
}
 8001e40:	bf00      	nop
 8001e42:	370c      	adds	r7, #12
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr

08001e4c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	370c      	adds	r7, #12
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr

08001e68 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b087      	sub	sp, #28
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	60f8      	str	r0, [r7, #12]
 8001e70:	60b9      	str	r1, [r7, #8]
 8001e72:	607a      	str	r2, [r7, #4]
 8001e74:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	3360      	adds	r3, #96	; 0x60
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	4413      	add	r3, r2
 8001e82:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	4b08      	ldr	r3, [pc, #32]	; (8001eac <LL_ADC_SetOffset+0x44>)
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	687a      	ldr	r2, [r7, #4]
 8001e8e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001e92:	683a      	ldr	r2, [r7, #0]
 8001e94:	430a      	orrs	r2, r1
 8001e96:	4313      	orrs	r3, r2
 8001e98:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001ea0:	bf00      	nop
 8001ea2:	371c      	adds	r7, #28
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr
 8001eac:	03fff000 	.word	0x03fff000

08001eb0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b085      	sub	sp, #20
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	3360      	adds	r3, #96	; 0x60
 8001ebe:	461a      	mov	r2, r3
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	4413      	add	r3, r2
 8001ec6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3714      	adds	r7, #20
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr

08001edc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b087      	sub	sp, #28
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	60f8      	str	r0, [r7, #12]
 8001ee4:	60b9      	str	r1, [r7, #8]
 8001ee6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	3360      	adds	r3, #96	; 0x60
 8001eec:	461a      	mov	r2, r3
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	4413      	add	r3, r2
 8001ef4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	431a      	orrs	r2, r3
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001f06:	bf00      	nop
 8001f08:	371c      	adds	r7, #28
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr

08001f12 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001f12:	b480      	push	{r7}
 8001f14:	b087      	sub	sp, #28
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	60f8      	str	r0, [r7, #12]
 8001f1a:	60b9      	str	r1, [r7, #8]
 8001f1c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	3360      	adds	r3, #96	; 0x60
 8001f22:	461a      	mov	r2, r3
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	4413      	add	r3, r2
 8001f2a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	431a      	orrs	r2, r3
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001f3c:	bf00      	nop
 8001f3e:	371c      	adds	r7, #28
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr

08001f48 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b087      	sub	sp, #28
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	60f8      	str	r0, [r7, #12]
 8001f50:	60b9      	str	r1, [r7, #8]
 8001f52:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	3360      	adds	r3, #96	; 0x60
 8001f58:	461a      	mov	r2, r3
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	4413      	add	r3, r2
 8001f60:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	431a      	orrs	r2, r3
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001f72:	bf00      	nop
 8001f74:	371c      	adds	r7, #28
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr

08001f7e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001f7e:	b480      	push	{r7}
 8001f80:	b083      	sub	sp, #12
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	6078      	str	r0, [r7, #4]
 8001f86:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	695b      	ldr	r3, [r3, #20]
 8001f8c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	431a      	orrs	r2, r3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	615a      	str	r2, [r3, #20]
}
 8001f98:	bf00      	nop
 8001f9a:	370c      	adds	r7, #12
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr

08001fa4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d101      	bne.n	8001fbc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e000      	b.n	8001fbe <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001fbc:	2300      	movs	r3, #0
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	370c      	adds	r7, #12
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr

08001fca <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001fca:	b480      	push	{r7}
 8001fcc:	b087      	sub	sp, #28
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	60f8      	str	r0, [r7, #12]
 8001fd2:	60b9      	str	r1, [r7, #8]
 8001fd4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	3330      	adds	r3, #48	; 0x30
 8001fda:	461a      	mov	r2, r3
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	0a1b      	lsrs	r3, r3, #8
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	f003 030c 	and.w	r3, r3, #12
 8001fe6:	4413      	add	r3, r2
 8001fe8:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	f003 031f 	and.w	r3, r3, #31
 8001ff4:	211f      	movs	r1, #31
 8001ff6:	fa01 f303 	lsl.w	r3, r1, r3
 8001ffa:	43db      	mvns	r3, r3
 8001ffc:	401a      	ands	r2, r3
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	0e9b      	lsrs	r3, r3, #26
 8002002:	f003 011f 	and.w	r1, r3, #31
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	f003 031f 	and.w	r3, r3, #31
 800200c:	fa01 f303 	lsl.w	r3, r1, r3
 8002010:	431a      	orrs	r2, r3
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002016:	bf00      	nop
 8002018:	371c      	adds	r7, #28
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr

08002022 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002022:	b480      	push	{r7}
 8002024:	b083      	sub	sp, #12
 8002026:	af00      	add	r7, sp, #0
 8002028:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800202e:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8002032:	2b00      	cmp	r3, #0
 8002034:	d101      	bne.n	800203a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002036:	2301      	movs	r3, #1
 8002038:	e000      	b.n	800203c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800203a:	2300      	movs	r3, #0
}
 800203c:	4618      	mov	r0, r3
 800203e:	370c      	adds	r7, #12
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr

08002048 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002048:	b480      	push	{r7}
 800204a:	b087      	sub	sp, #28
 800204c:	af00      	add	r7, sp, #0
 800204e:	60f8      	str	r0, [r7, #12]
 8002050:	60b9      	str	r1, [r7, #8]
 8002052:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	3314      	adds	r3, #20
 8002058:	461a      	mov	r2, r3
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	0e5b      	lsrs	r3, r3, #25
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	f003 0304 	and.w	r3, r3, #4
 8002064:	4413      	add	r3, r2
 8002066:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	0d1b      	lsrs	r3, r3, #20
 8002070:	f003 031f 	and.w	r3, r3, #31
 8002074:	2107      	movs	r1, #7
 8002076:	fa01 f303 	lsl.w	r3, r1, r3
 800207a:	43db      	mvns	r3, r3
 800207c:	401a      	ands	r2, r3
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	0d1b      	lsrs	r3, r3, #20
 8002082:	f003 031f 	and.w	r3, r3, #31
 8002086:	6879      	ldr	r1, [r7, #4]
 8002088:	fa01 f303 	lsl.w	r3, r1, r3
 800208c:	431a      	orrs	r2, r3
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002092:	bf00      	nop
 8002094:	371c      	adds	r7, #28
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr
	...

080020a0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b085      	sub	sp, #20
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	60f8      	str	r0, [r7, #12]
 80020a8:	60b9      	str	r1, [r7, #8]
 80020aa:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020b8:	43db      	mvns	r3, r3
 80020ba:	401a      	ands	r2, r3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	f003 0318 	and.w	r3, r3, #24
 80020c2:	4908      	ldr	r1, [pc, #32]	; (80020e4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80020c4:	40d9      	lsrs	r1, r3
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	400b      	ands	r3, r1
 80020ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020ce:	431a      	orrs	r2, r3
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80020d6:	bf00      	nop
 80020d8:	3714      	adds	r7, #20
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	0007ffff 	.word	0x0007ffff

080020e8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	f003 031f 	and.w	r3, r3, #31
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	370c      	adds	r7, #12
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr

08002104 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002114:	4618      	mov	r0, r3
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002130:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002134:	687a      	ldr	r2, [r7, #4]
 8002136:	6093      	str	r3, [r2, #8]
}
 8002138:	bf00      	nop
 800213a:	370c      	adds	r7, #12
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr

08002144 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002154:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002158:	d101      	bne.n	800215e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800215a:	2301      	movs	r3, #1
 800215c:	e000      	b.n	8002160 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800215e:	2300      	movs	r3, #0
}
 8002160:	4618      	mov	r0, r3
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr

0800216c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800217c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002180:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002188:	bf00      	nop
 800218a:	370c      	adds	r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr

08002194 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80021a8:	d101      	bne.n	80021ae <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80021aa:	2301      	movs	r3, #1
 80021ac:	e000      	b.n	80021b0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80021ae:	2300      	movs	r3, #0
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	370c      	adds	r7, #12
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr

080021bc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80021cc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80021d0:	f043 0201 	orr.w	r2, r3, #1
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80021d8:	bf00      	nop
 80021da:	370c      	adds	r7, #12
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr

080021e4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	f003 0301 	and.w	r3, r3, #1
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d101      	bne.n	80021fc <LL_ADC_IsEnabled+0x18>
 80021f8:	2301      	movs	r3, #1
 80021fa:	e000      	b.n	80021fe <LL_ADC_IsEnabled+0x1a>
 80021fc:	2300      	movs	r3, #0
}
 80021fe:	4618      	mov	r0, r3
 8002200:	370c      	adds	r7, #12
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr

0800220a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800220a:	b480      	push	{r7}
 800220c:	b083      	sub	sp, #12
 800220e:	af00      	add	r7, sp, #0
 8002210:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800221a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800221e:	f043 0204 	orr.w	r2, r3, #4
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002226:	bf00      	nop
 8002228:	370c      	adds	r7, #12
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr

08002232 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002232:	b480      	push	{r7}
 8002234:	b083      	sub	sp, #12
 8002236:	af00      	add	r7, sp, #0
 8002238:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	f003 0304 	and.w	r3, r3, #4
 8002242:	2b04      	cmp	r3, #4
 8002244:	d101      	bne.n	800224a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002246:	2301      	movs	r3, #1
 8002248:	e000      	b.n	800224c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800224a:	2300      	movs	r3, #0
}
 800224c:	4618      	mov	r0, r3
 800224e:	370c      	adds	r7, #12
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	f003 0308 	and.w	r3, r3, #8
 8002268:	2b08      	cmp	r3, #8
 800226a:	d101      	bne.n	8002270 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800226c:	2301      	movs	r3, #1
 800226e:	e000      	b.n	8002272 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002270:	2300      	movs	r3, #0
}
 8002272:	4618      	mov	r0, r3
 8002274:	370c      	adds	r7, #12
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr
	...

08002280 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002280:	b590      	push	{r4, r7, lr}
 8002282:	b089      	sub	sp, #36	; 0x24
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002288:	2300      	movs	r3, #0
 800228a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800228c:	2300      	movs	r3, #0
 800228e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d101      	bne.n	800229a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e1a9      	b.n	80025ee <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	695b      	ldr	r3, [r3, #20]
 800229e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d109      	bne.n	80022bc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	f7ff f9f3 	bl	8001694 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2200      	movs	r2, #0
 80022b2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2200      	movs	r2, #0
 80022b8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4618      	mov	r0, r3
 80022c2:	f7ff ff3f 	bl	8002144 <LL_ADC_IsDeepPowerDownEnabled>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d004      	beq.n	80022d6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4618      	mov	r0, r3
 80022d2:	f7ff ff25 	bl	8002120 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4618      	mov	r0, r3
 80022dc:	f7ff ff5a 	bl	8002194 <LL_ADC_IsInternalRegulatorEnabled>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d115      	bne.n	8002312 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4618      	mov	r0, r3
 80022ec:	f7ff ff3e 	bl	800216c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80022f0:	4b9c      	ldr	r3, [pc, #624]	; (8002564 <HAL_ADC_Init+0x2e4>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	099b      	lsrs	r3, r3, #6
 80022f6:	4a9c      	ldr	r2, [pc, #624]	; (8002568 <HAL_ADC_Init+0x2e8>)
 80022f8:	fba2 2303 	umull	r2, r3, r2, r3
 80022fc:	099b      	lsrs	r3, r3, #6
 80022fe:	3301      	adds	r3, #1
 8002300:	005b      	lsls	r3, r3, #1
 8002302:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002304:	e002      	b.n	800230c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	3b01      	subs	r3, #1
 800230a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d1f9      	bne.n	8002306 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4618      	mov	r0, r3
 8002318:	f7ff ff3c 	bl	8002194 <LL_ADC_IsInternalRegulatorEnabled>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d10d      	bne.n	800233e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002326:	f043 0210 	orr.w	r2, r3, #16
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002332:	f043 0201 	orr.w	r2, r3, #1
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4618      	mov	r0, r3
 8002344:	f7ff ff75 	bl	8002232 <LL_ADC_REG_IsConversionOngoing>
 8002348:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800234e:	f003 0310 	and.w	r3, r3, #16
 8002352:	2b00      	cmp	r3, #0
 8002354:	f040 8142 	bne.w	80025dc <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	2b00      	cmp	r3, #0
 800235c:	f040 813e 	bne.w	80025dc <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002364:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002368:	f043 0202 	orr.w	r2, r3, #2
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4618      	mov	r0, r3
 8002376:	f7ff ff35 	bl	80021e4 <LL_ADC_IsEnabled>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d141      	bne.n	8002404 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002388:	d004      	beq.n	8002394 <HAL_ADC_Init+0x114>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a77      	ldr	r2, [pc, #476]	; (800256c <HAL_ADC_Init+0x2ec>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d10f      	bne.n	80023b4 <HAL_ADC_Init+0x134>
 8002394:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002398:	f7ff ff24 	bl	80021e4 <LL_ADC_IsEnabled>
 800239c:	4604      	mov	r4, r0
 800239e:	4873      	ldr	r0, [pc, #460]	; (800256c <HAL_ADC_Init+0x2ec>)
 80023a0:	f7ff ff20 	bl	80021e4 <LL_ADC_IsEnabled>
 80023a4:	4603      	mov	r3, r0
 80023a6:	4323      	orrs	r3, r4
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	bf0c      	ite	eq
 80023ac:	2301      	moveq	r3, #1
 80023ae:	2300      	movne	r3, #0
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	e012      	b.n	80023da <HAL_ADC_Init+0x15a>
 80023b4:	486e      	ldr	r0, [pc, #440]	; (8002570 <HAL_ADC_Init+0x2f0>)
 80023b6:	f7ff ff15 	bl	80021e4 <LL_ADC_IsEnabled>
 80023ba:	4604      	mov	r4, r0
 80023bc:	486d      	ldr	r0, [pc, #436]	; (8002574 <HAL_ADC_Init+0x2f4>)
 80023be:	f7ff ff11 	bl	80021e4 <LL_ADC_IsEnabled>
 80023c2:	4603      	mov	r3, r0
 80023c4:	431c      	orrs	r4, r3
 80023c6:	486c      	ldr	r0, [pc, #432]	; (8002578 <HAL_ADC_Init+0x2f8>)
 80023c8:	f7ff ff0c 	bl	80021e4 <LL_ADC_IsEnabled>
 80023cc:	4603      	mov	r3, r0
 80023ce:	4323      	orrs	r3, r4
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	bf0c      	ite	eq
 80023d4:	2301      	moveq	r3, #1
 80023d6:	2300      	movne	r3, #0
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d012      	beq.n	8002404 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80023e6:	d004      	beq.n	80023f2 <HAL_ADC_Init+0x172>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a5f      	ldr	r2, [pc, #380]	; (800256c <HAL_ADC_Init+0x2ec>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d101      	bne.n	80023f6 <HAL_ADC_Init+0x176>
 80023f2:	4a62      	ldr	r2, [pc, #392]	; (800257c <HAL_ADC_Init+0x2fc>)
 80023f4:	e000      	b.n	80023f8 <HAL_ADC_Init+0x178>
 80023f6:	4a62      	ldr	r2, [pc, #392]	; (8002580 <HAL_ADC_Init+0x300>)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	4619      	mov	r1, r3
 80023fe:	4610      	mov	r0, r2
 8002400:	f7ff fcfe 	bl	8001e00 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	7f5b      	ldrb	r3, [r3, #29]
 8002408:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800240e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002414:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800241a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002422:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002424:	4313      	orrs	r3, r2
 8002426:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800242e:	2b01      	cmp	r3, #1
 8002430:	d106      	bne.n	8002440 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002436:	3b01      	subs	r3, #1
 8002438:	045b      	lsls	r3, r3, #17
 800243a:	69ba      	ldr	r2, [r7, #24]
 800243c:	4313      	orrs	r3, r2
 800243e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002444:	2b00      	cmp	r3, #0
 8002446:	d009      	beq.n	800245c <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800244c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002454:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002456:	69ba      	ldr	r2, [r7, #24]
 8002458:	4313      	orrs	r3, r2
 800245a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	68da      	ldr	r2, [r3, #12]
 8002462:	4b48      	ldr	r3, [pc, #288]	; (8002584 <HAL_ADC_Init+0x304>)
 8002464:	4013      	ands	r3, r2
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	6812      	ldr	r2, [r2, #0]
 800246a:	69b9      	ldr	r1, [r7, #24]
 800246c:	430b      	orrs	r3, r1
 800246e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	691b      	ldr	r3, [r3, #16]
 8002476:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	430a      	orrs	r2, r1
 8002484:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4618      	mov	r0, r3
 800248c:	f7ff fee4 	bl	8002258 <LL_ADC_INJ_IsConversionOngoing>
 8002490:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d17f      	bne.n	8002598 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d17c      	bne.n	8002598 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80024a2:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80024aa:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80024ac:	4313      	orrs	r3, r2
 80024ae:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	68db      	ldr	r3, [r3, #12]
 80024b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80024ba:	f023 0302 	bic.w	r3, r3, #2
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	6812      	ldr	r2, [r2, #0]
 80024c2:	69b9      	ldr	r1, [r7, #24]
 80024c4:	430b      	orrs	r3, r1
 80024c6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	691b      	ldr	r3, [r3, #16]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d017      	beq.n	8002500 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	691a      	ldr	r2, [r3, #16]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80024de:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80024e8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80024ec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80024f0:	687a      	ldr	r2, [r7, #4]
 80024f2:	6911      	ldr	r1, [r2, #16]
 80024f4:	687a      	ldr	r2, [r7, #4]
 80024f6:	6812      	ldr	r2, [r2, #0]
 80024f8:	430b      	orrs	r3, r1
 80024fa:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80024fe:	e013      	b.n	8002528 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	691a      	ldr	r2, [r3, #16]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800250e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002518:	687a      	ldr	r2, [r7, #4]
 800251a:	6812      	ldr	r2, [r2, #0]
 800251c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002520:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002524:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800252e:	2b01      	cmp	r3, #1
 8002530:	d12a      	bne.n	8002588 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	691b      	ldr	r3, [r3, #16]
 8002538:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800253c:	f023 0304 	bic.w	r3, r3, #4
 8002540:	687a      	ldr	r2, [r7, #4]
 8002542:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002548:	4311      	orrs	r1, r2
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800254e:	4311      	orrs	r1, r2
 8002550:	687a      	ldr	r2, [r7, #4]
 8002552:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002554:	430a      	orrs	r2, r1
 8002556:	431a      	orrs	r2, r3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f042 0201 	orr.w	r2, r2, #1
 8002560:	611a      	str	r2, [r3, #16]
 8002562:	e019      	b.n	8002598 <HAL_ADC_Init+0x318>
 8002564:	20000020 	.word	0x20000020
 8002568:	053e2d63 	.word	0x053e2d63
 800256c:	50000100 	.word	0x50000100
 8002570:	50000400 	.word	0x50000400
 8002574:	50000500 	.word	0x50000500
 8002578:	50000600 	.word	0x50000600
 800257c:	50000300 	.word	0x50000300
 8002580:	50000700 	.word	0x50000700
 8002584:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	691a      	ldr	r2, [r3, #16]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f022 0201 	bic.w	r2, r2, #1
 8002596:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	695b      	ldr	r3, [r3, #20]
 800259c:	2b01      	cmp	r3, #1
 800259e:	d10c      	bne.n	80025ba <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a6:	f023 010f 	bic.w	r1, r3, #15
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6a1b      	ldr	r3, [r3, #32]
 80025ae:	1e5a      	subs	r2, r3, #1
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	430a      	orrs	r2, r1
 80025b6:	631a      	str	r2, [r3, #48]	; 0x30
 80025b8:	e007      	b.n	80025ca <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f022 020f 	bic.w	r2, r2, #15
 80025c8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025ce:	f023 0303 	bic.w	r3, r3, #3
 80025d2:	f043 0201 	orr.w	r2, r3, #1
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	65da      	str	r2, [r3, #92]	; 0x5c
 80025da:	e007      	b.n	80025ec <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025e0:	f043 0210 	orr.w	r2, r3, #16
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80025ec:	7ffb      	ldrb	r3, [r7, #31]
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3724      	adds	r7, #36	; 0x24
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd90      	pop	{r4, r7, pc}
 80025f6:	bf00      	nop

080025f8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b086      	sub	sp, #24
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	60f8      	str	r0, [r7, #12]
 8002600:	60b9      	str	r1, [r7, #8]
 8002602:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800260c:	d004      	beq.n	8002618 <HAL_ADC_Start_DMA+0x20>
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a5a      	ldr	r2, [pc, #360]	; (800277c <HAL_ADC_Start_DMA+0x184>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d101      	bne.n	800261c <HAL_ADC_Start_DMA+0x24>
 8002618:	4b59      	ldr	r3, [pc, #356]	; (8002780 <HAL_ADC_Start_DMA+0x188>)
 800261a:	e000      	b.n	800261e <HAL_ADC_Start_DMA+0x26>
 800261c:	4b59      	ldr	r3, [pc, #356]	; (8002784 <HAL_ADC_Start_DMA+0x18c>)
 800261e:	4618      	mov	r0, r3
 8002620:	f7ff fd62 	bl	80020e8 <LL_ADC_GetMultimode>
 8002624:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4618      	mov	r0, r3
 800262c:	f7ff fe01 	bl	8002232 <LL_ADC_REG_IsConversionOngoing>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	f040 809b 	bne.w	800276e <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800263e:	2b01      	cmp	r3, #1
 8002640:	d101      	bne.n	8002646 <HAL_ADC_Start_DMA+0x4e>
 8002642:	2302      	movs	r3, #2
 8002644:	e096      	b.n	8002774 <HAL_ADC_Start_DMA+0x17c>
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2201      	movs	r2, #1
 800264a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a4d      	ldr	r2, [pc, #308]	; (8002788 <HAL_ADC_Start_DMA+0x190>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d008      	beq.n	800266a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d005      	beq.n	800266a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	2b05      	cmp	r3, #5
 8002662:	d002      	beq.n	800266a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	2b09      	cmp	r3, #9
 8002668:	d17a      	bne.n	8002760 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800266a:	68f8      	ldr	r0, [r7, #12]
 800266c:	f000 ff60 	bl	8003530 <ADC_Enable>
 8002670:	4603      	mov	r3, r0
 8002672:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002674:	7dfb      	ldrb	r3, [r7, #23]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d16d      	bne.n	8002756 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800267e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002682:	f023 0301 	bic.w	r3, r3, #1
 8002686:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a3a      	ldr	r2, [pc, #232]	; (800277c <HAL_ADC_Start_DMA+0x184>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d009      	beq.n	80026ac <HAL_ADC_Start_DMA+0xb4>
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a3b      	ldr	r2, [pc, #236]	; (800278c <HAL_ADC_Start_DMA+0x194>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d002      	beq.n	80026a8 <HAL_ADC_Start_DMA+0xb0>
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	e003      	b.n	80026b0 <HAL_ADC_Start_DMA+0xb8>
 80026a8:	4b39      	ldr	r3, [pc, #228]	; (8002790 <HAL_ADC_Start_DMA+0x198>)
 80026aa:	e001      	b.n	80026b0 <HAL_ADC_Start_DMA+0xb8>
 80026ac:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80026b0:	68fa      	ldr	r2, [r7, #12]
 80026b2:	6812      	ldr	r2, [r2, #0]
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d002      	beq.n	80026be <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d105      	bne.n	80026ca <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026c2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d006      	beq.n	80026e4 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026da:	f023 0206 	bic.w	r2, r3, #6
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	661a      	str	r2, [r3, #96]	; 0x60
 80026e2:	e002      	b.n	80026ea <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2200      	movs	r2, #0
 80026e8:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ee:	4a29      	ldr	r2, [pc, #164]	; (8002794 <HAL_ADC_Start_DMA+0x19c>)
 80026f0:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026f6:	4a28      	ldr	r2, [pc, #160]	; (8002798 <HAL_ADC_Start_DMA+0x1a0>)
 80026f8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026fe:	4a27      	ldr	r2, [pc, #156]	; (800279c <HAL_ADC_Start_DMA+0x1a4>)
 8002700:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	221c      	movs	r2, #28
 8002708:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2200      	movs	r2, #0
 800270e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	685a      	ldr	r2, [r3, #4]
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f042 0210 	orr.w	r2, r2, #16
 8002720:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	68da      	ldr	r2, [r3, #12]
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f042 0201 	orr.w	r2, r2, #1
 8002730:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	3340      	adds	r3, #64	; 0x40
 800273c:	4619      	mov	r1, r3
 800273e:	68ba      	ldr	r2, [r7, #8]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	f001 fb37 	bl	8003db4 <HAL_DMA_Start_IT>
 8002746:	4603      	mov	r3, r0
 8002748:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4618      	mov	r0, r3
 8002750:	f7ff fd5b 	bl	800220a <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002754:	e00d      	b.n	8002772 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2200      	movs	r2, #0
 800275a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 800275e:	e008      	b.n	8002772 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2200      	movs	r2, #0
 8002768:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 800276c:	e001      	b.n	8002772 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800276e:	2302      	movs	r3, #2
 8002770:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002772:	7dfb      	ldrb	r3, [r7, #23]
}
 8002774:	4618      	mov	r0, r3
 8002776:	3718      	adds	r7, #24
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}
 800277c:	50000100 	.word	0x50000100
 8002780:	50000300 	.word	0x50000300
 8002784:	50000700 	.word	0x50000700
 8002788:	50000600 	.word	0x50000600
 800278c:	50000500 	.word	0x50000500
 8002790:	50000400 	.word	0x50000400
 8002794:	0800365d 	.word	0x0800365d
 8002798:	08003735 	.word	0x08003735
 800279c:	08003751 	.word	0x08003751

080027a0 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b08a      	sub	sp, #40	; 0x28
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80027a8:	2300      	movs	r3, #0
 80027aa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027c4:	d004      	beq.n	80027d0 <HAL_ADC_IRQHandler+0x30>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a8e      	ldr	r2, [pc, #568]	; (8002a04 <HAL_ADC_IRQHandler+0x264>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d101      	bne.n	80027d4 <HAL_ADC_IRQHandler+0x34>
 80027d0:	4b8d      	ldr	r3, [pc, #564]	; (8002a08 <HAL_ADC_IRQHandler+0x268>)
 80027d2:	e000      	b.n	80027d6 <HAL_ADC_IRQHandler+0x36>
 80027d4:	4b8d      	ldr	r3, [pc, #564]	; (8002a0c <HAL_ADC_IRQHandler+0x26c>)
 80027d6:	4618      	mov	r0, r3
 80027d8:	f7ff fc86 	bl	80020e8 <LL_ADC_GetMultimode>
 80027dc:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	f003 0302 	and.w	r3, r3, #2
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d017      	beq.n	8002818 <HAL_ADC_IRQHandler+0x78>
 80027e8:	69bb      	ldr	r3, [r7, #24]
 80027ea:	f003 0302 	and.w	r3, r3, #2
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d012      	beq.n	8002818 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027f6:	f003 0310 	and.w	r3, r3, #16
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d105      	bne.n	800280a <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002802:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f001 f808 	bl	8003820 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	2202      	movs	r2, #2
 8002816:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	f003 0304 	and.w	r3, r3, #4
 800281e:	2b00      	cmp	r3, #0
 8002820:	d004      	beq.n	800282c <HAL_ADC_IRQHandler+0x8c>
 8002822:	69bb      	ldr	r3, [r7, #24]
 8002824:	f003 0304 	and.w	r3, r3, #4
 8002828:	2b00      	cmp	r3, #0
 800282a:	d10b      	bne.n	8002844 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002832:	2b00      	cmp	r3, #0
 8002834:	f000 8094 	beq.w	8002960 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002838:	69bb      	ldr	r3, [r7, #24]
 800283a:	f003 0308 	and.w	r3, r3, #8
 800283e:	2b00      	cmp	r3, #0
 8002840:	f000 808e 	beq.w	8002960 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002848:	f003 0310 	and.w	r3, r3, #16
 800284c:	2b00      	cmp	r3, #0
 800284e:	d105      	bne.n	800285c <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002854:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4618      	mov	r0, r3
 8002862:	f7ff fb9f 	bl	8001fa4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002866:	4603      	mov	r3, r0
 8002868:	2b00      	cmp	r3, #0
 800286a:	d072      	beq.n	8002952 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a64      	ldr	r2, [pc, #400]	; (8002a04 <HAL_ADC_IRQHandler+0x264>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d009      	beq.n	800288a <HAL_ADC_IRQHandler+0xea>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a65      	ldr	r2, [pc, #404]	; (8002a10 <HAL_ADC_IRQHandler+0x270>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d002      	beq.n	8002886 <HAL_ADC_IRQHandler+0xe6>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	e003      	b.n	800288e <HAL_ADC_IRQHandler+0xee>
 8002886:	4b63      	ldr	r3, [pc, #396]	; (8002a14 <HAL_ADC_IRQHandler+0x274>)
 8002888:	e001      	b.n	800288e <HAL_ADC_IRQHandler+0xee>
 800288a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	6812      	ldr	r2, [r2, #0]
 8002892:	4293      	cmp	r3, r2
 8002894:	d008      	beq.n	80028a8 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d005      	beq.n	80028a8 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	2b05      	cmp	r3, #5
 80028a0:	d002      	beq.n	80028a8 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	2b09      	cmp	r3, #9
 80028a6:	d104      	bne.n	80028b2 <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	68db      	ldr	r3, [r3, #12]
 80028ae:	623b      	str	r3, [r7, #32]
 80028b0:	e014      	b.n	80028dc <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a53      	ldr	r2, [pc, #332]	; (8002a04 <HAL_ADC_IRQHandler+0x264>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d009      	beq.n	80028d0 <HAL_ADC_IRQHandler+0x130>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a53      	ldr	r2, [pc, #332]	; (8002a10 <HAL_ADC_IRQHandler+0x270>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d002      	beq.n	80028cc <HAL_ADC_IRQHandler+0x12c>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	e003      	b.n	80028d4 <HAL_ADC_IRQHandler+0x134>
 80028cc:	4b51      	ldr	r3, [pc, #324]	; (8002a14 <HAL_ADC_IRQHandler+0x274>)
 80028ce:	e001      	b.n	80028d4 <HAL_ADC_IRQHandler+0x134>
 80028d0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80028d4:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	68db      	ldr	r3, [r3, #12]
 80028da:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80028dc:	6a3b      	ldr	r3, [r7, #32]
 80028de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d135      	bne.n	8002952 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 0308 	and.w	r3, r3, #8
 80028f0:	2b08      	cmp	r3, #8
 80028f2:	d12e      	bne.n	8002952 <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4618      	mov	r0, r3
 80028fa:	f7ff fc9a 	bl	8002232 <LL_ADC_REG_IsConversionOngoing>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d11a      	bne.n	800293a <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	685a      	ldr	r2, [r3, #4]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f022 020c 	bic.w	r2, r2, #12
 8002912:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002918:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002924:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002928:	2b00      	cmp	r3, #0
 800292a:	d112      	bne.n	8002952 <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002930:	f043 0201 	orr.w	r2, r3, #1
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	65da      	str	r2, [r3, #92]	; 0x5c
 8002938:	e00b      	b.n	8002952 <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800293e:	f043 0210 	orr.w	r2, r3, #16
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800294a:	f043 0201 	orr.w	r2, r3, #1
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f000 f984 	bl	8002c60 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	220c      	movs	r2, #12
 800295e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	f003 0320 	and.w	r3, r3, #32
 8002966:	2b00      	cmp	r3, #0
 8002968:	d004      	beq.n	8002974 <HAL_ADC_IRQHandler+0x1d4>
 800296a:	69bb      	ldr	r3, [r7, #24]
 800296c:	f003 0320 	and.w	r3, r3, #32
 8002970:	2b00      	cmp	r3, #0
 8002972:	d10b      	bne.n	800298c <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800297a:	2b00      	cmp	r3, #0
 800297c:	f000 80b3 	beq.w	8002ae6 <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002980:	69bb      	ldr	r3, [r7, #24]
 8002982:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002986:	2b00      	cmp	r3, #0
 8002988:	f000 80ad 	beq.w	8002ae6 <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002990:	f003 0310 	and.w	r3, r3, #16
 8002994:	2b00      	cmp	r3, #0
 8002996:	d105      	bne.n	80029a4 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800299c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4618      	mov	r0, r3
 80029aa:	f7ff fb3a 	bl	8002022 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80029ae:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4618      	mov	r0, r3
 80029b6:	f7ff faf5 	bl	8001fa4 <LL_ADC_REG_IsTriggerSourceSWStart>
 80029ba:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a10      	ldr	r2, [pc, #64]	; (8002a04 <HAL_ADC_IRQHandler+0x264>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d009      	beq.n	80029da <HAL_ADC_IRQHandler+0x23a>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a11      	ldr	r2, [pc, #68]	; (8002a10 <HAL_ADC_IRQHandler+0x270>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d002      	beq.n	80029d6 <HAL_ADC_IRQHandler+0x236>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	e003      	b.n	80029de <HAL_ADC_IRQHandler+0x23e>
 80029d6:	4b0f      	ldr	r3, [pc, #60]	; (8002a14 <HAL_ADC_IRQHandler+0x274>)
 80029d8:	e001      	b.n	80029de <HAL_ADC_IRQHandler+0x23e>
 80029da:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	6812      	ldr	r2, [r2, #0]
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d008      	beq.n	80029f8 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d005      	beq.n	80029f8 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	2b06      	cmp	r3, #6
 80029f0:	d002      	beq.n	80029f8 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	2b07      	cmp	r3, #7
 80029f6:	d10f      	bne.n	8002a18 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	68db      	ldr	r3, [r3, #12]
 80029fe:	623b      	str	r3, [r7, #32]
 8002a00:	e01f      	b.n	8002a42 <HAL_ADC_IRQHandler+0x2a2>
 8002a02:	bf00      	nop
 8002a04:	50000100 	.word	0x50000100
 8002a08:	50000300 	.word	0x50000300
 8002a0c:	50000700 	.word	0x50000700
 8002a10:	50000500 	.word	0x50000500
 8002a14:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a8b      	ldr	r2, [pc, #556]	; (8002c4c <HAL_ADC_IRQHandler+0x4ac>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d009      	beq.n	8002a36 <HAL_ADC_IRQHandler+0x296>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a8a      	ldr	r2, [pc, #552]	; (8002c50 <HAL_ADC_IRQHandler+0x4b0>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d002      	beq.n	8002a32 <HAL_ADC_IRQHandler+0x292>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	e003      	b.n	8002a3a <HAL_ADC_IRQHandler+0x29a>
 8002a32:	4b88      	ldr	r3, [pc, #544]	; (8002c54 <HAL_ADC_IRQHandler+0x4b4>)
 8002a34:	e001      	b.n	8002a3a <HAL_ADC_IRQHandler+0x29a>
 8002a36:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002a3a:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d047      	beq.n	8002ad8 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002a48:	6a3b      	ldr	r3, [r7, #32]
 8002a4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d007      	beq.n	8002a62 <HAL_ADC_IRQHandler+0x2c2>
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d03f      	beq.n	8002ad8 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002a58:	6a3b      	ldr	r3, [r7, #32]
 8002a5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d13a      	bne.n	8002ad8 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a6c:	2b40      	cmp	r3, #64	; 0x40
 8002a6e:	d133      	bne.n	8002ad8 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002a70:	6a3b      	ldr	r3, [r7, #32]
 8002a72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d12e      	bne.n	8002ad8 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f7ff fbea 	bl	8002258 <LL_ADC_INJ_IsConversionOngoing>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d11a      	bne.n	8002ac0 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	685a      	ldr	r2, [r3, #4]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002a98:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a9e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d112      	bne.n	8002ad8 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ab6:	f043 0201 	orr.w	r2, r3, #1
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	65da      	str	r2, [r3, #92]	; 0x5c
 8002abe:	e00b      	b.n	8002ad8 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ac4:	f043 0210 	orr.w	r2, r3, #16
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ad0:	f043 0201 	orr.w	r2, r3, #1
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	f000 fe79 	bl	80037d0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	2260      	movs	r2, #96	; 0x60
 8002ae4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d011      	beq.n	8002b14 <HAL_ADC_IRQHandler+0x374>
 8002af0:	69bb      	ldr	r3, [r7, #24]
 8002af2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d00c      	beq.n	8002b14 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002afe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f000 f8be 	bl	8002c88 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	2280      	movs	r2, #128	; 0x80
 8002b12:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d012      	beq.n	8002b44 <HAL_ADC_IRQHandler+0x3a4>
 8002b1e:	69bb      	ldr	r3, [r7, #24]
 8002b20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d00d      	beq.n	8002b44 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b2c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	f000 fe5f 	bl	80037f8 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b42:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d012      	beq.n	8002b74 <HAL_ADC_IRQHandler+0x3d4>
 8002b4e:	69bb      	ldr	r3, [r7, #24]
 8002b50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d00d      	beq.n	8002b74 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b5c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	f000 fe51 	bl	800380c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b72:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	f003 0310 	and.w	r3, r3, #16
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d043      	beq.n	8002c06 <HAL_ADC_IRQHandler+0x466>
 8002b7e:	69bb      	ldr	r3, [r7, #24]
 8002b80:	f003 0310 	and.w	r3, r3, #16
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d03e      	beq.n	8002c06 <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d102      	bne.n	8002b96 <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8002b90:	2301      	movs	r3, #1
 8002b92:	627b      	str	r3, [r7, #36]	; 0x24
 8002b94:	e021      	b.n	8002bda <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d015      	beq.n	8002bc8 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ba4:	d004      	beq.n	8002bb0 <HAL_ADC_IRQHandler+0x410>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a28      	ldr	r2, [pc, #160]	; (8002c4c <HAL_ADC_IRQHandler+0x4ac>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d101      	bne.n	8002bb4 <HAL_ADC_IRQHandler+0x414>
 8002bb0:	4b29      	ldr	r3, [pc, #164]	; (8002c58 <HAL_ADC_IRQHandler+0x4b8>)
 8002bb2:	e000      	b.n	8002bb6 <HAL_ADC_IRQHandler+0x416>
 8002bb4:	4b29      	ldr	r3, [pc, #164]	; (8002c5c <HAL_ADC_IRQHandler+0x4bc>)
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f7ff faa4 	bl	8002104 <LL_ADC_GetMultiDMATransfer>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d00b      	beq.n	8002bda <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	627b      	str	r3, [r7, #36]	; 0x24
 8002bc6:	e008      	b.n	8002bda <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	68db      	ldr	r3, [r3, #12]
 8002bce:	f003 0301 	and.w	r3, r3, #1
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d001      	beq.n	8002bda <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d10e      	bne.n	8002bfe <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002be4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bf0:	f043 0202 	orr.w	r2, r3, #2
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f000 f84f 	bl	8002c9c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	2210      	movs	r2, #16
 8002c04:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d018      	beq.n	8002c42 <HAL_ADC_IRQHandler+0x4a2>
 8002c10:	69bb      	ldr	r3, [r7, #24]
 8002c12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d013      	beq.n	8002c42 <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c1e:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c2a:	f043 0208 	orr.w	r2, r3, #8
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c3a:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f000 fdd1 	bl	80037e4 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002c42:	bf00      	nop
 8002c44:	3728      	adds	r7, #40	; 0x28
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	50000100 	.word	0x50000100
 8002c50:	50000500 	.word	0x50000500
 8002c54:	50000400 	.word	0x50000400
 8002c58:	50000300 	.word	0x50000300
 8002c5c:	50000700 	.word	0x50000700

08002c60 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002c68:	bf00      	nop
 8002c6a:	370c      	adds	r7, #12
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr

08002c74 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b083      	sub	sp, #12
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002c7c:	bf00      	nop
 8002c7e:	370c      	adds	r7, #12
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr

08002c88 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002c90:	bf00      	nop
 8002c92:	370c      	adds	r7, #12
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr

08002c9c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b083      	sub	sp, #12
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002ca4:	bf00      	nop
 8002ca6:	370c      	adds	r7, #12
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr

08002cb0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b0b6      	sub	sp, #216	; 0xd8
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
 8002cb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d102      	bne.n	8002cd4 <HAL_ADC_ConfigChannel+0x24>
 8002cce:	2302      	movs	r3, #2
 8002cd0:	f000 bc13 	b.w	80034fa <HAL_ADC_ConfigChannel+0x84a>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f7ff faa6 	bl	8002232 <LL_ADC_REG_IsConversionOngoing>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	f040 83f3 	bne.w	80034d4 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6818      	ldr	r0, [r3, #0]
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	6859      	ldr	r1, [r3, #4]
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	f7ff f965 	bl	8001fca <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4618      	mov	r0, r3
 8002d06:	f7ff fa94 	bl	8002232 <LL_ADC_REG_IsConversionOngoing>
 8002d0a:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4618      	mov	r0, r3
 8002d14:	f7ff faa0 	bl	8002258 <LL_ADC_INJ_IsConversionOngoing>
 8002d18:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002d1c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	f040 81d9 	bne.w	80030d8 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002d26:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	f040 81d4 	bne.w	80030d8 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002d38:	d10f      	bne.n	8002d5a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6818      	ldr	r0, [r3, #0]
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	2200      	movs	r2, #0
 8002d44:	4619      	mov	r1, r3
 8002d46:	f7ff f97f 	bl	8002048 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002d52:	4618      	mov	r0, r3
 8002d54:	f7ff f913 	bl	8001f7e <LL_ADC_SetSamplingTimeCommonConfig>
 8002d58:	e00e      	b.n	8002d78 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6818      	ldr	r0, [r3, #0]
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	6819      	ldr	r1, [r3, #0]
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	461a      	mov	r2, r3
 8002d68:	f7ff f96e 	bl	8002048 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	2100      	movs	r1, #0
 8002d72:	4618      	mov	r0, r3
 8002d74:	f7ff f903 	bl	8001f7e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	695a      	ldr	r2, [r3, #20]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	68db      	ldr	r3, [r3, #12]
 8002d82:	08db      	lsrs	r3, r3, #3
 8002d84:	f003 0303 	and.w	r3, r3, #3
 8002d88:	005b      	lsls	r3, r3, #1
 8002d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	691b      	ldr	r3, [r3, #16]
 8002d96:	2b04      	cmp	r3, #4
 8002d98:	d022      	beq.n	8002de0 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6818      	ldr	r0, [r3, #0]
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	6919      	ldr	r1, [r3, #16]
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002daa:	f7ff f85d 	bl	8001e68 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6818      	ldr	r0, [r3, #0]
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	6919      	ldr	r1, [r3, #16]
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	699b      	ldr	r3, [r3, #24]
 8002dba:	461a      	mov	r2, r3
 8002dbc:	f7ff f8a9 	bl	8001f12 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6818      	ldr	r0, [r3, #0]
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d102      	bne.n	8002dd6 <HAL_ADC_ConfigChannel+0x126>
 8002dd0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002dd4:	e000      	b.n	8002dd8 <HAL_ADC_ConfigChannel+0x128>
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	461a      	mov	r2, r3
 8002dda:	f7ff f8b5 	bl	8001f48 <LL_ADC_SetOffsetSaturation>
 8002dde:	e17b      	b.n	80030d8 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	2100      	movs	r1, #0
 8002de6:	4618      	mov	r0, r3
 8002de8:	f7ff f862 	bl	8001eb0 <LL_ADC_GetOffsetChannel>
 8002dec:	4603      	mov	r3, r0
 8002dee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d10a      	bne.n	8002e0c <HAL_ADC_ConfigChannel+0x15c>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	2100      	movs	r1, #0
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f7ff f857 	bl	8001eb0 <LL_ADC_GetOffsetChannel>
 8002e02:	4603      	mov	r3, r0
 8002e04:	0e9b      	lsrs	r3, r3, #26
 8002e06:	f003 021f 	and.w	r2, r3, #31
 8002e0a:	e01e      	b.n	8002e4a <HAL_ADC_ConfigChannel+0x19a>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	2100      	movs	r1, #0
 8002e12:	4618      	mov	r0, r3
 8002e14:	f7ff f84c 	bl	8001eb0 <LL_ADC_GetOffsetChannel>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e1e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002e22:	fa93 f3a3 	rbit	r3, r3
 8002e26:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002e2a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002e2e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002e32:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d101      	bne.n	8002e3e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002e3a:	2320      	movs	r3, #32
 8002e3c:	e004      	b.n	8002e48 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002e3e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002e42:	fab3 f383 	clz	r3, r3
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d105      	bne.n	8002e62 <HAL_ADC_ConfigChannel+0x1b2>
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	0e9b      	lsrs	r3, r3, #26
 8002e5c:	f003 031f 	and.w	r3, r3, #31
 8002e60:	e018      	b.n	8002e94 <HAL_ADC_ConfigChannel+0x1e4>
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e6a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002e6e:	fa93 f3a3 	rbit	r3, r3
 8002e72:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002e76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002e7a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002e7e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d101      	bne.n	8002e8a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002e86:	2320      	movs	r3, #32
 8002e88:	e004      	b.n	8002e94 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002e8a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002e8e:	fab3 f383 	clz	r3, r3
 8002e92:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d106      	bne.n	8002ea6 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	2100      	movs	r1, #0
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f7ff f81b 	bl	8001edc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	2101      	movs	r1, #1
 8002eac:	4618      	mov	r0, r3
 8002eae:	f7fe ffff 	bl	8001eb0 <LL_ADC_GetOffsetChannel>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d10a      	bne.n	8002ed2 <HAL_ADC_ConfigChannel+0x222>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	2101      	movs	r1, #1
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f7fe fff4 	bl	8001eb0 <LL_ADC_GetOffsetChannel>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	0e9b      	lsrs	r3, r3, #26
 8002ecc:	f003 021f 	and.w	r2, r3, #31
 8002ed0:	e01e      	b.n	8002f10 <HAL_ADC_ConfigChannel+0x260>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	2101      	movs	r1, #1
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f7fe ffe9 	bl	8001eb0 <LL_ADC_GetOffsetChannel>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002ee8:	fa93 f3a3 	rbit	r3, r3
 8002eec:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002ef0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002ef4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002ef8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d101      	bne.n	8002f04 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002f00:	2320      	movs	r3, #32
 8002f02:	e004      	b.n	8002f0e <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002f04:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002f08:	fab3 f383 	clz	r3, r3
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d105      	bne.n	8002f28 <HAL_ADC_ConfigChannel+0x278>
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	0e9b      	lsrs	r3, r3, #26
 8002f22:	f003 031f 	and.w	r3, r3, #31
 8002f26:	e018      	b.n	8002f5a <HAL_ADC_ConfigChannel+0x2aa>
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f30:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002f34:	fa93 f3a3 	rbit	r3, r3
 8002f38:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002f3c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002f40:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002f44:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d101      	bne.n	8002f50 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002f4c:	2320      	movs	r3, #32
 8002f4e:	e004      	b.n	8002f5a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002f50:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002f54:	fab3 f383 	clz	r3, r3
 8002f58:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d106      	bne.n	8002f6c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	2200      	movs	r2, #0
 8002f64:	2101      	movs	r1, #1
 8002f66:	4618      	mov	r0, r3
 8002f68:	f7fe ffb8 	bl	8001edc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	2102      	movs	r1, #2
 8002f72:	4618      	mov	r0, r3
 8002f74:	f7fe ff9c 	bl	8001eb0 <LL_ADC_GetOffsetChannel>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d10a      	bne.n	8002f98 <HAL_ADC_ConfigChannel+0x2e8>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	2102      	movs	r1, #2
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f7fe ff91 	bl	8001eb0 <LL_ADC_GetOffsetChannel>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	0e9b      	lsrs	r3, r3, #26
 8002f92:	f003 021f 	and.w	r2, r3, #31
 8002f96:	e01e      	b.n	8002fd6 <HAL_ADC_ConfigChannel+0x326>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	2102      	movs	r1, #2
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f7fe ff86 	bl	8001eb0 <LL_ADC_GetOffsetChannel>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002faa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002fae:	fa93 f3a3 	rbit	r3, r3
 8002fb2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002fb6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002fba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002fbe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d101      	bne.n	8002fca <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002fc6:	2320      	movs	r3, #32
 8002fc8:	e004      	b.n	8002fd4 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002fca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002fce:	fab3 f383 	clz	r3, r3
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d105      	bne.n	8002fee <HAL_ADC_ConfigChannel+0x33e>
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	0e9b      	lsrs	r3, r3, #26
 8002fe8:	f003 031f 	and.w	r3, r3, #31
 8002fec:	e016      	b.n	800301c <HAL_ADC_ConfigChannel+0x36c>
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002ffa:	fa93 f3a3 	rbit	r3, r3
 8002ffe:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003000:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003002:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003006:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800300a:	2b00      	cmp	r3, #0
 800300c:	d101      	bne.n	8003012 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800300e:	2320      	movs	r3, #32
 8003010:	e004      	b.n	800301c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8003012:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003016:	fab3 f383 	clz	r3, r3
 800301a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800301c:	429a      	cmp	r2, r3
 800301e:	d106      	bne.n	800302e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	2200      	movs	r2, #0
 8003026:	2102      	movs	r1, #2
 8003028:	4618      	mov	r0, r3
 800302a:	f7fe ff57 	bl	8001edc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	2103      	movs	r1, #3
 8003034:	4618      	mov	r0, r3
 8003036:	f7fe ff3b 	bl	8001eb0 <LL_ADC_GetOffsetChannel>
 800303a:	4603      	mov	r3, r0
 800303c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003040:	2b00      	cmp	r3, #0
 8003042:	d10a      	bne.n	800305a <HAL_ADC_ConfigChannel+0x3aa>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	2103      	movs	r1, #3
 800304a:	4618      	mov	r0, r3
 800304c:	f7fe ff30 	bl	8001eb0 <LL_ADC_GetOffsetChannel>
 8003050:	4603      	mov	r3, r0
 8003052:	0e9b      	lsrs	r3, r3, #26
 8003054:	f003 021f 	and.w	r2, r3, #31
 8003058:	e017      	b.n	800308a <HAL_ADC_ConfigChannel+0x3da>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	2103      	movs	r1, #3
 8003060:	4618      	mov	r0, r3
 8003062:	f7fe ff25 	bl	8001eb0 <LL_ADC_GetOffsetChannel>
 8003066:	4603      	mov	r3, r0
 8003068:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800306a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800306c:	fa93 f3a3 	rbit	r3, r3
 8003070:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003072:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003074:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003076:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003078:	2b00      	cmp	r3, #0
 800307a:	d101      	bne.n	8003080 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 800307c:	2320      	movs	r3, #32
 800307e:	e003      	b.n	8003088 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003080:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003082:	fab3 f383 	clz	r3, r3
 8003086:	b2db      	uxtb	r3, r3
 8003088:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003092:	2b00      	cmp	r3, #0
 8003094:	d105      	bne.n	80030a2 <HAL_ADC_ConfigChannel+0x3f2>
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	0e9b      	lsrs	r3, r3, #26
 800309c:	f003 031f 	and.w	r3, r3, #31
 80030a0:	e011      	b.n	80030c6 <HAL_ADC_ConfigChannel+0x416>
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80030aa:	fa93 f3a3 	rbit	r3, r3
 80030ae:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80030b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80030b2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80030b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d101      	bne.n	80030be <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80030ba:	2320      	movs	r3, #32
 80030bc:	e003      	b.n	80030c6 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80030be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030c0:	fab3 f383 	clz	r3, r3
 80030c4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d106      	bne.n	80030d8 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	2200      	movs	r2, #0
 80030d0:	2103      	movs	r1, #3
 80030d2:	4618      	mov	r0, r3
 80030d4:	f7fe ff02 	bl	8001edc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4618      	mov	r0, r3
 80030de:	f7ff f881 	bl	80021e4 <LL_ADC_IsEnabled>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	f040 813d 	bne.w	8003364 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6818      	ldr	r0, [r3, #0]
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	6819      	ldr	r1, [r3, #0]
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	461a      	mov	r2, r3
 80030f8:	f7fe ffd2 	bl	80020a0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	4aa2      	ldr	r2, [pc, #648]	; (800338c <HAL_ADC_ConfigChannel+0x6dc>)
 8003102:	4293      	cmp	r3, r2
 8003104:	f040 812e 	bne.w	8003364 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003114:	2b00      	cmp	r3, #0
 8003116:	d10b      	bne.n	8003130 <HAL_ADC_ConfigChannel+0x480>
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	0e9b      	lsrs	r3, r3, #26
 800311e:	3301      	adds	r3, #1
 8003120:	f003 031f 	and.w	r3, r3, #31
 8003124:	2b09      	cmp	r3, #9
 8003126:	bf94      	ite	ls
 8003128:	2301      	movls	r3, #1
 800312a:	2300      	movhi	r3, #0
 800312c:	b2db      	uxtb	r3, r3
 800312e:	e019      	b.n	8003164 <HAL_ADC_ConfigChannel+0x4b4>
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003136:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003138:	fa93 f3a3 	rbit	r3, r3
 800313c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800313e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003140:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003142:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003144:	2b00      	cmp	r3, #0
 8003146:	d101      	bne.n	800314c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003148:	2320      	movs	r3, #32
 800314a:	e003      	b.n	8003154 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 800314c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800314e:	fab3 f383 	clz	r3, r3
 8003152:	b2db      	uxtb	r3, r3
 8003154:	3301      	adds	r3, #1
 8003156:	f003 031f 	and.w	r3, r3, #31
 800315a:	2b09      	cmp	r3, #9
 800315c:	bf94      	ite	ls
 800315e:	2301      	movls	r3, #1
 8003160:	2300      	movhi	r3, #0
 8003162:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003164:	2b00      	cmp	r3, #0
 8003166:	d079      	beq.n	800325c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003170:	2b00      	cmp	r3, #0
 8003172:	d107      	bne.n	8003184 <HAL_ADC_ConfigChannel+0x4d4>
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	0e9b      	lsrs	r3, r3, #26
 800317a:	3301      	adds	r3, #1
 800317c:	069b      	lsls	r3, r3, #26
 800317e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003182:	e015      	b.n	80031b0 <HAL_ADC_ConfigChannel+0x500>
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800318a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800318c:	fa93 f3a3 	rbit	r3, r3
 8003190:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003192:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003194:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003196:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003198:	2b00      	cmp	r3, #0
 800319a:	d101      	bne.n	80031a0 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 800319c:	2320      	movs	r3, #32
 800319e:	e003      	b.n	80031a8 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80031a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031a2:	fab3 f383 	clz	r3, r3
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	3301      	adds	r3, #1
 80031aa:	069b      	lsls	r3, r3, #26
 80031ac:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d109      	bne.n	80031d0 <HAL_ADC_ConfigChannel+0x520>
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	0e9b      	lsrs	r3, r3, #26
 80031c2:	3301      	adds	r3, #1
 80031c4:	f003 031f 	and.w	r3, r3, #31
 80031c8:	2101      	movs	r1, #1
 80031ca:	fa01 f303 	lsl.w	r3, r1, r3
 80031ce:	e017      	b.n	8003200 <HAL_ADC_ConfigChannel+0x550>
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031d8:	fa93 f3a3 	rbit	r3, r3
 80031dc:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80031de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031e0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80031e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d101      	bne.n	80031ec <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80031e8:	2320      	movs	r3, #32
 80031ea:	e003      	b.n	80031f4 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80031ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031ee:	fab3 f383 	clz	r3, r3
 80031f2:	b2db      	uxtb	r3, r3
 80031f4:	3301      	adds	r3, #1
 80031f6:	f003 031f 	and.w	r3, r3, #31
 80031fa:	2101      	movs	r1, #1
 80031fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003200:	ea42 0103 	orr.w	r1, r2, r3
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800320c:	2b00      	cmp	r3, #0
 800320e:	d10a      	bne.n	8003226 <HAL_ADC_ConfigChannel+0x576>
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	0e9b      	lsrs	r3, r3, #26
 8003216:	3301      	adds	r3, #1
 8003218:	f003 021f 	and.w	r2, r3, #31
 800321c:	4613      	mov	r3, r2
 800321e:	005b      	lsls	r3, r3, #1
 8003220:	4413      	add	r3, r2
 8003222:	051b      	lsls	r3, r3, #20
 8003224:	e018      	b.n	8003258 <HAL_ADC_ConfigChannel+0x5a8>
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800322c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800322e:	fa93 f3a3 	rbit	r3, r3
 8003232:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003234:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003236:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003238:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800323a:	2b00      	cmp	r3, #0
 800323c:	d101      	bne.n	8003242 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800323e:	2320      	movs	r3, #32
 8003240:	e003      	b.n	800324a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8003242:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003244:	fab3 f383 	clz	r3, r3
 8003248:	b2db      	uxtb	r3, r3
 800324a:	3301      	adds	r3, #1
 800324c:	f003 021f 	and.w	r2, r3, #31
 8003250:	4613      	mov	r3, r2
 8003252:	005b      	lsls	r3, r3, #1
 8003254:	4413      	add	r3, r2
 8003256:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003258:	430b      	orrs	r3, r1
 800325a:	e07e      	b.n	800335a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003264:	2b00      	cmp	r3, #0
 8003266:	d107      	bne.n	8003278 <HAL_ADC_ConfigChannel+0x5c8>
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	0e9b      	lsrs	r3, r3, #26
 800326e:	3301      	adds	r3, #1
 8003270:	069b      	lsls	r3, r3, #26
 8003272:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003276:	e015      	b.n	80032a4 <HAL_ADC_ConfigChannel+0x5f4>
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800327e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003280:	fa93 f3a3 	rbit	r3, r3
 8003284:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003288:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800328a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800328c:	2b00      	cmp	r3, #0
 800328e:	d101      	bne.n	8003294 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003290:	2320      	movs	r3, #32
 8003292:	e003      	b.n	800329c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003296:	fab3 f383 	clz	r3, r3
 800329a:	b2db      	uxtb	r3, r3
 800329c:	3301      	adds	r3, #1
 800329e:	069b      	lsls	r3, r3, #26
 80032a0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d109      	bne.n	80032c4 <HAL_ADC_ConfigChannel+0x614>
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	0e9b      	lsrs	r3, r3, #26
 80032b6:	3301      	adds	r3, #1
 80032b8:	f003 031f 	and.w	r3, r3, #31
 80032bc:	2101      	movs	r1, #1
 80032be:	fa01 f303 	lsl.w	r3, r1, r3
 80032c2:	e017      	b.n	80032f4 <HAL_ADC_ConfigChannel+0x644>
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ca:	6a3b      	ldr	r3, [r7, #32]
 80032cc:	fa93 f3a3 	rbit	r3, r3
 80032d0:	61fb      	str	r3, [r7, #28]
  return result;
 80032d2:	69fb      	ldr	r3, [r7, #28]
 80032d4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80032d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d101      	bne.n	80032e0 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80032dc:	2320      	movs	r3, #32
 80032de:	e003      	b.n	80032e8 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80032e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e2:	fab3 f383 	clz	r3, r3
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	3301      	adds	r3, #1
 80032ea:	f003 031f 	and.w	r3, r3, #31
 80032ee:	2101      	movs	r1, #1
 80032f0:	fa01 f303 	lsl.w	r3, r1, r3
 80032f4:	ea42 0103 	orr.w	r1, r2, r3
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003300:	2b00      	cmp	r3, #0
 8003302:	d10d      	bne.n	8003320 <HAL_ADC_ConfigChannel+0x670>
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	0e9b      	lsrs	r3, r3, #26
 800330a:	3301      	adds	r3, #1
 800330c:	f003 021f 	and.w	r2, r3, #31
 8003310:	4613      	mov	r3, r2
 8003312:	005b      	lsls	r3, r3, #1
 8003314:	4413      	add	r3, r2
 8003316:	3b1e      	subs	r3, #30
 8003318:	051b      	lsls	r3, r3, #20
 800331a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800331e:	e01b      	b.n	8003358 <HAL_ADC_ConfigChannel+0x6a8>
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	fa93 f3a3 	rbit	r3, r3
 800332c:	613b      	str	r3, [r7, #16]
  return result;
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003332:	69bb      	ldr	r3, [r7, #24]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d101      	bne.n	800333c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003338:	2320      	movs	r3, #32
 800333a:	e003      	b.n	8003344 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 800333c:	69bb      	ldr	r3, [r7, #24]
 800333e:	fab3 f383 	clz	r3, r3
 8003342:	b2db      	uxtb	r3, r3
 8003344:	3301      	adds	r3, #1
 8003346:	f003 021f 	and.w	r2, r3, #31
 800334a:	4613      	mov	r3, r2
 800334c:	005b      	lsls	r3, r3, #1
 800334e:	4413      	add	r3, r2
 8003350:	3b1e      	subs	r3, #30
 8003352:	051b      	lsls	r3, r3, #20
 8003354:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003358:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800335a:	683a      	ldr	r2, [r7, #0]
 800335c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800335e:	4619      	mov	r1, r3
 8003360:	f7fe fe72 	bl	8002048 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	4b09      	ldr	r3, [pc, #36]	; (8003390 <HAL_ADC_ConfigChannel+0x6e0>)
 800336a:	4013      	ands	r3, r2
 800336c:	2b00      	cmp	r3, #0
 800336e:	f000 80be 	beq.w	80034ee <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800337a:	d004      	beq.n	8003386 <HAL_ADC_ConfigChannel+0x6d6>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a04      	ldr	r2, [pc, #16]	; (8003394 <HAL_ADC_ConfigChannel+0x6e4>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d10a      	bne.n	800339c <HAL_ADC_ConfigChannel+0x6ec>
 8003386:	4b04      	ldr	r3, [pc, #16]	; (8003398 <HAL_ADC_ConfigChannel+0x6e8>)
 8003388:	e009      	b.n	800339e <HAL_ADC_ConfigChannel+0x6ee>
 800338a:	bf00      	nop
 800338c:	407f0000 	.word	0x407f0000
 8003390:	80080000 	.word	0x80080000
 8003394:	50000100 	.word	0x50000100
 8003398:	50000300 	.word	0x50000300
 800339c:	4b59      	ldr	r3, [pc, #356]	; (8003504 <HAL_ADC_ConfigChannel+0x854>)
 800339e:	4618      	mov	r0, r3
 80033a0:	f7fe fd54 	bl	8001e4c <LL_ADC_GetCommonPathInternalCh>
 80033a4:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a56      	ldr	r2, [pc, #344]	; (8003508 <HAL_ADC_ConfigChannel+0x858>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d004      	beq.n	80033bc <HAL_ADC_ConfigChannel+0x70c>
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a55      	ldr	r2, [pc, #340]	; (800350c <HAL_ADC_ConfigChannel+0x85c>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d13a      	bne.n	8003432 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80033bc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80033c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d134      	bne.n	8003432 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80033d0:	d005      	beq.n	80033de <HAL_ADC_ConfigChannel+0x72e>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a4e      	ldr	r2, [pc, #312]	; (8003510 <HAL_ADC_ConfigChannel+0x860>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	f040 8085 	bne.w	80034e8 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80033e6:	d004      	beq.n	80033f2 <HAL_ADC_ConfigChannel+0x742>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a49      	ldr	r2, [pc, #292]	; (8003514 <HAL_ADC_ConfigChannel+0x864>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d101      	bne.n	80033f6 <HAL_ADC_ConfigChannel+0x746>
 80033f2:	4a49      	ldr	r2, [pc, #292]	; (8003518 <HAL_ADC_ConfigChannel+0x868>)
 80033f4:	e000      	b.n	80033f8 <HAL_ADC_ConfigChannel+0x748>
 80033f6:	4a43      	ldr	r2, [pc, #268]	; (8003504 <HAL_ADC_ConfigChannel+0x854>)
 80033f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80033fc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003400:	4619      	mov	r1, r3
 8003402:	4610      	mov	r0, r2
 8003404:	f7fe fd0f 	bl	8001e26 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003408:	4b44      	ldr	r3, [pc, #272]	; (800351c <HAL_ADC_ConfigChannel+0x86c>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	099b      	lsrs	r3, r3, #6
 800340e:	4a44      	ldr	r2, [pc, #272]	; (8003520 <HAL_ADC_ConfigChannel+0x870>)
 8003410:	fba2 2303 	umull	r2, r3, r2, r3
 8003414:	099b      	lsrs	r3, r3, #6
 8003416:	1c5a      	adds	r2, r3, #1
 8003418:	4613      	mov	r3, r2
 800341a:	005b      	lsls	r3, r3, #1
 800341c:	4413      	add	r3, r2
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003422:	e002      	b.n	800342a <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	3b01      	subs	r3, #1
 8003428:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d1f9      	bne.n	8003424 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003430:	e05a      	b.n	80034e8 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a3b      	ldr	r2, [pc, #236]	; (8003524 <HAL_ADC_ConfigChannel+0x874>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d125      	bne.n	8003488 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800343c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003440:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003444:	2b00      	cmp	r3, #0
 8003446:	d11f      	bne.n	8003488 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a31      	ldr	r2, [pc, #196]	; (8003514 <HAL_ADC_ConfigChannel+0x864>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d104      	bne.n	800345c <HAL_ADC_ConfigChannel+0x7ac>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a34      	ldr	r2, [pc, #208]	; (8003528 <HAL_ADC_ConfigChannel+0x878>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d047      	beq.n	80034ec <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003464:	d004      	beq.n	8003470 <HAL_ADC_ConfigChannel+0x7c0>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a2a      	ldr	r2, [pc, #168]	; (8003514 <HAL_ADC_ConfigChannel+0x864>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d101      	bne.n	8003474 <HAL_ADC_ConfigChannel+0x7c4>
 8003470:	4a29      	ldr	r2, [pc, #164]	; (8003518 <HAL_ADC_ConfigChannel+0x868>)
 8003472:	e000      	b.n	8003476 <HAL_ADC_ConfigChannel+0x7c6>
 8003474:	4a23      	ldr	r2, [pc, #140]	; (8003504 <HAL_ADC_ConfigChannel+0x854>)
 8003476:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800347a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800347e:	4619      	mov	r1, r3
 8003480:	4610      	mov	r0, r2
 8003482:	f7fe fcd0 	bl	8001e26 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003486:	e031      	b.n	80034ec <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a27      	ldr	r2, [pc, #156]	; (800352c <HAL_ADC_ConfigChannel+0x87c>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d12d      	bne.n	80034ee <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003492:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003496:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800349a:	2b00      	cmp	r3, #0
 800349c:	d127      	bne.n	80034ee <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a1c      	ldr	r2, [pc, #112]	; (8003514 <HAL_ADC_ConfigChannel+0x864>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d022      	beq.n	80034ee <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80034b0:	d004      	beq.n	80034bc <HAL_ADC_ConfigChannel+0x80c>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a17      	ldr	r2, [pc, #92]	; (8003514 <HAL_ADC_ConfigChannel+0x864>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d101      	bne.n	80034c0 <HAL_ADC_ConfigChannel+0x810>
 80034bc:	4a16      	ldr	r2, [pc, #88]	; (8003518 <HAL_ADC_ConfigChannel+0x868>)
 80034be:	e000      	b.n	80034c2 <HAL_ADC_ConfigChannel+0x812>
 80034c0:	4a10      	ldr	r2, [pc, #64]	; (8003504 <HAL_ADC_ConfigChannel+0x854>)
 80034c2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80034c6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80034ca:	4619      	mov	r1, r3
 80034cc:	4610      	mov	r0, r2
 80034ce:	f7fe fcaa 	bl	8001e26 <LL_ADC_SetCommonPathInternalCh>
 80034d2:	e00c      	b.n	80034ee <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034d8:	f043 0220 	orr.w	r2, r3, #32
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80034e6:	e002      	b.n	80034ee <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80034e8:	bf00      	nop
 80034ea:	e000      	b.n	80034ee <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80034ec:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2200      	movs	r2, #0
 80034f2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80034f6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	37d8      	adds	r7, #216	; 0xd8
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	50000700 	.word	0x50000700
 8003508:	c3210000 	.word	0xc3210000
 800350c:	90c00010 	.word	0x90c00010
 8003510:	50000600 	.word	0x50000600
 8003514:	50000100 	.word	0x50000100
 8003518:	50000300 	.word	0x50000300
 800351c:	20000020 	.word	0x20000020
 8003520:	053e2d63 	.word	0x053e2d63
 8003524:	c7520000 	.word	0xc7520000
 8003528:	50000500 	.word	0x50000500
 800352c:	cb840000 	.word	0xcb840000

08003530 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b084      	sub	sp, #16
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003538:	2300      	movs	r3, #0
 800353a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4618      	mov	r0, r3
 8003542:	f7fe fe4f 	bl	80021e4 <LL_ADC_IsEnabled>
 8003546:	4603      	mov	r3, r0
 8003548:	2b00      	cmp	r3, #0
 800354a:	d176      	bne.n	800363a <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	689a      	ldr	r2, [r3, #8]
 8003552:	4b3c      	ldr	r3, [pc, #240]	; (8003644 <ADC_Enable+0x114>)
 8003554:	4013      	ands	r3, r2
 8003556:	2b00      	cmp	r3, #0
 8003558:	d00d      	beq.n	8003576 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800355e:	f043 0210 	orr.w	r2, r3, #16
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800356a:	f043 0201 	orr.w	r2, r3, #1
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e062      	b.n	800363c <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4618      	mov	r0, r3
 800357c:	f7fe fe1e 	bl	80021bc <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003588:	d004      	beq.n	8003594 <ADC_Enable+0x64>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a2e      	ldr	r2, [pc, #184]	; (8003648 <ADC_Enable+0x118>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d101      	bne.n	8003598 <ADC_Enable+0x68>
 8003594:	4b2d      	ldr	r3, [pc, #180]	; (800364c <ADC_Enable+0x11c>)
 8003596:	e000      	b.n	800359a <ADC_Enable+0x6a>
 8003598:	4b2d      	ldr	r3, [pc, #180]	; (8003650 <ADC_Enable+0x120>)
 800359a:	4618      	mov	r0, r3
 800359c:	f7fe fc56 	bl	8001e4c <LL_ADC_GetCommonPathInternalCh>
 80035a0:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80035a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d013      	beq.n	80035d2 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80035aa:	4b2a      	ldr	r3, [pc, #168]	; (8003654 <ADC_Enable+0x124>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	099b      	lsrs	r3, r3, #6
 80035b0:	4a29      	ldr	r2, [pc, #164]	; (8003658 <ADC_Enable+0x128>)
 80035b2:	fba2 2303 	umull	r2, r3, r2, r3
 80035b6:	099b      	lsrs	r3, r3, #6
 80035b8:	1c5a      	adds	r2, r3, #1
 80035ba:	4613      	mov	r3, r2
 80035bc:	005b      	lsls	r3, r3, #1
 80035be:	4413      	add	r3, r2
 80035c0:	009b      	lsls	r3, r3, #2
 80035c2:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80035c4:	e002      	b.n	80035cc <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	3b01      	subs	r3, #1
 80035ca:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d1f9      	bne.n	80035c6 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80035d2:	f7fe fc09 	bl	8001de8 <HAL_GetTick>
 80035d6:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80035d8:	e028      	b.n	800362c <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4618      	mov	r0, r3
 80035e0:	f7fe fe00 	bl	80021e4 <LL_ADC_IsEnabled>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d104      	bne.n	80035f4 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4618      	mov	r0, r3
 80035f0:	f7fe fde4 	bl	80021bc <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80035f4:	f7fe fbf8 	bl	8001de8 <HAL_GetTick>
 80035f8:	4602      	mov	r2, r0
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	2b02      	cmp	r3, #2
 8003600:	d914      	bls.n	800362c <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 0301 	and.w	r3, r3, #1
 800360c:	2b01      	cmp	r3, #1
 800360e:	d00d      	beq.n	800362c <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003614:	f043 0210 	orr.w	r2, r3, #16
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003620:	f043 0201 	orr.w	r2, r3, #1
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	e007      	b.n	800363c <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 0301 	and.w	r3, r3, #1
 8003636:	2b01      	cmp	r3, #1
 8003638:	d1cf      	bne.n	80035da <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800363a:	2300      	movs	r3, #0
}
 800363c:	4618      	mov	r0, r3
 800363e:	3710      	adds	r7, #16
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}
 8003644:	8000003f 	.word	0x8000003f
 8003648:	50000100 	.word	0x50000100
 800364c:	50000300 	.word	0x50000300
 8003650:	50000700 	.word	0x50000700
 8003654:	20000020 	.word	0x20000020
 8003658:	053e2d63 	.word	0x053e2d63

0800365c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b084      	sub	sp, #16
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003668:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800366e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003672:	2b00      	cmp	r3, #0
 8003674:	d14b      	bne.n	800370e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800367a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 0308 	and.w	r3, r3, #8
 800368c:	2b00      	cmp	r3, #0
 800368e:	d021      	beq.n	80036d4 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4618      	mov	r0, r3
 8003696:	f7fe fc85 	bl	8001fa4 <LL_ADC_REG_IsTriggerSourceSWStart>
 800369a:	4603      	mov	r3, r0
 800369c:	2b00      	cmp	r3, #0
 800369e:	d032      	beq.n	8003706 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	68db      	ldr	r3, [r3, #12]
 80036a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d12b      	bne.n	8003706 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d11f      	bne.n	8003706 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ca:	f043 0201 	orr.w	r2, r3, #1
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	65da      	str	r2, [r3, #92]	; 0x5c
 80036d2:	e018      	b.n	8003706 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	68db      	ldr	r3, [r3, #12]
 80036da:	f003 0302 	and.w	r3, r3, #2
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d111      	bne.n	8003706 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d105      	bne.n	8003706 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036fe:	f043 0201 	orr.w	r2, r3, #1
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003706:	68f8      	ldr	r0, [r7, #12]
 8003708:	f7ff faaa 	bl	8002c60 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800370c:	e00e      	b.n	800372c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003712:	f003 0310 	and.w	r3, r3, #16
 8003716:	2b00      	cmp	r3, #0
 8003718:	d003      	beq.n	8003722 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800371a:	68f8      	ldr	r0, [r7, #12]
 800371c:	f7ff fabe 	bl	8002c9c <HAL_ADC_ErrorCallback>
}
 8003720:	e004      	b.n	800372c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003726:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	4798      	blx	r3
}
 800372c:	bf00      	nop
 800372e:	3710      	adds	r7, #16
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}

08003734 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b084      	sub	sp, #16
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003740:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003742:	68f8      	ldr	r0, [r7, #12]
 8003744:	f7ff fa96 	bl	8002c74 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003748:	bf00      	nop
 800374a:	3710      	adds	r7, #16
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}

08003750 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b084      	sub	sp, #16
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800375c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003762:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800376e:	f043 0204 	orr.w	r2, r3, #4
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003776:	68f8      	ldr	r0, [r7, #12]
 8003778:	f7ff fa90 	bl	8002c9c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800377c:	bf00      	nop
 800377e:	3710      	adds	r7, #16
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}

08003784 <LL_ADC_IsEnabled>:
{
 8003784:	b480      	push	{r7}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	f003 0301 	and.w	r3, r3, #1
 8003794:	2b01      	cmp	r3, #1
 8003796:	d101      	bne.n	800379c <LL_ADC_IsEnabled+0x18>
 8003798:	2301      	movs	r3, #1
 800379a:	e000      	b.n	800379e <LL_ADC_IsEnabled+0x1a>
 800379c:	2300      	movs	r3, #0
}
 800379e:	4618      	mov	r0, r3
 80037a0:	370c      	adds	r7, #12
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr

080037aa <LL_ADC_REG_IsConversionOngoing>:
{
 80037aa:	b480      	push	{r7}
 80037ac:	b083      	sub	sp, #12
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	f003 0304 	and.w	r3, r3, #4
 80037ba:	2b04      	cmp	r3, #4
 80037bc:	d101      	bne.n	80037c2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80037be:	2301      	movs	r3, #1
 80037c0:	e000      	b.n	80037c4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80037c2:	2300      	movs	r3, #0
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	370c      	adds	r7, #12
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr

080037d0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80037d8:	bf00      	nop
 80037da:	370c      	adds	r7, #12
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr

080037e4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b083      	sub	sp, #12
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80037ec:	bf00      	nop
 80037ee:	370c      	adds	r7, #12
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr

080037f8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003800:	bf00      	nop
 8003802:	370c      	adds	r7, #12
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr

0800380c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800380c:	b480      	push	{r7}
 800380e:	b083      	sub	sp, #12
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003814:	bf00      	nop
 8003816:	370c      	adds	r7, #12
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr

08003820 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003820:	b480      	push	{r7}
 8003822:	b083      	sub	sp, #12
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003828:	bf00      	nop
 800382a:	370c      	adds	r7, #12
 800382c:	46bd      	mov	sp, r7
 800382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003832:	4770      	bx	lr

08003834 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003834:	b590      	push	{r4, r7, lr}
 8003836:	b0a1      	sub	sp, #132	; 0x84
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800383e:	2300      	movs	r3, #0
 8003840:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800384a:	2b01      	cmp	r3, #1
 800384c:	d101      	bne.n	8003852 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800384e:	2302      	movs	r3, #2
 8003850:	e0e7      	b.n	8003a22 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2201      	movs	r2, #1
 8003856:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800385a:	2300      	movs	r3, #0
 800385c:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800385e:	2300      	movs	r3, #0
 8003860:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800386a:	d102      	bne.n	8003872 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800386c:	4b6f      	ldr	r3, [pc, #444]	; (8003a2c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800386e:	60bb      	str	r3, [r7, #8]
 8003870:	e009      	b.n	8003886 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a6e      	ldr	r2, [pc, #440]	; (8003a30 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d102      	bne.n	8003882 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 800387c:	4b6d      	ldr	r3, [pc, #436]	; (8003a34 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800387e:	60bb      	str	r3, [r7, #8]
 8003880:	e001      	b.n	8003886 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003882:	2300      	movs	r3, #0
 8003884:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d10b      	bne.n	80038a4 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003890:	f043 0220 	orr.w	r2, r3, #32
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2200      	movs	r2, #0
 800389c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	e0be      	b.n	8003a22 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	4618      	mov	r0, r3
 80038a8:	f7ff ff7f 	bl	80037aa <LL_ADC_REG_IsConversionOngoing>
 80038ac:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4618      	mov	r0, r3
 80038b4:	f7ff ff79 	bl	80037aa <LL_ADC_REG_IsConversionOngoing>
 80038b8:	4603      	mov	r3, r0
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	f040 80a0 	bne.w	8003a00 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80038c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	f040 809c 	bne.w	8003a00 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80038d0:	d004      	beq.n	80038dc <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a55      	ldr	r2, [pc, #340]	; (8003a2c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d101      	bne.n	80038e0 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80038dc:	4b56      	ldr	r3, [pc, #344]	; (8003a38 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80038de:	e000      	b.n	80038e2 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80038e0:	4b56      	ldr	r3, [pc, #344]	; (8003a3c <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80038e2:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d04b      	beq.n	8003984 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80038ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	6859      	ldr	r1, [r3, #4]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80038fe:	035b      	lsls	r3, r3, #13
 8003900:	430b      	orrs	r3, r1
 8003902:	431a      	orrs	r2, r3
 8003904:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003906:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003910:	d004      	beq.n	800391c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a45      	ldr	r2, [pc, #276]	; (8003a2c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d10f      	bne.n	800393c <HAL_ADCEx_MultiModeConfigChannel+0x108>
 800391c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003920:	f7ff ff30 	bl	8003784 <LL_ADC_IsEnabled>
 8003924:	4604      	mov	r4, r0
 8003926:	4841      	ldr	r0, [pc, #260]	; (8003a2c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003928:	f7ff ff2c 	bl	8003784 <LL_ADC_IsEnabled>
 800392c:	4603      	mov	r3, r0
 800392e:	4323      	orrs	r3, r4
 8003930:	2b00      	cmp	r3, #0
 8003932:	bf0c      	ite	eq
 8003934:	2301      	moveq	r3, #1
 8003936:	2300      	movne	r3, #0
 8003938:	b2db      	uxtb	r3, r3
 800393a:	e012      	b.n	8003962 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 800393c:	483c      	ldr	r0, [pc, #240]	; (8003a30 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800393e:	f7ff ff21 	bl	8003784 <LL_ADC_IsEnabled>
 8003942:	4604      	mov	r4, r0
 8003944:	483b      	ldr	r0, [pc, #236]	; (8003a34 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003946:	f7ff ff1d 	bl	8003784 <LL_ADC_IsEnabled>
 800394a:	4603      	mov	r3, r0
 800394c:	431c      	orrs	r4, r3
 800394e:	483c      	ldr	r0, [pc, #240]	; (8003a40 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003950:	f7ff ff18 	bl	8003784 <LL_ADC_IsEnabled>
 8003954:	4603      	mov	r3, r0
 8003956:	4323      	orrs	r3, r4
 8003958:	2b00      	cmp	r3, #0
 800395a:	bf0c      	ite	eq
 800395c:	2301      	moveq	r3, #1
 800395e:	2300      	movne	r3, #0
 8003960:	b2db      	uxtb	r3, r3
 8003962:	2b00      	cmp	r3, #0
 8003964:	d056      	beq.n	8003a14 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003966:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800396e:	f023 030f 	bic.w	r3, r3, #15
 8003972:	683a      	ldr	r2, [r7, #0]
 8003974:	6811      	ldr	r1, [r2, #0]
 8003976:	683a      	ldr	r2, [r7, #0]
 8003978:	6892      	ldr	r2, [r2, #8]
 800397a:	430a      	orrs	r2, r1
 800397c:	431a      	orrs	r2, r3
 800397e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003980:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003982:	e047      	b.n	8003a14 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003984:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800398c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800398e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003998:	d004      	beq.n	80039a4 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a23      	ldr	r2, [pc, #140]	; (8003a2c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d10f      	bne.n	80039c4 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80039a4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80039a8:	f7ff feec 	bl	8003784 <LL_ADC_IsEnabled>
 80039ac:	4604      	mov	r4, r0
 80039ae:	481f      	ldr	r0, [pc, #124]	; (8003a2c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80039b0:	f7ff fee8 	bl	8003784 <LL_ADC_IsEnabled>
 80039b4:	4603      	mov	r3, r0
 80039b6:	4323      	orrs	r3, r4
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	bf0c      	ite	eq
 80039bc:	2301      	moveq	r3, #1
 80039be:	2300      	movne	r3, #0
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	e012      	b.n	80039ea <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80039c4:	481a      	ldr	r0, [pc, #104]	; (8003a30 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80039c6:	f7ff fedd 	bl	8003784 <LL_ADC_IsEnabled>
 80039ca:	4604      	mov	r4, r0
 80039cc:	4819      	ldr	r0, [pc, #100]	; (8003a34 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80039ce:	f7ff fed9 	bl	8003784 <LL_ADC_IsEnabled>
 80039d2:	4603      	mov	r3, r0
 80039d4:	431c      	orrs	r4, r3
 80039d6:	481a      	ldr	r0, [pc, #104]	; (8003a40 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80039d8:	f7ff fed4 	bl	8003784 <LL_ADC_IsEnabled>
 80039dc:	4603      	mov	r3, r0
 80039de:	4323      	orrs	r3, r4
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	bf0c      	ite	eq
 80039e4:	2301      	moveq	r3, #1
 80039e6:	2300      	movne	r3, #0
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d012      	beq.n	8003a14 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80039ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80039f6:	f023 030f 	bic.w	r3, r3, #15
 80039fa:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80039fc:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80039fe:	e009      	b.n	8003a14 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a04:	f043 0220 	orr.w	r2, r3, #32
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003a12:	e000      	b.n	8003a16 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003a14:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003a1e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3784      	adds	r7, #132	; 0x84
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd90      	pop	{r4, r7, pc}
 8003a2a:	bf00      	nop
 8003a2c:	50000100 	.word	0x50000100
 8003a30:	50000400 	.word	0x50000400
 8003a34:	50000500 	.word	0x50000500
 8003a38:	50000300 	.word	0x50000300
 8003a3c:	50000700 	.word	0x50000700
 8003a40:	50000600 	.word	0x50000600

08003a44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b085      	sub	sp, #20
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	f003 0307 	and.w	r3, r3, #7
 8003a52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a54:	4b0c      	ldr	r3, [pc, #48]	; (8003a88 <__NVIC_SetPriorityGrouping+0x44>)
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a5a:	68ba      	ldr	r2, [r7, #8]
 8003a5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003a60:	4013      	ands	r3, r2
 8003a62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003a70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a76:	4a04      	ldr	r2, [pc, #16]	; (8003a88 <__NVIC_SetPriorityGrouping+0x44>)
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	60d3      	str	r3, [r2, #12]
}
 8003a7c:	bf00      	nop
 8003a7e:	3714      	adds	r7, #20
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr
 8003a88:	e000ed00 	.word	0xe000ed00

08003a8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a90:	4b04      	ldr	r3, [pc, #16]	; (8003aa4 <__NVIC_GetPriorityGrouping+0x18>)
 8003a92:	68db      	ldr	r3, [r3, #12]
 8003a94:	0a1b      	lsrs	r3, r3, #8
 8003a96:	f003 0307 	and.w	r3, r3, #7
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr
 8003aa4:	e000ed00 	.word	0xe000ed00

08003aa8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b083      	sub	sp, #12
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	4603      	mov	r3, r0
 8003ab0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	db0b      	blt.n	8003ad2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003aba:	79fb      	ldrb	r3, [r7, #7]
 8003abc:	f003 021f 	and.w	r2, r3, #31
 8003ac0:	4907      	ldr	r1, [pc, #28]	; (8003ae0 <__NVIC_EnableIRQ+0x38>)
 8003ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ac6:	095b      	lsrs	r3, r3, #5
 8003ac8:	2001      	movs	r0, #1
 8003aca:	fa00 f202 	lsl.w	r2, r0, r2
 8003ace:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003ad2:	bf00      	nop
 8003ad4:	370c      	adds	r7, #12
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003adc:	4770      	bx	lr
 8003ade:	bf00      	nop
 8003ae0:	e000e100 	.word	0xe000e100

08003ae4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b083      	sub	sp, #12
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	4603      	mov	r3, r0
 8003aec:	6039      	str	r1, [r7, #0]
 8003aee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003af0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	db0a      	blt.n	8003b0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	b2da      	uxtb	r2, r3
 8003afc:	490c      	ldr	r1, [pc, #48]	; (8003b30 <__NVIC_SetPriority+0x4c>)
 8003afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b02:	0112      	lsls	r2, r2, #4
 8003b04:	b2d2      	uxtb	r2, r2
 8003b06:	440b      	add	r3, r1
 8003b08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b0c:	e00a      	b.n	8003b24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	b2da      	uxtb	r2, r3
 8003b12:	4908      	ldr	r1, [pc, #32]	; (8003b34 <__NVIC_SetPriority+0x50>)
 8003b14:	79fb      	ldrb	r3, [r7, #7]
 8003b16:	f003 030f 	and.w	r3, r3, #15
 8003b1a:	3b04      	subs	r3, #4
 8003b1c:	0112      	lsls	r2, r2, #4
 8003b1e:	b2d2      	uxtb	r2, r2
 8003b20:	440b      	add	r3, r1
 8003b22:	761a      	strb	r2, [r3, #24]
}
 8003b24:	bf00      	nop
 8003b26:	370c      	adds	r7, #12
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2e:	4770      	bx	lr
 8003b30:	e000e100 	.word	0xe000e100
 8003b34:	e000ed00 	.word	0xe000ed00

08003b38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b089      	sub	sp, #36	; 0x24
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	60f8      	str	r0, [r7, #12]
 8003b40:	60b9      	str	r1, [r7, #8]
 8003b42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	f003 0307 	and.w	r3, r3, #7
 8003b4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b4c:	69fb      	ldr	r3, [r7, #28]
 8003b4e:	f1c3 0307 	rsb	r3, r3, #7
 8003b52:	2b04      	cmp	r3, #4
 8003b54:	bf28      	it	cs
 8003b56:	2304      	movcs	r3, #4
 8003b58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b5a:	69fb      	ldr	r3, [r7, #28]
 8003b5c:	3304      	adds	r3, #4
 8003b5e:	2b06      	cmp	r3, #6
 8003b60:	d902      	bls.n	8003b68 <NVIC_EncodePriority+0x30>
 8003b62:	69fb      	ldr	r3, [r7, #28]
 8003b64:	3b03      	subs	r3, #3
 8003b66:	e000      	b.n	8003b6a <NVIC_EncodePriority+0x32>
 8003b68:	2300      	movs	r3, #0
 8003b6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b6c:	f04f 32ff 	mov.w	r2, #4294967295
 8003b70:	69bb      	ldr	r3, [r7, #24]
 8003b72:	fa02 f303 	lsl.w	r3, r2, r3
 8003b76:	43da      	mvns	r2, r3
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	401a      	ands	r2, r3
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b80:	f04f 31ff 	mov.w	r1, #4294967295
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	fa01 f303 	lsl.w	r3, r1, r3
 8003b8a:	43d9      	mvns	r1, r3
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b90:	4313      	orrs	r3, r2
         );
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3724      	adds	r7, #36	; 0x24
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr
	...

08003ba0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b082      	sub	sp, #8
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	3b01      	subs	r3, #1
 8003bac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003bb0:	d301      	bcc.n	8003bb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e00f      	b.n	8003bd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003bb6:	4a0a      	ldr	r2, [pc, #40]	; (8003be0 <SysTick_Config+0x40>)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	3b01      	subs	r3, #1
 8003bbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003bbe:	210f      	movs	r1, #15
 8003bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8003bc4:	f7ff ff8e 	bl	8003ae4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003bc8:	4b05      	ldr	r3, [pc, #20]	; (8003be0 <SysTick_Config+0x40>)
 8003bca:	2200      	movs	r2, #0
 8003bcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003bce:	4b04      	ldr	r3, [pc, #16]	; (8003be0 <SysTick_Config+0x40>)
 8003bd0:	2207      	movs	r2, #7
 8003bd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003bd4:	2300      	movs	r3, #0
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3708      	adds	r7, #8
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop
 8003be0:	e000e010 	.word	0xe000e010

08003be4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b082      	sub	sp, #8
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f7ff ff29 	bl	8003a44 <__NVIC_SetPriorityGrouping>
}
 8003bf2:	bf00      	nop
 8003bf4:	3708      	adds	r7, #8
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}

08003bfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003bfa:	b580      	push	{r7, lr}
 8003bfc:	b086      	sub	sp, #24
 8003bfe:	af00      	add	r7, sp, #0
 8003c00:	4603      	mov	r3, r0
 8003c02:	60b9      	str	r1, [r7, #8]
 8003c04:	607a      	str	r2, [r7, #4]
 8003c06:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003c08:	f7ff ff40 	bl	8003a8c <__NVIC_GetPriorityGrouping>
 8003c0c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c0e:	687a      	ldr	r2, [r7, #4]
 8003c10:	68b9      	ldr	r1, [r7, #8]
 8003c12:	6978      	ldr	r0, [r7, #20]
 8003c14:	f7ff ff90 	bl	8003b38 <NVIC_EncodePriority>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c1e:	4611      	mov	r1, r2
 8003c20:	4618      	mov	r0, r3
 8003c22:	f7ff ff5f 	bl	8003ae4 <__NVIC_SetPriority>
}
 8003c26:	bf00      	nop
 8003c28:	3718      	adds	r7, #24
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}

08003c2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c2e:	b580      	push	{r7, lr}
 8003c30:	b082      	sub	sp, #8
 8003c32:	af00      	add	r7, sp, #0
 8003c34:	4603      	mov	r3, r0
 8003c36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f7ff ff33 	bl	8003aa8 <__NVIC_EnableIRQ>
}
 8003c42:	bf00      	nop
 8003c44:	3708      	adds	r7, #8
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}

08003c4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003c4a:	b580      	push	{r7, lr}
 8003c4c:	b082      	sub	sp, #8
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f7ff ffa4 	bl	8003ba0 <SysTick_Config>
 8003c58:	4603      	mov	r3, r0
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3708      	adds	r7, #8
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
	...

08003c64 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b084      	sub	sp, #16
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d101      	bne.n	8003c76 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e08d      	b.n	8003d92 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	461a      	mov	r2, r3
 8003c7c:	4b47      	ldr	r3, [pc, #284]	; (8003d9c <HAL_DMA_Init+0x138>)
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	d80f      	bhi.n	8003ca2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	461a      	mov	r2, r3
 8003c88:	4b45      	ldr	r3, [pc, #276]	; (8003da0 <HAL_DMA_Init+0x13c>)
 8003c8a:	4413      	add	r3, r2
 8003c8c:	4a45      	ldr	r2, [pc, #276]	; (8003da4 <HAL_DMA_Init+0x140>)
 8003c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c92:	091b      	lsrs	r3, r3, #4
 8003c94:	009a      	lsls	r2, r3, #2
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4a42      	ldr	r2, [pc, #264]	; (8003da8 <HAL_DMA_Init+0x144>)
 8003c9e:	641a      	str	r2, [r3, #64]	; 0x40
 8003ca0:	e00e      	b.n	8003cc0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	461a      	mov	r2, r3
 8003ca8:	4b40      	ldr	r3, [pc, #256]	; (8003dac <HAL_DMA_Init+0x148>)
 8003caa:	4413      	add	r3, r2
 8003cac:	4a3d      	ldr	r2, [pc, #244]	; (8003da4 <HAL_DMA_Init+0x140>)
 8003cae:	fba2 2303 	umull	r2, r3, r2, r3
 8003cb2:	091b      	lsrs	r3, r3, #4
 8003cb4:	009a      	lsls	r2, r3, #2
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4a3c      	ldr	r2, [pc, #240]	; (8003db0 <HAL_DMA_Init+0x14c>)
 8003cbe:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2202      	movs	r2, #2
 8003cc4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003cd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cda:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003ce4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	691b      	ldr	r3, [r3, #16]
 8003cea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003cf0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	699b      	ldr	r3, [r3, #24]
 8003cf6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cfc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6a1b      	ldr	r3, [r3, #32]
 8003d02:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003d04:	68fa      	ldr	r2, [r7, #12]
 8003d06:	4313      	orrs	r3, r2
 8003d08:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	68fa      	ldr	r2, [r7, #12]
 8003d10:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f000 fa76 	bl	8004204 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d20:	d102      	bne.n	8003d28 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2200      	movs	r2, #0
 8003d26:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	685a      	ldr	r2, [r3, #4]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d30:	b2d2      	uxtb	r2, r2
 8003d32:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d38:	687a      	ldr	r2, [r7, #4]
 8003d3a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003d3c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d010      	beq.n	8003d68 <HAL_DMA_Init+0x104>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	2b04      	cmp	r3, #4
 8003d4c:	d80c      	bhi.n	8003d68 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f000 fa96 	bl	8004280 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d58:	2200      	movs	r2, #0
 8003d5a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d60:	687a      	ldr	r2, [r7, #4]
 8003d62:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003d64:	605a      	str	r2, [r3, #4]
 8003d66:	e008      	b.n	8003d7a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2200      	movs	r2, #0
 8003d72:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2200      	movs	r2, #0
 8003d78:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2201      	movs	r2, #1
 8003d84:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003d90:	2300      	movs	r3, #0
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	3710      	adds	r7, #16
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}
 8003d9a:	bf00      	nop
 8003d9c:	40020407 	.word	0x40020407
 8003da0:	bffdfff8 	.word	0xbffdfff8
 8003da4:	cccccccd 	.word	0xcccccccd
 8003da8:	40020000 	.word	0x40020000
 8003dac:	bffdfbf8 	.word	0xbffdfbf8
 8003db0:	40020400 	.word	0x40020400

08003db4 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b086      	sub	sp, #24
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	60f8      	str	r0, [r7, #12]
 8003dbc:	60b9      	str	r1, [r7, #8]
 8003dbe:	607a      	str	r2, [r7, #4]
 8003dc0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d101      	bne.n	8003dd4 <HAL_DMA_Start_IT+0x20>
 8003dd0:	2302      	movs	r3, #2
 8003dd2:	e066      	b.n	8003ea2 <HAL_DMA_Start_IT+0xee>
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003de2:	b2db      	uxtb	r3, r3
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d155      	bne.n	8003e94 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2202      	movs	r2, #2
 8003dec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2200      	movs	r2, #0
 8003df4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f022 0201 	bic.w	r2, r2, #1
 8003e04:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	687a      	ldr	r2, [r7, #4]
 8003e0a:	68b9      	ldr	r1, [r7, #8]
 8003e0c:	68f8      	ldr	r0, [r7, #12]
 8003e0e:	f000 f9bb 	bl	8004188 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d008      	beq.n	8003e2c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f042 020e 	orr.w	r2, r2, #14
 8003e28:	601a      	str	r2, [r3, #0]
 8003e2a:	e00f      	b.n	8003e4c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f022 0204 	bic.w	r2, r2, #4
 8003e3a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f042 020a 	orr.w	r2, r2, #10
 8003e4a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d007      	beq.n	8003e6a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e64:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e68:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d007      	beq.n	8003e82 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e80:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f042 0201 	orr.w	r2, r2, #1
 8003e90:	601a      	str	r2, [r3, #0]
 8003e92:	e005      	b.n	8003ea0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2200      	movs	r2, #0
 8003e98:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003e9c:	2302      	movs	r3, #2
 8003e9e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003ea0:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	3718      	adds	r7, #24
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}

08003eaa <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003eaa:	b480      	push	{r7}
 8003eac:	b085      	sub	sp, #20
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	2b02      	cmp	r3, #2
 8003ec0:	d005      	beq.n	8003ece <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2204      	movs	r2, #4
 8003ec6:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	73fb      	strb	r3, [r7, #15]
 8003ecc:	e037      	b.n	8003f3e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f022 020e 	bic.w	r2, r2, #14
 8003edc:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ee8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003eec:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f022 0201 	bic.w	r2, r2, #1
 8003efc:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f02:	f003 021f 	and.w	r2, r3, #31
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0a:	2101      	movs	r1, #1
 8003f0c:	fa01 f202 	lsl.w	r2, r1, r2
 8003f10:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003f1a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d00c      	beq.n	8003f3e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f2e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f32:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f38:	687a      	ldr	r2, [r7, #4]
 8003f3a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003f3c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2201      	movs	r2, #1
 8003f42:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8003f4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	3714      	adds	r7, #20
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr

08003f5c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b084      	sub	sp, #16
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f64:	2300      	movs	r3, #0
 8003f66:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003f6e:	b2db      	uxtb	r3, r3
 8003f70:	2b02      	cmp	r3, #2
 8003f72:	d00d      	beq.n	8003f90 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2204      	movs	r2, #4
 8003f78:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2200      	movs	r2, #0
 8003f86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	73fb      	strb	r3, [r7, #15]
 8003f8e:	e047      	b.n	8004020 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f022 020e 	bic.w	r2, r2, #14
 8003f9e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f022 0201 	bic.w	r2, r2, #1
 8003fae:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003fbe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fc4:	f003 021f 	and.w	r2, r3, #31
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fcc:	2101      	movs	r1, #1
 8003fce:	fa01 f202 	lsl.w	r2, r1, r2
 8003fd2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fd8:	687a      	ldr	r2, [r7, #4]
 8003fda:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003fdc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d00c      	beq.n	8004000 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ff0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ff4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ffa:	687a      	ldr	r2, [r7, #4]
 8003ffc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003ffe:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2201      	movs	r2, #1
 8004004:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2200      	movs	r2, #0
 800400c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004014:	2b00      	cmp	r3, #0
 8004016:	d003      	beq.n	8004020 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800401c:	6878      	ldr	r0, [r7, #4]
 800401e:	4798      	blx	r3
    }
  }
  return status;
 8004020:	7bfb      	ldrb	r3, [r7, #15]
}
 8004022:	4618      	mov	r0, r3
 8004024:	3710      	adds	r7, #16
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}

0800402a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800402a:	b580      	push	{r7, lr}
 800402c:	b084      	sub	sp, #16
 800402e:	af00      	add	r7, sp, #0
 8004030:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004046:	f003 031f 	and.w	r3, r3, #31
 800404a:	2204      	movs	r2, #4
 800404c:	409a      	lsls	r2, r3
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	4013      	ands	r3, r2
 8004052:	2b00      	cmp	r3, #0
 8004054:	d026      	beq.n	80040a4 <HAL_DMA_IRQHandler+0x7a>
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	f003 0304 	and.w	r3, r3, #4
 800405c:	2b00      	cmp	r3, #0
 800405e:	d021      	beq.n	80040a4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 0320 	and.w	r3, r3, #32
 800406a:	2b00      	cmp	r3, #0
 800406c:	d107      	bne.n	800407e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f022 0204 	bic.w	r2, r2, #4
 800407c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004082:	f003 021f 	and.w	r2, r3, #31
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800408a:	2104      	movs	r1, #4
 800408c:	fa01 f202 	lsl.w	r2, r1, r2
 8004090:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004096:	2b00      	cmp	r3, #0
 8004098:	d071      	beq.n	800417e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80040a2:	e06c      	b.n	800417e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040a8:	f003 031f 	and.w	r3, r3, #31
 80040ac:	2202      	movs	r2, #2
 80040ae:	409a      	lsls	r2, r3
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	4013      	ands	r3, r2
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d02e      	beq.n	8004116 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	f003 0302 	and.w	r3, r3, #2
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d029      	beq.n	8004116 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 0320 	and.w	r3, r3, #32
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d10b      	bne.n	80040e8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f022 020a 	bic.w	r2, r2, #10
 80040de:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2201      	movs	r2, #1
 80040e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ec:	f003 021f 	and.w	r2, r3, #31
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f4:	2102      	movs	r1, #2
 80040f6:	fa01 f202 	lsl.w	r2, r1, r2
 80040fa:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2200      	movs	r2, #0
 8004100:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004108:	2b00      	cmp	r3, #0
 800410a:	d038      	beq.n	800417e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004114:	e033      	b.n	800417e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800411a:	f003 031f 	and.w	r3, r3, #31
 800411e:	2208      	movs	r2, #8
 8004120:	409a      	lsls	r2, r3
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	4013      	ands	r3, r2
 8004126:	2b00      	cmp	r3, #0
 8004128:	d02a      	beq.n	8004180 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	f003 0308 	and.w	r3, r3, #8
 8004130:	2b00      	cmp	r3, #0
 8004132:	d025      	beq.n	8004180 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	681a      	ldr	r2, [r3, #0]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f022 020e 	bic.w	r2, r2, #14
 8004142:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004148:	f003 021f 	and.w	r2, r3, #31
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004150:	2101      	movs	r1, #1
 8004152:	fa01 f202 	lsl.w	r2, r1, r2
 8004156:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2201      	movs	r2, #1
 800415c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2201      	movs	r2, #1
 8004162:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004172:	2b00      	cmp	r3, #0
 8004174:	d004      	beq.n	8004180 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800417e:	bf00      	nop
 8004180:	bf00      	nop
}
 8004182:	3710      	adds	r7, #16
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}

08004188 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004188:	b480      	push	{r7}
 800418a:	b085      	sub	sp, #20
 800418c:	af00      	add	r7, sp, #0
 800418e:	60f8      	str	r0, [r7, #12]
 8004190:	60b9      	str	r1, [r7, #8]
 8004192:	607a      	str	r2, [r7, #4]
 8004194:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800419a:	68fa      	ldr	r2, [r7, #12]
 800419c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800419e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d004      	beq.n	80041b2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041ac:	68fa      	ldr	r2, [r7, #12]
 80041ae:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80041b0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041b6:	f003 021f 	and.w	r2, r3, #31
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041be:	2101      	movs	r1, #1
 80041c0:	fa01 f202 	lsl.w	r2, r1, r2
 80041c4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	683a      	ldr	r2, [r7, #0]
 80041cc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	2b10      	cmp	r3, #16
 80041d4:	d108      	bne.n	80041e8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	687a      	ldr	r2, [r7, #4]
 80041dc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	68ba      	ldr	r2, [r7, #8]
 80041e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80041e6:	e007      	b.n	80041f8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	68ba      	ldr	r2, [r7, #8]
 80041ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	687a      	ldr	r2, [r7, #4]
 80041f6:	60da      	str	r2, [r3, #12]
}
 80041f8:	bf00      	nop
 80041fa:	3714      	adds	r7, #20
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr

08004204 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004204:	b480      	push	{r7}
 8004206:	b087      	sub	sp, #28
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	461a      	mov	r2, r3
 8004212:	4b16      	ldr	r3, [pc, #88]	; (800426c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004214:	429a      	cmp	r2, r3
 8004216:	d802      	bhi.n	800421e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004218:	4b15      	ldr	r3, [pc, #84]	; (8004270 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800421a:	617b      	str	r3, [r7, #20]
 800421c:	e001      	b.n	8004222 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800421e:	4b15      	ldr	r3, [pc, #84]	; (8004274 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004220:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	b2db      	uxtb	r3, r3
 800422c:	3b08      	subs	r3, #8
 800422e:	4a12      	ldr	r2, [pc, #72]	; (8004278 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004230:	fba2 2303 	umull	r2, r3, r2, r3
 8004234:	091b      	lsrs	r3, r3, #4
 8004236:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800423c:	089b      	lsrs	r3, r3, #2
 800423e:	009a      	lsls	r2, r3, #2
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	4413      	add	r3, r2
 8004244:	461a      	mov	r2, r3
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	4a0b      	ldr	r2, [pc, #44]	; (800427c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800424e:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	f003 031f 	and.w	r3, r3, #31
 8004256:	2201      	movs	r2, #1
 8004258:	409a      	lsls	r2, r3
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800425e:	bf00      	nop
 8004260:	371c      	adds	r7, #28
 8004262:	46bd      	mov	sp, r7
 8004264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004268:	4770      	bx	lr
 800426a:	bf00      	nop
 800426c:	40020407 	.word	0x40020407
 8004270:	40020800 	.word	0x40020800
 8004274:	40020820 	.word	0x40020820
 8004278:	cccccccd 	.word	0xcccccccd
 800427c:	40020880 	.word	0x40020880

08004280 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004280:	b480      	push	{r7}
 8004282:	b085      	sub	sp, #20
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	b2db      	uxtb	r3, r3
 800428e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004290:	68fa      	ldr	r2, [r7, #12]
 8004292:	4b0b      	ldr	r3, [pc, #44]	; (80042c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004294:	4413      	add	r3, r2
 8004296:	009b      	lsls	r3, r3, #2
 8004298:	461a      	mov	r2, r3
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	4a08      	ldr	r2, [pc, #32]	; (80042c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80042a2:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	3b01      	subs	r3, #1
 80042a8:	f003 031f 	and.w	r3, r3, #31
 80042ac:	2201      	movs	r2, #1
 80042ae:	409a      	lsls	r2, r3
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80042b4:	bf00      	nop
 80042b6:	3714      	adds	r7, #20
 80042b8:	46bd      	mov	sp, r7
 80042ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042be:	4770      	bx	lr
 80042c0:	1000823f 	.word	0x1000823f
 80042c4:	40020940 	.word	0x40020940

080042c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b087      	sub	sp, #28
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
 80042d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80042d2:	2300      	movs	r3, #0
 80042d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80042d6:	e15a      	b.n	800458e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	2101      	movs	r1, #1
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	fa01 f303 	lsl.w	r3, r1, r3
 80042e4:	4013      	ands	r3, r2
 80042e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	f000 814c 	beq.w	8004588 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	f003 0303 	and.w	r3, r3, #3
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d005      	beq.n	8004308 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004304:	2b02      	cmp	r3, #2
 8004306:	d130      	bne.n	800436a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	005b      	lsls	r3, r3, #1
 8004312:	2203      	movs	r2, #3
 8004314:	fa02 f303 	lsl.w	r3, r2, r3
 8004318:	43db      	mvns	r3, r3
 800431a:	693a      	ldr	r2, [r7, #16]
 800431c:	4013      	ands	r3, r2
 800431e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	68da      	ldr	r2, [r3, #12]
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	005b      	lsls	r3, r3, #1
 8004328:	fa02 f303 	lsl.w	r3, r2, r3
 800432c:	693a      	ldr	r2, [r7, #16]
 800432e:	4313      	orrs	r3, r2
 8004330:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	693a      	ldr	r2, [r7, #16]
 8004336:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800433e:	2201      	movs	r2, #1
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	fa02 f303 	lsl.w	r3, r2, r3
 8004346:	43db      	mvns	r3, r3
 8004348:	693a      	ldr	r2, [r7, #16]
 800434a:	4013      	ands	r3, r2
 800434c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	091b      	lsrs	r3, r3, #4
 8004354:	f003 0201 	and.w	r2, r3, #1
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	fa02 f303 	lsl.w	r3, r2, r3
 800435e:	693a      	ldr	r2, [r7, #16]
 8004360:	4313      	orrs	r3, r2
 8004362:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	693a      	ldr	r2, [r7, #16]
 8004368:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	f003 0303 	and.w	r3, r3, #3
 8004372:	2b03      	cmp	r3, #3
 8004374:	d017      	beq.n	80043a6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	68db      	ldr	r3, [r3, #12]
 800437a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	005b      	lsls	r3, r3, #1
 8004380:	2203      	movs	r2, #3
 8004382:	fa02 f303 	lsl.w	r3, r2, r3
 8004386:	43db      	mvns	r3, r3
 8004388:	693a      	ldr	r2, [r7, #16]
 800438a:	4013      	ands	r3, r2
 800438c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	689a      	ldr	r2, [r3, #8]
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	005b      	lsls	r3, r3, #1
 8004396:	fa02 f303 	lsl.w	r3, r2, r3
 800439a:	693a      	ldr	r2, [r7, #16]
 800439c:	4313      	orrs	r3, r2
 800439e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	693a      	ldr	r2, [r7, #16]
 80043a4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	f003 0303 	and.w	r3, r3, #3
 80043ae:	2b02      	cmp	r3, #2
 80043b0:	d123      	bne.n	80043fa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	08da      	lsrs	r2, r3, #3
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	3208      	adds	r2, #8
 80043ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043be:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	f003 0307 	and.w	r3, r3, #7
 80043c6:	009b      	lsls	r3, r3, #2
 80043c8:	220f      	movs	r2, #15
 80043ca:	fa02 f303 	lsl.w	r3, r2, r3
 80043ce:	43db      	mvns	r3, r3
 80043d0:	693a      	ldr	r2, [r7, #16]
 80043d2:	4013      	ands	r3, r2
 80043d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	691a      	ldr	r2, [r3, #16]
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	f003 0307 	and.w	r3, r3, #7
 80043e0:	009b      	lsls	r3, r3, #2
 80043e2:	fa02 f303 	lsl.w	r3, r2, r3
 80043e6:	693a      	ldr	r2, [r7, #16]
 80043e8:	4313      	orrs	r3, r2
 80043ea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	08da      	lsrs	r2, r3, #3
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	3208      	adds	r2, #8
 80043f4:	6939      	ldr	r1, [r7, #16]
 80043f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	005b      	lsls	r3, r3, #1
 8004404:	2203      	movs	r2, #3
 8004406:	fa02 f303 	lsl.w	r3, r2, r3
 800440a:	43db      	mvns	r3, r3
 800440c:	693a      	ldr	r2, [r7, #16]
 800440e:	4013      	ands	r3, r2
 8004410:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	f003 0203 	and.w	r2, r3, #3
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	005b      	lsls	r3, r3, #1
 800441e:	fa02 f303 	lsl.w	r3, r2, r3
 8004422:	693a      	ldr	r2, [r7, #16]
 8004424:	4313      	orrs	r3, r2
 8004426:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	693a      	ldr	r2, [r7, #16]
 800442c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004436:	2b00      	cmp	r3, #0
 8004438:	f000 80a6 	beq.w	8004588 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800443c:	4b5b      	ldr	r3, [pc, #364]	; (80045ac <HAL_GPIO_Init+0x2e4>)
 800443e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004440:	4a5a      	ldr	r2, [pc, #360]	; (80045ac <HAL_GPIO_Init+0x2e4>)
 8004442:	f043 0301 	orr.w	r3, r3, #1
 8004446:	6613      	str	r3, [r2, #96]	; 0x60
 8004448:	4b58      	ldr	r3, [pc, #352]	; (80045ac <HAL_GPIO_Init+0x2e4>)
 800444a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800444c:	f003 0301 	and.w	r3, r3, #1
 8004450:	60bb      	str	r3, [r7, #8]
 8004452:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004454:	4a56      	ldr	r2, [pc, #344]	; (80045b0 <HAL_GPIO_Init+0x2e8>)
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	089b      	lsrs	r3, r3, #2
 800445a:	3302      	adds	r3, #2
 800445c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004460:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	f003 0303 	and.w	r3, r3, #3
 8004468:	009b      	lsls	r3, r3, #2
 800446a:	220f      	movs	r2, #15
 800446c:	fa02 f303 	lsl.w	r3, r2, r3
 8004470:	43db      	mvns	r3, r3
 8004472:	693a      	ldr	r2, [r7, #16]
 8004474:	4013      	ands	r3, r2
 8004476:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800447e:	d01f      	beq.n	80044c0 <HAL_GPIO_Init+0x1f8>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	4a4c      	ldr	r2, [pc, #304]	; (80045b4 <HAL_GPIO_Init+0x2ec>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d019      	beq.n	80044bc <HAL_GPIO_Init+0x1f4>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	4a4b      	ldr	r2, [pc, #300]	; (80045b8 <HAL_GPIO_Init+0x2f0>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d013      	beq.n	80044b8 <HAL_GPIO_Init+0x1f0>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	4a4a      	ldr	r2, [pc, #296]	; (80045bc <HAL_GPIO_Init+0x2f4>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d00d      	beq.n	80044b4 <HAL_GPIO_Init+0x1ec>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	4a49      	ldr	r2, [pc, #292]	; (80045c0 <HAL_GPIO_Init+0x2f8>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d007      	beq.n	80044b0 <HAL_GPIO_Init+0x1e8>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	4a48      	ldr	r2, [pc, #288]	; (80045c4 <HAL_GPIO_Init+0x2fc>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d101      	bne.n	80044ac <HAL_GPIO_Init+0x1e4>
 80044a8:	2305      	movs	r3, #5
 80044aa:	e00a      	b.n	80044c2 <HAL_GPIO_Init+0x1fa>
 80044ac:	2306      	movs	r3, #6
 80044ae:	e008      	b.n	80044c2 <HAL_GPIO_Init+0x1fa>
 80044b0:	2304      	movs	r3, #4
 80044b2:	e006      	b.n	80044c2 <HAL_GPIO_Init+0x1fa>
 80044b4:	2303      	movs	r3, #3
 80044b6:	e004      	b.n	80044c2 <HAL_GPIO_Init+0x1fa>
 80044b8:	2302      	movs	r3, #2
 80044ba:	e002      	b.n	80044c2 <HAL_GPIO_Init+0x1fa>
 80044bc:	2301      	movs	r3, #1
 80044be:	e000      	b.n	80044c2 <HAL_GPIO_Init+0x1fa>
 80044c0:	2300      	movs	r3, #0
 80044c2:	697a      	ldr	r2, [r7, #20]
 80044c4:	f002 0203 	and.w	r2, r2, #3
 80044c8:	0092      	lsls	r2, r2, #2
 80044ca:	4093      	lsls	r3, r2
 80044cc:	693a      	ldr	r2, [r7, #16]
 80044ce:	4313      	orrs	r3, r2
 80044d0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80044d2:	4937      	ldr	r1, [pc, #220]	; (80045b0 <HAL_GPIO_Init+0x2e8>)
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	089b      	lsrs	r3, r3, #2
 80044d8:	3302      	adds	r3, #2
 80044da:	693a      	ldr	r2, [r7, #16]
 80044dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80044e0:	4b39      	ldr	r3, [pc, #228]	; (80045c8 <HAL_GPIO_Init+0x300>)
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	43db      	mvns	r3, r3
 80044ea:	693a      	ldr	r2, [r7, #16]
 80044ec:	4013      	ands	r3, r2
 80044ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d003      	beq.n	8004504 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80044fc:	693a      	ldr	r2, [r7, #16]
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	4313      	orrs	r3, r2
 8004502:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004504:	4a30      	ldr	r2, [pc, #192]	; (80045c8 <HAL_GPIO_Init+0x300>)
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800450a:	4b2f      	ldr	r3, [pc, #188]	; (80045c8 <HAL_GPIO_Init+0x300>)
 800450c:	68db      	ldr	r3, [r3, #12]
 800450e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	43db      	mvns	r3, r3
 8004514:	693a      	ldr	r2, [r7, #16]
 8004516:	4013      	ands	r3, r2
 8004518:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004522:	2b00      	cmp	r3, #0
 8004524:	d003      	beq.n	800452e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004526:	693a      	ldr	r2, [r7, #16]
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	4313      	orrs	r3, r2
 800452c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800452e:	4a26      	ldr	r2, [pc, #152]	; (80045c8 <HAL_GPIO_Init+0x300>)
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004534:	4b24      	ldr	r3, [pc, #144]	; (80045c8 <HAL_GPIO_Init+0x300>)
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	43db      	mvns	r3, r3
 800453e:	693a      	ldr	r2, [r7, #16]
 8004540:	4013      	ands	r3, r2
 8004542:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800454c:	2b00      	cmp	r3, #0
 800454e:	d003      	beq.n	8004558 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004550:	693a      	ldr	r2, [r7, #16]
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	4313      	orrs	r3, r2
 8004556:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004558:	4a1b      	ldr	r2, [pc, #108]	; (80045c8 <HAL_GPIO_Init+0x300>)
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800455e:	4b1a      	ldr	r3, [pc, #104]	; (80045c8 <HAL_GPIO_Init+0x300>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	43db      	mvns	r3, r3
 8004568:	693a      	ldr	r2, [r7, #16]
 800456a:	4013      	ands	r3, r2
 800456c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004576:	2b00      	cmp	r3, #0
 8004578:	d003      	beq.n	8004582 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800457a:	693a      	ldr	r2, [r7, #16]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	4313      	orrs	r3, r2
 8004580:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004582:	4a11      	ldr	r2, [pc, #68]	; (80045c8 <HAL_GPIO_Init+0x300>)
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	3301      	adds	r3, #1
 800458c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	fa22 f303 	lsr.w	r3, r2, r3
 8004598:	2b00      	cmp	r3, #0
 800459a:	f47f ae9d 	bne.w	80042d8 <HAL_GPIO_Init+0x10>
  }
}
 800459e:	bf00      	nop
 80045a0:	bf00      	nop
 80045a2:	371c      	adds	r7, #28
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr
 80045ac:	40021000 	.word	0x40021000
 80045b0:	40010000 	.word	0x40010000
 80045b4:	48000400 	.word	0x48000400
 80045b8:	48000800 	.word	0x48000800
 80045bc:	48000c00 	.word	0x48000c00
 80045c0:	48001000 	.word	0x48001000
 80045c4:	48001400 	.word	0x48001400
 80045c8:	40010400 	.word	0x40010400

080045cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b083      	sub	sp, #12
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
 80045d4:	460b      	mov	r3, r1
 80045d6:	807b      	strh	r3, [r7, #2]
 80045d8:	4613      	mov	r3, r2
 80045da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80045dc:	787b      	ldrb	r3, [r7, #1]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d003      	beq.n	80045ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80045e2:	887a      	ldrh	r2, [r7, #2]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80045e8:	e002      	b.n	80045f0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80045ea:	887a      	ldrh	r2, [r7, #2]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	629a      	str	r2, [r3, #40]	; 0x28
}
 80045f0:	bf00      	nop
 80045f2:	370c      	adds	r7, #12
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	4770      	bx	lr

080045fc <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b085      	sub	sp, #20
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	460b      	mov	r3, r1
 8004606:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	695b      	ldr	r3, [r3, #20]
 800460c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800460e:	887a      	ldrh	r2, [r7, #2]
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	4013      	ands	r3, r2
 8004614:	041a      	lsls	r2, r3, #16
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	43d9      	mvns	r1, r3
 800461a:	887b      	ldrh	r3, [r7, #2]
 800461c:	400b      	ands	r3, r1
 800461e:	431a      	orrs	r2, r3
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	619a      	str	r2, [r3, #24]
}
 8004624:	bf00      	nop
 8004626:	3714      	adds	r7, #20
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr

08004630 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b082      	sub	sp, #8
 8004634:	af00      	add	r7, sp, #0
 8004636:	4603      	mov	r3, r0
 8004638:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800463a:	4b08      	ldr	r3, [pc, #32]	; (800465c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800463c:	695a      	ldr	r2, [r3, #20]
 800463e:	88fb      	ldrh	r3, [r7, #6]
 8004640:	4013      	ands	r3, r2
 8004642:	2b00      	cmp	r3, #0
 8004644:	d006      	beq.n	8004654 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004646:	4a05      	ldr	r2, [pc, #20]	; (800465c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004648:	88fb      	ldrh	r3, [r7, #6]
 800464a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800464c:	88fb      	ldrh	r3, [r7, #6]
 800464e:	4618      	mov	r0, r3
 8004650:	f7fc ff98 	bl	8001584 <HAL_GPIO_EXTI_Callback>
  }
}
 8004654:	bf00      	nop
 8004656:	3708      	adds	r7, #8
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}
 800465c:	40010400 	.word	0x40010400

08004660 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004660:	b480      	push	{r7}
 8004662:	b085      	sub	sp, #20
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d141      	bne.n	80046f2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800466e:	4b4b      	ldr	r3, [pc, #300]	; (800479c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004676:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800467a:	d131      	bne.n	80046e0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800467c:	4b47      	ldr	r3, [pc, #284]	; (800479c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800467e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004682:	4a46      	ldr	r2, [pc, #280]	; (800479c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004684:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004688:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800468c:	4b43      	ldr	r3, [pc, #268]	; (800479c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004694:	4a41      	ldr	r2, [pc, #260]	; (800479c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004696:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800469a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800469c:	4b40      	ldr	r3, [pc, #256]	; (80047a0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	2232      	movs	r2, #50	; 0x32
 80046a2:	fb02 f303 	mul.w	r3, r2, r3
 80046a6:	4a3f      	ldr	r2, [pc, #252]	; (80047a4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80046a8:	fba2 2303 	umull	r2, r3, r2, r3
 80046ac:	0c9b      	lsrs	r3, r3, #18
 80046ae:	3301      	adds	r3, #1
 80046b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80046b2:	e002      	b.n	80046ba <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	3b01      	subs	r3, #1
 80046b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80046ba:	4b38      	ldr	r3, [pc, #224]	; (800479c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046bc:	695b      	ldr	r3, [r3, #20]
 80046be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046c6:	d102      	bne.n	80046ce <HAL_PWREx_ControlVoltageScaling+0x6e>
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d1f2      	bne.n	80046b4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80046ce:	4b33      	ldr	r3, [pc, #204]	; (800479c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046d0:	695b      	ldr	r3, [r3, #20]
 80046d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046da:	d158      	bne.n	800478e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80046dc:	2303      	movs	r3, #3
 80046de:	e057      	b.n	8004790 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80046e0:	4b2e      	ldr	r3, [pc, #184]	; (800479c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046e6:	4a2d      	ldr	r2, [pc, #180]	; (800479c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046ec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80046f0:	e04d      	b.n	800478e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046f8:	d141      	bne.n	800477e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80046fa:	4b28      	ldr	r3, [pc, #160]	; (800479c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004702:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004706:	d131      	bne.n	800476c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004708:	4b24      	ldr	r3, [pc, #144]	; (800479c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800470a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800470e:	4a23      	ldr	r2, [pc, #140]	; (800479c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004710:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004714:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004718:	4b20      	ldr	r3, [pc, #128]	; (800479c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004720:	4a1e      	ldr	r2, [pc, #120]	; (800479c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004722:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004726:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004728:	4b1d      	ldr	r3, [pc, #116]	; (80047a0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	2232      	movs	r2, #50	; 0x32
 800472e:	fb02 f303 	mul.w	r3, r2, r3
 8004732:	4a1c      	ldr	r2, [pc, #112]	; (80047a4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004734:	fba2 2303 	umull	r2, r3, r2, r3
 8004738:	0c9b      	lsrs	r3, r3, #18
 800473a:	3301      	adds	r3, #1
 800473c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800473e:	e002      	b.n	8004746 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	3b01      	subs	r3, #1
 8004744:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004746:	4b15      	ldr	r3, [pc, #84]	; (800479c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004748:	695b      	ldr	r3, [r3, #20]
 800474a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800474e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004752:	d102      	bne.n	800475a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d1f2      	bne.n	8004740 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800475a:	4b10      	ldr	r3, [pc, #64]	; (800479c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800475c:	695b      	ldr	r3, [r3, #20]
 800475e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004762:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004766:	d112      	bne.n	800478e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004768:	2303      	movs	r3, #3
 800476a:	e011      	b.n	8004790 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800476c:	4b0b      	ldr	r3, [pc, #44]	; (800479c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800476e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004772:	4a0a      	ldr	r2, [pc, #40]	; (800479c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004774:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004778:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800477c:	e007      	b.n	800478e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800477e:	4b07      	ldr	r3, [pc, #28]	; (800479c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004786:	4a05      	ldr	r2, [pc, #20]	; (800479c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004788:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800478c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800478e:	2300      	movs	r3, #0
}
 8004790:	4618      	mov	r0, r3
 8004792:	3714      	adds	r7, #20
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr
 800479c:	40007000 	.word	0x40007000
 80047a0:	20000020 	.word	0x20000020
 80047a4:	431bde83 	.word	0x431bde83

080047a8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80047a8:	b480      	push	{r7}
 80047aa:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80047ac:	4b05      	ldr	r3, [pc, #20]	; (80047c4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	4a04      	ldr	r2, [pc, #16]	; (80047c4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80047b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80047b6:	6093      	str	r3, [r2, #8]
}
 80047b8:	bf00      	nop
 80047ba:	46bd      	mov	sp, r7
 80047bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c0:	4770      	bx	lr
 80047c2:	bf00      	nop
 80047c4:	40007000 	.word	0x40007000

080047c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b088      	sub	sp, #32
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d101      	bne.n	80047da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	e2fe      	b.n	8004dd8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f003 0301 	and.w	r3, r3, #1
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d075      	beq.n	80048d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047e6:	4b97      	ldr	r3, [pc, #604]	; (8004a44 <HAL_RCC_OscConfig+0x27c>)
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	f003 030c 	and.w	r3, r3, #12
 80047ee:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80047f0:	4b94      	ldr	r3, [pc, #592]	; (8004a44 <HAL_RCC_OscConfig+0x27c>)
 80047f2:	68db      	ldr	r3, [r3, #12]
 80047f4:	f003 0303 	and.w	r3, r3, #3
 80047f8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80047fa:	69bb      	ldr	r3, [r7, #24]
 80047fc:	2b0c      	cmp	r3, #12
 80047fe:	d102      	bne.n	8004806 <HAL_RCC_OscConfig+0x3e>
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	2b03      	cmp	r3, #3
 8004804:	d002      	beq.n	800480c <HAL_RCC_OscConfig+0x44>
 8004806:	69bb      	ldr	r3, [r7, #24]
 8004808:	2b08      	cmp	r3, #8
 800480a:	d10b      	bne.n	8004824 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800480c:	4b8d      	ldr	r3, [pc, #564]	; (8004a44 <HAL_RCC_OscConfig+0x27c>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004814:	2b00      	cmp	r3, #0
 8004816:	d05b      	beq.n	80048d0 <HAL_RCC_OscConfig+0x108>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d157      	bne.n	80048d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004820:	2301      	movs	r3, #1
 8004822:	e2d9      	b.n	8004dd8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800482c:	d106      	bne.n	800483c <HAL_RCC_OscConfig+0x74>
 800482e:	4b85      	ldr	r3, [pc, #532]	; (8004a44 <HAL_RCC_OscConfig+0x27c>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a84      	ldr	r2, [pc, #528]	; (8004a44 <HAL_RCC_OscConfig+0x27c>)
 8004834:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004838:	6013      	str	r3, [r2, #0]
 800483a:	e01d      	b.n	8004878 <HAL_RCC_OscConfig+0xb0>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004844:	d10c      	bne.n	8004860 <HAL_RCC_OscConfig+0x98>
 8004846:	4b7f      	ldr	r3, [pc, #508]	; (8004a44 <HAL_RCC_OscConfig+0x27c>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a7e      	ldr	r2, [pc, #504]	; (8004a44 <HAL_RCC_OscConfig+0x27c>)
 800484c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004850:	6013      	str	r3, [r2, #0]
 8004852:	4b7c      	ldr	r3, [pc, #496]	; (8004a44 <HAL_RCC_OscConfig+0x27c>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a7b      	ldr	r2, [pc, #492]	; (8004a44 <HAL_RCC_OscConfig+0x27c>)
 8004858:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800485c:	6013      	str	r3, [r2, #0]
 800485e:	e00b      	b.n	8004878 <HAL_RCC_OscConfig+0xb0>
 8004860:	4b78      	ldr	r3, [pc, #480]	; (8004a44 <HAL_RCC_OscConfig+0x27c>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a77      	ldr	r2, [pc, #476]	; (8004a44 <HAL_RCC_OscConfig+0x27c>)
 8004866:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800486a:	6013      	str	r3, [r2, #0]
 800486c:	4b75      	ldr	r3, [pc, #468]	; (8004a44 <HAL_RCC_OscConfig+0x27c>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a74      	ldr	r2, [pc, #464]	; (8004a44 <HAL_RCC_OscConfig+0x27c>)
 8004872:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004876:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d013      	beq.n	80048a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004880:	f7fd fab2 	bl	8001de8 <HAL_GetTick>
 8004884:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004886:	e008      	b.n	800489a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004888:	f7fd faae 	bl	8001de8 <HAL_GetTick>
 800488c:	4602      	mov	r2, r0
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	1ad3      	subs	r3, r2, r3
 8004892:	2b64      	cmp	r3, #100	; 0x64
 8004894:	d901      	bls.n	800489a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004896:	2303      	movs	r3, #3
 8004898:	e29e      	b.n	8004dd8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800489a:	4b6a      	ldr	r3, [pc, #424]	; (8004a44 <HAL_RCC_OscConfig+0x27c>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d0f0      	beq.n	8004888 <HAL_RCC_OscConfig+0xc0>
 80048a6:	e014      	b.n	80048d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048a8:	f7fd fa9e 	bl	8001de8 <HAL_GetTick>
 80048ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80048ae:	e008      	b.n	80048c2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048b0:	f7fd fa9a 	bl	8001de8 <HAL_GetTick>
 80048b4:	4602      	mov	r2, r0
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	1ad3      	subs	r3, r2, r3
 80048ba:	2b64      	cmp	r3, #100	; 0x64
 80048bc:	d901      	bls.n	80048c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80048be:	2303      	movs	r3, #3
 80048c0:	e28a      	b.n	8004dd8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80048c2:	4b60      	ldr	r3, [pc, #384]	; (8004a44 <HAL_RCC_OscConfig+0x27c>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d1f0      	bne.n	80048b0 <HAL_RCC_OscConfig+0xe8>
 80048ce:	e000      	b.n	80048d2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 0302 	and.w	r3, r3, #2
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d075      	beq.n	80049ca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048de:	4b59      	ldr	r3, [pc, #356]	; (8004a44 <HAL_RCC_OscConfig+0x27c>)
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	f003 030c 	and.w	r3, r3, #12
 80048e6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80048e8:	4b56      	ldr	r3, [pc, #344]	; (8004a44 <HAL_RCC_OscConfig+0x27c>)
 80048ea:	68db      	ldr	r3, [r3, #12]
 80048ec:	f003 0303 	and.w	r3, r3, #3
 80048f0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80048f2:	69bb      	ldr	r3, [r7, #24]
 80048f4:	2b0c      	cmp	r3, #12
 80048f6:	d102      	bne.n	80048fe <HAL_RCC_OscConfig+0x136>
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	2b02      	cmp	r3, #2
 80048fc:	d002      	beq.n	8004904 <HAL_RCC_OscConfig+0x13c>
 80048fe:	69bb      	ldr	r3, [r7, #24]
 8004900:	2b04      	cmp	r3, #4
 8004902:	d11f      	bne.n	8004944 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004904:	4b4f      	ldr	r3, [pc, #316]	; (8004a44 <HAL_RCC_OscConfig+0x27c>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800490c:	2b00      	cmp	r3, #0
 800490e:	d005      	beq.n	800491c <HAL_RCC_OscConfig+0x154>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	68db      	ldr	r3, [r3, #12]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d101      	bne.n	800491c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	e25d      	b.n	8004dd8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800491c:	4b49      	ldr	r3, [pc, #292]	; (8004a44 <HAL_RCC_OscConfig+0x27c>)
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	691b      	ldr	r3, [r3, #16]
 8004928:	061b      	lsls	r3, r3, #24
 800492a:	4946      	ldr	r1, [pc, #280]	; (8004a44 <HAL_RCC_OscConfig+0x27c>)
 800492c:	4313      	orrs	r3, r2
 800492e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004930:	4b45      	ldr	r3, [pc, #276]	; (8004a48 <HAL_RCC_OscConfig+0x280>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4618      	mov	r0, r3
 8004936:	f7fd fa0b 	bl	8001d50 <HAL_InitTick>
 800493a:	4603      	mov	r3, r0
 800493c:	2b00      	cmp	r3, #0
 800493e:	d043      	beq.n	80049c8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004940:	2301      	movs	r3, #1
 8004942:	e249      	b.n	8004dd8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	68db      	ldr	r3, [r3, #12]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d023      	beq.n	8004994 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800494c:	4b3d      	ldr	r3, [pc, #244]	; (8004a44 <HAL_RCC_OscConfig+0x27c>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a3c      	ldr	r2, [pc, #240]	; (8004a44 <HAL_RCC_OscConfig+0x27c>)
 8004952:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004956:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004958:	f7fd fa46 	bl	8001de8 <HAL_GetTick>
 800495c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800495e:	e008      	b.n	8004972 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004960:	f7fd fa42 	bl	8001de8 <HAL_GetTick>
 8004964:	4602      	mov	r2, r0
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	1ad3      	subs	r3, r2, r3
 800496a:	2b02      	cmp	r3, #2
 800496c:	d901      	bls.n	8004972 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800496e:	2303      	movs	r3, #3
 8004970:	e232      	b.n	8004dd8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004972:	4b34      	ldr	r3, [pc, #208]	; (8004a44 <HAL_RCC_OscConfig+0x27c>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800497a:	2b00      	cmp	r3, #0
 800497c:	d0f0      	beq.n	8004960 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800497e:	4b31      	ldr	r3, [pc, #196]	; (8004a44 <HAL_RCC_OscConfig+0x27c>)
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	691b      	ldr	r3, [r3, #16]
 800498a:	061b      	lsls	r3, r3, #24
 800498c:	492d      	ldr	r1, [pc, #180]	; (8004a44 <HAL_RCC_OscConfig+0x27c>)
 800498e:	4313      	orrs	r3, r2
 8004990:	604b      	str	r3, [r1, #4]
 8004992:	e01a      	b.n	80049ca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004994:	4b2b      	ldr	r3, [pc, #172]	; (8004a44 <HAL_RCC_OscConfig+0x27c>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a2a      	ldr	r2, [pc, #168]	; (8004a44 <HAL_RCC_OscConfig+0x27c>)
 800499a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800499e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049a0:	f7fd fa22 	bl	8001de8 <HAL_GetTick>
 80049a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80049a6:	e008      	b.n	80049ba <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049a8:	f7fd fa1e 	bl	8001de8 <HAL_GetTick>
 80049ac:	4602      	mov	r2, r0
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	1ad3      	subs	r3, r2, r3
 80049b2:	2b02      	cmp	r3, #2
 80049b4:	d901      	bls.n	80049ba <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80049b6:	2303      	movs	r3, #3
 80049b8:	e20e      	b.n	8004dd8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80049ba:	4b22      	ldr	r3, [pc, #136]	; (8004a44 <HAL_RCC_OscConfig+0x27c>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d1f0      	bne.n	80049a8 <HAL_RCC_OscConfig+0x1e0>
 80049c6:	e000      	b.n	80049ca <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80049c8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f003 0308 	and.w	r3, r3, #8
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d041      	beq.n	8004a5a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	695b      	ldr	r3, [r3, #20]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d01c      	beq.n	8004a18 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049de:	4b19      	ldr	r3, [pc, #100]	; (8004a44 <HAL_RCC_OscConfig+0x27c>)
 80049e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049e4:	4a17      	ldr	r2, [pc, #92]	; (8004a44 <HAL_RCC_OscConfig+0x27c>)
 80049e6:	f043 0301 	orr.w	r3, r3, #1
 80049ea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049ee:	f7fd f9fb 	bl	8001de8 <HAL_GetTick>
 80049f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80049f4:	e008      	b.n	8004a08 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049f6:	f7fd f9f7 	bl	8001de8 <HAL_GetTick>
 80049fa:	4602      	mov	r2, r0
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	1ad3      	subs	r3, r2, r3
 8004a00:	2b02      	cmp	r3, #2
 8004a02:	d901      	bls.n	8004a08 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004a04:	2303      	movs	r3, #3
 8004a06:	e1e7      	b.n	8004dd8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004a08:	4b0e      	ldr	r3, [pc, #56]	; (8004a44 <HAL_RCC_OscConfig+0x27c>)
 8004a0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a0e:	f003 0302 	and.w	r3, r3, #2
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d0ef      	beq.n	80049f6 <HAL_RCC_OscConfig+0x22e>
 8004a16:	e020      	b.n	8004a5a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a18:	4b0a      	ldr	r3, [pc, #40]	; (8004a44 <HAL_RCC_OscConfig+0x27c>)
 8004a1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a1e:	4a09      	ldr	r2, [pc, #36]	; (8004a44 <HAL_RCC_OscConfig+0x27c>)
 8004a20:	f023 0301 	bic.w	r3, r3, #1
 8004a24:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a28:	f7fd f9de 	bl	8001de8 <HAL_GetTick>
 8004a2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004a2e:	e00d      	b.n	8004a4c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a30:	f7fd f9da 	bl	8001de8 <HAL_GetTick>
 8004a34:	4602      	mov	r2, r0
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	1ad3      	subs	r3, r2, r3
 8004a3a:	2b02      	cmp	r3, #2
 8004a3c:	d906      	bls.n	8004a4c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004a3e:	2303      	movs	r3, #3
 8004a40:	e1ca      	b.n	8004dd8 <HAL_RCC_OscConfig+0x610>
 8004a42:	bf00      	nop
 8004a44:	40021000 	.word	0x40021000
 8004a48:	20000024 	.word	0x20000024
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004a4c:	4b8c      	ldr	r3, [pc, #560]	; (8004c80 <HAL_RCC_OscConfig+0x4b8>)
 8004a4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a52:	f003 0302 	and.w	r3, r3, #2
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d1ea      	bne.n	8004a30 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f003 0304 	and.w	r3, r3, #4
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	f000 80a6 	beq.w	8004bb4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004a6c:	4b84      	ldr	r3, [pc, #528]	; (8004c80 <HAL_RCC_OscConfig+0x4b8>)
 8004a6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d101      	bne.n	8004a7c <HAL_RCC_OscConfig+0x2b4>
 8004a78:	2301      	movs	r3, #1
 8004a7a:	e000      	b.n	8004a7e <HAL_RCC_OscConfig+0x2b6>
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d00d      	beq.n	8004a9e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a82:	4b7f      	ldr	r3, [pc, #508]	; (8004c80 <HAL_RCC_OscConfig+0x4b8>)
 8004a84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a86:	4a7e      	ldr	r2, [pc, #504]	; (8004c80 <HAL_RCC_OscConfig+0x4b8>)
 8004a88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a8c:	6593      	str	r3, [r2, #88]	; 0x58
 8004a8e:	4b7c      	ldr	r3, [pc, #496]	; (8004c80 <HAL_RCC_OscConfig+0x4b8>)
 8004a90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a96:	60fb      	str	r3, [r7, #12]
 8004a98:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a9e:	4b79      	ldr	r3, [pc, #484]	; (8004c84 <HAL_RCC_OscConfig+0x4bc>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d118      	bne.n	8004adc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004aaa:	4b76      	ldr	r3, [pc, #472]	; (8004c84 <HAL_RCC_OscConfig+0x4bc>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a75      	ldr	r2, [pc, #468]	; (8004c84 <HAL_RCC_OscConfig+0x4bc>)
 8004ab0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ab4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ab6:	f7fd f997 	bl	8001de8 <HAL_GetTick>
 8004aba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004abc:	e008      	b.n	8004ad0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004abe:	f7fd f993 	bl	8001de8 <HAL_GetTick>
 8004ac2:	4602      	mov	r2, r0
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	1ad3      	subs	r3, r2, r3
 8004ac8:	2b02      	cmp	r3, #2
 8004aca:	d901      	bls.n	8004ad0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004acc:	2303      	movs	r3, #3
 8004ace:	e183      	b.n	8004dd8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ad0:	4b6c      	ldr	r3, [pc, #432]	; (8004c84 <HAL_RCC_OscConfig+0x4bc>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d0f0      	beq.n	8004abe <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	2b01      	cmp	r3, #1
 8004ae2:	d108      	bne.n	8004af6 <HAL_RCC_OscConfig+0x32e>
 8004ae4:	4b66      	ldr	r3, [pc, #408]	; (8004c80 <HAL_RCC_OscConfig+0x4b8>)
 8004ae6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aea:	4a65      	ldr	r2, [pc, #404]	; (8004c80 <HAL_RCC_OscConfig+0x4b8>)
 8004aec:	f043 0301 	orr.w	r3, r3, #1
 8004af0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004af4:	e024      	b.n	8004b40 <HAL_RCC_OscConfig+0x378>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	2b05      	cmp	r3, #5
 8004afc:	d110      	bne.n	8004b20 <HAL_RCC_OscConfig+0x358>
 8004afe:	4b60      	ldr	r3, [pc, #384]	; (8004c80 <HAL_RCC_OscConfig+0x4b8>)
 8004b00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b04:	4a5e      	ldr	r2, [pc, #376]	; (8004c80 <HAL_RCC_OscConfig+0x4b8>)
 8004b06:	f043 0304 	orr.w	r3, r3, #4
 8004b0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004b0e:	4b5c      	ldr	r3, [pc, #368]	; (8004c80 <HAL_RCC_OscConfig+0x4b8>)
 8004b10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b14:	4a5a      	ldr	r2, [pc, #360]	; (8004c80 <HAL_RCC_OscConfig+0x4b8>)
 8004b16:	f043 0301 	orr.w	r3, r3, #1
 8004b1a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004b1e:	e00f      	b.n	8004b40 <HAL_RCC_OscConfig+0x378>
 8004b20:	4b57      	ldr	r3, [pc, #348]	; (8004c80 <HAL_RCC_OscConfig+0x4b8>)
 8004b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b26:	4a56      	ldr	r2, [pc, #344]	; (8004c80 <HAL_RCC_OscConfig+0x4b8>)
 8004b28:	f023 0301 	bic.w	r3, r3, #1
 8004b2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004b30:	4b53      	ldr	r3, [pc, #332]	; (8004c80 <HAL_RCC_OscConfig+0x4b8>)
 8004b32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b36:	4a52      	ldr	r2, [pc, #328]	; (8004c80 <HAL_RCC_OscConfig+0x4b8>)
 8004b38:	f023 0304 	bic.w	r3, r3, #4
 8004b3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d016      	beq.n	8004b76 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b48:	f7fd f94e 	bl	8001de8 <HAL_GetTick>
 8004b4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b4e:	e00a      	b.n	8004b66 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b50:	f7fd f94a 	bl	8001de8 <HAL_GetTick>
 8004b54:	4602      	mov	r2, r0
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	1ad3      	subs	r3, r2, r3
 8004b5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d901      	bls.n	8004b66 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004b62:	2303      	movs	r3, #3
 8004b64:	e138      	b.n	8004dd8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b66:	4b46      	ldr	r3, [pc, #280]	; (8004c80 <HAL_RCC_OscConfig+0x4b8>)
 8004b68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b6c:	f003 0302 	and.w	r3, r3, #2
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d0ed      	beq.n	8004b50 <HAL_RCC_OscConfig+0x388>
 8004b74:	e015      	b.n	8004ba2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b76:	f7fd f937 	bl	8001de8 <HAL_GetTick>
 8004b7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004b7c:	e00a      	b.n	8004b94 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b7e:	f7fd f933 	bl	8001de8 <HAL_GetTick>
 8004b82:	4602      	mov	r2, r0
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	1ad3      	subs	r3, r2, r3
 8004b88:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d901      	bls.n	8004b94 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004b90:	2303      	movs	r3, #3
 8004b92:	e121      	b.n	8004dd8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004b94:	4b3a      	ldr	r3, [pc, #232]	; (8004c80 <HAL_RCC_OscConfig+0x4b8>)
 8004b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b9a:	f003 0302 	and.w	r3, r3, #2
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d1ed      	bne.n	8004b7e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004ba2:	7ffb      	ldrb	r3, [r7, #31]
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	d105      	bne.n	8004bb4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ba8:	4b35      	ldr	r3, [pc, #212]	; (8004c80 <HAL_RCC_OscConfig+0x4b8>)
 8004baa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bac:	4a34      	ldr	r2, [pc, #208]	; (8004c80 <HAL_RCC_OscConfig+0x4b8>)
 8004bae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bb2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f003 0320 	and.w	r3, r3, #32
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d03c      	beq.n	8004c3a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	699b      	ldr	r3, [r3, #24]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d01c      	beq.n	8004c02 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004bc8:	4b2d      	ldr	r3, [pc, #180]	; (8004c80 <HAL_RCC_OscConfig+0x4b8>)
 8004bca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004bce:	4a2c      	ldr	r2, [pc, #176]	; (8004c80 <HAL_RCC_OscConfig+0x4b8>)
 8004bd0:	f043 0301 	orr.w	r3, r3, #1
 8004bd4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bd8:	f7fd f906 	bl	8001de8 <HAL_GetTick>
 8004bdc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004bde:	e008      	b.n	8004bf2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004be0:	f7fd f902 	bl	8001de8 <HAL_GetTick>
 8004be4:	4602      	mov	r2, r0
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	1ad3      	subs	r3, r2, r3
 8004bea:	2b02      	cmp	r3, #2
 8004bec:	d901      	bls.n	8004bf2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004bee:	2303      	movs	r3, #3
 8004bf0:	e0f2      	b.n	8004dd8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004bf2:	4b23      	ldr	r3, [pc, #140]	; (8004c80 <HAL_RCC_OscConfig+0x4b8>)
 8004bf4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004bf8:	f003 0302 	and.w	r3, r3, #2
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d0ef      	beq.n	8004be0 <HAL_RCC_OscConfig+0x418>
 8004c00:	e01b      	b.n	8004c3a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004c02:	4b1f      	ldr	r3, [pc, #124]	; (8004c80 <HAL_RCC_OscConfig+0x4b8>)
 8004c04:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004c08:	4a1d      	ldr	r2, [pc, #116]	; (8004c80 <HAL_RCC_OscConfig+0x4b8>)
 8004c0a:	f023 0301 	bic.w	r3, r3, #1
 8004c0e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c12:	f7fd f8e9 	bl	8001de8 <HAL_GetTick>
 8004c16:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004c18:	e008      	b.n	8004c2c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004c1a:	f7fd f8e5 	bl	8001de8 <HAL_GetTick>
 8004c1e:	4602      	mov	r2, r0
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	1ad3      	subs	r3, r2, r3
 8004c24:	2b02      	cmp	r3, #2
 8004c26:	d901      	bls.n	8004c2c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004c28:	2303      	movs	r3, #3
 8004c2a:	e0d5      	b.n	8004dd8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004c2c:	4b14      	ldr	r3, [pc, #80]	; (8004c80 <HAL_RCC_OscConfig+0x4b8>)
 8004c2e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004c32:	f003 0302 	and.w	r3, r3, #2
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d1ef      	bne.n	8004c1a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	69db      	ldr	r3, [r3, #28]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	f000 80c9 	beq.w	8004dd6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c44:	4b0e      	ldr	r3, [pc, #56]	; (8004c80 <HAL_RCC_OscConfig+0x4b8>)
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	f003 030c 	and.w	r3, r3, #12
 8004c4c:	2b0c      	cmp	r3, #12
 8004c4e:	f000 8083 	beq.w	8004d58 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	69db      	ldr	r3, [r3, #28]
 8004c56:	2b02      	cmp	r3, #2
 8004c58:	d15e      	bne.n	8004d18 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c5a:	4b09      	ldr	r3, [pc, #36]	; (8004c80 <HAL_RCC_OscConfig+0x4b8>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a08      	ldr	r2, [pc, #32]	; (8004c80 <HAL_RCC_OscConfig+0x4b8>)
 8004c60:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c66:	f7fd f8bf 	bl	8001de8 <HAL_GetTick>
 8004c6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c6c:	e00c      	b.n	8004c88 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c6e:	f7fd f8bb 	bl	8001de8 <HAL_GetTick>
 8004c72:	4602      	mov	r2, r0
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	1ad3      	subs	r3, r2, r3
 8004c78:	2b02      	cmp	r3, #2
 8004c7a:	d905      	bls.n	8004c88 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004c7c:	2303      	movs	r3, #3
 8004c7e:	e0ab      	b.n	8004dd8 <HAL_RCC_OscConfig+0x610>
 8004c80:	40021000 	.word	0x40021000
 8004c84:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c88:	4b55      	ldr	r3, [pc, #340]	; (8004de0 <HAL_RCC_OscConfig+0x618>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d1ec      	bne.n	8004c6e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c94:	4b52      	ldr	r3, [pc, #328]	; (8004de0 <HAL_RCC_OscConfig+0x618>)
 8004c96:	68da      	ldr	r2, [r3, #12]
 8004c98:	4b52      	ldr	r3, [pc, #328]	; (8004de4 <HAL_RCC_OscConfig+0x61c>)
 8004c9a:	4013      	ands	r3, r2
 8004c9c:	687a      	ldr	r2, [r7, #4]
 8004c9e:	6a11      	ldr	r1, [r2, #32]
 8004ca0:	687a      	ldr	r2, [r7, #4]
 8004ca2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004ca4:	3a01      	subs	r2, #1
 8004ca6:	0112      	lsls	r2, r2, #4
 8004ca8:	4311      	orrs	r1, r2
 8004caa:	687a      	ldr	r2, [r7, #4]
 8004cac:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004cae:	0212      	lsls	r2, r2, #8
 8004cb0:	4311      	orrs	r1, r2
 8004cb2:	687a      	ldr	r2, [r7, #4]
 8004cb4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004cb6:	0852      	lsrs	r2, r2, #1
 8004cb8:	3a01      	subs	r2, #1
 8004cba:	0552      	lsls	r2, r2, #21
 8004cbc:	4311      	orrs	r1, r2
 8004cbe:	687a      	ldr	r2, [r7, #4]
 8004cc0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004cc2:	0852      	lsrs	r2, r2, #1
 8004cc4:	3a01      	subs	r2, #1
 8004cc6:	0652      	lsls	r2, r2, #25
 8004cc8:	4311      	orrs	r1, r2
 8004cca:	687a      	ldr	r2, [r7, #4]
 8004ccc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004cce:	06d2      	lsls	r2, r2, #27
 8004cd0:	430a      	orrs	r2, r1
 8004cd2:	4943      	ldr	r1, [pc, #268]	; (8004de0 <HAL_RCC_OscConfig+0x618>)
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004cd8:	4b41      	ldr	r3, [pc, #260]	; (8004de0 <HAL_RCC_OscConfig+0x618>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a40      	ldr	r2, [pc, #256]	; (8004de0 <HAL_RCC_OscConfig+0x618>)
 8004cde:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ce2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004ce4:	4b3e      	ldr	r3, [pc, #248]	; (8004de0 <HAL_RCC_OscConfig+0x618>)
 8004ce6:	68db      	ldr	r3, [r3, #12]
 8004ce8:	4a3d      	ldr	r2, [pc, #244]	; (8004de0 <HAL_RCC_OscConfig+0x618>)
 8004cea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004cee:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cf0:	f7fd f87a 	bl	8001de8 <HAL_GetTick>
 8004cf4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004cf6:	e008      	b.n	8004d0a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cf8:	f7fd f876 	bl	8001de8 <HAL_GetTick>
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	1ad3      	subs	r3, r2, r3
 8004d02:	2b02      	cmp	r3, #2
 8004d04:	d901      	bls.n	8004d0a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004d06:	2303      	movs	r3, #3
 8004d08:	e066      	b.n	8004dd8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d0a:	4b35      	ldr	r3, [pc, #212]	; (8004de0 <HAL_RCC_OscConfig+0x618>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d0f0      	beq.n	8004cf8 <HAL_RCC_OscConfig+0x530>
 8004d16:	e05e      	b.n	8004dd6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d18:	4b31      	ldr	r3, [pc, #196]	; (8004de0 <HAL_RCC_OscConfig+0x618>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a30      	ldr	r2, [pc, #192]	; (8004de0 <HAL_RCC_OscConfig+0x618>)
 8004d1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d24:	f7fd f860 	bl	8001de8 <HAL_GetTick>
 8004d28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d2a:	e008      	b.n	8004d3e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d2c:	f7fd f85c 	bl	8001de8 <HAL_GetTick>
 8004d30:	4602      	mov	r2, r0
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	1ad3      	subs	r3, r2, r3
 8004d36:	2b02      	cmp	r3, #2
 8004d38:	d901      	bls.n	8004d3e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004d3a:	2303      	movs	r3, #3
 8004d3c:	e04c      	b.n	8004dd8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d3e:	4b28      	ldr	r3, [pc, #160]	; (8004de0 <HAL_RCC_OscConfig+0x618>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d1f0      	bne.n	8004d2c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004d4a:	4b25      	ldr	r3, [pc, #148]	; (8004de0 <HAL_RCC_OscConfig+0x618>)
 8004d4c:	68da      	ldr	r2, [r3, #12]
 8004d4e:	4924      	ldr	r1, [pc, #144]	; (8004de0 <HAL_RCC_OscConfig+0x618>)
 8004d50:	4b25      	ldr	r3, [pc, #148]	; (8004de8 <HAL_RCC_OscConfig+0x620>)
 8004d52:	4013      	ands	r3, r2
 8004d54:	60cb      	str	r3, [r1, #12]
 8004d56:	e03e      	b.n	8004dd6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	69db      	ldr	r3, [r3, #28]
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d101      	bne.n	8004d64 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004d60:	2301      	movs	r3, #1
 8004d62:	e039      	b.n	8004dd8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004d64:	4b1e      	ldr	r3, [pc, #120]	; (8004de0 <HAL_RCC_OscConfig+0x618>)
 8004d66:	68db      	ldr	r3, [r3, #12]
 8004d68:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	f003 0203 	and.w	r2, r3, #3
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6a1b      	ldr	r3, [r3, #32]
 8004d74:	429a      	cmp	r2, r3
 8004d76:	d12c      	bne.n	8004dd2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d82:	3b01      	subs	r3, #1
 8004d84:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d86:	429a      	cmp	r2, r3
 8004d88:	d123      	bne.n	8004dd2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d94:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004d96:	429a      	cmp	r2, r3
 8004d98:	d11b      	bne.n	8004dd2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004da4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004da6:	429a      	cmp	r2, r3
 8004da8:	d113      	bne.n	8004dd2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004db4:	085b      	lsrs	r3, r3, #1
 8004db6:	3b01      	subs	r3, #1
 8004db8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004dba:	429a      	cmp	r2, r3
 8004dbc:	d109      	bne.n	8004dd2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dc8:	085b      	lsrs	r3, r3, #1
 8004dca:	3b01      	subs	r3, #1
 8004dcc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	d001      	beq.n	8004dd6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e000      	b.n	8004dd8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004dd6:	2300      	movs	r3, #0
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	3720      	adds	r7, #32
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}
 8004de0:	40021000 	.word	0x40021000
 8004de4:	019f800c 	.word	0x019f800c
 8004de8:	feeefffc 	.word	0xfeeefffc

08004dec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b086      	sub	sp, #24
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
 8004df4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004df6:	2300      	movs	r3, #0
 8004df8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d101      	bne.n	8004e04 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004e00:	2301      	movs	r3, #1
 8004e02:	e11e      	b.n	8005042 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004e04:	4b91      	ldr	r3, [pc, #580]	; (800504c <HAL_RCC_ClockConfig+0x260>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f003 030f 	and.w	r3, r3, #15
 8004e0c:	683a      	ldr	r2, [r7, #0]
 8004e0e:	429a      	cmp	r2, r3
 8004e10:	d910      	bls.n	8004e34 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e12:	4b8e      	ldr	r3, [pc, #568]	; (800504c <HAL_RCC_ClockConfig+0x260>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f023 020f 	bic.w	r2, r3, #15
 8004e1a:	498c      	ldr	r1, [pc, #560]	; (800504c <HAL_RCC_ClockConfig+0x260>)
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e22:	4b8a      	ldr	r3, [pc, #552]	; (800504c <HAL_RCC_ClockConfig+0x260>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f003 030f 	and.w	r3, r3, #15
 8004e2a:	683a      	ldr	r2, [r7, #0]
 8004e2c:	429a      	cmp	r2, r3
 8004e2e:	d001      	beq.n	8004e34 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004e30:	2301      	movs	r3, #1
 8004e32:	e106      	b.n	8005042 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f003 0301 	and.w	r3, r3, #1
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d073      	beq.n	8004f28 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	2b03      	cmp	r3, #3
 8004e46:	d129      	bne.n	8004e9c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e48:	4b81      	ldr	r3, [pc, #516]	; (8005050 <HAL_RCC_ClockConfig+0x264>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d101      	bne.n	8004e58 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004e54:	2301      	movs	r3, #1
 8004e56:	e0f4      	b.n	8005042 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004e58:	f000 f99e 	bl	8005198 <RCC_GetSysClockFreqFromPLLSource>
 8004e5c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	4a7c      	ldr	r2, [pc, #496]	; (8005054 <HAL_RCC_ClockConfig+0x268>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d93f      	bls.n	8004ee6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004e66:	4b7a      	ldr	r3, [pc, #488]	; (8005050 <HAL_RCC_ClockConfig+0x264>)
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d009      	beq.n	8004e86 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d033      	beq.n	8004ee6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d12f      	bne.n	8004ee6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004e86:	4b72      	ldr	r3, [pc, #456]	; (8005050 <HAL_RCC_ClockConfig+0x264>)
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e8e:	4a70      	ldr	r2, [pc, #448]	; (8005050 <HAL_RCC_ClockConfig+0x264>)
 8004e90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e94:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004e96:	2380      	movs	r3, #128	; 0x80
 8004e98:	617b      	str	r3, [r7, #20]
 8004e9a:	e024      	b.n	8004ee6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	2b02      	cmp	r3, #2
 8004ea2:	d107      	bne.n	8004eb4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ea4:	4b6a      	ldr	r3, [pc, #424]	; (8005050 <HAL_RCC_ClockConfig+0x264>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d109      	bne.n	8004ec4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	e0c6      	b.n	8005042 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004eb4:	4b66      	ldr	r3, [pc, #408]	; (8005050 <HAL_RCC_ClockConfig+0x264>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d101      	bne.n	8004ec4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	e0be      	b.n	8005042 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004ec4:	f000 f8ce 	bl	8005064 <HAL_RCC_GetSysClockFreq>
 8004ec8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	4a61      	ldr	r2, [pc, #388]	; (8005054 <HAL_RCC_ClockConfig+0x268>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d909      	bls.n	8004ee6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004ed2:	4b5f      	ldr	r3, [pc, #380]	; (8005050 <HAL_RCC_ClockConfig+0x264>)
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004eda:	4a5d      	ldr	r2, [pc, #372]	; (8005050 <HAL_RCC_ClockConfig+0x264>)
 8004edc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ee0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004ee2:	2380      	movs	r3, #128	; 0x80
 8004ee4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004ee6:	4b5a      	ldr	r3, [pc, #360]	; (8005050 <HAL_RCC_ClockConfig+0x264>)
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	f023 0203 	bic.w	r2, r3, #3
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	4957      	ldr	r1, [pc, #348]	; (8005050 <HAL_RCC_ClockConfig+0x264>)
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ef8:	f7fc ff76 	bl	8001de8 <HAL_GetTick>
 8004efc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004efe:	e00a      	b.n	8004f16 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f00:	f7fc ff72 	bl	8001de8 <HAL_GetTick>
 8004f04:	4602      	mov	r2, r0
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	1ad3      	subs	r3, r2, r3
 8004f0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d901      	bls.n	8004f16 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004f12:	2303      	movs	r3, #3
 8004f14:	e095      	b.n	8005042 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f16:	4b4e      	ldr	r3, [pc, #312]	; (8005050 <HAL_RCC_ClockConfig+0x264>)
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	f003 020c 	and.w	r2, r3, #12
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	009b      	lsls	r3, r3, #2
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d1eb      	bne.n	8004f00 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f003 0302 	and.w	r3, r3, #2
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d023      	beq.n	8004f7c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f003 0304 	and.w	r3, r3, #4
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d005      	beq.n	8004f4c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f40:	4b43      	ldr	r3, [pc, #268]	; (8005050 <HAL_RCC_ClockConfig+0x264>)
 8004f42:	689b      	ldr	r3, [r3, #8]
 8004f44:	4a42      	ldr	r2, [pc, #264]	; (8005050 <HAL_RCC_ClockConfig+0x264>)
 8004f46:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004f4a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f003 0308 	and.w	r3, r3, #8
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d007      	beq.n	8004f68 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004f58:	4b3d      	ldr	r3, [pc, #244]	; (8005050 <HAL_RCC_ClockConfig+0x264>)
 8004f5a:	689b      	ldr	r3, [r3, #8]
 8004f5c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004f60:	4a3b      	ldr	r2, [pc, #236]	; (8005050 <HAL_RCC_ClockConfig+0x264>)
 8004f62:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004f66:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f68:	4b39      	ldr	r3, [pc, #228]	; (8005050 <HAL_RCC_ClockConfig+0x264>)
 8004f6a:	689b      	ldr	r3, [r3, #8]
 8004f6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	4936      	ldr	r1, [pc, #216]	; (8005050 <HAL_RCC_ClockConfig+0x264>)
 8004f76:	4313      	orrs	r3, r2
 8004f78:	608b      	str	r3, [r1, #8]
 8004f7a:	e008      	b.n	8004f8e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	2b80      	cmp	r3, #128	; 0x80
 8004f80:	d105      	bne.n	8004f8e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004f82:	4b33      	ldr	r3, [pc, #204]	; (8005050 <HAL_RCC_ClockConfig+0x264>)
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	4a32      	ldr	r2, [pc, #200]	; (8005050 <HAL_RCC_ClockConfig+0x264>)
 8004f88:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f8c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004f8e:	4b2f      	ldr	r3, [pc, #188]	; (800504c <HAL_RCC_ClockConfig+0x260>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f003 030f 	and.w	r3, r3, #15
 8004f96:	683a      	ldr	r2, [r7, #0]
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	d21d      	bcs.n	8004fd8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f9c:	4b2b      	ldr	r3, [pc, #172]	; (800504c <HAL_RCC_ClockConfig+0x260>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f023 020f 	bic.w	r2, r3, #15
 8004fa4:	4929      	ldr	r1, [pc, #164]	; (800504c <HAL_RCC_ClockConfig+0x260>)
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004fac:	f7fc ff1c 	bl	8001de8 <HAL_GetTick>
 8004fb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fb2:	e00a      	b.n	8004fca <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fb4:	f7fc ff18 	bl	8001de8 <HAL_GetTick>
 8004fb8:	4602      	mov	r2, r0
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	1ad3      	subs	r3, r2, r3
 8004fbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d901      	bls.n	8004fca <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004fc6:	2303      	movs	r3, #3
 8004fc8:	e03b      	b.n	8005042 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fca:	4b20      	ldr	r3, [pc, #128]	; (800504c <HAL_RCC_ClockConfig+0x260>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f003 030f 	and.w	r3, r3, #15
 8004fd2:	683a      	ldr	r2, [r7, #0]
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	d1ed      	bne.n	8004fb4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f003 0304 	and.w	r3, r3, #4
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d008      	beq.n	8004ff6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004fe4:	4b1a      	ldr	r3, [pc, #104]	; (8005050 <HAL_RCC_ClockConfig+0x264>)
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	68db      	ldr	r3, [r3, #12]
 8004ff0:	4917      	ldr	r1, [pc, #92]	; (8005050 <HAL_RCC_ClockConfig+0x264>)
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f003 0308 	and.w	r3, r3, #8
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d009      	beq.n	8005016 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005002:	4b13      	ldr	r3, [pc, #76]	; (8005050 <HAL_RCC_ClockConfig+0x264>)
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	691b      	ldr	r3, [r3, #16]
 800500e:	00db      	lsls	r3, r3, #3
 8005010:	490f      	ldr	r1, [pc, #60]	; (8005050 <HAL_RCC_ClockConfig+0x264>)
 8005012:	4313      	orrs	r3, r2
 8005014:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005016:	f000 f825 	bl	8005064 <HAL_RCC_GetSysClockFreq>
 800501a:	4602      	mov	r2, r0
 800501c:	4b0c      	ldr	r3, [pc, #48]	; (8005050 <HAL_RCC_ClockConfig+0x264>)
 800501e:	689b      	ldr	r3, [r3, #8]
 8005020:	091b      	lsrs	r3, r3, #4
 8005022:	f003 030f 	and.w	r3, r3, #15
 8005026:	490c      	ldr	r1, [pc, #48]	; (8005058 <HAL_RCC_ClockConfig+0x26c>)
 8005028:	5ccb      	ldrb	r3, [r1, r3]
 800502a:	f003 031f 	and.w	r3, r3, #31
 800502e:	fa22 f303 	lsr.w	r3, r2, r3
 8005032:	4a0a      	ldr	r2, [pc, #40]	; (800505c <HAL_RCC_ClockConfig+0x270>)
 8005034:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005036:	4b0a      	ldr	r3, [pc, #40]	; (8005060 <HAL_RCC_ClockConfig+0x274>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4618      	mov	r0, r3
 800503c:	f7fc fe88 	bl	8001d50 <HAL_InitTick>
 8005040:	4603      	mov	r3, r0
}
 8005042:	4618      	mov	r0, r3
 8005044:	3718      	adds	r7, #24
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}
 800504a:	bf00      	nop
 800504c:	40022000 	.word	0x40022000
 8005050:	40021000 	.word	0x40021000
 8005054:	04c4b400 	.word	0x04c4b400
 8005058:	08008ca4 	.word	0x08008ca4
 800505c:	20000020 	.word	0x20000020
 8005060:	20000024 	.word	0x20000024

08005064 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005064:	b480      	push	{r7}
 8005066:	b087      	sub	sp, #28
 8005068:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800506a:	4b2c      	ldr	r3, [pc, #176]	; (800511c <HAL_RCC_GetSysClockFreq+0xb8>)
 800506c:	689b      	ldr	r3, [r3, #8]
 800506e:	f003 030c 	and.w	r3, r3, #12
 8005072:	2b04      	cmp	r3, #4
 8005074:	d102      	bne.n	800507c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005076:	4b2a      	ldr	r3, [pc, #168]	; (8005120 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005078:	613b      	str	r3, [r7, #16]
 800507a:	e047      	b.n	800510c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800507c:	4b27      	ldr	r3, [pc, #156]	; (800511c <HAL_RCC_GetSysClockFreq+0xb8>)
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	f003 030c 	and.w	r3, r3, #12
 8005084:	2b08      	cmp	r3, #8
 8005086:	d102      	bne.n	800508e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005088:	4b26      	ldr	r3, [pc, #152]	; (8005124 <HAL_RCC_GetSysClockFreq+0xc0>)
 800508a:	613b      	str	r3, [r7, #16]
 800508c:	e03e      	b.n	800510c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800508e:	4b23      	ldr	r3, [pc, #140]	; (800511c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005090:	689b      	ldr	r3, [r3, #8]
 8005092:	f003 030c 	and.w	r3, r3, #12
 8005096:	2b0c      	cmp	r3, #12
 8005098:	d136      	bne.n	8005108 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800509a:	4b20      	ldr	r3, [pc, #128]	; (800511c <HAL_RCC_GetSysClockFreq+0xb8>)
 800509c:	68db      	ldr	r3, [r3, #12]
 800509e:	f003 0303 	and.w	r3, r3, #3
 80050a2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80050a4:	4b1d      	ldr	r3, [pc, #116]	; (800511c <HAL_RCC_GetSysClockFreq+0xb8>)
 80050a6:	68db      	ldr	r3, [r3, #12]
 80050a8:	091b      	lsrs	r3, r3, #4
 80050aa:	f003 030f 	and.w	r3, r3, #15
 80050ae:	3301      	adds	r3, #1
 80050b0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2b03      	cmp	r3, #3
 80050b6:	d10c      	bne.n	80050d2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80050b8:	4a1a      	ldr	r2, [pc, #104]	; (8005124 <HAL_RCC_GetSysClockFreq+0xc0>)
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80050c0:	4a16      	ldr	r2, [pc, #88]	; (800511c <HAL_RCC_GetSysClockFreq+0xb8>)
 80050c2:	68d2      	ldr	r2, [r2, #12]
 80050c4:	0a12      	lsrs	r2, r2, #8
 80050c6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80050ca:	fb02 f303 	mul.w	r3, r2, r3
 80050ce:	617b      	str	r3, [r7, #20]
      break;
 80050d0:	e00c      	b.n	80050ec <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80050d2:	4a13      	ldr	r2, [pc, #76]	; (8005120 <HAL_RCC_GetSysClockFreq+0xbc>)
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80050da:	4a10      	ldr	r2, [pc, #64]	; (800511c <HAL_RCC_GetSysClockFreq+0xb8>)
 80050dc:	68d2      	ldr	r2, [r2, #12]
 80050de:	0a12      	lsrs	r2, r2, #8
 80050e0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80050e4:	fb02 f303 	mul.w	r3, r2, r3
 80050e8:	617b      	str	r3, [r7, #20]
      break;
 80050ea:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80050ec:	4b0b      	ldr	r3, [pc, #44]	; (800511c <HAL_RCC_GetSysClockFreq+0xb8>)
 80050ee:	68db      	ldr	r3, [r3, #12]
 80050f0:	0e5b      	lsrs	r3, r3, #25
 80050f2:	f003 0303 	and.w	r3, r3, #3
 80050f6:	3301      	adds	r3, #1
 80050f8:	005b      	lsls	r3, r3, #1
 80050fa:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80050fc:	697a      	ldr	r2, [r7, #20]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	fbb2 f3f3 	udiv	r3, r2, r3
 8005104:	613b      	str	r3, [r7, #16]
 8005106:	e001      	b.n	800510c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005108:	2300      	movs	r3, #0
 800510a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800510c:	693b      	ldr	r3, [r7, #16]
}
 800510e:	4618      	mov	r0, r3
 8005110:	371c      	adds	r7, #28
 8005112:	46bd      	mov	sp, r7
 8005114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005118:	4770      	bx	lr
 800511a:	bf00      	nop
 800511c:	40021000 	.word	0x40021000
 8005120:	00f42400 	.word	0x00f42400
 8005124:	016e3600 	.word	0x016e3600

08005128 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005128:	b480      	push	{r7}
 800512a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800512c:	4b03      	ldr	r3, [pc, #12]	; (800513c <HAL_RCC_GetHCLKFreq+0x14>)
 800512e:	681b      	ldr	r3, [r3, #0]
}
 8005130:	4618      	mov	r0, r3
 8005132:	46bd      	mov	sp, r7
 8005134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005138:	4770      	bx	lr
 800513a:	bf00      	nop
 800513c:	20000020 	.word	0x20000020

08005140 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005144:	f7ff fff0 	bl	8005128 <HAL_RCC_GetHCLKFreq>
 8005148:	4602      	mov	r2, r0
 800514a:	4b06      	ldr	r3, [pc, #24]	; (8005164 <HAL_RCC_GetPCLK1Freq+0x24>)
 800514c:	689b      	ldr	r3, [r3, #8]
 800514e:	0a1b      	lsrs	r3, r3, #8
 8005150:	f003 0307 	and.w	r3, r3, #7
 8005154:	4904      	ldr	r1, [pc, #16]	; (8005168 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005156:	5ccb      	ldrb	r3, [r1, r3]
 8005158:	f003 031f 	and.w	r3, r3, #31
 800515c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005160:	4618      	mov	r0, r3
 8005162:	bd80      	pop	{r7, pc}
 8005164:	40021000 	.word	0x40021000
 8005168:	08008cb4 	.word	0x08008cb4

0800516c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005170:	f7ff ffda 	bl	8005128 <HAL_RCC_GetHCLKFreq>
 8005174:	4602      	mov	r2, r0
 8005176:	4b06      	ldr	r3, [pc, #24]	; (8005190 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	0adb      	lsrs	r3, r3, #11
 800517c:	f003 0307 	and.w	r3, r3, #7
 8005180:	4904      	ldr	r1, [pc, #16]	; (8005194 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005182:	5ccb      	ldrb	r3, [r1, r3]
 8005184:	f003 031f 	and.w	r3, r3, #31
 8005188:	fa22 f303 	lsr.w	r3, r2, r3
}
 800518c:	4618      	mov	r0, r3
 800518e:	bd80      	pop	{r7, pc}
 8005190:	40021000 	.word	0x40021000
 8005194:	08008cb4 	.word	0x08008cb4

08005198 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005198:	b480      	push	{r7}
 800519a:	b087      	sub	sp, #28
 800519c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800519e:	4b1e      	ldr	r3, [pc, #120]	; (8005218 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80051a0:	68db      	ldr	r3, [r3, #12]
 80051a2:	f003 0303 	and.w	r3, r3, #3
 80051a6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80051a8:	4b1b      	ldr	r3, [pc, #108]	; (8005218 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80051aa:	68db      	ldr	r3, [r3, #12]
 80051ac:	091b      	lsrs	r3, r3, #4
 80051ae:	f003 030f 	and.w	r3, r3, #15
 80051b2:	3301      	adds	r3, #1
 80051b4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	2b03      	cmp	r3, #3
 80051ba:	d10c      	bne.n	80051d6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80051bc:	4a17      	ldr	r2, [pc, #92]	; (800521c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80051c4:	4a14      	ldr	r2, [pc, #80]	; (8005218 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80051c6:	68d2      	ldr	r2, [r2, #12]
 80051c8:	0a12      	lsrs	r2, r2, #8
 80051ca:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80051ce:	fb02 f303 	mul.w	r3, r2, r3
 80051d2:	617b      	str	r3, [r7, #20]
    break;
 80051d4:	e00c      	b.n	80051f0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80051d6:	4a12      	ldr	r2, [pc, #72]	; (8005220 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	fbb2 f3f3 	udiv	r3, r2, r3
 80051de:	4a0e      	ldr	r2, [pc, #56]	; (8005218 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80051e0:	68d2      	ldr	r2, [r2, #12]
 80051e2:	0a12      	lsrs	r2, r2, #8
 80051e4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80051e8:	fb02 f303 	mul.w	r3, r2, r3
 80051ec:	617b      	str	r3, [r7, #20]
    break;
 80051ee:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80051f0:	4b09      	ldr	r3, [pc, #36]	; (8005218 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80051f2:	68db      	ldr	r3, [r3, #12]
 80051f4:	0e5b      	lsrs	r3, r3, #25
 80051f6:	f003 0303 	and.w	r3, r3, #3
 80051fa:	3301      	adds	r3, #1
 80051fc:	005b      	lsls	r3, r3, #1
 80051fe:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005200:	697a      	ldr	r2, [r7, #20]
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	fbb2 f3f3 	udiv	r3, r2, r3
 8005208:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800520a:	687b      	ldr	r3, [r7, #4]
}
 800520c:	4618      	mov	r0, r3
 800520e:	371c      	adds	r7, #28
 8005210:	46bd      	mov	sp, r7
 8005212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005216:	4770      	bx	lr
 8005218:	40021000 	.word	0x40021000
 800521c:	016e3600 	.word	0x016e3600
 8005220:	00f42400 	.word	0x00f42400

08005224 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b086      	sub	sp, #24
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800522c:	2300      	movs	r3, #0
 800522e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005230:	2300      	movs	r3, #0
 8005232:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800523c:	2b00      	cmp	r3, #0
 800523e:	f000 8098 	beq.w	8005372 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005242:	2300      	movs	r3, #0
 8005244:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005246:	4b43      	ldr	r3, [pc, #268]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005248:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800524a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800524e:	2b00      	cmp	r3, #0
 8005250:	d10d      	bne.n	800526e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005252:	4b40      	ldr	r3, [pc, #256]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005254:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005256:	4a3f      	ldr	r2, [pc, #252]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005258:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800525c:	6593      	str	r3, [r2, #88]	; 0x58
 800525e:	4b3d      	ldr	r3, [pc, #244]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005260:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005262:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005266:	60bb      	str	r3, [r7, #8]
 8005268:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800526a:	2301      	movs	r3, #1
 800526c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800526e:	4b3a      	ldr	r3, [pc, #232]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a39      	ldr	r2, [pc, #228]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005274:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005278:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800527a:	f7fc fdb5 	bl	8001de8 <HAL_GetTick>
 800527e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005280:	e009      	b.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005282:	f7fc fdb1 	bl	8001de8 <HAL_GetTick>
 8005286:	4602      	mov	r2, r0
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	1ad3      	subs	r3, r2, r3
 800528c:	2b02      	cmp	r3, #2
 800528e:	d902      	bls.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005290:	2303      	movs	r3, #3
 8005292:	74fb      	strb	r3, [r7, #19]
        break;
 8005294:	e005      	b.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005296:	4b30      	ldr	r3, [pc, #192]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d0ef      	beq.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80052a2:	7cfb      	ldrb	r3, [r7, #19]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d159      	bne.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80052a8:	4b2a      	ldr	r3, [pc, #168]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052b2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d01e      	beq.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052be:	697a      	ldr	r2, [r7, #20]
 80052c0:	429a      	cmp	r2, r3
 80052c2:	d019      	beq.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80052c4:	4b23      	ldr	r3, [pc, #140]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052ce:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80052d0:	4b20      	ldr	r3, [pc, #128]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052d6:	4a1f      	ldr	r2, [pc, #124]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80052e0:	4b1c      	ldr	r3, [pc, #112]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052e6:	4a1b      	ldr	r2, [pc, #108]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80052f0:	4a18      	ldr	r2, [pc, #96]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	f003 0301 	and.w	r3, r3, #1
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d016      	beq.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005302:	f7fc fd71 	bl	8001de8 <HAL_GetTick>
 8005306:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005308:	e00b      	b.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800530a:	f7fc fd6d 	bl	8001de8 <HAL_GetTick>
 800530e:	4602      	mov	r2, r0
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	1ad3      	subs	r3, r2, r3
 8005314:	f241 3288 	movw	r2, #5000	; 0x1388
 8005318:	4293      	cmp	r3, r2
 800531a:	d902      	bls.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800531c:	2303      	movs	r3, #3
 800531e:	74fb      	strb	r3, [r7, #19]
            break;
 8005320:	e006      	b.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005322:	4b0c      	ldr	r3, [pc, #48]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005324:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005328:	f003 0302 	and.w	r3, r3, #2
 800532c:	2b00      	cmp	r3, #0
 800532e:	d0ec      	beq.n	800530a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005330:	7cfb      	ldrb	r3, [r7, #19]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d10b      	bne.n	800534e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005336:	4b07      	ldr	r3, [pc, #28]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005338:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800533c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005344:	4903      	ldr	r1, [pc, #12]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005346:	4313      	orrs	r3, r2
 8005348:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800534c:	e008      	b.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800534e:	7cfb      	ldrb	r3, [r7, #19]
 8005350:	74bb      	strb	r3, [r7, #18]
 8005352:	e005      	b.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005354:	40021000 	.word	0x40021000
 8005358:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800535c:	7cfb      	ldrb	r3, [r7, #19]
 800535e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005360:	7c7b      	ldrb	r3, [r7, #17]
 8005362:	2b01      	cmp	r3, #1
 8005364:	d105      	bne.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005366:	4ba7      	ldr	r3, [pc, #668]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005368:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800536a:	4aa6      	ldr	r2, [pc, #664]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800536c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005370:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f003 0301 	and.w	r3, r3, #1
 800537a:	2b00      	cmp	r3, #0
 800537c:	d00a      	beq.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800537e:	4ba1      	ldr	r3, [pc, #644]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005380:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005384:	f023 0203 	bic.w	r2, r3, #3
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	499d      	ldr	r1, [pc, #628]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800538e:	4313      	orrs	r3, r2
 8005390:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f003 0302 	and.w	r3, r3, #2
 800539c:	2b00      	cmp	r3, #0
 800539e:	d00a      	beq.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80053a0:	4b98      	ldr	r3, [pc, #608]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053a6:	f023 020c 	bic.w	r2, r3, #12
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	4995      	ldr	r1, [pc, #596]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053b0:	4313      	orrs	r3, r2
 80053b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f003 0304 	and.w	r3, r3, #4
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d00a      	beq.n	80053d8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80053c2:	4b90      	ldr	r3, [pc, #576]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053c8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	68db      	ldr	r3, [r3, #12]
 80053d0:	498c      	ldr	r1, [pc, #560]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053d2:	4313      	orrs	r3, r2
 80053d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f003 0308 	and.w	r3, r3, #8
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d00a      	beq.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80053e4:	4b87      	ldr	r3, [pc, #540]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053ea:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	691b      	ldr	r3, [r3, #16]
 80053f2:	4984      	ldr	r1, [pc, #528]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053f4:	4313      	orrs	r3, r2
 80053f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f003 0310 	and.w	r3, r3, #16
 8005402:	2b00      	cmp	r3, #0
 8005404:	d00a      	beq.n	800541c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005406:	4b7f      	ldr	r3, [pc, #508]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005408:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800540c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	695b      	ldr	r3, [r3, #20]
 8005414:	497b      	ldr	r1, [pc, #492]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005416:	4313      	orrs	r3, r2
 8005418:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f003 0320 	and.w	r3, r3, #32
 8005424:	2b00      	cmp	r3, #0
 8005426:	d00a      	beq.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005428:	4b76      	ldr	r3, [pc, #472]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800542a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800542e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	699b      	ldr	r3, [r3, #24]
 8005436:	4973      	ldr	r1, [pc, #460]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005438:	4313      	orrs	r3, r2
 800543a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005446:	2b00      	cmp	r3, #0
 8005448:	d00a      	beq.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800544a:	4b6e      	ldr	r3, [pc, #440]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800544c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005450:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	69db      	ldr	r3, [r3, #28]
 8005458:	496a      	ldr	r1, [pc, #424]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800545a:	4313      	orrs	r3, r2
 800545c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005468:	2b00      	cmp	r3, #0
 800546a:	d00a      	beq.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800546c:	4b65      	ldr	r3, [pc, #404]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800546e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005472:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6a1b      	ldr	r3, [r3, #32]
 800547a:	4962      	ldr	r1, [pc, #392]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800547c:	4313      	orrs	r3, r2
 800547e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800548a:	2b00      	cmp	r3, #0
 800548c:	d00a      	beq.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800548e:	4b5d      	ldr	r3, [pc, #372]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005490:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005494:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800549c:	4959      	ldr	r1, [pc, #356]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800549e:	4313      	orrs	r3, r2
 80054a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d00a      	beq.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80054b0:	4b54      	ldr	r3, [pc, #336]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80054b6:	f023 0203 	bic.w	r2, r3, #3
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054be:	4951      	ldr	r1, [pc, #324]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054c0:	4313      	orrs	r3, r2
 80054c2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d00a      	beq.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80054d2:	4b4c      	ldr	r3, [pc, #304]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054d8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054e0:	4948      	ldr	r1, [pc, #288]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054e2:	4313      	orrs	r3, r2
 80054e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d015      	beq.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80054f4:	4b43      	ldr	r3, [pc, #268]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054fa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005502:	4940      	ldr	r1, [pc, #256]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005504:	4313      	orrs	r3, r2
 8005506:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800550e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005512:	d105      	bne.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005514:	4b3b      	ldr	r3, [pc, #236]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005516:	68db      	ldr	r3, [r3, #12]
 8005518:	4a3a      	ldr	r2, [pc, #232]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800551a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800551e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005528:	2b00      	cmp	r3, #0
 800552a:	d015      	beq.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800552c:	4b35      	ldr	r3, [pc, #212]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800552e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005532:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800553a:	4932      	ldr	r1, [pc, #200]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800553c:	4313      	orrs	r3, r2
 800553e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005546:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800554a:	d105      	bne.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800554c:	4b2d      	ldr	r3, [pc, #180]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800554e:	68db      	ldr	r3, [r3, #12]
 8005550:	4a2c      	ldr	r2, [pc, #176]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005552:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005556:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005560:	2b00      	cmp	r3, #0
 8005562:	d015      	beq.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005564:	4b27      	ldr	r3, [pc, #156]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005566:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800556a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005572:	4924      	ldr	r1, [pc, #144]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005574:	4313      	orrs	r3, r2
 8005576:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800557e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005582:	d105      	bne.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005584:	4b1f      	ldr	r3, [pc, #124]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005586:	68db      	ldr	r3, [r3, #12]
 8005588:	4a1e      	ldr	r2, [pc, #120]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800558a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800558e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005598:	2b00      	cmp	r3, #0
 800559a:	d015      	beq.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800559c:	4b19      	ldr	r3, [pc, #100]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800559e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055a2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055aa:	4916      	ldr	r1, [pc, #88]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055ac:	4313      	orrs	r3, r2
 80055ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80055ba:	d105      	bne.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80055bc:	4b11      	ldr	r3, [pc, #68]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055be:	68db      	ldr	r3, [r3, #12]
 80055c0:	4a10      	ldr	r2, [pc, #64]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80055c6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d019      	beq.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80055d4:	4b0b      	ldr	r3, [pc, #44]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055da:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055e2:	4908      	ldr	r1, [pc, #32]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055e4:	4313      	orrs	r3, r2
 80055e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80055f2:	d109      	bne.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80055f4:	4b03      	ldr	r3, [pc, #12]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055f6:	68db      	ldr	r3, [r3, #12]
 80055f8:	4a02      	ldr	r2, [pc, #8]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80055fe:	60d3      	str	r3, [r2, #12]
 8005600:	e002      	b.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005602:	bf00      	nop
 8005604:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005610:	2b00      	cmp	r3, #0
 8005612:	d015      	beq.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005614:	4b29      	ldr	r3, [pc, #164]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005616:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800561a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005622:	4926      	ldr	r1, [pc, #152]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005624:	4313      	orrs	r3, r2
 8005626:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800562e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005632:	d105      	bne.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005634:	4b21      	ldr	r3, [pc, #132]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005636:	68db      	ldr	r3, [r3, #12]
 8005638:	4a20      	ldr	r2, [pc, #128]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800563a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800563e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005648:	2b00      	cmp	r3, #0
 800564a:	d015      	beq.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800564c:	4b1b      	ldr	r3, [pc, #108]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800564e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005652:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800565a:	4918      	ldr	r1, [pc, #96]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800565c:	4313      	orrs	r3, r2
 800565e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005666:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800566a:	d105      	bne.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800566c:	4b13      	ldr	r3, [pc, #76]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800566e:	68db      	ldr	r3, [r3, #12]
 8005670:	4a12      	ldr	r2, [pc, #72]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005672:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005676:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005680:	2b00      	cmp	r3, #0
 8005682:	d015      	beq.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005684:	4b0d      	ldr	r3, [pc, #52]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005686:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800568a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005692:	490a      	ldr	r1, [pc, #40]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005694:	4313      	orrs	r3, r2
 8005696:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800569e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80056a2:	d105      	bne.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80056a4:	4b05      	ldr	r3, [pc, #20]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80056a6:	68db      	ldr	r3, [r3, #12]
 80056a8:	4a04      	ldr	r2, [pc, #16]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80056aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80056ae:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80056b0:	7cbb      	ldrb	r3, [r7, #18]
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	3718      	adds	r7, #24
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}
 80056ba:	bf00      	nop
 80056bc:	40021000 	.word	0x40021000

080056c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b082      	sub	sp, #8
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d101      	bne.n	80056d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80056ce:	2301      	movs	r3, #1
 80056d0:	e049      	b.n	8005766 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056d8:	b2db      	uxtb	r3, r3
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d106      	bne.n	80056ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2200      	movs	r2, #0
 80056e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	f7fc f96e 	bl	80019c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2202      	movs	r2, #2
 80056f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681a      	ldr	r2, [r3, #0]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	3304      	adds	r3, #4
 80056fc:	4619      	mov	r1, r3
 80056fe:	4610      	mov	r0, r2
 8005700:	f000 ff5e 	bl	80065c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2201      	movs	r2, #1
 8005708:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2201      	movs	r2, #1
 8005710:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2201      	movs	r2, #1
 8005718:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2201      	movs	r2, #1
 8005720:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2201      	movs	r2, #1
 8005728:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2201      	movs	r2, #1
 8005730:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2201      	movs	r2, #1
 8005738:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2201      	movs	r2, #1
 8005740:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2201      	movs	r2, #1
 8005748:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2201      	movs	r2, #1
 8005750:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2201      	movs	r2, #1
 8005758:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2201      	movs	r2, #1
 8005760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005764:	2300      	movs	r3, #0
}
 8005766:	4618      	mov	r0, r3
 8005768:	3708      	adds	r7, #8
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}
	...

08005770 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005770:	b480      	push	{r7}
 8005772:	b085      	sub	sp, #20
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800577e:	b2db      	uxtb	r3, r3
 8005780:	2b01      	cmp	r3, #1
 8005782:	d001      	beq.n	8005788 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005784:	2301      	movs	r3, #1
 8005786:	e04c      	b.n	8005822 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2202      	movs	r2, #2
 800578c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4a26      	ldr	r2, [pc, #152]	; (8005830 <HAL_TIM_Base_Start+0xc0>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d022      	beq.n	80057e0 <HAL_TIM_Base_Start+0x70>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057a2:	d01d      	beq.n	80057e0 <HAL_TIM_Base_Start+0x70>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a22      	ldr	r2, [pc, #136]	; (8005834 <HAL_TIM_Base_Start+0xc4>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d018      	beq.n	80057e0 <HAL_TIM_Base_Start+0x70>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4a21      	ldr	r2, [pc, #132]	; (8005838 <HAL_TIM_Base_Start+0xc8>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d013      	beq.n	80057e0 <HAL_TIM_Base_Start+0x70>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a1f      	ldr	r2, [pc, #124]	; (800583c <HAL_TIM_Base_Start+0xcc>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d00e      	beq.n	80057e0 <HAL_TIM_Base_Start+0x70>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a1e      	ldr	r2, [pc, #120]	; (8005840 <HAL_TIM_Base_Start+0xd0>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d009      	beq.n	80057e0 <HAL_TIM_Base_Start+0x70>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a1c      	ldr	r2, [pc, #112]	; (8005844 <HAL_TIM_Base_Start+0xd4>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d004      	beq.n	80057e0 <HAL_TIM_Base_Start+0x70>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4a1b      	ldr	r2, [pc, #108]	; (8005848 <HAL_TIM_Base_Start+0xd8>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d115      	bne.n	800580c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	689a      	ldr	r2, [r3, #8]
 80057e6:	4b19      	ldr	r3, [pc, #100]	; (800584c <HAL_TIM_Base_Start+0xdc>)
 80057e8:	4013      	ands	r3, r2
 80057ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2b06      	cmp	r3, #6
 80057f0:	d015      	beq.n	800581e <HAL_TIM_Base_Start+0xae>
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057f8:	d011      	beq.n	800581e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	681a      	ldr	r2, [r3, #0]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f042 0201 	orr.w	r2, r2, #1
 8005808:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800580a:	e008      	b.n	800581e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	681a      	ldr	r2, [r3, #0]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f042 0201 	orr.w	r2, r2, #1
 800581a:	601a      	str	r2, [r3, #0]
 800581c:	e000      	b.n	8005820 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800581e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005820:	2300      	movs	r3, #0
}
 8005822:	4618      	mov	r0, r3
 8005824:	3714      	adds	r7, #20
 8005826:	46bd      	mov	sp, r7
 8005828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582c:	4770      	bx	lr
 800582e:	bf00      	nop
 8005830:	40012c00 	.word	0x40012c00
 8005834:	40000400 	.word	0x40000400
 8005838:	40000800 	.word	0x40000800
 800583c:	40000c00 	.word	0x40000c00
 8005840:	40013400 	.word	0x40013400
 8005844:	40014000 	.word	0x40014000
 8005848:	40015000 	.word	0x40015000
 800584c:	00010007 	.word	0x00010007

08005850 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005850:	b480      	push	{r7}
 8005852:	b085      	sub	sp, #20
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800585e:	b2db      	uxtb	r3, r3
 8005860:	2b01      	cmp	r3, #1
 8005862:	d001      	beq.n	8005868 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005864:	2301      	movs	r3, #1
 8005866:	e054      	b.n	8005912 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2202      	movs	r2, #2
 800586c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	68da      	ldr	r2, [r3, #12]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f042 0201 	orr.w	r2, r2, #1
 800587e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a26      	ldr	r2, [pc, #152]	; (8005920 <HAL_TIM_Base_Start_IT+0xd0>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d022      	beq.n	80058d0 <HAL_TIM_Base_Start_IT+0x80>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005892:	d01d      	beq.n	80058d0 <HAL_TIM_Base_Start_IT+0x80>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a22      	ldr	r2, [pc, #136]	; (8005924 <HAL_TIM_Base_Start_IT+0xd4>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d018      	beq.n	80058d0 <HAL_TIM_Base_Start_IT+0x80>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a21      	ldr	r2, [pc, #132]	; (8005928 <HAL_TIM_Base_Start_IT+0xd8>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d013      	beq.n	80058d0 <HAL_TIM_Base_Start_IT+0x80>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a1f      	ldr	r2, [pc, #124]	; (800592c <HAL_TIM_Base_Start_IT+0xdc>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d00e      	beq.n	80058d0 <HAL_TIM_Base_Start_IT+0x80>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a1e      	ldr	r2, [pc, #120]	; (8005930 <HAL_TIM_Base_Start_IT+0xe0>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d009      	beq.n	80058d0 <HAL_TIM_Base_Start_IT+0x80>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a1c      	ldr	r2, [pc, #112]	; (8005934 <HAL_TIM_Base_Start_IT+0xe4>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d004      	beq.n	80058d0 <HAL_TIM_Base_Start_IT+0x80>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a1b      	ldr	r2, [pc, #108]	; (8005938 <HAL_TIM_Base_Start_IT+0xe8>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d115      	bne.n	80058fc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	689a      	ldr	r2, [r3, #8]
 80058d6:	4b19      	ldr	r3, [pc, #100]	; (800593c <HAL_TIM_Base_Start_IT+0xec>)
 80058d8:	4013      	ands	r3, r2
 80058da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	2b06      	cmp	r3, #6
 80058e0:	d015      	beq.n	800590e <HAL_TIM_Base_Start_IT+0xbe>
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058e8:	d011      	beq.n	800590e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	681a      	ldr	r2, [r3, #0]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f042 0201 	orr.w	r2, r2, #1
 80058f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058fa:	e008      	b.n	800590e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	681a      	ldr	r2, [r3, #0]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f042 0201 	orr.w	r2, r2, #1
 800590a:	601a      	str	r2, [r3, #0]
 800590c:	e000      	b.n	8005910 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800590e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005910:	2300      	movs	r3, #0
}
 8005912:	4618      	mov	r0, r3
 8005914:	3714      	adds	r7, #20
 8005916:	46bd      	mov	sp, r7
 8005918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591c:	4770      	bx	lr
 800591e:	bf00      	nop
 8005920:	40012c00 	.word	0x40012c00
 8005924:	40000400 	.word	0x40000400
 8005928:	40000800 	.word	0x40000800
 800592c:	40000c00 	.word	0x40000c00
 8005930:	40013400 	.word	0x40013400
 8005934:	40014000 	.word	0x40014000
 8005938:	40015000 	.word	0x40015000
 800593c:	00010007 	.word	0x00010007

08005940 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b082      	sub	sp, #8
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d101      	bne.n	8005952 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800594e:	2301      	movs	r3, #1
 8005950:	e049      	b.n	80059e6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005958:	b2db      	uxtb	r3, r3
 800595a:	2b00      	cmp	r3, #0
 800595c:	d106      	bne.n	800596c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2200      	movs	r2, #0
 8005962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f7fb fff4 	bl	8001954 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2202      	movs	r2, #2
 8005970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681a      	ldr	r2, [r3, #0]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	3304      	adds	r3, #4
 800597c:	4619      	mov	r1, r3
 800597e:	4610      	mov	r0, r2
 8005980:	f000 fe1e 	bl	80065c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2201      	movs	r2, #1
 8005988:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2201      	movs	r2, #1
 8005990:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2201      	movs	r2, #1
 8005998:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2201      	movs	r2, #1
 80059a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2201      	movs	r2, #1
 80059a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2201      	movs	r2, #1
 80059b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2201      	movs	r2, #1
 80059b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2201      	movs	r2, #1
 80059c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2201      	movs	r2, #1
 80059c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2201      	movs	r2, #1
 80059d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2201      	movs	r2, #1
 80059d8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2201      	movs	r2, #1
 80059e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80059e4:	2300      	movs	r3, #0
}
 80059e6:	4618      	mov	r0, r3
 80059e8:	3708      	adds	r7, #8
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bd80      	pop	{r7, pc}
	...

080059f0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b084      	sub	sp, #16
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
 80059f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d109      	bne.n	8005a14 <HAL_TIM_PWM_Start+0x24>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a06:	b2db      	uxtb	r3, r3
 8005a08:	2b01      	cmp	r3, #1
 8005a0a:	bf14      	ite	ne
 8005a0c:	2301      	movne	r3, #1
 8005a0e:	2300      	moveq	r3, #0
 8005a10:	b2db      	uxtb	r3, r3
 8005a12:	e03c      	b.n	8005a8e <HAL_TIM_PWM_Start+0x9e>
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	2b04      	cmp	r3, #4
 8005a18:	d109      	bne.n	8005a2e <HAL_TIM_PWM_Start+0x3e>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005a20:	b2db      	uxtb	r3, r3
 8005a22:	2b01      	cmp	r3, #1
 8005a24:	bf14      	ite	ne
 8005a26:	2301      	movne	r3, #1
 8005a28:	2300      	moveq	r3, #0
 8005a2a:	b2db      	uxtb	r3, r3
 8005a2c:	e02f      	b.n	8005a8e <HAL_TIM_PWM_Start+0x9e>
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	2b08      	cmp	r3, #8
 8005a32:	d109      	bne.n	8005a48 <HAL_TIM_PWM_Start+0x58>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005a3a:	b2db      	uxtb	r3, r3
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	bf14      	ite	ne
 8005a40:	2301      	movne	r3, #1
 8005a42:	2300      	moveq	r3, #0
 8005a44:	b2db      	uxtb	r3, r3
 8005a46:	e022      	b.n	8005a8e <HAL_TIM_PWM_Start+0x9e>
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	2b0c      	cmp	r3, #12
 8005a4c:	d109      	bne.n	8005a62 <HAL_TIM_PWM_Start+0x72>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a54:	b2db      	uxtb	r3, r3
 8005a56:	2b01      	cmp	r3, #1
 8005a58:	bf14      	ite	ne
 8005a5a:	2301      	movne	r3, #1
 8005a5c:	2300      	moveq	r3, #0
 8005a5e:	b2db      	uxtb	r3, r3
 8005a60:	e015      	b.n	8005a8e <HAL_TIM_PWM_Start+0x9e>
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	2b10      	cmp	r3, #16
 8005a66:	d109      	bne.n	8005a7c <HAL_TIM_PWM_Start+0x8c>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005a6e:	b2db      	uxtb	r3, r3
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	bf14      	ite	ne
 8005a74:	2301      	movne	r3, #1
 8005a76:	2300      	moveq	r3, #0
 8005a78:	b2db      	uxtb	r3, r3
 8005a7a:	e008      	b.n	8005a8e <HAL_TIM_PWM_Start+0x9e>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005a82:	b2db      	uxtb	r3, r3
 8005a84:	2b01      	cmp	r3, #1
 8005a86:	bf14      	ite	ne
 8005a88:	2301      	movne	r3, #1
 8005a8a:	2300      	moveq	r3, #0
 8005a8c:	b2db      	uxtb	r3, r3
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d001      	beq.n	8005a96 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005a92:	2301      	movs	r3, #1
 8005a94:	e0a6      	b.n	8005be4 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d104      	bne.n	8005aa6 <HAL_TIM_PWM_Start+0xb6>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2202      	movs	r2, #2
 8005aa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005aa4:	e023      	b.n	8005aee <HAL_TIM_PWM_Start+0xfe>
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	2b04      	cmp	r3, #4
 8005aaa:	d104      	bne.n	8005ab6 <HAL_TIM_PWM_Start+0xc6>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2202      	movs	r2, #2
 8005ab0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ab4:	e01b      	b.n	8005aee <HAL_TIM_PWM_Start+0xfe>
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	2b08      	cmp	r3, #8
 8005aba:	d104      	bne.n	8005ac6 <HAL_TIM_PWM_Start+0xd6>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2202      	movs	r2, #2
 8005ac0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ac4:	e013      	b.n	8005aee <HAL_TIM_PWM_Start+0xfe>
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	2b0c      	cmp	r3, #12
 8005aca:	d104      	bne.n	8005ad6 <HAL_TIM_PWM_Start+0xe6>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2202      	movs	r2, #2
 8005ad0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005ad4:	e00b      	b.n	8005aee <HAL_TIM_PWM_Start+0xfe>
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	2b10      	cmp	r3, #16
 8005ada:	d104      	bne.n	8005ae6 <HAL_TIM_PWM_Start+0xf6>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2202      	movs	r2, #2
 8005ae0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ae4:	e003      	b.n	8005aee <HAL_TIM_PWM_Start+0xfe>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2202      	movs	r2, #2
 8005aea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	2201      	movs	r2, #1
 8005af4:	6839      	ldr	r1, [r7, #0]
 8005af6:	4618      	mov	r0, r3
 8005af8:	f001 f9dc 	bl	8006eb4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a3a      	ldr	r2, [pc, #232]	; (8005bec <HAL_TIM_PWM_Start+0x1fc>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d018      	beq.n	8005b38 <HAL_TIM_PWM_Start+0x148>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a39      	ldr	r2, [pc, #228]	; (8005bf0 <HAL_TIM_PWM_Start+0x200>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d013      	beq.n	8005b38 <HAL_TIM_PWM_Start+0x148>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a37      	ldr	r2, [pc, #220]	; (8005bf4 <HAL_TIM_PWM_Start+0x204>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d00e      	beq.n	8005b38 <HAL_TIM_PWM_Start+0x148>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4a36      	ldr	r2, [pc, #216]	; (8005bf8 <HAL_TIM_PWM_Start+0x208>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d009      	beq.n	8005b38 <HAL_TIM_PWM_Start+0x148>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4a34      	ldr	r2, [pc, #208]	; (8005bfc <HAL_TIM_PWM_Start+0x20c>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d004      	beq.n	8005b38 <HAL_TIM_PWM_Start+0x148>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a33      	ldr	r2, [pc, #204]	; (8005c00 <HAL_TIM_PWM_Start+0x210>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d101      	bne.n	8005b3c <HAL_TIM_PWM_Start+0x14c>
 8005b38:	2301      	movs	r3, #1
 8005b3a:	e000      	b.n	8005b3e <HAL_TIM_PWM_Start+0x14e>
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d007      	beq.n	8005b52 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005b50:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4a25      	ldr	r2, [pc, #148]	; (8005bec <HAL_TIM_PWM_Start+0x1fc>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d022      	beq.n	8005ba2 <HAL_TIM_PWM_Start+0x1b2>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b64:	d01d      	beq.n	8005ba2 <HAL_TIM_PWM_Start+0x1b2>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4a26      	ldr	r2, [pc, #152]	; (8005c04 <HAL_TIM_PWM_Start+0x214>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d018      	beq.n	8005ba2 <HAL_TIM_PWM_Start+0x1b2>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a24      	ldr	r2, [pc, #144]	; (8005c08 <HAL_TIM_PWM_Start+0x218>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d013      	beq.n	8005ba2 <HAL_TIM_PWM_Start+0x1b2>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4a23      	ldr	r2, [pc, #140]	; (8005c0c <HAL_TIM_PWM_Start+0x21c>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d00e      	beq.n	8005ba2 <HAL_TIM_PWM_Start+0x1b2>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4a19      	ldr	r2, [pc, #100]	; (8005bf0 <HAL_TIM_PWM_Start+0x200>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d009      	beq.n	8005ba2 <HAL_TIM_PWM_Start+0x1b2>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a18      	ldr	r2, [pc, #96]	; (8005bf4 <HAL_TIM_PWM_Start+0x204>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d004      	beq.n	8005ba2 <HAL_TIM_PWM_Start+0x1b2>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a18      	ldr	r2, [pc, #96]	; (8005c00 <HAL_TIM_PWM_Start+0x210>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d115      	bne.n	8005bce <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	689a      	ldr	r2, [r3, #8]
 8005ba8:	4b19      	ldr	r3, [pc, #100]	; (8005c10 <HAL_TIM_PWM_Start+0x220>)
 8005baa:	4013      	ands	r3, r2
 8005bac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2b06      	cmp	r3, #6
 8005bb2:	d015      	beq.n	8005be0 <HAL_TIM_PWM_Start+0x1f0>
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bba:	d011      	beq.n	8005be0 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	681a      	ldr	r2, [r3, #0]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f042 0201 	orr.w	r2, r2, #1
 8005bca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bcc:	e008      	b.n	8005be0 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	681a      	ldr	r2, [r3, #0]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f042 0201 	orr.w	r2, r2, #1
 8005bdc:	601a      	str	r2, [r3, #0]
 8005bde:	e000      	b.n	8005be2 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005be0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005be2:	2300      	movs	r3, #0
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	3710      	adds	r7, #16
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}
 8005bec:	40012c00 	.word	0x40012c00
 8005bf0:	40013400 	.word	0x40013400
 8005bf4:	40014000 	.word	0x40014000
 8005bf8:	40014400 	.word	0x40014400
 8005bfc:	40014800 	.word	0x40014800
 8005c00:	40015000 	.word	0x40015000
 8005c04:	40000400 	.word	0x40000400
 8005c08:	40000800 	.word	0x40000800
 8005c0c:	40000c00 	.word	0x40000c00
 8005c10:	00010007 	.word	0x00010007

08005c14 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b086      	sub	sp, #24
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
 8005c1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d101      	bne.n	8005c28 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005c24:	2301      	movs	r3, #1
 8005c26:	e097      	b.n	8005d58 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c2e:	b2db      	uxtb	r3, r3
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d106      	bne.n	8005c42 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2200      	movs	r2, #0
 8005c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	f7fb ff17 	bl	8001a70 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2202      	movs	r2, #2
 8005c46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	689b      	ldr	r3, [r3, #8]
 8005c50:	687a      	ldr	r2, [r7, #4]
 8005c52:	6812      	ldr	r2, [r2, #0]
 8005c54:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8005c58:	f023 0307 	bic.w	r3, r3, #7
 8005c5c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681a      	ldr	r2, [r3, #0]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	3304      	adds	r3, #4
 8005c66:	4619      	mov	r1, r3
 8005c68:	4610      	mov	r0, r2
 8005c6a:	f000 fca9 	bl	80065c0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	689b      	ldr	r3, [r3, #8]
 8005c74:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	699b      	ldr	r3, [r3, #24]
 8005c7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	6a1b      	ldr	r3, [r3, #32]
 8005c84:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	697a      	ldr	r2, [r7, #20]
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c96:	f023 0303 	bic.w	r3, r3, #3
 8005c9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	689a      	ldr	r2, [r3, #8]
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	699b      	ldr	r3, [r3, #24]
 8005ca4:	021b      	lsls	r3, r3, #8
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	693a      	ldr	r2, [r7, #16]
 8005caa:	4313      	orrs	r3, r2
 8005cac:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005cb4:	f023 030c 	bic.w	r3, r3, #12
 8005cb8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005cc0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005cc4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	68da      	ldr	r2, [r3, #12]
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	69db      	ldr	r3, [r3, #28]
 8005cce:	021b      	lsls	r3, r3, #8
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	693a      	ldr	r2, [r7, #16]
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	691b      	ldr	r3, [r3, #16]
 8005cdc:	011a      	lsls	r2, r3, #4
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	6a1b      	ldr	r3, [r3, #32]
 8005ce2:	031b      	lsls	r3, r3, #12
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	693a      	ldr	r2, [r7, #16]
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005cf2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005cfa:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	685a      	ldr	r2, [r3, #4]
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	695b      	ldr	r3, [r3, #20]
 8005d04:	011b      	lsls	r3, r3, #4
 8005d06:	4313      	orrs	r3, r2
 8005d08:	68fa      	ldr	r2, [r7, #12]
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	697a      	ldr	r2, [r7, #20]
 8005d14:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	693a      	ldr	r2, [r7, #16]
 8005d1c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	68fa      	ldr	r2, [r7, #12]
 8005d24:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2201      	movs	r2, #1
 8005d2a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2201      	movs	r2, #1
 8005d32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2201      	movs	r2, #1
 8005d3a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2201      	movs	r2, #1
 8005d42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2201      	movs	r2, #1
 8005d4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2201      	movs	r2, #1
 8005d52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d56:	2300      	movs	r3, #0
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	3718      	adds	r7, #24
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}

08005d60 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b084      	sub	sp, #16
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
 8005d68:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d70:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005d78:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d80:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d88:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d110      	bne.n	8005db2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005d90:	7bfb      	ldrb	r3, [r7, #15]
 8005d92:	2b01      	cmp	r3, #1
 8005d94:	d102      	bne.n	8005d9c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005d96:	7b7b      	ldrb	r3, [r7, #13]
 8005d98:	2b01      	cmp	r3, #1
 8005d9a:	d001      	beq.n	8005da0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	e069      	b.n	8005e74 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2202      	movs	r2, #2
 8005da4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2202      	movs	r2, #2
 8005dac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005db0:	e031      	b.n	8005e16 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	2b04      	cmp	r3, #4
 8005db6:	d110      	bne.n	8005dda <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005db8:	7bbb      	ldrb	r3, [r7, #14]
 8005dba:	2b01      	cmp	r3, #1
 8005dbc:	d102      	bne.n	8005dc4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005dbe:	7b3b      	ldrb	r3, [r7, #12]
 8005dc0:	2b01      	cmp	r3, #1
 8005dc2:	d001      	beq.n	8005dc8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	e055      	b.n	8005e74 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2202      	movs	r2, #2
 8005dcc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2202      	movs	r2, #2
 8005dd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005dd8:	e01d      	b.n	8005e16 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005dda:	7bfb      	ldrb	r3, [r7, #15]
 8005ddc:	2b01      	cmp	r3, #1
 8005dde:	d108      	bne.n	8005df2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005de0:	7bbb      	ldrb	r3, [r7, #14]
 8005de2:	2b01      	cmp	r3, #1
 8005de4:	d105      	bne.n	8005df2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005de6:	7b7b      	ldrb	r3, [r7, #13]
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	d102      	bne.n	8005df2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005dec:	7b3b      	ldrb	r3, [r7, #12]
 8005dee:	2b01      	cmp	r3, #1
 8005df0:	d001      	beq.n	8005df6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005df2:	2301      	movs	r3, #1
 8005df4:	e03e      	b.n	8005e74 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2202      	movs	r2, #2
 8005dfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2202      	movs	r2, #2
 8005e02:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2202      	movs	r2, #2
 8005e0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2202      	movs	r2, #2
 8005e12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d003      	beq.n	8005e24 <HAL_TIM_Encoder_Start+0xc4>
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	2b04      	cmp	r3, #4
 8005e20:	d008      	beq.n	8005e34 <HAL_TIM_Encoder_Start+0xd4>
 8005e22:	e00f      	b.n	8005e44 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	2201      	movs	r2, #1
 8005e2a:	2100      	movs	r1, #0
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	f001 f841 	bl	8006eb4 <TIM_CCxChannelCmd>
      break;
 8005e32:	e016      	b.n	8005e62 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	2201      	movs	r2, #1
 8005e3a:	2104      	movs	r1, #4
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	f001 f839 	bl	8006eb4 <TIM_CCxChannelCmd>
      break;
 8005e42:	e00e      	b.n	8005e62 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	2201      	movs	r2, #1
 8005e4a:	2100      	movs	r1, #0
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	f001 f831 	bl	8006eb4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	2201      	movs	r2, #1
 8005e58:	2104      	movs	r1, #4
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	f001 f82a 	bl	8006eb4 <TIM_CCxChannelCmd>
      break;
 8005e60:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	681a      	ldr	r2, [r3, #0]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f042 0201 	orr.w	r2, r2, #1
 8005e70:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005e72:	2300      	movs	r3, #0
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	3710      	adds	r7, #16
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bd80      	pop	{r7, pc}

08005e7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b084      	sub	sp, #16
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	68db      	ldr	r3, [r3, #12]
 8005e8a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	691b      	ldr	r3, [r3, #16]
 8005e92:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	f003 0302 	and.w	r3, r3, #2
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d020      	beq.n	8005ee0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	f003 0302 	and.w	r3, r3, #2
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d01b      	beq.n	8005ee0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f06f 0202 	mvn.w	r2, #2
 8005eb0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2201      	movs	r2, #1
 8005eb6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	699b      	ldr	r3, [r3, #24]
 8005ebe:	f003 0303 	and.w	r3, r3, #3
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d003      	beq.n	8005ece <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f000 fb5c 	bl	8006584 <HAL_TIM_IC_CaptureCallback>
 8005ecc:	e005      	b.n	8005eda <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	f000 fb4e 	bl	8006570 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ed4:	6878      	ldr	r0, [r7, #4]
 8005ed6:	f000 fb5f 	bl	8006598 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2200      	movs	r2, #0
 8005ede:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	f003 0304 	and.w	r3, r3, #4
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d020      	beq.n	8005f2c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	f003 0304 	and.w	r3, r3, #4
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d01b      	beq.n	8005f2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f06f 0204 	mvn.w	r2, #4
 8005efc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2202      	movs	r2, #2
 8005f02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	699b      	ldr	r3, [r3, #24]
 8005f0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d003      	beq.n	8005f1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f000 fb36 	bl	8006584 <HAL_TIM_IC_CaptureCallback>
 8005f18:	e005      	b.n	8005f26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f000 fb28 	bl	8006570 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f20:	6878      	ldr	r0, [r7, #4]
 8005f22:	f000 fb39 	bl	8006598 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	f003 0308 	and.w	r3, r3, #8
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d020      	beq.n	8005f78 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	f003 0308 	and.w	r3, r3, #8
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d01b      	beq.n	8005f78 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f06f 0208 	mvn.w	r2, #8
 8005f48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2204      	movs	r2, #4
 8005f4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	69db      	ldr	r3, [r3, #28]
 8005f56:	f003 0303 	and.w	r3, r3, #3
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d003      	beq.n	8005f66 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f000 fb10 	bl	8006584 <HAL_TIM_IC_CaptureCallback>
 8005f64:	e005      	b.n	8005f72 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	f000 fb02 	bl	8006570 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	f000 fb13 	bl	8006598 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2200      	movs	r2, #0
 8005f76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	f003 0310 	and.w	r3, r3, #16
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d020      	beq.n	8005fc4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	f003 0310 	and.w	r3, r3, #16
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d01b      	beq.n	8005fc4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f06f 0210 	mvn.w	r2, #16
 8005f94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2208      	movs	r2, #8
 8005f9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	69db      	ldr	r3, [r3, #28]
 8005fa2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d003      	beq.n	8005fb2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	f000 faea 	bl	8006584 <HAL_TIM_IC_CaptureCallback>
 8005fb0:	e005      	b.n	8005fbe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f000 fadc 	bl	8006570 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fb8:	6878      	ldr	r0, [r7, #4]
 8005fba:	f000 faed 	bl	8006598 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	f003 0301 	and.w	r3, r3, #1
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d00c      	beq.n	8005fe8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	f003 0301 	and.w	r3, r3, #1
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d007      	beq.n	8005fe8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f06f 0201 	mvn.w	r2, #1
 8005fe0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f7fa ff68 	bl	8000eb8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d104      	bne.n	8005ffc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d00c      	beq.n	8006016 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006002:	2b00      	cmp	r3, #0
 8006004:	d007      	beq.n	8006016 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800600e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006010:	6878      	ldr	r0, [r7, #4]
 8006012:	f001 f8a9 	bl	8007168 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800601c:	2b00      	cmp	r3, #0
 800601e:	d00c      	beq.n	800603a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006026:	2b00      	cmp	r3, #0
 8006028:	d007      	beq.n	800603a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006032:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	f001 f8a1 	bl	800717c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006040:	2b00      	cmp	r3, #0
 8006042:	d00c      	beq.n	800605e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800604a:	2b00      	cmp	r3, #0
 800604c:	d007      	beq.n	800605e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006056:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	f000 faa7 	bl	80065ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	f003 0320 	and.w	r3, r3, #32
 8006064:	2b00      	cmp	r3, #0
 8006066:	d00c      	beq.n	8006082 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	f003 0320 	and.w	r3, r3, #32
 800606e:	2b00      	cmp	r3, #0
 8006070:	d007      	beq.n	8006082 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f06f 0220 	mvn.w	r2, #32
 800607a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800607c:	6878      	ldr	r0, [r7, #4]
 800607e:	f001 f869 	bl	8007154 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006088:	2b00      	cmp	r3, #0
 800608a:	d00c      	beq.n	80060a6 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006092:	2b00      	cmp	r3, #0
 8006094:	d007      	beq.n	80060a6 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800609e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	f001 f875 	bl	8007190 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d00c      	beq.n	80060ca <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d007      	beq.n	80060ca <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80060c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	f001 f86d 	bl	80071a4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d00c      	beq.n	80060ee <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d007      	beq.n	80060ee <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80060e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	f001 f865 	bl	80071b8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d00c      	beq.n	8006112 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d007      	beq.n	8006112 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800610a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	f001 f85d 	bl	80071cc <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006112:	bf00      	nop
 8006114:	3710      	adds	r7, #16
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}
	...

0800611c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b086      	sub	sp, #24
 8006120:	af00      	add	r7, sp, #0
 8006122:	60f8      	str	r0, [r7, #12]
 8006124:	60b9      	str	r1, [r7, #8]
 8006126:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006128:	2300      	movs	r3, #0
 800612a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006132:	2b01      	cmp	r3, #1
 8006134:	d101      	bne.n	800613a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006136:	2302      	movs	r3, #2
 8006138:	e0ff      	b.n	800633a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	2201      	movs	r2, #1
 800613e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2b14      	cmp	r3, #20
 8006146:	f200 80f0 	bhi.w	800632a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800614a:	a201      	add	r2, pc, #4	; (adr r2, 8006150 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800614c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006150:	080061a5 	.word	0x080061a5
 8006154:	0800632b 	.word	0x0800632b
 8006158:	0800632b 	.word	0x0800632b
 800615c:	0800632b 	.word	0x0800632b
 8006160:	080061e5 	.word	0x080061e5
 8006164:	0800632b 	.word	0x0800632b
 8006168:	0800632b 	.word	0x0800632b
 800616c:	0800632b 	.word	0x0800632b
 8006170:	08006227 	.word	0x08006227
 8006174:	0800632b 	.word	0x0800632b
 8006178:	0800632b 	.word	0x0800632b
 800617c:	0800632b 	.word	0x0800632b
 8006180:	08006267 	.word	0x08006267
 8006184:	0800632b 	.word	0x0800632b
 8006188:	0800632b 	.word	0x0800632b
 800618c:	0800632b 	.word	0x0800632b
 8006190:	080062a9 	.word	0x080062a9
 8006194:	0800632b 	.word	0x0800632b
 8006198:	0800632b 	.word	0x0800632b
 800619c:	0800632b 	.word	0x0800632b
 80061a0:	080062e9 	.word	0x080062e9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	68b9      	ldr	r1, [r7, #8]
 80061aa:	4618      	mov	r0, r3
 80061ac:	f000 fabc 	bl	8006728 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	699a      	ldr	r2, [r3, #24]
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f042 0208 	orr.w	r2, r2, #8
 80061be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	699a      	ldr	r2, [r3, #24]
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f022 0204 	bic.w	r2, r2, #4
 80061ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	6999      	ldr	r1, [r3, #24]
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	691a      	ldr	r2, [r3, #16]
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	430a      	orrs	r2, r1
 80061e0:	619a      	str	r2, [r3, #24]
      break;
 80061e2:	e0a5      	b.n	8006330 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	68b9      	ldr	r1, [r7, #8]
 80061ea:	4618      	mov	r0, r3
 80061ec:	f000 fb36 	bl	800685c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	699a      	ldr	r2, [r3, #24]
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80061fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	699a      	ldr	r2, [r3, #24]
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800620e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	6999      	ldr	r1, [r3, #24]
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	691b      	ldr	r3, [r3, #16]
 800621a:	021a      	lsls	r2, r3, #8
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	430a      	orrs	r2, r1
 8006222:	619a      	str	r2, [r3, #24]
      break;
 8006224:	e084      	b.n	8006330 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	68b9      	ldr	r1, [r7, #8]
 800622c:	4618      	mov	r0, r3
 800622e:	f000 fba9 	bl	8006984 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	69da      	ldr	r2, [r3, #28]
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f042 0208 	orr.w	r2, r2, #8
 8006240:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	69da      	ldr	r2, [r3, #28]
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f022 0204 	bic.w	r2, r2, #4
 8006250:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	69d9      	ldr	r1, [r3, #28]
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	691a      	ldr	r2, [r3, #16]
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	430a      	orrs	r2, r1
 8006262:	61da      	str	r2, [r3, #28]
      break;
 8006264:	e064      	b.n	8006330 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	68b9      	ldr	r1, [r7, #8]
 800626c:	4618      	mov	r0, r3
 800626e:	f000 fc1b 	bl	8006aa8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	69da      	ldr	r2, [r3, #28]
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006280:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	69da      	ldr	r2, [r3, #28]
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006290:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	69d9      	ldr	r1, [r3, #28]
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	691b      	ldr	r3, [r3, #16]
 800629c:	021a      	lsls	r2, r3, #8
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	430a      	orrs	r2, r1
 80062a4:	61da      	str	r2, [r3, #28]
      break;
 80062a6:	e043      	b.n	8006330 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	68b9      	ldr	r1, [r7, #8]
 80062ae:	4618      	mov	r0, r3
 80062b0:	f000 fc8e 	bl	8006bd0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f042 0208 	orr.w	r2, r2, #8
 80062c2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f022 0204 	bic.w	r2, r2, #4
 80062d2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	691a      	ldr	r2, [r3, #16]
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	430a      	orrs	r2, r1
 80062e4:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80062e6:	e023      	b.n	8006330 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	68b9      	ldr	r1, [r7, #8]
 80062ee:	4618      	mov	r0, r3
 80062f0:	f000 fcd8 	bl	8006ca4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006302:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006312:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	691b      	ldr	r3, [r3, #16]
 800631e:	021a      	lsls	r2, r3, #8
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	430a      	orrs	r2, r1
 8006326:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006328:	e002      	b.n	8006330 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800632a:	2301      	movs	r3, #1
 800632c:	75fb      	strb	r3, [r7, #23]
      break;
 800632e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	2200      	movs	r2, #0
 8006334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006338:	7dfb      	ldrb	r3, [r7, #23]
}
 800633a:	4618      	mov	r0, r3
 800633c:	3718      	adds	r7, #24
 800633e:	46bd      	mov	sp, r7
 8006340:	bd80      	pop	{r7, pc}
 8006342:	bf00      	nop

08006344 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b084      	sub	sp, #16
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
 800634c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800634e:	2300      	movs	r3, #0
 8006350:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006358:	2b01      	cmp	r3, #1
 800635a:	d101      	bne.n	8006360 <HAL_TIM_ConfigClockSource+0x1c>
 800635c:	2302      	movs	r3, #2
 800635e:	e0f6      	b.n	800654e <HAL_TIM_ConfigClockSource+0x20a>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2201      	movs	r2, #1
 8006364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2202      	movs	r2, #2
 800636c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	689b      	ldr	r3, [r3, #8]
 8006376:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800637e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006382:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800638a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	68ba      	ldr	r2, [r7, #8]
 8006392:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a6f      	ldr	r2, [pc, #444]	; (8006558 <HAL_TIM_ConfigClockSource+0x214>)
 800639a:	4293      	cmp	r3, r2
 800639c:	f000 80c1 	beq.w	8006522 <HAL_TIM_ConfigClockSource+0x1de>
 80063a0:	4a6d      	ldr	r2, [pc, #436]	; (8006558 <HAL_TIM_ConfigClockSource+0x214>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	f200 80c6 	bhi.w	8006534 <HAL_TIM_ConfigClockSource+0x1f0>
 80063a8:	4a6c      	ldr	r2, [pc, #432]	; (800655c <HAL_TIM_ConfigClockSource+0x218>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	f000 80b9 	beq.w	8006522 <HAL_TIM_ConfigClockSource+0x1de>
 80063b0:	4a6a      	ldr	r2, [pc, #424]	; (800655c <HAL_TIM_ConfigClockSource+0x218>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	f200 80be 	bhi.w	8006534 <HAL_TIM_ConfigClockSource+0x1f0>
 80063b8:	4a69      	ldr	r2, [pc, #420]	; (8006560 <HAL_TIM_ConfigClockSource+0x21c>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	f000 80b1 	beq.w	8006522 <HAL_TIM_ConfigClockSource+0x1de>
 80063c0:	4a67      	ldr	r2, [pc, #412]	; (8006560 <HAL_TIM_ConfigClockSource+0x21c>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	f200 80b6 	bhi.w	8006534 <HAL_TIM_ConfigClockSource+0x1f0>
 80063c8:	4a66      	ldr	r2, [pc, #408]	; (8006564 <HAL_TIM_ConfigClockSource+0x220>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	f000 80a9 	beq.w	8006522 <HAL_TIM_ConfigClockSource+0x1de>
 80063d0:	4a64      	ldr	r2, [pc, #400]	; (8006564 <HAL_TIM_ConfigClockSource+0x220>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	f200 80ae 	bhi.w	8006534 <HAL_TIM_ConfigClockSource+0x1f0>
 80063d8:	4a63      	ldr	r2, [pc, #396]	; (8006568 <HAL_TIM_ConfigClockSource+0x224>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	f000 80a1 	beq.w	8006522 <HAL_TIM_ConfigClockSource+0x1de>
 80063e0:	4a61      	ldr	r2, [pc, #388]	; (8006568 <HAL_TIM_ConfigClockSource+0x224>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	f200 80a6 	bhi.w	8006534 <HAL_TIM_ConfigClockSource+0x1f0>
 80063e8:	4a60      	ldr	r2, [pc, #384]	; (800656c <HAL_TIM_ConfigClockSource+0x228>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	f000 8099 	beq.w	8006522 <HAL_TIM_ConfigClockSource+0x1de>
 80063f0:	4a5e      	ldr	r2, [pc, #376]	; (800656c <HAL_TIM_ConfigClockSource+0x228>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	f200 809e 	bhi.w	8006534 <HAL_TIM_ConfigClockSource+0x1f0>
 80063f8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80063fc:	f000 8091 	beq.w	8006522 <HAL_TIM_ConfigClockSource+0x1de>
 8006400:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006404:	f200 8096 	bhi.w	8006534 <HAL_TIM_ConfigClockSource+0x1f0>
 8006408:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800640c:	f000 8089 	beq.w	8006522 <HAL_TIM_ConfigClockSource+0x1de>
 8006410:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006414:	f200 808e 	bhi.w	8006534 <HAL_TIM_ConfigClockSource+0x1f0>
 8006418:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800641c:	d03e      	beq.n	800649c <HAL_TIM_ConfigClockSource+0x158>
 800641e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006422:	f200 8087 	bhi.w	8006534 <HAL_TIM_ConfigClockSource+0x1f0>
 8006426:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800642a:	f000 8086 	beq.w	800653a <HAL_TIM_ConfigClockSource+0x1f6>
 800642e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006432:	d87f      	bhi.n	8006534 <HAL_TIM_ConfigClockSource+0x1f0>
 8006434:	2b70      	cmp	r3, #112	; 0x70
 8006436:	d01a      	beq.n	800646e <HAL_TIM_ConfigClockSource+0x12a>
 8006438:	2b70      	cmp	r3, #112	; 0x70
 800643a:	d87b      	bhi.n	8006534 <HAL_TIM_ConfigClockSource+0x1f0>
 800643c:	2b60      	cmp	r3, #96	; 0x60
 800643e:	d050      	beq.n	80064e2 <HAL_TIM_ConfigClockSource+0x19e>
 8006440:	2b60      	cmp	r3, #96	; 0x60
 8006442:	d877      	bhi.n	8006534 <HAL_TIM_ConfigClockSource+0x1f0>
 8006444:	2b50      	cmp	r3, #80	; 0x50
 8006446:	d03c      	beq.n	80064c2 <HAL_TIM_ConfigClockSource+0x17e>
 8006448:	2b50      	cmp	r3, #80	; 0x50
 800644a:	d873      	bhi.n	8006534 <HAL_TIM_ConfigClockSource+0x1f0>
 800644c:	2b40      	cmp	r3, #64	; 0x40
 800644e:	d058      	beq.n	8006502 <HAL_TIM_ConfigClockSource+0x1be>
 8006450:	2b40      	cmp	r3, #64	; 0x40
 8006452:	d86f      	bhi.n	8006534 <HAL_TIM_ConfigClockSource+0x1f0>
 8006454:	2b30      	cmp	r3, #48	; 0x30
 8006456:	d064      	beq.n	8006522 <HAL_TIM_ConfigClockSource+0x1de>
 8006458:	2b30      	cmp	r3, #48	; 0x30
 800645a:	d86b      	bhi.n	8006534 <HAL_TIM_ConfigClockSource+0x1f0>
 800645c:	2b20      	cmp	r3, #32
 800645e:	d060      	beq.n	8006522 <HAL_TIM_ConfigClockSource+0x1de>
 8006460:	2b20      	cmp	r3, #32
 8006462:	d867      	bhi.n	8006534 <HAL_TIM_ConfigClockSource+0x1f0>
 8006464:	2b00      	cmp	r3, #0
 8006466:	d05c      	beq.n	8006522 <HAL_TIM_ConfigClockSource+0x1de>
 8006468:	2b10      	cmp	r3, #16
 800646a:	d05a      	beq.n	8006522 <HAL_TIM_ConfigClockSource+0x1de>
 800646c:	e062      	b.n	8006534 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800647e:	f000 fcf9 	bl	8006e74 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	689b      	ldr	r3, [r3, #8]
 8006488:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006490:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	68ba      	ldr	r2, [r7, #8]
 8006498:	609a      	str	r2, [r3, #8]
      break;
 800649a:	e04f      	b.n	800653c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80064ac:	f000 fce2 	bl	8006e74 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	689a      	ldr	r2, [r3, #8]
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80064be:	609a      	str	r2, [r3, #8]
      break;
 80064c0:	e03c      	b.n	800653c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80064ce:	461a      	mov	r2, r3
 80064d0:	f000 fc54 	bl	8006d7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	2150      	movs	r1, #80	; 0x50
 80064da:	4618      	mov	r0, r3
 80064dc:	f000 fcad 	bl	8006e3a <TIM_ITRx_SetConfig>
      break;
 80064e0:	e02c      	b.n	800653c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80064ee:	461a      	mov	r2, r3
 80064f0:	f000 fc73 	bl	8006dda <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	2160      	movs	r1, #96	; 0x60
 80064fa:	4618      	mov	r0, r3
 80064fc:	f000 fc9d 	bl	8006e3a <TIM_ITRx_SetConfig>
      break;
 8006500:	e01c      	b.n	800653c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800650e:	461a      	mov	r2, r3
 8006510:	f000 fc34 	bl	8006d7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	2140      	movs	r1, #64	; 0x40
 800651a:	4618      	mov	r0, r3
 800651c:	f000 fc8d 	bl	8006e3a <TIM_ITRx_SetConfig>
      break;
 8006520:	e00c      	b.n	800653c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681a      	ldr	r2, [r3, #0]
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4619      	mov	r1, r3
 800652c:	4610      	mov	r0, r2
 800652e:	f000 fc84 	bl	8006e3a <TIM_ITRx_SetConfig>
      break;
 8006532:	e003      	b.n	800653c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8006534:	2301      	movs	r3, #1
 8006536:	73fb      	strb	r3, [r7, #15]
      break;
 8006538:	e000      	b.n	800653c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800653a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2201      	movs	r2, #1
 8006540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2200      	movs	r2, #0
 8006548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800654c:	7bfb      	ldrb	r3, [r7, #15]
}
 800654e:	4618      	mov	r0, r3
 8006550:	3710      	adds	r7, #16
 8006552:	46bd      	mov	sp, r7
 8006554:	bd80      	pop	{r7, pc}
 8006556:	bf00      	nop
 8006558:	00100070 	.word	0x00100070
 800655c:	00100060 	.word	0x00100060
 8006560:	00100050 	.word	0x00100050
 8006564:	00100040 	.word	0x00100040
 8006568:	00100030 	.word	0x00100030
 800656c:	00100020 	.word	0x00100020

08006570 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006570:	b480      	push	{r7}
 8006572:	b083      	sub	sp, #12
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006578:	bf00      	nop
 800657a:	370c      	adds	r7, #12
 800657c:	46bd      	mov	sp, r7
 800657e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006582:	4770      	bx	lr

08006584 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006584:	b480      	push	{r7}
 8006586:	b083      	sub	sp, #12
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800658c:	bf00      	nop
 800658e:	370c      	adds	r7, #12
 8006590:	46bd      	mov	sp, r7
 8006592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006596:	4770      	bx	lr

08006598 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006598:	b480      	push	{r7}
 800659a:	b083      	sub	sp, #12
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80065a0:	bf00      	nop
 80065a2:	370c      	adds	r7, #12
 80065a4:	46bd      	mov	sp, r7
 80065a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065aa:	4770      	bx	lr

080065ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80065ac:	b480      	push	{r7}
 80065ae:	b083      	sub	sp, #12
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80065b4:	bf00      	nop
 80065b6:	370c      	adds	r7, #12
 80065b8:	46bd      	mov	sp, r7
 80065ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065be:	4770      	bx	lr

080065c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80065c0:	b480      	push	{r7}
 80065c2:	b085      	sub	sp, #20
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
 80065c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	4a4c      	ldr	r2, [pc, #304]	; (8006704 <TIM_Base_SetConfig+0x144>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d017      	beq.n	8006608 <TIM_Base_SetConfig+0x48>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065de:	d013      	beq.n	8006608 <TIM_Base_SetConfig+0x48>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	4a49      	ldr	r2, [pc, #292]	; (8006708 <TIM_Base_SetConfig+0x148>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d00f      	beq.n	8006608 <TIM_Base_SetConfig+0x48>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	4a48      	ldr	r2, [pc, #288]	; (800670c <TIM_Base_SetConfig+0x14c>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d00b      	beq.n	8006608 <TIM_Base_SetConfig+0x48>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	4a47      	ldr	r2, [pc, #284]	; (8006710 <TIM_Base_SetConfig+0x150>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d007      	beq.n	8006608 <TIM_Base_SetConfig+0x48>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	4a46      	ldr	r2, [pc, #280]	; (8006714 <TIM_Base_SetConfig+0x154>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d003      	beq.n	8006608 <TIM_Base_SetConfig+0x48>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	4a45      	ldr	r2, [pc, #276]	; (8006718 <TIM_Base_SetConfig+0x158>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d108      	bne.n	800661a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800660e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	68fa      	ldr	r2, [r7, #12]
 8006616:	4313      	orrs	r3, r2
 8006618:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	4a39      	ldr	r2, [pc, #228]	; (8006704 <TIM_Base_SetConfig+0x144>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d023      	beq.n	800666a <TIM_Base_SetConfig+0xaa>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006628:	d01f      	beq.n	800666a <TIM_Base_SetConfig+0xaa>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	4a36      	ldr	r2, [pc, #216]	; (8006708 <TIM_Base_SetConfig+0x148>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d01b      	beq.n	800666a <TIM_Base_SetConfig+0xaa>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	4a35      	ldr	r2, [pc, #212]	; (800670c <TIM_Base_SetConfig+0x14c>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d017      	beq.n	800666a <TIM_Base_SetConfig+0xaa>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	4a34      	ldr	r2, [pc, #208]	; (8006710 <TIM_Base_SetConfig+0x150>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d013      	beq.n	800666a <TIM_Base_SetConfig+0xaa>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	4a33      	ldr	r2, [pc, #204]	; (8006714 <TIM_Base_SetConfig+0x154>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d00f      	beq.n	800666a <TIM_Base_SetConfig+0xaa>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	4a33      	ldr	r2, [pc, #204]	; (800671c <TIM_Base_SetConfig+0x15c>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d00b      	beq.n	800666a <TIM_Base_SetConfig+0xaa>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	4a32      	ldr	r2, [pc, #200]	; (8006720 <TIM_Base_SetConfig+0x160>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d007      	beq.n	800666a <TIM_Base_SetConfig+0xaa>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	4a31      	ldr	r2, [pc, #196]	; (8006724 <TIM_Base_SetConfig+0x164>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d003      	beq.n	800666a <TIM_Base_SetConfig+0xaa>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	4a2c      	ldr	r2, [pc, #176]	; (8006718 <TIM_Base_SetConfig+0x158>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d108      	bne.n	800667c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006670:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	68db      	ldr	r3, [r3, #12]
 8006676:	68fa      	ldr	r2, [r7, #12]
 8006678:	4313      	orrs	r3, r2
 800667a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	695b      	ldr	r3, [r3, #20]
 8006686:	4313      	orrs	r3, r2
 8006688:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	68fa      	ldr	r2, [r7, #12]
 800668e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	689a      	ldr	r2, [r3, #8]
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	681a      	ldr	r2, [r3, #0]
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	4a18      	ldr	r2, [pc, #96]	; (8006704 <TIM_Base_SetConfig+0x144>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d013      	beq.n	80066d0 <TIM_Base_SetConfig+0x110>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	4a1a      	ldr	r2, [pc, #104]	; (8006714 <TIM_Base_SetConfig+0x154>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d00f      	beq.n	80066d0 <TIM_Base_SetConfig+0x110>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	4a1a      	ldr	r2, [pc, #104]	; (800671c <TIM_Base_SetConfig+0x15c>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d00b      	beq.n	80066d0 <TIM_Base_SetConfig+0x110>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	4a19      	ldr	r2, [pc, #100]	; (8006720 <TIM_Base_SetConfig+0x160>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d007      	beq.n	80066d0 <TIM_Base_SetConfig+0x110>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	4a18      	ldr	r2, [pc, #96]	; (8006724 <TIM_Base_SetConfig+0x164>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d003      	beq.n	80066d0 <TIM_Base_SetConfig+0x110>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	4a13      	ldr	r2, [pc, #76]	; (8006718 <TIM_Base_SetConfig+0x158>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d103      	bne.n	80066d8 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	691a      	ldr	r2, [r3, #16]
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2201      	movs	r2, #1
 80066dc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	691b      	ldr	r3, [r3, #16]
 80066e2:	f003 0301 	and.w	r3, r3, #1
 80066e6:	2b01      	cmp	r3, #1
 80066e8:	d105      	bne.n	80066f6 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	691b      	ldr	r3, [r3, #16]
 80066ee:	f023 0201 	bic.w	r2, r3, #1
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	611a      	str	r2, [r3, #16]
  }
}
 80066f6:	bf00      	nop
 80066f8:	3714      	adds	r7, #20
 80066fa:	46bd      	mov	sp, r7
 80066fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006700:	4770      	bx	lr
 8006702:	bf00      	nop
 8006704:	40012c00 	.word	0x40012c00
 8006708:	40000400 	.word	0x40000400
 800670c:	40000800 	.word	0x40000800
 8006710:	40000c00 	.word	0x40000c00
 8006714:	40013400 	.word	0x40013400
 8006718:	40015000 	.word	0x40015000
 800671c:	40014000 	.word	0x40014000
 8006720:	40014400 	.word	0x40014400
 8006724:	40014800 	.word	0x40014800

08006728 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006728:	b480      	push	{r7}
 800672a:	b087      	sub	sp, #28
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
 8006730:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6a1b      	ldr	r3, [r3, #32]
 8006736:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6a1b      	ldr	r3, [r3, #32]
 800673c:	f023 0201 	bic.w	r2, r3, #1
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	685b      	ldr	r3, [r3, #4]
 8006748:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	699b      	ldr	r3, [r3, #24]
 800674e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006756:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800675a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	f023 0303 	bic.w	r3, r3, #3
 8006762:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	68fa      	ldr	r2, [r7, #12]
 800676a:	4313      	orrs	r3, r2
 800676c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	f023 0302 	bic.w	r3, r3, #2
 8006774:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	689b      	ldr	r3, [r3, #8]
 800677a:	697a      	ldr	r2, [r7, #20]
 800677c:	4313      	orrs	r3, r2
 800677e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	4a30      	ldr	r2, [pc, #192]	; (8006844 <TIM_OC1_SetConfig+0x11c>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d013      	beq.n	80067b0 <TIM_OC1_SetConfig+0x88>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	4a2f      	ldr	r2, [pc, #188]	; (8006848 <TIM_OC1_SetConfig+0x120>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d00f      	beq.n	80067b0 <TIM_OC1_SetConfig+0x88>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	4a2e      	ldr	r2, [pc, #184]	; (800684c <TIM_OC1_SetConfig+0x124>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d00b      	beq.n	80067b0 <TIM_OC1_SetConfig+0x88>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	4a2d      	ldr	r2, [pc, #180]	; (8006850 <TIM_OC1_SetConfig+0x128>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d007      	beq.n	80067b0 <TIM_OC1_SetConfig+0x88>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	4a2c      	ldr	r2, [pc, #176]	; (8006854 <TIM_OC1_SetConfig+0x12c>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d003      	beq.n	80067b0 <TIM_OC1_SetConfig+0x88>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	4a2b      	ldr	r2, [pc, #172]	; (8006858 <TIM_OC1_SetConfig+0x130>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d10c      	bne.n	80067ca <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80067b0:	697b      	ldr	r3, [r7, #20]
 80067b2:	f023 0308 	bic.w	r3, r3, #8
 80067b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	68db      	ldr	r3, [r3, #12]
 80067bc:	697a      	ldr	r2, [r7, #20]
 80067be:	4313      	orrs	r3, r2
 80067c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	f023 0304 	bic.w	r3, r3, #4
 80067c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	4a1d      	ldr	r2, [pc, #116]	; (8006844 <TIM_OC1_SetConfig+0x11c>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d013      	beq.n	80067fa <TIM_OC1_SetConfig+0xd2>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	4a1c      	ldr	r2, [pc, #112]	; (8006848 <TIM_OC1_SetConfig+0x120>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d00f      	beq.n	80067fa <TIM_OC1_SetConfig+0xd2>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	4a1b      	ldr	r2, [pc, #108]	; (800684c <TIM_OC1_SetConfig+0x124>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d00b      	beq.n	80067fa <TIM_OC1_SetConfig+0xd2>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	4a1a      	ldr	r2, [pc, #104]	; (8006850 <TIM_OC1_SetConfig+0x128>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d007      	beq.n	80067fa <TIM_OC1_SetConfig+0xd2>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	4a19      	ldr	r2, [pc, #100]	; (8006854 <TIM_OC1_SetConfig+0x12c>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d003      	beq.n	80067fa <TIM_OC1_SetConfig+0xd2>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	4a18      	ldr	r2, [pc, #96]	; (8006858 <TIM_OC1_SetConfig+0x130>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d111      	bne.n	800681e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80067fa:	693b      	ldr	r3, [r7, #16]
 80067fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006800:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006802:	693b      	ldr	r3, [r7, #16]
 8006804:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006808:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	695b      	ldr	r3, [r3, #20]
 800680e:	693a      	ldr	r2, [r7, #16]
 8006810:	4313      	orrs	r3, r2
 8006812:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	699b      	ldr	r3, [r3, #24]
 8006818:	693a      	ldr	r2, [r7, #16]
 800681a:	4313      	orrs	r3, r2
 800681c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	693a      	ldr	r2, [r7, #16]
 8006822:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	68fa      	ldr	r2, [r7, #12]
 8006828:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	685a      	ldr	r2, [r3, #4]
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	697a      	ldr	r2, [r7, #20]
 8006836:	621a      	str	r2, [r3, #32]
}
 8006838:	bf00      	nop
 800683a:	371c      	adds	r7, #28
 800683c:	46bd      	mov	sp, r7
 800683e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006842:	4770      	bx	lr
 8006844:	40012c00 	.word	0x40012c00
 8006848:	40013400 	.word	0x40013400
 800684c:	40014000 	.word	0x40014000
 8006850:	40014400 	.word	0x40014400
 8006854:	40014800 	.word	0x40014800
 8006858:	40015000 	.word	0x40015000

0800685c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800685c:	b480      	push	{r7}
 800685e:	b087      	sub	sp, #28
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
 8006864:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6a1b      	ldr	r3, [r3, #32]
 800686a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6a1b      	ldr	r3, [r3, #32]
 8006870:	f023 0210 	bic.w	r2, r3, #16
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	685b      	ldr	r3, [r3, #4]
 800687c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	699b      	ldr	r3, [r3, #24]
 8006882:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800688a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800688e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006896:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	021b      	lsls	r3, r3, #8
 800689e:	68fa      	ldr	r2, [r7, #12]
 80068a0:	4313      	orrs	r3, r2
 80068a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80068a4:	697b      	ldr	r3, [r7, #20]
 80068a6:	f023 0320 	bic.w	r3, r3, #32
 80068aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	689b      	ldr	r3, [r3, #8]
 80068b0:	011b      	lsls	r3, r3, #4
 80068b2:	697a      	ldr	r2, [r7, #20]
 80068b4:	4313      	orrs	r3, r2
 80068b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	4a2c      	ldr	r2, [pc, #176]	; (800696c <TIM_OC2_SetConfig+0x110>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d007      	beq.n	80068d0 <TIM_OC2_SetConfig+0x74>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	4a2b      	ldr	r2, [pc, #172]	; (8006970 <TIM_OC2_SetConfig+0x114>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d003      	beq.n	80068d0 <TIM_OC2_SetConfig+0x74>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	4a2a      	ldr	r2, [pc, #168]	; (8006974 <TIM_OC2_SetConfig+0x118>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d10d      	bne.n	80068ec <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80068d0:	697b      	ldr	r3, [r7, #20]
 80068d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80068d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	68db      	ldr	r3, [r3, #12]
 80068dc:	011b      	lsls	r3, r3, #4
 80068de:	697a      	ldr	r2, [r7, #20]
 80068e0:	4313      	orrs	r3, r2
 80068e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80068e4:	697b      	ldr	r3, [r7, #20]
 80068e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068ea:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	4a1f      	ldr	r2, [pc, #124]	; (800696c <TIM_OC2_SetConfig+0x110>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d013      	beq.n	800691c <TIM_OC2_SetConfig+0xc0>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	4a1e      	ldr	r2, [pc, #120]	; (8006970 <TIM_OC2_SetConfig+0x114>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d00f      	beq.n	800691c <TIM_OC2_SetConfig+0xc0>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	4a1e      	ldr	r2, [pc, #120]	; (8006978 <TIM_OC2_SetConfig+0x11c>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d00b      	beq.n	800691c <TIM_OC2_SetConfig+0xc0>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	4a1d      	ldr	r2, [pc, #116]	; (800697c <TIM_OC2_SetConfig+0x120>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d007      	beq.n	800691c <TIM_OC2_SetConfig+0xc0>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	4a1c      	ldr	r2, [pc, #112]	; (8006980 <TIM_OC2_SetConfig+0x124>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d003      	beq.n	800691c <TIM_OC2_SetConfig+0xc0>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	4a17      	ldr	r2, [pc, #92]	; (8006974 <TIM_OC2_SetConfig+0x118>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d113      	bne.n	8006944 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800691c:	693b      	ldr	r3, [r7, #16]
 800691e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006922:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006924:	693b      	ldr	r3, [r7, #16]
 8006926:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800692a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	695b      	ldr	r3, [r3, #20]
 8006930:	009b      	lsls	r3, r3, #2
 8006932:	693a      	ldr	r2, [r7, #16]
 8006934:	4313      	orrs	r3, r2
 8006936:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	699b      	ldr	r3, [r3, #24]
 800693c:	009b      	lsls	r3, r3, #2
 800693e:	693a      	ldr	r2, [r7, #16]
 8006940:	4313      	orrs	r3, r2
 8006942:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	693a      	ldr	r2, [r7, #16]
 8006948:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	68fa      	ldr	r2, [r7, #12]
 800694e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	685a      	ldr	r2, [r3, #4]
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	697a      	ldr	r2, [r7, #20]
 800695c:	621a      	str	r2, [r3, #32]
}
 800695e:	bf00      	nop
 8006960:	371c      	adds	r7, #28
 8006962:	46bd      	mov	sp, r7
 8006964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006968:	4770      	bx	lr
 800696a:	bf00      	nop
 800696c:	40012c00 	.word	0x40012c00
 8006970:	40013400 	.word	0x40013400
 8006974:	40015000 	.word	0x40015000
 8006978:	40014000 	.word	0x40014000
 800697c:	40014400 	.word	0x40014400
 8006980:	40014800 	.word	0x40014800

08006984 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006984:	b480      	push	{r7}
 8006986:	b087      	sub	sp, #28
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
 800698c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6a1b      	ldr	r3, [r3, #32]
 8006992:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6a1b      	ldr	r3, [r3, #32]
 8006998:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	685b      	ldr	r3, [r3, #4]
 80069a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	69db      	ldr	r3, [r3, #28]
 80069aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	f023 0303 	bic.w	r3, r3, #3
 80069be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	68fa      	ldr	r2, [r7, #12]
 80069c6:	4313      	orrs	r3, r2
 80069c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80069d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	689b      	ldr	r3, [r3, #8]
 80069d6:	021b      	lsls	r3, r3, #8
 80069d8:	697a      	ldr	r2, [r7, #20]
 80069da:	4313      	orrs	r3, r2
 80069dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	4a2b      	ldr	r2, [pc, #172]	; (8006a90 <TIM_OC3_SetConfig+0x10c>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d007      	beq.n	80069f6 <TIM_OC3_SetConfig+0x72>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	4a2a      	ldr	r2, [pc, #168]	; (8006a94 <TIM_OC3_SetConfig+0x110>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d003      	beq.n	80069f6 <TIM_OC3_SetConfig+0x72>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	4a29      	ldr	r2, [pc, #164]	; (8006a98 <TIM_OC3_SetConfig+0x114>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d10d      	bne.n	8006a12 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80069f6:	697b      	ldr	r3, [r7, #20]
 80069f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80069fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	68db      	ldr	r3, [r3, #12]
 8006a02:	021b      	lsls	r3, r3, #8
 8006a04:	697a      	ldr	r2, [r7, #20]
 8006a06:	4313      	orrs	r3, r2
 8006a08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006a10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	4a1e      	ldr	r2, [pc, #120]	; (8006a90 <TIM_OC3_SetConfig+0x10c>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d013      	beq.n	8006a42 <TIM_OC3_SetConfig+0xbe>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	4a1d      	ldr	r2, [pc, #116]	; (8006a94 <TIM_OC3_SetConfig+0x110>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d00f      	beq.n	8006a42 <TIM_OC3_SetConfig+0xbe>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	4a1d      	ldr	r2, [pc, #116]	; (8006a9c <TIM_OC3_SetConfig+0x118>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d00b      	beq.n	8006a42 <TIM_OC3_SetConfig+0xbe>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	4a1c      	ldr	r2, [pc, #112]	; (8006aa0 <TIM_OC3_SetConfig+0x11c>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d007      	beq.n	8006a42 <TIM_OC3_SetConfig+0xbe>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	4a1b      	ldr	r2, [pc, #108]	; (8006aa4 <TIM_OC3_SetConfig+0x120>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d003      	beq.n	8006a42 <TIM_OC3_SetConfig+0xbe>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	4a16      	ldr	r2, [pc, #88]	; (8006a98 <TIM_OC3_SetConfig+0x114>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d113      	bne.n	8006a6a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006a42:	693b      	ldr	r3, [r7, #16]
 8006a44:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006a48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006a50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	695b      	ldr	r3, [r3, #20]
 8006a56:	011b      	lsls	r3, r3, #4
 8006a58:	693a      	ldr	r2, [r7, #16]
 8006a5a:	4313      	orrs	r3, r2
 8006a5c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	699b      	ldr	r3, [r3, #24]
 8006a62:	011b      	lsls	r3, r3, #4
 8006a64:	693a      	ldr	r2, [r7, #16]
 8006a66:	4313      	orrs	r3, r2
 8006a68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	693a      	ldr	r2, [r7, #16]
 8006a6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	68fa      	ldr	r2, [r7, #12]
 8006a74:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	685a      	ldr	r2, [r3, #4]
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	697a      	ldr	r2, [r7, #20]
 8006a82:	621a      	str	r2, [r3, #32]
}
 8006a84:	bf00      	nop
 8006a86:	371c      	adds	r7, #28
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8e:	4770      	bx	lr
 8006a90:	40012c00 	.word	0x40012c00
 8006a94:	40013400 	.word	0x40013400
 8006a98:	40015000 	.word	0x40015000
 8006a9c:	40014000 	.word	0x40014000
 8006aa0:	40014400 	.word	0x40014400
 8006aa4:	40014800 	.word	0x40014800

08006aa8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b087      	sub	sp, #28
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
 8006ab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6a1b      	ldr	r3, [r3, #32]
 8006ab6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6a1b      	ldr	r3, [r3, #32]
 8006abc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	685b      	ldr	r3, [r3, #4]
 8006ac8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	69db      	ldr	r3, [r3, #28]
 8006ace:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006ad6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ada:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ae2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	021b      	lsls	r3, r3, #8
 8006aea:	68fa      	ldr	r2, [r7, #12]
 8006aec:	4313      	orrs	r3, r2
 8006aee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006af0:	697b      	ldr	r3, [r7, #20]
 8006af2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006af6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	689b      	ldr	r3, [r3, #8]
 8006afc:	031b      	lsls	r3, r3, #12
 8006afe:	697a      	ldr	r2, [r7, #20]
 8006b00:	4313      	orrs	r3, r2
 8006b02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	4a2c      	ldr	r2, [pc, #176]	; (8006bb8 <TIM_OC4_SetConfig+0x110>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d007      	beq.n	8006b1c <TIM_OC4_SetConfig+0x74>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	4a2b      	ldr	r2, [pc, #172]	; (8006bbc <TIM_OC4_SetConfig+0x114>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d003      	beq.n	8006b1c <TIM_OC4_SetConfig+0x74>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	4a2a      	ldr	r2, [pc, #168]	; (8006bc0 <TIM_OC4_SetConfig+0x118>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d10d      	bne.n	8006b38 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006b22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	68db      	ldr	r3, [r3, #12]
 8006b28:	031b      	lsls	r3, r3, #12
 8006b2a:	697a      	ldr	r2, [r7, #20]
 8006b2c:	4313      	orrs	r3, r2
 8006b2e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b36:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	4a1f      	ldr	r2, [pc, #124]	; (8006bb8 <TIM_OC4_SetConfig+0x110>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d013      	beq.n	8006b68 <TIM_OC4_SetConfig+0xc0>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	4a1e      	ldr	r2, [pc, #120]	; (8006bbc <TIM_OC4_SetConfig+0x114>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d00f      	beq.n	8006b68 <TIM_OC4_SetConfig+0xc0>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	4a1e      	ldr	r2, [pc, #120]	; (8006bc4 <TIM_OC4_SetConfig+0x11c>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d00b      	beq.n	8006b68 <TIM_OC4_SetConfig+0xc0>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	4a1d      	ldr	r2, [pc, #116]	; (8006bc8 <TIM_OC4_SetConfig+0x120>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d007      	beq.n	8006b68 <TIM_OC4_SetConfig+0xc0>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	4a1c      	ldr	r2, [pc, #112]	; (8006bcc <TIM_OC4_SetConfig+0x124>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d003      	beq.n	8006b68 <TIM_OC4_SetConfig+0xc0>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	4a17      	ldr	r2, [pc, #92]	; (8006bc0 <TIM_OC4_SetConfig+0x118>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d113      	bne.n	8006b90 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006b68:	693b      	ldr	r3, [r7, #16]
 8006b6a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b6e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006b76:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	695b      	ldr	r3, [r3, #20]
 8006b7c:	019b      	lsls	r3, r3, #6
 8006b7e:	693a      	ldr	r2, [r7, #16]
 8006b80:	4313      	orrs	r3, r2
 8006b82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	699b      	ldr	r3, [r3, #24]
 8006b88:	019b      	lsls	r3, r3, #6
 8006b8a:	693a      	ldr	r2, [r7, #16]
 8006b8c:	4313      	orrs	r3, r2
 8006b8e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	693a      	ldr	r2, [r7, #16]
 8006b94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	68fa      	ldr	r2, [r7, #12]
 8006b9a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	685a      	ldr	r2, [r3, #4]
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	697a      	ldr	r2, [r7, #20]
 8006ba8:	621a      	str	r2, [r3, #32]
}
 8006baa:	bf00      	nop
 8006bac:	371c      	adds	r7, #28
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb4:	4770      	bx	lr
 8006bb6:	bf00      	nop
 8006bb8:	40012c00 	.word	0x40012c00
 8006bbc:	40013400 	.word	0x40013400
 8006bc0:	40015000 	.word	0x40015000
 8006bc4:	40014000 	.word	0x40014000
 8006bc8:	40014400 	.word	0x40014400
 8006bcc:	40014800 	.word	0x40014800

08006bd0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b087      	sub	sp, #28
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
 8006bd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6a1b      	ldr	r3, [r3, #32]
 8006bde:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6a1b      	ldr	r3, [r3, #32]
 8006be4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	685b      	ldr	r3, [r3, #4]
 8006bf0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006bfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	68fa      	ldr	r2, [r7, #12]
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006c0e:	693b      	ldr	r3, [r7, #16]
 8006c10:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006c14:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	689b      	ldr	r3, [r3, #8]
 8006c1a:	041b      	lsls	r3, r3, #16
 8006c1c:	693a      	ldr	r2, [r7, #16]
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	4a19      	ldr	r2, [pc, #100]	; (8006c8c <TIM_OC5_SetConfig+0xbc>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d013      	beq.n	8006c52 <TIM_OC5_SetConfig+0x82>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	4a18      	ldr	r2, [pc, #96]	; (8006c90 <TIM_OC5_SetConfig+0xc0>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d00f      	beq.n	8006c52 <TIM_OC5_SetConfig+0x82>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	4a17      	ldr	r2, [pc, #92]	; (8006c94 <TIM_OC5_SetConfig+0xc4>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d00b      	beq.n	8006c52 <TIM_OC5_SetConfig+0x82>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	4a16      	ldr	r2, [pc, #88]	; (8006c98 <TIM_OC5_SetConfig+0xc8>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d007      	beq.n	8006c52 <TIM_OC5_SetConfig+0x82>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	4a15      	ldr	r2, [pc, #84]	; (8006c9c <TIM_OC5_SetConfig+0xcc>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d003      	beq.n	8006c52 <TIM_OC5_SetConfig+0x82>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	4a14      	ldr	r2, [pc, #80]	; (8006ca0 <TIM_OC5_SetConfig+0xd0>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d109      	bne.n	8006c66 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c58:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	695b      	ldr	r3, [r3, #20]
 8006c5e:	021b      	lsls	r3, r3, #8
 8006c60:	697a      	ldr	r2, [r7, #20]
 8006c62:	4313      	orrs	r3, r2
 8006c64:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	697a      	ldr	r2, [r7, #20]
 8006c6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	68fa      	ldr	r2, [r7, #12]
 8006c70:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	685a      	ldr	r2, [r3, #4]
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	693a      	ldr	r2, [r7, #16]
 8006c7e:	621a      	str	r2, [r3, #32]
}
 8006c80:	bf00      	nop
 8006c82:	371c      	adds	r7, #28
 8006c84:	46bd      	mov	sp, r7
 8006c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8a:	4770      	bx	lr
 8006c8c:	40012c00 	.word	0x40012c00
 8006c90:	40013400 	.word	0x40013400
 8006c94:	40014000 	.word	0x40014000
 8006c98:	40014400 	.word	0x40014400
 8006c9c:	40014800 	.word	0x40014800
 8006ca0:	40015000 	.word	0x40015000

08006ca4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b087      	sub	sp, #28
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
 8006cac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6a1b      	ldr	r3, [r3, #32]
 8006cb2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6a1b      	ldr	r3, [r3, #32]
 8006cb8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	685b      	ldr	r3, [r3, #4]
 8006cc4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006cd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	021b      	lsls	r3, r3, #8
 8006cde:	68fa      	ldr	r2, [r7, #12]
 8006ce0:	4313      	orrs	r3, r2
 8006ce2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006ce4:	693b      	ldr	r3, [r7, #16]
 8006ce6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006cea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	689b      	ldr	r3, [r3, #8]
 8006cf0:	051b      	lsls	r3, r3, #20
 8006cf2:	693a      	ldr	r2, [r7, #16]
 8006cf4:	4313      	orrs	r3, r2
 8006cf6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	4a1a      	ldr	r2, [pc, #104]	; (8006d64 <TIM_OC6_SetConfig+0xc0>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d013      	beq.n	8006d28 <TIM_OC6_SetConfig+0x84>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	4a19      	ldr	r2, [pc, #100]	; (8006d68 <TIM_OC6_SetConfig+0xc4>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d00f      	beq.n	8006d28 <TIM_OC6_SetConfig+0x84>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	4a18      	ldr	r2, [pc, #96]	; (8006d6c <TIM_OC6_SetConfig+0xc8>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d00b      	beq.n	8006d28 <TIM_OC6_SetConfig+0x84>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	4a17      	ldr	r2, [pc, #92]	; (8006d70 <TIM_OC6_SetConfig+0xcc>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d007      	beq.n	8006d28 <TIM_OC6_SetConfig+0x84>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	4a16      	ldr	r2, [pc, #88]	; (8006d74 <TIM_OC6_SetConfig+0xd0>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d003      	beq.n	8006d28 <TIM_OC6_SetConfig+0x84>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	4a15      	ldr	r2, [pc, #84]	; (8006d78 <TIM_OC6_SetConfig+0xd4>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d109      	bne.n	8006d3c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006d28:	697b      	ldr	r3, [r7, #20]
 8006d2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006d2e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	695b      	ldr	r3, [r3, #20]
 8006d34:	029b      	lsls	r3, r3, #10
 8006d36:	697a      	ldr	r2, [r7, #20]
 8006d38:	4313      	orrs	r3, r2
 8006d3a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	697a      	ldr	r2, [r7, #20]
 8006d40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	68fa      	ldr	r2, [r7, #12]
 8006d46:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	685a      	ldr	r2, [r3, #4]
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	693a      	ldr	r2, [r7, #16]
 8006d54:	621a      	str	r2, [r3, #32]
}
 8006d56:	bf00      	nop
 8006d58:	371c      	adds	r7, #28
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d60:	4770      	bx	lr
 8006d62:	bf00      	nop
 8006d64:	40012c00 	.word	0x40012c00
 8006d68:	40013400 	.word	0x40013400
 8006d6c:	40014000 	.word	0x40014000
 8006d70:	40014400 	.word	0x40014400
 8006d74:	40014800 	.word	0x40014800
 8006d78:	40015000 	.word	0x40015000

08006d7c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b087      	sub	sp, #28
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	60f8      	str	r0, [r7, #12]
 8006d84:	60b9      	str	r1, [r7, #8]
 8006d86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	6a1b      	ldr	r3, [r3, #32]
 8006d8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	6a1b      	ldr	r3, [r3, #32]
 8006d92:	f023 0201 	bic.w	r2, r3, #1
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	699b      	ldr	r3, [r3, #24]
 8006d9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006da0:	693b      	ldr	r3, [r7, #16]
 8006da2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006da6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	011b      	lsls	r3, r3, #4
 8006dac:	693a      	ldr	r2, [r7, #16]
 8006dae:	4313      	orrs	r3, r2
 8006db0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006db2:	697b      	ldr	r3, [r7, #20]
 8006db4:	f023 030a 	bic.w	r3, r3, #10
 8006db8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006dba:	697a      	ldr	r2, [r7, #20]
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	4313      	orrs	r3, r2
 8006dc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	693a      	ldr	r2, [r7, #16]
 8006dc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	697a      	ldr	r2, [r7, #20]
 8006dcc:	621a      	str	r2, [r3, #32]
}
 8006dce:	bf00      	nop
 8006dd0:	371c      	adds	r7, #28
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd8:	4770      	bx	lr

08006dda <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006dda:	b480      	push	{r7}
 8006ddc:	b087      	sub	sp, #28
 8006dde:	af00      	add	r7, sp, #0
 8006de0:	60f8      	str	r0, [r7, #12]
 8006de2:	60b9      	str	r1, [r7, #8]
 8006de4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	6a1b      	ldr	r3, [r3, #32]
 8006dea:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	6a1b      	ldr	r3, [r3, #32]
 8006df0:	f023 0210 	bic.w	r2, r3, #16
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	699b      	ldr	r3, [r3, #24]
 8006dfc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006dfe:	693b      	ldr	r3, [r7, #16]
 8006e00:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006e04:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	031b      	lsls	r3, r3, #12
 8006e0a:	693a      	ldr	r2, [r7, #16]
 8006e0c:	4313      	orrs	r3, r2
 8006e0e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006e10:	697b      	ldr	r3, [r7, #20]
 8006e12:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006e16:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	011b      	lsls	r3, r3, #4
 8006e1c:	697a      	ldr	r2, [r7, #20]
 8006e1e:	4313      	orrs	r3, r2
 8006e20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	693a      	ldr	r2, [r7, #16]
 8006e26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	697a      	ldr	r2, [r7, #20]
 8006e2c:	621a      	str	r2, [r3, #32]
}
 8006e2e:	bf00      	nop
 8006e30:	371c      	adds	r7, #28
 8006e32:	46bd      	mov	sp, r7
 8006e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e38:	4770      	bx	lr

08006e3a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006e3a:	b480      	push	{r7}
 8006e3c:	b085      	sub	sp, #20
 8006e3e:	af00      	add	r7, sp, #0
 8006e40:	6078      	str	r0, [r7, #4]
 8006e42:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	689b      	ldr	r3, [r3, #8]
 8006e48:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006e50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e54:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006e56:	683a      	ldr	r2, [r7, #0]
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	4313      	orrs	r3, r2
 8006e5c:	f043 0307 	orr.w	r3, r3, #7
 8006e60:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	68fa      	ldr	r2, [r7, #12]
 8006e66:	609a      	str	r2, [r3, #8]
}
 8006e68:	bf00      	nop
 8006e6a:	3714      	adds	r7, #20
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e72:	4770      	bx	lr

08006e74 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006e74:	b480      	push	{r7}
 8006e76:	b087      	sub	sp, #28
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	60f8      	str	r0, [r7, #12]
 8006e7c:	60b9      	str	r1, [r7, #8]
 8006e7e:	607a      	str	r2, [r7, #4]
 8006e80:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	689b      	ldr	r3, [r3, #8]
 8006e86:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e88:	697b      	ldr	r3, [r7, #20]
 8006e8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006e8e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	021a      	lsls	r2, r3, #8
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	431a      	orrs	r2, r3
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	4313      	orrs	r3, r2
 8006e9c:	697a      	ldr	r2, [r7, #20]
 8006e9e:	4313      	orrs	r3, r2
 8006ea0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	697a      	ldr	r2, [r7, #20]
 8006ea6:	609a      	str	r2, [r3, #8]
}
 8006ea8:	bf00      	nop
 8006eaa:	371c      	adds	r7, #28
 8006eac:	46bd      	mov	sp, r7
 8006eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb2:	4770      	bx	lr

08006eb4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	b087      	sub	sp, #28
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	60f8      	str	r0, [r7, #12]
 8006ebc:	60b9      	str	r1, [r7, #8]
 8006ebe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	f003 031f 	and.w	r3, r3, #31
 8006ec6:	2201      	movs	r2, #1
 8006ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8006ecc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	6a1a      	ldr	r2, [r3, #32]
 8006ed2:	697b      	ldr	r3, [r7, #20]
 8006ed4:	43db      	mvns	r3, r3
 8006ed6:	401a      	ands	r2, r3
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	6a1a      	ldr	r2, [r3, #32]
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	f003 031f 	and.w	r3, r3, #31
 8006ee6:	6879      	ldr	r1, [r7, #4]
 8006ee8:	fa01 f303 	lsl.w	r3, r1, r3
 8006eec:	431a      	orrs	r2, r3
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	621a      	str	r2, [r3, #32]
}
 8006ef2:	bf00      	nop
 8006ef4:	371c      	adds	r7, #28
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efc:	4770      	bx	lr
	...

08006f00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006f00:	b480      	push	{r7}
 8006f02:	b085      	sub	sp, #20
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
 8006f08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f10:	2b01      	cmp	r3, #1
 8006f12:	d101      	bne.n	8006f18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006f14:	2302      	movs	r3, #2
 8006f16:	e074      	b.n	8007002 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2201      	movs	r2, #1
 8006f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2202      	movs	r2, #2
 8006f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	685b      	ldr	r3, [r3, #4]
 8006f2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	689b      	ldr	r3, [r3, #8]
 8006f36:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	4a34      	ldr	r2, [pc, #208]	; (8007010 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d009      	beq.n	8006f56 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4a33      	ldr	r2, [pc, #204]	; (8007014 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d004      	beq.n	8006f56 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4a31      	ldr	r2, [pc, #196]	; (8007018 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d108      	bne.n	8006f68 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006f5c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	685b      	ldr	r3, [r3, #4]
 8006f62:	68fa      	ldr	r2, [r7, #12]
 8006f64:	4313      	orrs	r3, r2
 8006f66:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006f6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f72:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	68fa      	ldr	r2, [r7, #12]
 8006f7a:	4313      	orrs	r3, r2
 8006f7c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	68fa      	ldr	r2, [r7, #12]
 8006f84:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4a21      	ldr	r2, [pc, #132]	; (8007010 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d022      	beq.n	8006fd6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f98:	d01d      	beq.n	8006fd6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4a1f      	ldr	r2, [pc, #124]	; (800701c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d018      	beq.n	8006fd6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a1d      	ldr	r2, [pc, #116]	; (8007020 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d013      	beq.n	8006fd6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a1c      	ldr	r2, [pc, #112]	; (8007024 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d00e      	beq.n	8006fd6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a15      	ldr	r2, [pc, #84]	; (8007014 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d009      	beq.n	8006fd6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a18      	ldr	r2, [pc, #96]	; (8007028 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d004      	beq.n	8006fd6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a11      	ldr	r2, [pc, #68]	; (8007018 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d10c      	bne.n	8006ff0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006fd6:	68bb      	ldr	r3, [r7, #8]
 8006fd8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006fdc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	689b      	ldr	r3, [r3, #8]
 8006fe2:	68ba      	ldr	r2, [r7, #8]
 8006fe4:	4313      	orrs	r3, r2
 8006fe6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	68ba      	ldr	r2, [r7, #8]
 8006fee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2201      	movs	r2, #1
 8006ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007000:	2300      	movs	r3, #0
}
 8007002:	4618      	mov	r0, r3
 8007004:	3714      	adds	r7, #20
 8007006:	46bd      	mov	sp, r7
 8007008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700c:	4770      	bx	lr
 800700e:	bf00      	nop
 8007010:	40012c00 	.word	0x40012c00
 8007014:	40013400 	.word	0x40013400
 8007018:	40015000 	.word	0x40015000
 800701c:	40000400 	.word	0x40000400
 8007020:	40000800 	.word	0x40000800
 8007024:	40000c00 	.word	0x40000c00
 8007028:	40014000 	.word	0x40014000

0800702c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800702c:	b480      	push	{r7}
 800702e:	b085      	sub	sp, #20
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
 8007034:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007036:	2300      	movs	r3, #0
 8007038:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007040:	2b01      	cmp	r3, #1
 8007042:	d101      	bne.n	8007048 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007044:	2302      	movs	r3, #2
 8007046:	e078      	b.n	800713a <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2201      	movs	r2, #1
 800704c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	68db      	ldr	r3, [r3, #12]
 800705a:	4313      	orrs	r3, r2
 800705c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	689b      	ldr	r3, [r3, #8]
 8007068:	4313      	orrs	r3, r2
 800706a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	685b      	ldr	r3, [r3, #4]
 8007076:	4313      	orrs	r3, r2
 8007078:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4313      	orrs	r3, r2
 8007086:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	691b      	ldr	r3, [r3, #16]
 8007092:	4313      	orrs	r3, r2
 8007094:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	695b      	ldr	r3, [r3, #20]
 80070a0:	4313      	orrs	r3, r2
 80070a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070ae:	4313      	orrs	r3, r2
 80070b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	699b      	ldr	r3, [r3, #24]
 80070bc:	041b      	lsls	r3, r3, #16
 80070be:	4313      	orrs	r3, r2
 80070c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	69db      	ldr	r3, [r3, #28]
 80070cc:	4313      	orrs	r3, r2
 80070ce:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4a1c      	ldr	r2, [pc, #112]	; (8007148 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d009      	beq.n	80070ee <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	4a1b      	ldr	r2, [pc, #108]	; (800714c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d004      	beq.n	80070ee <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4a19      	ldr	r2, [pc, #100]	; (8007150 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d11c      	bne.n	8007128 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070f8:	051b      	lsls	r3, r3, #20
 80070fa:	4313      	orrs	r3, r2
 80070fc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	6a1b      	ldr	r3, [r3, #32]
 8007108:	4313      	orrs	r3, r2
 800710a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007116:	4313      	orrs	r3, r2
 8007118:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007124:	4313      	orrs	r3, r2
 8007126:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	68fa      	ldr	r2, [r7, #12]
 800712e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2200      	movs	r2, #0
 8007134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007138:	2300      	movs	r3, #0
}
 800713a:	4618      	mov	r0, r3
 800713c:	3714      	adds	r7, #20
 800713e:	46bd      	mov	sp, r7
 8007140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007144:	4770      	bx	lr
 8007146:	bf00      	nop
 8007148:	40012c00 	.word	0x40012c00
 800714c:	40013400 	.word	0x40013400
 8007150:	40015000 	.word	0x40015000

08007154 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007154:	b480      	push	{r7}
 8007156:	b083      	sub	sp, #12
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800715c:	bf00      	nop
 800715e:	370c      	adds	r7, #12
 8007160:	46bd      	mov	sp, r7
 8007162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007166:	4770      	bx	lr

08007168 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007168:	b480      	push	{r7}
 800716a:	b083      	sub	sp, #12
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007170:	bf00      	nop
 8007172:	370c      	adds	r7, #12
 8007174:	46bd      	mov	sp, r7
 8007176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717a:	4770      	bx	lr

0800717c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800717c:	b480      	push	{r7}
 800717e:	b083      	sub	sp, #12
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007184:	bf00      	nop
 8007186:	370c      	adds	r7, #12
 8007188:	46bd      	mov	sp, r7
 800718a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718e:	4770      	bx	lr

08007190 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007190:	b480      	push	{r7}
 8007192:	b083      	sub	sp, #12
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007198:	bf00      	nop
 800719a:	370c      	adds	r7, #12
 800719c:	46bd      	mov	sp, r7
 800719e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a2:	4770      	bx	lr

080071a4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80071a4:	b480      	push	{r7}
 80071a6:	b083      	sub	sp, #12
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80071ac:	bf00      	nop
 80071ae:	370c      	adds	r7, #12
 80071b0:	46bd      	mov	sp, r7
 80071b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b6:	4770      	bx	lr

080071b8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80071b8:	b480      	push	{r7}
 80071ba:	b083      	sub	sp, #12
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80071c0:	bf00      	nop
 80071c2:	370c      	adds	r7, #12
 80071c4:	46bd      	mov	sp, r7
 80071c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ca:	4770      	bx	lr

080071cc <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80071cc:	b480      	push	{r7}
 80071ce:	b083      	sub	sp, #12
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80071d4:	bf00      	nop
 80071d6:	370c      	adds	r7, #12
 80071d8:	46bd      	mov	sp, r7
 80071da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071de:	4770      	bx	lr

080071e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b082      	sub	sp, #8
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d101      	bne.n	80071f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80071ee:	2301      	movs	r3, #1
 80071f0:	e042      	b.n	8007278 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d106      	bne.n	800720a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2200      	movs	r2, #0
 8007200:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	f7fa fae9 	bl	80017dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2224      	movs	r2, #36	; 0x24
 800720e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	681a      	ldr	r2, [r3, #0]
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f022 0201 	bic.w	r2, r2, #1
 8007220:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007226:	2b00      	cmp	r3, #0
 8007228:	d002      	beq.n	8007230 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f000 ff48 	bl	80080c0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	f000 fc49 	bl	8007ac8 <UART_SetConfig>
 8007236:	4603      	mov	r3, r0
 8007238:	2b01      	cmp	r3, #1
 800723a:	d101      	bne.n	8007240 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800723c:	2301      	movs	r3, #1
 800723e:	e01b      	b.n	8007278 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	685a      	ldr	r2, [r3, #4]
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800724e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	689a      	ldr	r2, [r3, #8]
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800725e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	681a      	ldr	r2, [r3, #0]
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f042 0201 	orr.w	r2, r2, #1
 800726e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	f000 ffc7 	bl	8008204 <UART_CheckIdleState>
 8007276:	4603      	mov	r3, r0
}
 8007278:	4618      	mov	r0, r3
 800727a:	3708      	adds	r7, #8
 800727c:	46bd      	mov	sp, r7
 800727e:	bd80      	pop	{r7, pc}

08007280 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b08a      	sub	sp, #40	; 0x28
 8007284:	af00      	add	r7, sp, #0
 8007286:	60f8      	str	r0, [r7, #12]
 8007288:	60b9      	str	r1, [r7, #8]
 800728a:	4613      	mov	r3, r2
 800728c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007294:	2b20      	cmp	r3, #32
 8007296:	d167      	bne.n	8007368 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d002      	beq.n	80072a4 <HAL_UART_Transmit_DMA+0x24>
 800729e:	88fb      	ldrh	r3, [r7, #6]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d101      	bne.n	80072a8 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80072a4:	2301      	movs	r3, #1
 80072a6:	e060      	b.n	800736a <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	68ba      	ldr	r2, [r7, #8]
 80072ac:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	88fa      	ldrh	r2, [r7, #6]
 80072b2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	88fa      	ldrh	r2, [r7, #6]
 80072ba:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	2200      	movs	r2, #0
 80072c2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	2221      	movs	r2, #33	; 0x21
 80072ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d028      	beq.n	8007328 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80072da:	4a26      	ldr	r2, [pc, #152]	; (8007374 <HAL_UART_Transmit_DMA+0xf4>)
 80072dc:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80072e2:	4a25      	ldr	r2, [pc, #148]	; (8007378 <HAL_UART_Transmit_DMA+0xf8>)
 80072e4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80072ea:	4a24      	ldr	r2, [pc, #144]	; (800737c <HAL_UART_Transmit_DMA+0xfc>)
 80072ec:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80072f2:	2200      	movs	r2, #0
 80072f4:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072fe:	4619      	mov	r1, r3
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	3328      	adds	r3, #40	; 0x28
 8007306:	461a      	mov	r2, r3
 8007308:	88fb      	ldrh	r3, [r7, #6]
 800730a:	f7fc fd53 	bl	8003db4 <HAL_DMA_Start_IT>
 800730e:	4603      	mov	r3, r0
 8007310:	2b00      	cmp	r3, #0
 8007312:	d009      	beq.n	8007328 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	2210      	movs	r2, #16
 8007318:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	2220      	movs	r2, #32
 8007320:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 8007324:	2301      	movs	r3, #1
 8007326:	e020      	b.n	800736a <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	2240      	movs	r2, #64	; 0x40
 800732e:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	3308      	adds	r3, #8
 8007336:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007338:	697b      	ldr	r3, [r7, #20]
 800733a:	e853 3f00 	ldrex	r3, [r3]
 800733e:	613b      	str	r3, [r7, #16]
   return(result);
 8007340:	693b      	ldr	r3, [r7, #16]
 8007342:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007346:	627b      	str	r3, [r7, #36]	; 0x24
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	3308      	adds	r3, #8
 800734e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007350:	623a      	str	r2, [r7, #32]
 8007352:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007354:	69f9      	ldr	r1, [r7, #28]
 8007356:	6a3a      	ldr	r2, [r7, #32]
 8007358:	e841 2300 	strex	r3, r2, [r1]
 800735c:	61bb      	str	r3, [r7, #24]
   return(result);
 800735e:	69bb      	ldr	r3, [r7, #24]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d1e5      	bne.n	8007330 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8007364:	2300      	movs	r3, #0
 8007366:	e000      	b.n	800736a <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8007368:	2302      	movs	r3, #2
  }
}
 800736a:	4618      	mov	r0, r3
 800736c:	3728      	adds	r7, #40	; 0x28
 800736e:	46bd      	mov	sp, r7
 8007370:	bd80      	pop	{r7, pc}
 8007372:	bf00      	nop
 8007374:	080086cf 	.word	0x080086cf
 8007378:	08008769 	.word	0x08008769
 800737c:	080088ef 	.word	0x080088ef

08007380 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b08a      	sub	sp, #40	; 0x28
 8007384:	af00      	add	r7, sp, #0
 8007386:	60f8      	str	r0, [r7, #12]
 8007388:	60b9      	str	r1, [r7, #8]
 800738a:	4613      	mov	r3, r2
 800738c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007394:	2b20      	cmp	r3, #32
 8007396:	d137      	bne.n	8007408 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d002      	beq.n	80073a4 <HAL_UART_Receive_DMA+0x24>
 800739e:	88fb      	ldrh	r3, [r7, #6]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d101      	bne.n	80073a8 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80073a4:	2301      	movs	r3, #1
 80073a6:	e030      	b.n	800740a <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	2200      	movs	r2, #0
 80073ac:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	4a18      	ldr	r2, [pc, #96]	; (8007414 <HAL_UART_Receive_DMA+0x94>)
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d01f      	beq.n	80073f8 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	685b      	ldr	r3, [r3, #4]
 80073be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d018      	beq.n	80073f8 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073cc:	697b      	ldr	r3, [r7, #20]
 80073ce:	e853 3f00 	ldrex	r3, [r3]
 80073d2:	613b      	str	r3, [r7, #16]
   return(result);
 80073d4:	693b      	ldr	r3, [r7, #16]
 80073d6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80073da:	627b      	str	r3, [r7, #36]	; 0x24
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	461a      	mov	r2, r3
 80073e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e4:	623b      	str	r3, [r7, #32]
 80073e6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073e8:	69f9      	ldr	r1, [r7, #28]
 80073ea:	6a3a      	ldr	r2, [r7, #32]
 80073ec:	e841 2300 	strex	r3, r2, [r1]
 80073f0:	61bb      	str	r3, [r7, #24]
   return(result);
 80073f2:	69bb      	ldr	r3, [r7, #24]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d1e6      	bne.n	80073c6 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80073f8:	88fb      	ldrh	r3, [r7, #6]
 80073fa:	461a      	mov	r2, r3
 80073fc:	68b9      	ldr	r1, [r7, #8]
 80073fe:	68f8      	ldr	r0, [r7, #12]
 8007400:	f001 f818 	bl	8008434 <UART_Start_Receive_DMA>
 8007404:	4603      	mov	r3, r0
 8007406:	e000      	b.n	800740a <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007408:	2302      	movs	r3, #2
  }
}
 800740a:	4618      	mov	r0, r3
 800740c:	3728      	adds	r7, #40	; 0x28
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}
 8007412:	bf00      	nop
 8007414:	40008000 	.word	0x40008000

08007418 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b0ba      	sub	sp, #232	; 0xe8
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	69db      	ldr	r3, [r3, #28]
 8007426:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	689b      	ldr	r3, [r3, #8]
 800743a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800743e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007442:	f640 030f 	movw	r3, #2063	; 0x80f
 8007446:	4013      	ands	r3, r2
 8007448:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800744c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007450:	2b00      	cmp	r3, #0
 8007452:	d11b      	bne.n	800748c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007454:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007458:	f003 0320 	and.w	r3, r3, #32
 800745c:	2b00      	cmp	r3, #0
 800745e:	d015      	beq.n	800748c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007460:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007464:	f003 0320 	and.w	r3, r3, #32
 8007468:	2b00      	cmp	r3, #0
 800746a:	d105      	bne.n	8007478 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800746c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007470:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007474:	2b00      	cmp	r3, #0
 8007476:	d009      	beq.n	800748c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800747c:	2b00      	cmp	r3, #0
 800747e:	f000 82e3 	beq.w	8007a48 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	4798      	blx	r3
      }
      return;
 800748a:	e2dd      	b.n	8007a48 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800748c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007490:	2b00      	cmp	r3, #0
 8007492:	f000 8123 	beq.w	80076dc <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007496:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800749a:	4b8d      	ldr	r3, [pc, #564]	; (80076d0 <HAL_UART_IRQHandler+0x2b8>)
 800749c:	4013      	ands	r3, r2
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d106      	bne.n	80074b0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80074a2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80074a6:	4b8b      	ldr	r3, [pc, #556]	; (80076d4 <HAL_UART_IRQHandler+0x2bc>)
 80074a8:	4013      	ands	r3, r2
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	f000 8116 	beq.w	80076dc <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80074b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074b4:	f003 0301 	and.w	r3, r3, #1
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d011      	beq.n	80074e0 <HAL_UART_IRQHandler+0xc8>
 80074bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d00b      	beq.n	80074e0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	2201      	movs	r2, #1
 80074ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074d6:	f043 0201 	orr.w	r2, r3, #1
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80074e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074e4:	f003 0302 	and.w	r3, r3, #2
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d011      	beq.n	8007510 <HAL_UART_IRQHandler+0xf8>
 80074ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80074f0:	f003 0301 	and.w	r3, r3, #1
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d00b      	beq.n	8007510 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	2202      	movs	r2, #2
 80074fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007506:	f043 0204 	orr.w	r2, r3, #4
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007510:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007514:	f003 0304 	and.w	r3, r3, #4
 8007518:	2b00      	cmp	r3, #0
 800751a:	d011      	beq.n	8007540 <HAL_UART_IRQHandler+0x128>
 800751c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007520:	f003 0301 	and.w	r3, r3, #1
 8007524:	2b00      	cmp	r3, #0
 8007526:	d00b      	beq.n	8007540 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	2204      	movs	r2, #4
 800752e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007536:	f043 0202 	orr.w	r2, r3, #2
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007540:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007544:	f003 0308 	and.w	r3, r3, #8
 8007548:	2b00      	cmp	r3, #0
 800754a:	d017      	beq.n	800757c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800754c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007550:	f003 0320 	and.w	r3, r3, #32
 8007554:	2b00      	cmp	r3, #0
 8007556:	d105      	bne.n	8007564 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007558:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800755c:	4b5c      	ldr	r3, [pc, #368]	; (80076d0 <HAL_UART_IRQHandler+0x2b8>)
 800755e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007560:	2b00      	cmp	r3, #0
 8007562:	d00b      	beq.n	800757c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	2208      	movs	r2, #8
 800756a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007572:	f043 0208 	orr.w	r2, r3, #8
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800757c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007580:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007584:	2b00      	cmp	r3, #0
 8007586:	d012      	beq.n	80075ae <HAL_UART_IRQHandler+0x196>
 8007588:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800758c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007590:	2b00      	cmp	r3, #0
 8007592:	d00c      	beq.n	80075ae <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800759c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075a4:	f043 0220 	orr.w	r2, r3, #32
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	f000 8249 	beq.w	8007a4c <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80075ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075be:	f003 0320 	and.w	r3, r3, #32
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d013      	beq.n	80075ee <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80075c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075ca:	f003 0320 	and.w	r3, r3, #32
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d105      	bne.n	80075de <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80075d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d007      	beq.n	80075ee <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d003      	beq.n	80075ee <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075f4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	689b      	ldr	r3, [r3, #8]
 80075fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007602:	2b40      	cmp	r3, #64	; 0x40
 8007604:	d005      	beq.n	8007612 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007606:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800760a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800760e:	2b00      	cmp	r3, #0
 8007610:	d054      	beq.n	80076bc <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f000 fff5 	bl	8008602 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	689b      	ldr	r3, [r3, #8]
 800761e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007622:	2b40      	cmp	r3, #64	; 0x40
 8007624:	d146      	bne.n	80076b4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	3308      	adds	r3, #8
 800762c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007630:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007634:	e853 3f00 	ldrex	r3, [r3]
 8007638:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800763c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007640:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007644:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	3308      	adds	r3, #8
 800764e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007652:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007656:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800765a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800765e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007662:	e841 2300 	strex	r3, r2, [r1]
 8007666:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800766a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800766e:	2b00      	cmp	r3, #0
 8007670:	d1d9      	bne.n	8007626 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007678:	2b00      	cmp	r3, #0
 800767a:	d017      	beq.n	80076ac <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007682:	4a15      	ldr	r2, [pc, #84]	; (80076d8 <HAL_UART_IRQHandler+0x2c0>)
 8007684:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800768c:	4618      	mov	r0, r3
 800768e:	f7fc fc65 	bl	8003f5c <HAL_DMA_Abort_IT>
 8007692:	4603      	mov	r3, r0
 8007694:	2b00      	cmp	r3, #0
 8007696:	d019      	beq.n	80076cc <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800769e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076a0:	687a      	ldr	r2, [r7, #4]
 80076a2:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80076a6:	4610      	mov	r0, r2
 80076a8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076aa:	e00f      	b.n	80076cc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80076ac:	6878      	ldr	r0, [r7, #4]
 80076ae:	f000 f9f5 	bl	8007a9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076b2:	e00b      	b.n	80076cc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80076b4:	6878      	ldr	r0, [r7, #4]
 80076b6:	f000 f9f1 	bl	8007a9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076ba:	e007      	b.n	80076cc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	f000 f9ed 	bl	8007a9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2200      	movs	r2, #0
 80076c6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80076ca:	e1bf      	b.n	8007a4c <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076cc:	bf00      	nop
    return;
 80076ce:	e1bd      	b.n	8007a4c <HAL_UART_IRQHandler+0x634>
 80076d0:	10000001 	.word	0x10000001
 80076d4:	04000120 	.word	0x04000120
 80076d8:	0800896f 	.word	0x0800896f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076e0:	2b01      	cmp	r3, #1
 80076e2:	f040 8153 	bne.w	800798c <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80076e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076ea:	f003 0310 	and.w	r3, r3, #16
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	f000 814c 	beq.w	800798c <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80076f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076f8:	f003 0310 	and.w	r3, r3, #16
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	f000 8145 	beq.w	800798c <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	2210      	movs	r2, #16
 8007708:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	689b      	ldr	r3, [r3, #8]
 8007710:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007714:	2b40      	cmp	r3, #64	; 0x40
 8007716:	f040 80bb 	bne.w	8007890 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	685b      	ldr	r3, [r3, #4]
 8007724:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007728:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800772c:	2b00      	cmp	r3, #0
 800772e:	f000 818f 	beq.w	8007a50 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007738:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800773c:	429a      	cmp	r2, r3
 800773e:	f080 8187 	bcs.w	8007a50 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007748:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f003 0320 	and.w	r3, r3, #32
 800775a:	2b00      	cmp	r3, #0
 800775c:	f040 8087 	bne.w	800786e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007768:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800776c:	e853 3f00 	ldrex	r3, [r3]
 8007770:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007774:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007778:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800777c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	461a      	mov	r2, r3
 8007786:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800778a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800778e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007792:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007796:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800779a:	e841 2300 	strex	r3, r2, [r1]
 800779e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80077a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d1da      	bne.n	8007760 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	3308      	adds	r3, #8
 80077b0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80077b4:	e853 3f00 	ldrex	r3, [r3]
 80077b8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80077ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80077bc:	f023 0301 	bic.w	r3, r3, #1
 80077c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	3308      	adds	r3, #8
 80077ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80077ce:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80077d2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077d4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80077d6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80077da:	e841 2300 	strex	r3, r2, [r1]
 80077de:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80077e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d1e1      	bne.n	80077aa <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	3308      	adds	r3, #8
 80077ec:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80077f0:	e853 3f00 	ldrex	r3, [r3]
 80077f4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80077f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80077f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	3308      	adds	r3, #8
 8007806:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800780a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800780c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800780e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007810:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007812:	e841 2300 	strex	r3, r2, [r1]
 8007816:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007818:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800781a:	2b00      	cmp	r3, #0
 800781c:	d1e3      	bne.n	80077e6 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2220      	movs	r2, #32
 8007822:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2200      	movs	r2, #0
 800782a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007832:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007834:	e853 3f00 	ldrex	r3, [r3]
 8007838:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800783a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800783c:	f023 0310 	bic.w	r3, r3, #16
 8007840:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	461a      	mov	r2, r3
 800784a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800784e:	65bb      	str	r3, [r7, #88]	; 0x58
 8007850:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007852:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007854:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007856:	e841 2300 	strex	r3, r2, [r1]
 800785a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800785c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800785e:	2b00      	cmp	r3, #0
 8007860:	d1e4      	bne.n	800782c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007868:	4618      	mov	r0, r3
 800786a:	f7fc fb1e 	bl	8003eaa <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	2202      	movs	r2, #2
 8007872:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007880:	b29b      	uxth	r3, r3
 8007882:	1ad3      	subs	r3, r2, r3
 8007884:	b29b      	uxth	r3, r3
 8007886:	4619      	mov	r1, r3
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f000 f911 	bl	8007ab0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800788e:	e0df      	b.n	8007a50 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800789c:	b29b      	uxth	r3, r3
 800789e:	1ad3      	subs	r3, r2, r3
 80078a0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80078aa:	b29b      	uxth	r3, r3
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	f000 80d1 	beq.w	8007a54 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80078b2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	f000 80cc 	beq.w	8007a54 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078c4:	e853 3f00 	ldrex	r3, [r3]
 80078c8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80078ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80078d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	461a      	mov	r2, r3
 80078da:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80078de:	647b      	str	r3, [r7, #68]	; 0x44
 80078e0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078e2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80078e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80078e6:	e841 2300 	strex	r3, r2, [r1]
 80078ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80078ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d1e4      	bne.n	80078bc <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	3308      	adds	r3, #8
 80078f8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078fc:	e853 3f00 	ldrex	r3, [r3]
 8007900:	623b      	str	r3, [r7, #32]
   return(result);
 8007902:	6a3b      	ldr	r3, [r7, #32]
 8007904:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007908:	f023 0301 	bic.w	r3, r3, #1
 800790c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	3308      	adds	r3, #8
 8007916:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800791a:	633a      	str	r2, [r7, #48]	; 0x30
 800791c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800791e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007920:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007922:	e841 2300 	strex	r3, r2, [r1]
 8007926:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800792a:	2b00      	cmp	r3, #0
 800792c:	d1e1      	bne.n	80078f2 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2220      	movs	r2, #32
 8007932:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2200      	movs	r2, #0
 800793a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2200      	movs	r2, #0
 8007940:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007948:	693b      	ldr	r3, [r7, #16]
 800794a:	e853 3f00 	ldrex	r3, [r3]
 800794e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	f023 0310 	bic.w	r3, r3, #16
 8007956:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	461a      	mov	r2, r3
 8007960:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007964:	61fb      	str	r3, [r7, #28]
 8007966:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007968:	69b9      	ldr	r1, [r7, #24]
 800796a:	69fa      	ldr	r2, [r7, #28]
 800796c:	e841 2300 	strex	r3, r2, [r1]
 8007970:	617b      	str	r3, [r7, #20]
   return(result);
 8007972:	697b      	ldr	r3, [r7, #20]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d1e4      	bne.n	8007942 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2202      	movs	r2, #2
 800797c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800797e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007982:	4619      	mov	r1, r3
 8007984:	6878      	ldr	r0, [r7, #4]
 8007986:	f000 f893 	bl	8007ab0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800798a:	e063      	b.n	8007a54 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800798c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007990:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007994:	2b00      	cmp	r3, #0
 8007996:	d00e      	beq.n	80079b6 <HAL_UART_IRQHandler+0x59e>
 8007998:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800799c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d008      	beq.n	80079b6 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80079ac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f001 f81e 	bl	80089f0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80079b4:	e051      	b.n	8007a5a <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80079b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d014      	beq.n	80079ec <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80079c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d105      	bne.n	80079da <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80079ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80079d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d008      	beq.n	80079ec <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d03a      	beq.n	8007a58 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	4798      	blx	r3
    }
    return;
 80079ea:	e035      	b.n	8007a58 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80079ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d009      	beq.n	8007a0c <HAL_UART_IRQHandler+0x5f4>
 80079f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d003      	beq.n	8007a0c <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8007a04:	6878      	ldr	r0, [r7, #4]
 8007a06:	f000 ffc8 	bl	800899a <UART_EndTransmit_IT>
    return;
 8007a0a:	e026      	b.n	8007a5a <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007a0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a10:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d009      	beq.n	8007a2c <HAL_UART_IRQHandler+0x614>
 8007a18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a1c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d003      	beq.n	8007a2c <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f000 fff7 	bl	8008a18 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007a2a:	e016      	b.n	8007a5a <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007a2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a30:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d010      	beq.n	8007a5a <HAL_UART_IRQHandler+0x642>
 8007a38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	da0c      	bge.n	8007a5a <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	f000 ffdf 	bl	8008a04 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007a46:	e008      	b.n	8007a5a <HAL_UART_IRQHandler+0x642>
      return;
 8007a48:	bf00      	nop
 8007a4a:	e006      	b.n	8007a5a <HAL_UART_IRQHandler+0x642>
    return;
 8007a4c:	bf00      	nop
 8007a4e:	e004      	b.n	8007a5a <HAL_UART_IRQHandler+0x642>
      return;
 8007a50:	bf00      	nop
 8007a52:	e002      	b.n	8007a5a <HAL_UART_IRQHandler+0x642>
      return;
 8007a54:	bf00      	nop
 8007a56:	e000      	b.n	8007a5a <HAL_UART_IRQHandler+0x642>
    return;
 8007a58:	bf00      	nop
  }
}
 8007a5a:	37e8      	adds	r7, #232	; 0xe8
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bd80      	pop	{r7, pc}

08007a60 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007a60:	b480      	push	{r7}
 8007a62:	b083      	sub	sp, #12
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007a68:	bf00      	nop
 8007a6a:	370c      	adds	r7, #12
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a72:	4770      	bx	lr

08007a74 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007a74:	b480      	push	{r7}
 8007a76:	b083      	sub	sp, #12
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8007a7c:	bf00      	nop
 8007a7e:	370c      	adds	r7, #12
 8007a80:	46bd      	mov	sp, r7
 8007a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a86:	4770      	bx	lr

08007a88 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007a88:	b480      	push	{r7}
 8007a8a:	b083      	sub	sp, #12
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8007a90:	bf00      	nop
 8007a92:	370c      	adds	r7, #12
 8007a94:	46bd      	mov	sp, r7
 8007a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9a:	4770      	bx	lr

08007a9c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007a9c:	b480      	push	{r7}
 8007a9e:	b083      	sub	sp, #12
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007aa4:	bf00      	nop
 8007aa6:	370c      	adds	r7, #12
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aae:	4770      	bx	lr

08007ab0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007ab0:	b480      	push	{r7}
 8007ab2:	b083      	sub	sp, #12
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
 8007ab8:	460b      	mov	r3, r1
 8007aba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007abc:	bf00      	nop
 8007abe:	370c      	adds	r7, #12
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac6:	4770      	bx	lr

08007ac8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007ac8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007acc:	b08c      	sub	sp, #48	; 0x30
 8007ace:	af00      	add	r7, sp, #0
 8007ad0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007ad8:	697b      	ldr	r3, [r7, #20]
 8007ada:	689a      	ldr	r2, [r3, #8]
 8007adc:	697b      	ldr	r3, [r7, #20]
 8007ade:	691b      	ldr	r3, [r3, #16]
 8007ae0:	431a      	orrs	r2, r3
 8007ae2:	697b      	ldr	r3, [r7, #20]
 8007ae4:	695b      	ldr	r3, [r3, #20]
 8007ae6:	431a      	orrs	r2, r3
 8007ae8:	697b      	ldr	r3, [r7, #20]
 8007aea:	69db      	ldr	r3, [r3, #28]
 8007aec:	4313      	orrs	r3, r2
 8007aee:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007af0:	697b      	ldr	r3, [r7, #20]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	681a      	ldr	r2, [r3, #0]
 8007af6:	4baa      	ldr	r3, [pc, #680]	; (8007da0 <UART_SetConfig+0x2d8>)
 8007af8:	4013      	ands	r3, r2
 8007afa:	697a      	ldr	r2, [r7, #20]
 8007afc:	6812      	ldr	r2, [r2, #0]
 8007afe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007b00:	430b      	orrs	r3, r1
 8007b02:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b04:	697b      	ldr	r3, [r7, #20]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	685b      	ldr	r3, [r3, #4]
 8007b0a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007b0e:	697b      	ldr	r3, [r7, #20]
 8007b10:	68da      	ldr	r2, [r3, #12]
 8007b12:	697b      	ldr	r3, [r7, #20]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	430a      	orrs	r2, r1
 8007b18:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007b1a:	697b      	ldr	r3, [r7, #20]
 8007b1c:	699b      	ldr	r3, [r3, #24]
 8007b1e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007b20:	697b      	ldr	r3, [r7, #20]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	4a9f      	ldr	r2, [pc, #636]	; (8007da4 <UART_SetConfig+0x2dc>)
 8007b26:	4293      	cmp	r3, r2
 8007b28:	d004      	beq.n	8007b34 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007b2a:	697b      	ldr	r3, [r7, #20]
 8007b2c:	6a1b      	ldr	r3, [r3, #32]
 8007b2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b30:	4313      	orrs	r3, r2
 8007b32:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007b34:	697b      	ldr	r3, [r7, #20]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	689b      	ldr	r3, [r3, #8]
 8007b3a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007b3e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007b42:	697a      	ldr	r2, [r7, #20]
 8007b44:	6812      	ldr	r2, [r2, #0]
 8007b46:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007b48:	430b      	orrs	r3, r1
 8007b4a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007b4c:	697b      	ldr	r3, [r7, #20]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b52:	f023 010f 	bic.w	r1, r3, #15
 8007b56:	697b      	ldr	r3, [r7, #20]
 8007b58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007b5a:	697b      	ldr	r3, [r7, #20]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	430a      	orrs	r2, r1
 8007b60:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007b62:	697b      	ldr	r3, [r7, #20]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	4a90      	ldr	r2, [pc, #576]	; (8007da8 <UART_SetConfig+0x2e0>)
 8007b68:	4293      	cmp	r3, r2
 8007b6a:	d125      	bne.n	8007bb8 <UART_SetConfig+0xf0>
 8007b6c:	4b8f      	ldr	r3, [pc, #572]	; (8007dac <UART_SetConfig+0x2e4>)
 8007b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b72:	f003 0303 	and.w	r3, r3, #3
 8007b76:	2b03      	cmp	r3, #3
 8007b78:	d81a      	bhi.n	8007bb0 <UART_SetConfig+0xe8>
 8007b7a:	a201      	add	r2, pc, #4	; (adr r2, 8007b80 <UART_SetConfig+0xb8>)
 8007b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b80:	08007b91 	.word	0x08007b91
 8007b84:	08007ba1 	.word	0x08007ba1
 8007b88:	08007b99 	.word	0x08007b99
 8007b8c:	08007ba9 	.word	0x08007ba9
 8007b90:	2301      	movs	r3, #1
 8007b92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b96:	e116      	b.n	8007dc6 <UART_SetConfig+0x2fe>
 8007b98:	2302      	movs	r3, #2
 8007b9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b9e:	e112      	b.n	8007dc6 <UART_SetConfig+0x2fe>
 8007ba0:	2304      	movs	r3, #4
 8007ba2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007ba6:	e10e      	b.n	8007dc6 <UART_SetConfig+0x2fe>
 8007ba8:	2308      	movs	r3, #8
 8007baa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007bae:	e10a      	b.n	8007dc6 <UART_SetConfig+0x2fe>
 8007bb0:	2310      	movs	r3, #16
 8007bb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007bb6:	e106      	b.n	8007dc6 <UART_SetConfig+0x2fe>
 8007bb8:	697b      	ldr	r3, [r7, #20]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	4a7c      	ldr	r2, [pc, #496]	; (8007db0 <UART_SetConfig+0x2e8>)
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	d138      	bne.n	8007c34 <UART_SetConfig+0x16c>
 8007bc2:	4b7a      	ldr	r3, [pc, #488]	; (8007dac <UART_SetConfig+0x2e4>)
 8007bc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bc8:	f003 030c 	and.w	r3, r3, #12
 8007bcc:	2b0c      	cmp	r3, #12
 8007bce:	d82d      	bhi.n	8007c2c <UART_SetConfig+0x164>
 8007bd0:	a201      	add	r2, pc, #4	; (adr r2, 8007bd8 <UART_SetConfig+0x110>)
 8007bd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bd6:	bf00      	nop
 8007bd8:	08007c0d 	.word	0x08007c0d
 8007bdc:	08007c2d 	.word	0x08007c2d
 8007be0:	08007c2d 	.word	0x08007c2d
 8007be4:	08007c2d 	.word	0x08007c2d
 8007be8:	08007c1d 	.word	0x08007c1d
 8007bec:	08007c2d 	.word	0x08007c2d
 8007bf0:	08007c2d 	.word	0x08007c2d
 8007bf4:	08007c2d 	.word	0x08007c2d
 8007bf8:	08007c15 	.word	0x08007c15
 8007bfc:	08007c2d 	.word	0x08007c2d
 8007c00:	08007c2d 	.word	0x08007c2d
 8007c04:	08007c2d 	.word	0x08007c2d
 8007c08:	08007c25 	.word	0x08007c25
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c12:	e0d8      	b.n	8007dc6 <UART_SetConfig+0x2fe>
 8007c14:	2302      	movs	r3, #2
 8007c16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c1a:	e0d4      	b.n	8007dc6 <UART_SetConfig+0x2fe>
 8007c1c:	2304      	movs	r3, #4
 8007c1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c22:	e0d0      	b.n	8007dc6 <UART_SetConfig+0x2fe>
 8007c24:	2308      	movs	r3, #8
 8007c26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c2a:	e0cc      	b.n	8007dc6 <UART_SetConfig+0x2fe>
 8007c2c:	2310      	movs	r3, #16
 8007c2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c32:	e0c8      	b.n	8007dc6 <UART_SetConfig+0x2fe>
 8007c34:	697b      	ldr	r3, [r7, #20]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	4a5e      	ldr	r2, [pc, #376]	; (8007db4 <UART_SetConfig+0x2ec>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d125      	bne.n	8007c8a <UART_SetConfig+0x1c2>
 8007c3e:	4b5b      	ldr	r3, [pc, #364]	; (8007dac <UART_SetConfig+0x2e4>)
 8007c40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c44:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007c48:	2b30      	cmp	r3, #48	; 0x30
 8007c4a:	d016      	beq.n	8007c7a <UART_SetConfig+0x1b2>
 8007c4c:	2b30      	cmp	r3, #48	; 0x30
 8007c4e:	d818      	bhi.n	8007c82 <UART_SetConfig+0x1ba>
 8007c50:	2b20      	cmp	r3, #32
 8007c52:	d00a      	beq.n	8007c6a <UART_SetConfig+0x1a2>
 8007c54:	2b20      	cmp	r3, #32
 8007c56:	d814      	bhi.n	8007c82 <UART_SetConfig+0x1ba>
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d002      	beq.n	8007c62 <UART_SetConfig+0x19a>
 8007c5c:	2b10      	cmp	r3, #16
 8007c5e:	d008      	beq.n	8007c72 <UART_SetConfig+0x1aa>
 8007c60:	e00f      	b.n	8007c82 <UART_SetConfig+0x1ba>
 8007c62:	2300      	movs	r3, #0
 8007c64:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c68:	e0ad      	b.n	8007dc6 <UART_SetConfig+0x2fe>
 8007c6a:	2302      	movs	r3, #2
 8007c6c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c70:	e0a9      	b.n	8007dc6 <UART_SetConfig+0x2fe>
 8007c72:	2304      	movs	r3, #4
 8007c74:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c78:	e0a5      	b.n	8007dc6 <UART_SetConfig+0x2fe>
 8007c7a:	2308      	movs	r3, #8
 8007c7c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c80:	e0a1      	b.n	8007dc6 <UART_SetConfig+0x2fe>
 8007c82:	2310      	movs	r3, #16
 8007c84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c88:	e09d      	b.n	8007dc6 <UART_SetConfig+0x2fe>
 8007c8a:	697b      	ldr	r3, [r7, #20]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	4a4a      	ldr	r2, [pc, #296]	; (8007db8 <UART_SetConfig+0x2f0>)
 8007c90:	4293      	cmp	r3, r2
 8007c92:	d125      	bne.n	8007ce0 <UART_SetConfig+0x218>
 8007c94:	4b45      	ldr	r3, [pc, #276]	; (8007dac <UART_SetConfig+0x2e4>)
 8007c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c9a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007c9e:	2bc0      	cmp	r3, #192	; 0xc0
 8007ca0:	d016      	beq.n	8007cd0 <UART_SetConfig+0x208>
 8007ca2:	2bc0      	cmp	r3, #192	; 0xc0
 8007ca4:	d818      	bhi.n	8007cd8 <UART_SetConfig+0x210>
 8007ca6:	2b80      	cmp	r3, #128	; 0x80
 8007ca8:	d00a      	beq.n	8007cc0 <UART_SetConfig+0x1f8>
 8007caa:	2b80      	cmp	r3, #128	; 0x80
 8007cac:	d814      	bhi.n	8007cd8 <UART_SetConfig+0x210>
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d002      	beq.n	8007cb8 <UART_SetConfig+0x1f0>
 8007cb2:	2b40      	cmp	r3, #64	; 0x40
 8007cb4:	d008      	beq.n	8007cc8 <UART_SetConfig+0x200>
 8007cb6:	e00f      	b.n	8007cd8 <UART_SetConfig+0x210>
 8007cb8:	2300      	movs	r3, #0
 8007cba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007cbe:	e082      	b.n	8007dc6 <UART_SetConfig+0x2fe>
 8007cc0:	2302      	movs	r3, #2
 8007cc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007cc6:	e07e      	b.n	8007dc6 <UART_SetConfig+0x2fe>
 8007cc8:	2304      	movs	r3, #4
 8007cca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007cce:	e07a      	b.n	8007dc6 <UART_SetConfig+0x2fe>
 8007cd0:	2308      	movs	r3, #8
 8007cd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007cd6:	e076      	b.n	8007dc6 <UART_SetConfig+0x2fe>
 8007cd8:	2310      	movs	r3, #16
 8007cda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007cde:	e072      	b.n	8007dc6 <UART_SetConfig+0x2fe>
 8007ce0:	697b      	ldr	r3, [r7, #20]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	4a35      	ldr	r2, [pc, #212]	; (8007dbc <UART_SetConfig+0x2f4>)
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d12a      	bne.n	8007d40 <UART_SetConfig+0x278>
 8007cea:	4b30      	ldr	r3, [pc, #192]	; (8007dac <UART_SetConfig+0x2e4>)
 8007cec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cf0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007cf4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007cf8:	d01a      	beq.n	8007d30 <UART_SetConfig+0x268>
 8007cfa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007cfe:	d81b      	bhi.n	8007d38 <UART_SetConfig+0x270>
 8007d00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d04:	d00c      	beq.n	8007d20 <UART_SetConfig+0x258>
 8007d06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d0a:	d815      	bhi.n	8007d38 <UART_SetConfig+0x270>
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d003      	beq.n	8007d18 <UART_SetConfig+0x250>
 8007d10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d14:	d008      	beq.n	8007d28 <UART_SetConfig+0x260>
 8007d16:	e00f      	b.n	8007d38 <UART_SetConfig+0x270>
 8007d18:	2300      	movs	r3, #0
 8007d1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d1e:	e052      	b.n	8007dc6 <UART_SetConfig+0x2fe>
 8007d20:	2302      	movs	r3, #2
 8007d22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d26:	e04e      	b.n	8007dc6 <UART_SetConfig+0x2fe>
 8007d28:	2304      	movs	r3, #4
 8007d2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d2e:	e04a      	b.n	8007dc6 <UART_SetConfig+0x2fe>
 8007d30:	2308      	movs	r3, #8
 8007d32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d36:	e046      	b.n	8007dc6 <UART_SetConfig+0x2fe>
 8007d38:	2310      	movs	r3, #16
 8007d3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d3e:	e042      	b.n	8007dc6 <UART_SetConfig+0x2fe>
 8007d40:	697b      	ldr	r3, [r7, #20]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	4a17      	ldr	r2, [pc, #92]	; (8007da4 <UART_SetConfig+0x2dc>)
 8007d46:	4293      	cmp	r3, r2
 8007d48:	d13a      	bne.n	8007dc0 <UART_SetConfig+0x2f8>
 8007d4a:	4b18      	ldr	r3, [pc, #96]	; (8007dac <UART_SetConfig+0x2e4>)
 8007d4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d50:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007d54:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007d58:	d01a      	beq.n	8007d90 <UART_SetConfig+0x2c8>
 8007d5a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007d5e:	d81b      	bhi.n	8007d98 <UART_SetConfig+0x2d0>
 8007d60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d64:	d00c      	beq.n	8007d80 <UART_SetConfig+0x2b8>
 8007d66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d6a:	d815      	bhi.n	8007d98 <UART_SetConfig+0x2d0>
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d003      	beq.n	8007d78 <UART_SetConfig+0x2b0>
 8007d70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d74:	d008      	beq.n	8007d88 <UART_SetConfig+0x2c0>
 8007d76:	e00f      	b.n	8007d98 <UART_SetConfig+0x2d0>
 8007d78:	2300      	movs	r3, #0
 8007d7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d7e:	e022      	b.n	8007dc6 <UART_SetConfig+0x2fe>
 8007d80:	2302      	movs	r3, #2
 8007d82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d86:	e01e      	b.n	8007dc6 <UART_SetConfig+0x2fe>
 8007d88:	2304      	movs	r3, #4
 8007d8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d8e:	e01a      	b.n	8007dc6 <UART_SetConfig+0x2fe>
 8007d90:	2308      	movs	r3, #8
 8007d92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d96:	e016      	b.n	8007dc6 <UART_SetConfig+0x2fe>
 8007d98:	2310      	movs	r3, #16
 8007d9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d9e:	e012      	b.n	8007dc6 <UART_SetConfig+0x2fe>
 8007da0:	cfff69f3 	.word	0xcfff69f3
 8007da4:	40008000 	.word	0x40008000
 8007da8:	40013800 	.word	0x40013800
 8007dac:	40021000 	.word	0x40021000
 8007db0:	40004400 	.word	0x40004400
 8007db4:	40004800 	.word	0x40004800
 8007db8:	40004c00 	.word	0x40004c00
 8007dbc:	40005000 	.word	0x40005000
 8007dc0:	2310      	movs	r3, #16
 8007dc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007dc6:	697b      	ldr	r3, [r7, #20]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	4aae      	ldr	r2, [pc, #696]	; (8008084 <UART_SetConfig+0x5bc>)
 8007dcc:	4293      	cmp	r3, r2
 8007dce:	f040 8097 	bne.w	8007f00 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007dd2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007dd6:	2b08      	cmp	r3, #8
 8007dd8:	d823      	bhi.n	8007e22 <UART_SetConfig+0x35a>
 8007dda:	a201      	add	r2, pc, #4	; (adr r2, 8007de0 <UART_SetConfig+0x318>)
 8007ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007de0:	08007e05 	.word	0x08007e05
 8007de4:	08007e23 	.word	0x08007e23
 8007de8:	08007e0d 	.word	0x08007e0d
 8007dec:	08007e23 	.word	0x08007e23
 8007df0:	08007e13 	.word	0x08007e13
 8007df4:	08007e23 	.word	0x08007e23
 8007df8:	08007e23 	.word	0x08007e23
 8007dfc:	08007e23 	.word	0x08007e23
 8007e00:	08007e1b 	.word	0x08007e1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e04:	f7fd f99c 	bl	8005140 <HAL_RCC_GetPCLK1Freq>
 8007e08:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007e0a:	e010      	b.n	8007e2e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007e0c:	4b9e      	ldr	r3, [pc, #632]	; (8008088 <UART_SetConfig+0x5c0>)
 8007e0e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007e10:	e00d      	b.n	8007e2e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007e12:	f7fd f927 	bl	8005064 <HAL_RCC_GetSysClockFreq>
 8007e16:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007e18:	e009      	b.n	8007e2e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e1e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007e20:	e005      	b.n	8007e2e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8007e22:	2300      	movs	r3, #0
 8007e24:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007e26:	2301      	movs	r3, #1
 8007e28:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007e2c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	f000 8130 	beq.w	8008096 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007e36:	697b      	ldr	r3, [r7, #20]
 8007e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e3a:	4a94      	ldr	r2, [pc, #592]	; (800808c <UART_SetConfig+0x5c4>)
 8007e3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e40:	461a      	mov	r2, r3
 8007e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e44:	fbb3 f3f2 	udiv	r3, r3, r2
 8007e48:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007e4a:	697b      	ldr	r3, [r7, #20]
 8007e4c:	685a      	ldr	r2, [r3, #4]
 8007e4e:	4613      	mov	r3, r2
 8007e50:	005b      	lsls	r3, r3, #1
 8007e52:	4413      	add	r3, r2
 8007e54:	69ba      	ldr	r2, [r7, #24]
 8007e56:	429a      	cmp	r2, r3
 8007e58:	d305      	bcc.n	8007e66 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007e5a:	697b      	ldr	r3, [r7, #20]
 8007e5c:	685b      	ldr	r3, [r3, #4]
 8007e5e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007e60:	69ba      	ldr	r2, [r7, #24]
 8007e62:	429a      	cmp	r2, r3
 8007e64:	d903      	bls.n	8007e6e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8007e66:	2301      	movs	r3, #1
 8007e68:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007e6c:	e113      	b.n	8008096 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e70:	2200      	movs	r2, #0
 8007e72:	60bb      	str	r3, [r7, #8]
 8007e74:	60fa      	str	r2, [r7, #12]
 8007e76:	697b      	ldr	r3, [r7, #20]
 8007e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e7a:	4a84      	ldr	r2, [pc, #528]	; (800808c <UART_SetConfig+0x5c4>)
 8007e7c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e80:	b29b      	uxth	r3, r3
 8007e82:	2200      	movs	r2, #0
 8007e84:	603b      	str	r3, [r7, #0]
 8007e86:	607a      	str	r2, [r7, #4]
 8007e88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e8c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007e90:	f7f8 f9c2 	bl	8000218 <__aeabi_uldivmod>
 8007e94:	4602      	mov	r2, r0
 8007e96:	460b      	mov	r3, r1
 8007e98:	4610      	mov	r0, r2
 8007e9a:	4619      	mov	r1, r3
 8007e9c:	f04f 0200 	mov.w	r2, #0
 8007ea0:	f04f 0300 	mov.w	r3, #0
 8007ea4:	020b      	lsls	r3, r1, #8
 8007ea6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007eaa:	0202      	lsls	r2, r0, #8
 8007eac:	6979      	ldr	r1, [r7, #20]
 8007eae:	6849      	ldr	r1, [r1, #4]
 8007eb0:	0849      	lsrs	r1, r1, #1
 8007eb2:	2000      	movs	r0, #0
 8007eb4:	460c      	mov	r4, r1
 8007eb6:	4605      	mov	r5, r0
 8007eb8:	eb12 0804 	adds.w	r8, r2, r4
 8007ebc:	eb43 0905 	adc.w	r9, r3, r5
 8007ec0:	697b      	ldr	r3, [r7, #20]
 8007ec2:	685b      	ldr	r3, [r3, #4]
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	469a      	mov	sl, r3
 8007ec8:	4693      	mov	fp, r2
 8007eca:	4652      	mov	r2, sl
 8007ecc:	465b      	mov	r3, fp
 8007ece:	4640      	mov	r0, r8
 8007ed0:	4649      	mov	r1, r9
 8007ed2:	f7f8 f9a1 	bl	8000218 <__aeabi_uldivmod>
 8007ed6:	4602      	mov	r2, r0
 8007ed8:	460b      	mov	r3, r1
 8007eda:	4613      	mov	r3, r2
 8007edc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007ede:	6a3b      	ldr	r3, [r7, #32]
 8007ee0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ee4:	d308      	bcc.n	8007ef8 <UART_SetConfig+0x430>
 8007ee6:	6a3b      	ldr	r3, [r7, #32]
 8007ee8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007eec:	d204      	bcs.n	8007ef8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8007eee:	697b      	ldr	r3, [r7, #20]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	6a3a      	ldr	r2, [r7, #32]
 8007ef4:	60da      	str	r2, [r3, #12]
 8007ef6:	e0ce      	b.n	8008096 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007ef8:	2301      	movs	r3, #1
 8007efa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007efe:	e0ca      	b.n	8008096 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007f00:	697b      	ldr	r3, [r7, #20]
 8007f02:	69db      	ldr	r3, [r3, #28]
 8007f04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f08:	d166      	bne.n	8007fd8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8007f0a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007f0e:	2b08      	cmp	r3, #8
 8007f10:	d827      	bhi.n	8007f62 <UART_SetConfig+0x49a>
 8007f12:	a201      	add	r2, pc, #4	; (adr r2, 8007f18 <UART_SetConfig+0x450>)
 8007f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f18:	08007f3d 	.word	0x08007f3d
 8007f1c:	08007f45 	.word	0x08007f45
 8007f20:	08007f4d 	.word	0x08007f4d
 8007f24:	08007f63 	.word	0x08007f63
 8007f28:	08007f53 	.word	0x08007f53
 8007f2c:	08007f63 	.word	0x08007f63
 8007f30:	08007f63 	.word	0x08007f63
 8007f34:	08007f63 	.word	0x08007f63
 8007f38:	08007f5b 	.word	0x08007f5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007f3c:	f7fd f900 	bl	8005140 <HAL_RCC_GetPCLK1Freq>
 8007f40:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007f42:	e014      	b.n	8007f6e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007f44:	f7fd f912 	bl	800516c <HAL_RCC_GetPCLK2Freq>
 8007f48:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007f4a:	e010      	b.n	8007f6e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007f4c:	4b4e      	ldr	r3, [pc, #312]	; (8008088 <UART_SetConfig+0x5c0>)
 8007f4e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007f50:	e00d      	b.n	8007f6e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007f52:	f7fd f887 	bl	8005064 <HAL_RCC_GetSysClockFreq>
 8007f56:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007f58:	e009      	b.n	8007f6e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f5e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007f60:	e005      	b.n	8007f6e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8007f62:	2300      	movs	r3, #0
 8007f64:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007f66:	2301      	movs	r3, #1
 8007f68:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007f6c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	f000 8090 	beq.w	8008096 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007f76:	697b      	ldr	r3, [r7, #20]
 8007f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f7a:	4a44      	ldr	r2, [pc, #272]	; (800808c <UART_SetConfig+0x5c4>)
 8007f7c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f80:	461a      	mov	r2, r3
 8007f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f84:	fbb3 f3f2 	udiv	r3, r3, r2
 8007f88:	005a      	lsls	r2, r3, #1
 8007f8a:	697b      	ldr	r3, [r7, #20]
 8007f8c:	685b      	ldr	r3, [r3, #4]
 8007f8e:	085b      	lsrs	r3, r3, #1
 8007f90:	441a      	add	r2, r3
 8007f92:	697b      	ldr	r3, [r7, #20]
 8007f94:	685b      	ldr	r3, [r3, #4]
 8007f96:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f9a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007f9c:	6a3b      	ldr	r3, [r7, #32]
 8007f9e:	2b0f      	cmp	r3, #15
 8007fa0:	d916      	bls.n	8007fd0 <UART_SetConfig+0x508>
 8007fa2:	6a3b      	ldr	r3, [r7, #32]
 8007fa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007fa8:	d212      	bcs.n	8007fd0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007faa:	6a3b      	ldr	r3, [r7, #32]
 8007fac:	b29b      	uxth	r3, r3
 8007fae:	f023 030f 	bic.w	r3, r3, #15
 8007fb2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007fb4:	6a3b      	ldr	r3, [r7, #32]
 8007fb6:	085b      	lsrs	r3, r3, #1
 8007fb8:	b29b      	uxth	r3, r3
 8007fba:	f003 0307 	and.w	r3, r3, #7
 8007fbe:	b29a      	uxth	r2, r3
 8007fc0:	8bfb      	ldrh	r3, [r7, #30]
 8007fc2:	4313      	orrs	r3, r2
 8007fc4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007fc6:	697b      	ldr	r3, [r7, #20]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	8bfa      	ldrh	r2, [r7, #30]
 8007fcc:	60da      	str	r2, [r3, #12]
 8007fce:	e062      	b.n	8008096 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007fd0:	2301      	movs	r3, #1
 8007fd2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007fd6:	e05e      	b.n	8008096 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007fd8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007fdc:	2b08      	cmp	r3, #8
 8007fde:	d828      	bhi.n	8008032 <UART_SetConfig+0x56a>
 8007fe0:	a201      	add	r2, pc, #4	; (adr r2, 8007fe8 <UART_SetConfig+0x520>)
 8007fe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fe6:	bf00      	nop
 8007fe8:	0800800d 	.word	0x0800800d
 8007fec:	08008015 	.word	0x08008015
 8007ff0:	0800801d 	.word	0x0800801d
 8007ff4:	08008033 	.word	0x08008033
 8007ff8:	08008023 	.word	0x08008023
 8007ffc:	08008033 	.word	0x08008033
 8008000:	08008033 	.word	0x08008033
 8008004:	08008033 	.word	0x08008033
 8008008:	0800802b 	.word	0x0800802b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800800c:	f7fd f898 	bl	8005140 <HAL_RCC_GetPCLK1Freq>
 8008010:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008012:	e014      	b.n	800803e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008014:	f7fd f8aa 	bl	800516c <HAL_RCC_GetPCLK2Freq>
 8008018:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800801a:	e010      	b.n	800803e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800801c:	4b1a      	ldr	r3, [pc, #104]	; (8008088 <UART_SetConfig+0x5c0>)
 800801e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008020:	e00d      	b.n	800803e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008022:	f7fd f81f 	bl	8005064 <HAL_RCC_GetSysClockFreq>
 8008026:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008028:	e009      	b.n	800803e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800802a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800802e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008030:	e005      	b.n	800803e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8008032:	2300      	movs	r3, #0
 8008034:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008036:	2301      	movs	r3, #1
 8008038:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800803c:	bf00      	nop
    }

    if (pclk != 0U)
 800803e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008040:	2b00      	cmp	r3, #0
 8008042:	d028      	beq.n	8008096 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008044:	697b      	ldr	r3, [r7, #20]
 8008046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008048:	4a10      	ldr	r2, [pc, #64]	; (800808c <UART_SetConfig+0x5c4>)
 800804a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800804e:	461a      	mov	r2, r3
 8008050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008052:	fbb3 f2f2 	udiv	r2, r3, r2
 8008056:	697b      	ldr	r3, [r7, #20]
 8008058:	685b      	ldr	r3, [r3, #4]
 800805a:	085b      	lsrs	r3, r3, #1
 800805c:	441a      	add	r2, r3
 800805e:	697b      	ldr	r3, [r7, #20]
 8008060:	685b      	ldr	r3, [r3, #4]
 8008062:	fbb2 f3f3 	udiv	r3, r2, r3
 8008066:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008068:	6a3b      	ldr	r3, [r7, #32]
 800806a:	2b0f      	cmp	r3, #15
 800806c:	d910      	bls.n	8008090 <UART_SetConfig+0x5c8>
 800806e:	6a3b      	ldr	r3, [r7, #32]
 8008070:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008074:	d20c      	bcs.n	8008090 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008076:	6a3b      	ldr	r3, [r7, #32]
 8008078:	b29a      	uxth	r2, r3
 800807a:	697b      	ldr	r3, [r7, #20]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	60da      	str	r2, [r3, #12]
 8008080:	e009      	b.n	8008096 <UART_SetConfig+0x5ce>
 8008082:	bf00      	nop
 8008084:	40008000 	.word	0x40008000
 8008088:	00f42400 	.word	0x00f42400
 800808c:	08008cbc 	.word	0x08008cbc
      }
      else
      {
        ret = HAL_ERROR;
 8008090:	2301      	movs	r3, #1
 8008092:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008096:	697b      	ldr	r3, [r7, #20]
 8008098:	2201      	movs	r2, #1
 800809a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800809e:	697b      	ldr	r3, [r7, #20]
 80080a0:	2201      	movs	r2, #1
 80080a2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80080a6:	697b      	ldr	r3, [r7, #20]
 80080a8:	2200      	movs	r2, #0
 80080aa:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80080ac:	697b      	ldr	r3, [r7, #20]
 80080ae:	2200      	movs	r2, #0
 80080b0:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80080b2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80080b6:	4618      	mov	r0, r3
 80080b8:	3730      	adds	r7, #48	; 0x30
 80080ba:	46bd      	mov	sp, r7
 80080bc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080080c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80080c0:	b480      	push	{r7}
 80080c2:	b083      	sub	sp, #12
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080cc:	f003 0308 	and.w	r3, r3, #8
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d00a      	beq.n	80080ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	685b      	ldr	r3, [r3, #4]
 80080da:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	430a      	orrs	r2, r1
 80080e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080ee:	f003 0301 	and.w	r3, r3, #1
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d00a      	beq.n	800810c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	685b      	ldr	r3, [r3, #4]
 80080fc:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	430a      	orrs	r2, r1
 800810a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008110:	f003 0302 	and.w	r3, r3, #2
 8008114:	2b00      	cmp	r3, #0
 8008116:	d00a      	beq.n	800812e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	685b      	ldr	r3, [r3, #4]
 800811e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	430a      	orrs	r2, r1
 800812c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008132:	f003 0304 	and.w	r3, r3, #4
 8008136:	2b00      	cmp	r3, #0
 8008138:	d00a      	beq.n	8008150 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	685b      	ldr	r3, [r3, #4]
 8008140:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	430a      	orrs	r2, r1
 800814e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008154:	f003 0310 	and.w	r3, r3, #16
 8008158:	2b00      	cmp	r3, #0
 800815a:	d00a      	beq.n	8008172 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	689b      	ldr	r3, [r3, #8]
 8008162:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	430a      	orrs	r2, r1
 8008170:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008176:	f003 0320 	and.w	r3, r3, #32
 800817a:	2b00      	cmp	r3, #0
 800817c:	d00a      	beq.n	8008194 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	689b      	ldr	r3, [r3, #8]
 8008184:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	430a      	orrs	r2, r1
 8008192:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008198:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800819c:	2b00      	cmp	r3, #0
 800819e:	d01a      	beq.n	80081d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	685b      	ldr	r3, [r3, #4]
 80081a6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	430a      	orrs	r2, r1
 80081b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80081be:	d10a      	bne.n	80081d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	685b      	ldr	r3, [r3, #4]
 80081c6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	430a      	orrs	r2, r1
 80081d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d00a      	beq.n	80081f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	685b      	ldr	r3, [r3, #4]
 80081e8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	430a      	orrs	r2, r1
 80081f6:	605a      	str	r2, [r3, #4]
  }
}
 80081f8:	bf00      	nop
 80081fa:	370c      	adds	r7, #12
 80081fc:	46bd      	mov	sp, r7
 80081fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008202:	4770      	bx	lr

08008204 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b098      	sub	sp, #96	; 0x60
 8008208:	af02      	add	r7, sp, #8
 800820a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2200      	movs	r2, #0
 8008210:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008214:	f7f9 fde8 	bl	8001de8 <HAL_GetTick>
 8008218:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f003 0308 	and.w	r3, r3, #8
 8008224:	2b08      	cmp	r3, #8
 8008226:	d12f      	bne.n	8008288 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008228:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800822c:	9300      	str	r3, [sp, #0]
 800822e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008230:	2200      	movs	r2, #0
 8008232:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	f000 f88e 	bl	8008358 <UART_WaitOnFlagUntilTimeout>
 800823c:	4603      	mov	r3, r0
 800823e:	2b00      	cmp	r3, #0
 8008240:	d022      	beq.n	8008288 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800824a:	e853 3f00 	ldrex	r3, [r3]
 800824e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008250:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008252:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008256:	653b      	str	r3, [r7, #80]	; 0x50
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	461a      	mov	r2, r3
 800825e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008260:	647b      	str	r3, [r7, #68]	; 0x44
 8008262:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008264:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008266:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008268:	e841 2300 	strex	r3, r2, [r1]
 800826c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800826e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008270:	2b00      	cmp	r3, #0
 8008272:	d1e6      	bne.n	8008242 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2220      	movs	r2, #32
 8008278:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2200      	movs	r2, #0
 8008280:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008284:	2303      	movs	r3, #3
 8008286:	e063      	b.n	8008350 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	f003 0304 	and.w	r3, r3, #4
 8008292:	2b04      	cmp	r3, #4
 8008294:	d149      	bne.n	800832a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008296:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800829a:	9300      	str	r3, [sp, #0]
 800829c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800829e:	2200      	movs	r2, #0
 80082a0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80082a4:	6878      	ldr	r0, [r7, #4]
 80082a6:	f000 f857 	bl	8008358 <UART_WaitOnFlagUntilTimeout>
 80082aa:	4603      	mov	r3, r0
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d03c      	beq.n	800832a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082b8:	e853 3f00 	ldrex	r3, [r3]
 80082bc:	623b      	str	r3, [r7, #32]
   return(result);
 80082be:	6a3b      	ldr	r3, [r7, #32]
 80082c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80082c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	461a      	mov	r2, r3
 80082cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082ce:	633b      	str	r3, [r7, #48]	; 0x30
 80082d0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80082d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80082d6:	e841 2300 	strex	r3, r2, [r1]
 80082da:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80082dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d1e6      	bne.n	80082b0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	3308      	adds	r3, #8
 80082e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082ea:	693b      	ldr	r3, [r7, #16]
 80082ec:	e853 3f00 	ldrex	r3, [r3]
 80082f0:	60fb      	str	r3, [r7, #12]
   return(result);
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	f023 0301 	bic.w	r3, r3, #1
 80082f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	3308      	adds	r3, #8
 8008300:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008302:	61fa      	str	r2, [r7, #28]
 8008304:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008306:	69b9      	ldr	r1, [r7, #24]
 8008308:	69fa      	ldr	r2, [r7, #28]
 800830a:	e841 2300 	strex	r3, r2, [r1]
 800830e:	617b      	str	r3, [r7, #20]
   return(result);
 8008310:	697b      	ldr	r3, [r7, #20]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d1e5      	bne.n	80082e2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2220      	movs	r2, #32
 800831a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2200      	movs	r2, #0
 8008322:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008326:	2303      	movs	r3, #3
 8008328:	e012      	b.n	8008350 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2220      	movs	r2, #32
 800832e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2220      	movs	r2, #32
 8008336:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2200      	movs	r2, #0
 800833e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2200      	movs	r2, #0
 8008344:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2200      	movs	r2, #0
 800834a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800834e:	2300      	movs	r3, #0
}
 8008350:	4618      	mov	r0, r3
 8008352:	3758      	adds	r7, #88	; 0x58
 8008354:	46bd      	mov	sp, r7
 8008356:	bd80      	pop	{r7, pc}

08008358 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b084      	sub	sp, #16
 800835c:	af00      	add	r7, sp, #0
 800835e:	60f8      	str	r0, [r7, #12]
 8008360:	60b9      	str	r1, [r7, #8]
 8008362:	603b      	str	r3, [r7, #0]
 8008364:	4613      	mov	r3, r2
 8008366:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008368:	e04f      	b.n	800840a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800836a:	69bb      	ldr	r3, [r7, #24]
 800836c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008370:	d04b      	beq.n	800840a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008372:	f7f9 fd39 	bl	8001de8 <HAL_GetTick>
 8008376:	4602      	mov	r2, r0
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	1ad3      	subs	r3, r2, r3
 800837c:	69ba      	ldr	r2, [r7, #24]
 800837e:	429a      	cmp	r2, r3
 8008380:	d302      	bcc.n	8008388 <UART_WaitOnFlagUntilTimeout+0x30>
 8008382:	69bb      	ldr	r3, [r7, #24]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d101      	bne.n	800838c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008388:	2303      	movs	r3, #3
 800838a:	e04e      	b.n	800842a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	f003 0304 	and.w	r3, r3, #4
 8008396:	2b00      	cmp	r3, #0
 8008398:	d037      	beq.n	800840a <UART_WaitOnFlagUntilTimeout+0xb2>
 800839a:	68bb      	ldr	r3, [r7, #8]
 800839c:	2b80      	cmp	r3, #128	; 0x80
 800839e:	d034      	beq.n	800840a <UART_WaitOnFlagUntilTimeout+0xb2>
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	2b40      	cmp	r3, #64	; 0x40
 80083a4:	d031      	beq.n	800840a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	69db      	ldr	r3, [r3, #28]
 80083ac:	f003 0308 	and.w	r3, r3, #8
 80083b0:	2b08      	cmp	r3, #8
 80083b2:	d110      	bne.n	80083d6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	2208      	movs	r2, #8
 80083ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80083bc:	68f8      	ldr	r0, [r7, #12]
 80083be:	f000 f920 	bl	8008602 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	2208      	movs	r2, #8
 80083c6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	2200      	movs	r2, #0
 80083ce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80083d2:	2301      	movs	r3, #1
 80083d4:	e029      	b.n	800842a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	69db      	ldr	r3, [r3, #28]
 80083dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80083e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80083e4:	d111      	bne.n	800840a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80083ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80083f0:	68f8      	ldr	r0, [r7, #12]
 80083f2:	f000 f906 	bl	8008602 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	2220      	movs	r2, #32
 80083fa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	2200      	movs	r2, #0
 8008402:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8008406:	2303      	movs	r3, #3
 8008408:	e00f      	b.n	800842a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	69da      	ldr	r2, [r3, #28]
 8008410:	68bb      	ldr	r3, [r7, #8]
 8008412:	4013      	ands	r3, r2
 8008414:	68ba      	ldr	r2, [r7, #8]
 8008416:	429a      	cmp	r2, r3
 8008418:	bf0c      	ite	eq
 800841a:	2301      	moveq	r3, #1
 800841c:	2300      	movne	r3, #0
 800841e:	b2db      	uxtb	r3, r3
 8008420:	461a      	mov	r2, r3
 8008422:	79fb      	ldrb	r3, [r7, #7]
 8008424:	429a      	cmp	r2, r3
 8008426:	d0a0      	beq.n	800836a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008428:	2300      	movs	r3, #0
}
 800842a:	4618      	mov	r0, r3
 800842c:	3710      	adds	r7, #16
 800842e:	46bd      	mov	sp, r7
 8008430:	bd80      	pop	{r7, pc}
	...

08008434 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b096      	sub	sp, #88	; 0x58
 8008438:	af00      	add	r7, sp, #0
 800843a:	60f8      	str	r0, [r7, #12]
 800843c:	60b9      	str	r1, [r7, #8]
 800843e:	4613      	mov	r3, r2
 8008440:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	68ba      	ldr	r2, [r7, #8]
 8008446:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	88fa      	ldrh	r2, [r7, #6]
 800844c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	2200      	movs	r2, #0
 8008454:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	2222      	movs	r2, #34	; 0x22
 800845c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008466:	2b00      	cmp	r3, #0
 8008468:	d02d      	beq.n	80084c6 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008470:	4a40      	ldr	r2, [pc, #256]	; (8008574 <UART_Start_Receive_DMA+0x140>)
 8008472:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800847a:	4a3f      	ldr	r2, [pc, #252]	; (8008578 <UART_Start_Receive_DMA+0x144>)
 800847c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008484:	4a3d      	ldr	r2, [pc, #244]	; (800857c <UART_Start_Receive_DMA+0x148>)
 8008486:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800848e:	2200      	movs	r2, #0
 8008490:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	3324      	adds	r3, #36	; 0x24
 800849e:	4619      	mov	r1, r3
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084a4:	461a      	mov	r2, r3
 80084a6:	88fb      	ldrh	r3, [r7, #6]
 80084a8:	f7fb fc84 	bl	8003db4 <HAL_DMA_Start_IT>
 80084ac:	4603      	mov	r3, r0
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d009      	beq.n	80084c6 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	2210      	movs	r2, #16
 80084b6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	2220      	movs	r2, #32
 80084be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 80084c2:	2301      	movs	r3, #1
 80084c4:	e051      	b.n	800856a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	691b      	ldr	r3, [r3, #16]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d018      	beq.n	8008500 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084d6:	e853 3f00 	ldrex	r3, [r3]
 80084da:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80084dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80084e2:	657b      	str	r3, [r7, #84]	; 0x54
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	461a      	mov	r2, r3
 80084ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80084ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80084ee:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084f0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80084f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80084f4:	e841 2300 	strex	r3, r2, [r1]
 80084f8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80084fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d1e6      	bne.n	80084ce <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	3308      	adds	r3, #8
 8008506:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800850a:	e853 3f00 	ldrex	r3, [r3]
 800850e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008512:	f043 0301 	orr.w	r3, r3, #1
 8008516:	653b      	str	r3, [r7, #80]	; 0x50
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	3308      	adds	r3, #8
 800851e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008520:	637a      	str	r2, [r7, #52]	; 0x34
 8008522:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008524:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008526:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008528:	e841 2300 	strex	r3, r2, [r1]
 800852c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800852e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008530:	2b00      	cmp	r3, #0
 8008532:	d1e5      	bne.n	8008500 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	3308      	adds	r3, #8
 800853a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800853c:	697b      	ldr	r3, [r7, #20]
 800853e:	e853 3f00 	ldrex	r3, [r3]
 8008542:	613b      	str	r3, [r7, #16]
   return(result);
 8008544:	693b      	ldr	r3, [r7, #16]
 8008546:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800854a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	3308      	adds	r3, #8
 8008552:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008554:	623a      	str	r2, [r7, #32]
 8008556:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008558:	69f9      	ldr	r1, [r7, #28]
 800855a:	6a3a      	ldr	r2, [r7, #32]
 800855c:	e841 2300 	strex	r3, r2, [r1]
 8008560:	61bb      	str	r3, [r7, #24]
   return(result);
 8008562:	69bb      	ldr	r3, [r7, #24]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d1e5      	bne.n	8008534 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8008568:	2300      	movs	r3, #0
}
 800856a:	4618      	mov	r0, r3
 800856c:	3758      	adds	r7, #88	; 0x58
 800856e:	46bd      	mov	sp, r7
 8008570:	bd80      	pop	{r7, pc}
 8008572:	bf00      	nop
 8008574:	08008785 	.word	0x08008785
 8008578:	080088b1 	.word	0x080088b1
 800857c:	080088ef 	.word	0x080088ef

08008580 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008580:	b480      	push	{r7}
 8008582:	b08f      	sub	sp, #60	; 0x3c
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800858e:	6a3b      	ldr	r3, [r7, #32]
 8008590:	e853 3f00 	ldrex	r3, [r3]
 8008594:	61fb      	str	r3, [r7, #28]
   return(result);
 8008596:	69fb      	ldr	r3, [r7, #28]
 8008598:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800859c:	637b      	str	r3, [r7, #52]	; 0x34
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	461a      	mov	r2, r3
 80085a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80085a8:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80085ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80085ae:	e841 2300 	strex	r3, r2, [r1]
 80085b2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80085b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d1e6      	bne.n	8008588 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	3308      	adds	r3, #8
 80085c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	e853 3f00 	ldrex	r3, [r3]
 80085c8:	60bb      	str	r3, [r7, #8]
   return(result);
 80085ca:	68bb      	ldr	r3, [r7, #8]
 80085cc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80085d0:	633b      	str	r3, [r7, #48]	; 0x30
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	3308      	adds	r3, #8
 80085d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085da:	61ba      	str	r2, [r7, #24]
 80085dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085de:	6979      	ldr	r1, [r7, #20]
 80085e0:	69ba      	ldr	r2, [r7, #24]
 80085e2:	e841 2300 	strex	r3, r2, [r1]
 80085e6:	613b      	str	r3, [r7, #16]
   return(result);
 80085e8:	693b      	ldr	r3, [r7, #16]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d1e5      	bne.n	80085ba <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2220      	movs	r2, #32
 80085f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 80085f6:	bf00      	nop
 80085f8:	373c      	adds	r7, #60	; 0x3c
 80085fa:	46bd      	mov	sp, r7
 80085fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008600:	4770      	bx	lr

08008602 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008602:	b480      	push	{r7}
 8008604:	b095      	sub	sp, #84	; 0x54
 8008606:	af00      	add	r7, sp, #0
 8008608:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008610:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008612:	e853 3f00 	ldrex	r3, [r3]
 8008616:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800861a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800861e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	461a      	mov	r2, r3
 8008626:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008628:	643b      	str	r3, [r7, #64]	; 0x40
 800862a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800862c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800862e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008630:	e841 2300 	strex	r3, r2, [r1]
 8008634:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008638:	2b00      	cmp	r3, #0
 800863a:	d1e6      	bne.n	800860a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	3308      	adds	r3, #8
 8008642:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008644:	6a3b      	ldr	r3, [r7, #32]
 8008646:	e853 3f00 	ldrex	r3, [r3]
 800864a:	61fb      	str	r3, [r7, #28]
   return(result);
 800864c:	69fb      	ldr	r3, [r7, #28]
 800864e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008652:	f023 0301 	bic.w	r3, r3, #1
 8008656:	64bb      	str	r3, [r7, #72]	; 0x48
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	3308      	adds	r3, #8
 800865e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008660:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008662:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008664:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008666:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008668:	e841 2300 	strex	r3, r2, [r1]
 800866c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800866e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008670:	2b00      	cmp	r3, #0
 8008672:	d1e3      	bne.n	800863c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008678:	2b01      	cmp	r3, #1
 800867a:	d118      	bne.n	80086ae <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	e853 3f00 	ldrex	r3, [r3]
 8008688:	60bb      	str	r3, [r7, #8]
   return(result);
 800868a:	68bb      	ldr	r3, [r7, #8]
 800868c:	f023 0310 	bic.w	r3, r3, #16
 8008690:	647b      	str	r3, [r7, #68]	; 0x44
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	461a      	mov	r2, r3
 8008698:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800869a:	61bb      	str	r3, [r7, #24]
 800869c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800869e:	6979      	ldr	r1, [r7, #20]
 80086a0:	69ba      	ldr	r2, [r7, #24]
 80086a2:	e841 2300 	strex	r3, r2, [r1]
 80086a6:	613b      	str	r3, [r7, #16]
   return(result);
 80086a8:	693b      	ldr	r3, [r7, #16]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d1e6      	bne.n	800867c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2220      	movs	r2, #32
 80086b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	2200      	movs	r2, #0
 80086ba:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2200      	movs	r2, #0
 80086c0:	675a      	str	r2, [r3, #116]	; 0x74
}
 80086c2:	bf00      	nop
 80086c4:	3754      	adds	r7, #84	; 0x54
 80086c6:	46bd      	mov	sp, r7
 80086c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086cc:	4770      	bx	lr

080086ce <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80086ce:	b580      	push	{r7, lr}
 80086d0:	b090      	sub	sp, #64	; 0x40
 80086d2:	af00      	add	r7, sp, #0
 80086d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086da:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	f003 0320 	and.w	r3, r3, #32
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d137      	bne.n	800875a <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 80086ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086ec:	2200      	movs	r2, #0
 80086ee:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80086f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	3308      	adds	r3, #8
 80086f8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086fc:	e853 3f00 	ldrex	r3, [r3]
 8008700:	623b      	str	r3, [r7, #32]
   return(result);
 8008702:	6a3b      	ldr	r3, [r7, #32]
 8008704:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008708:	63bb      	str	r3, [r7, #56]	; 0x38
 800870a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	3308      	adds	r3, #8
 8008710:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008712:	633a      	str	r2, [r7, #48]	; 0x30
 8008714:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008716:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008718:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800871a:	e841 2300 	strex	r3, r2, [r1]
 800871e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008722:	2b00      	cmp	r3, #0
 8008724:	d1e5      	bne.n	80086f2 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008726:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800872c:	693b      	ldr	r3, [r7, #16]
 800872e:	e853 3f00 	ldrex	r3, [r3]
 8008732:	60fb      	str	r3, [r7, #12]
   return(result);
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800873a:	637b      	str	r3, [r7, #52]	; 0x34
 800873c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	461a      	mov	r2, r3
 8008742:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008744:	61fb      	str	r3, [r7, #28]
 8008746:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008748:	69b9      	ldr	r1, [r7, #24]
 800874a:	69fa      	ldr	r2, [r7, #28]
 800874c:	e841 2300 	strex	r3, r2, [r1]
 8008750:	617b      	str	r3, [r7, #20]
   return(result);
 8008752:	697b      	ldr	r3, [r7, #20]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d1e6      	bne.n	8008726 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008758:	e002      	b.n	8008760 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800875a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800875c:	f7ff f980 	bl	8007a60 <HAL_UART_TxCpltCallback>
}
 8008760:	bf00      	nop
 8008762:	3740      	adds	r7, #64	; 0x40
 8008764:	46bd      	mov	sp, r7
 8008766:	bd80      	pop	{r7, pc}

08008768 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b084      	sub	sp, #16
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008774:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008776:	68f8      	ldr	r0, [r7, #12]
 8008778:	f7ff f97c 	bl	8007a74 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800877c:	bf00      	nop
 800877e:	3710      	adds	r7, #16
 8008780:	46bd      	mov	sp, r7
 8008782:	bd80      	pop	{r7, pc}

08008784 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b09c      	sub	sp, #112	; 0x70
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008790:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	f003 0320 	and.w	r3, r3, #32
 800879c:	2b00      	cmp	r3, #0
 800879e:	d171      	bne.n	8008884 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 80087a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087a2:	2200      	movs	r2, #0
 80087a4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80087a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087b0:	e853 3f00 	ldrex	r3, [r3]
 80087b4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80087b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80087b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80087bc:	66bb      	str	r3, [r7, #104]	; 0x68
 80087be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	461a      	mov	r2, r3
 80087c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80087c6:	65bb      	str	r3, [r7, #88]	; 0x58
 80087c8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087ca:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80087cc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80087ce:	e841 2300 	strex	r3, r2, [r1]
 80087d2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80087d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d1e6      	bne.n	80087a8 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	3308      	adds	r3, #8
 80087e0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087e4:	e853 3f00 	ldrex	r3, [r3]
 80087e8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80087ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087ec:	f023 0301 	bic.w	r3, r3, #1
 80087f0:	667b      	str	r3, [r7, #100]	; 0x64
 80087f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	3308      	adds	r3, #8
 80087f8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80087fa:	647a      	str	r2, [r7, #68]	; 0x44
 80087fc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087fe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008800:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008802:	e841 2300 	strex	r3, r2, [r1]
 8008806:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008808:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800880a:	2b00      	cmp	r3, #0
 800880c:	d1e5      	bne.n	80087da <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800880e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	3308      	adds	r3, #8
 8008814:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008818:	e853 3f00 	ldrex	r3, [r3]
 800881c:	623b      	str	r3, [r7, #32]
   return(result);
 800881e:	6a3b      	ldr	r3, [r7, #32]
 8008820:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008824:	663b      	str	r3, [r7, #96]	; 0x60
 8008826:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	3308      	adds	r3, #8
 800882c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800882e:	633a      	str	r2, [r7, #48]	; 0x30
 8008830:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008832:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008834:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008836:	e841 2300 	strex	r3, r2, [r1]
 800883a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800883c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800883e:	2b00      	cmp	r3, #0
 8008840:	d1e5      	bne.n	800880e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008842:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008844:	2220      	movs	r2, #32
 8008846:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800884a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800884c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800884e:	2b01      	cmp	r3, #1
 8008850:	d118      	bne.n	8008884 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008852:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008858:	693b      	ldr	r3, [r7, #16]
 800885a:	e853 3f00 	ldrex	r3, [r3]
 800885e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	f023 0310 	bic.w	r3, r3, #16
 8008866:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008868:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	461a      	mov	r2, r3
 800886e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008870:	61fb      	str	r3, [r7, #28]
 8008872:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008874:	69b9      	ldr	r1, [r7, #24]
 8008876:	69fa      	ldr	r2, [r7, #28]
 8008878:	e841 2300 	strex	r3, r2, [r1]
 800887c:	617b      	str	r3, [r7, #20]
   return(result);
 800887e:	697b      	ldr	r3, [r7, #20]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d1e6      	bne.n	8008852 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008884:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008886:	2200      	movs	r2, #0
 8008888:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800888a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800888c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800888e:	2b01      	cmp	r3, #1
 8008890:	d107      	bne.n	80088a2 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008892:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008894:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008898:	4619      	mov	r1, r3
 800889a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800889c:	f7ff f908 	bl	8007ab0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80088a0:	e002      	b.n	80088a8 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80088a2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80088a4:	f7f8 fd60 	bl	8001368 <HAL_UART_RxCpltCallback>
}
 80088a8:	bf00      	nop
 80088aa:	3770      	adds	r7, #112	; 0x70
 80088ac:	46bd      	mov	sp, r7
 80088ae:	bd80      	pop	{r7, pc}

080088b0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b084      	sub	sp, #16
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088bc:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	2201      	movs	r2, #1
 80088c2:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80088c8:	2b01      	cmp	r3, #1
 80088ca:	d109      	bne.n	80088e0 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80088d2:	085b      	lsrs	r3, r3, #1
 80088d4:	b29b      	uxth	r3, r3
 80088d6:	4619      	mov	r1, r3
 80088d8:	68f8      	ldr	r0, [r7, #12]
 80088da:	f7ff f8e9 	bl	8007ab0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80088de:	e002      	b.n	80088e6 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 80088e0:	68f8      	ldr	r0, [r7, #12]
 80088e2:	f7ff f8d1 	bl	8007a88 <HAL_UART_RxHalfCpltCallback>
}
 80088e6:	bf00      	nop
 80088e8:	3710      	adds	r7, #16
 80088ea:	46bd      	mov	sp, r7
 80088ec:	bd80      	pop	{r7, pc}

080088ee <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80088ee:	b580      	push	{r7, lr}
 80088f0:	b086      	sub	sp, #24
 80088f2:	af00      	add	r7, sp, #0
 80088f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088fa:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80088fc:	697b      	ldr	r3, [r7, #20]
 80088fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008902:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008904:	697b      	ldr	r3, [r7, #20]
 8008906:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800890a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800890c:	697b      	ldr	r3, [r7, #20]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	689b      	ldr	r3, [r3, #8]
 8008912:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008916:	2b80      	cmp	r3, #128	; 0x80
 8008918:	d109      	bne.n	800892e <UART_DMAError+0x40>
 800891a:	693b      	ldr	r3, [r7, #16]
 800891c:	2b21      	cmp	r3, #33	; 0x21
 800891e:	d106      	bne.n	800892e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008920:	697b      	ldr	r3, [r7, #20]
 8008922:	2200      	movs	r2, #0
 8008924:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8008928:	6978      	ldr	r0, [r7, #20]
 800892a:	f7ff fe29 	bl	8008580 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800892e:	697b      	ldr	r3, [r7, #20]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	689b      	ldr	r3, [r3, #8]
 8008934:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008938:	2b40      	cmp	r3, #64	; 0x40
 800893a:	d109      	bne.n	8008950 <UART_DMAError+0x62>
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	2b22      	cmp	r3, #34	; 0x22
 8008940:	d106      	bne.n	8008950 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008942:	697b      	ldr	r3, [r7, #20]
 8008944:	2200      	movs	r2, #0
 8008946:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800894a:	6978      	ldr	r0, [r7, #20]
 800894c:	f7ff fe59 	bl	8008602 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008950:	697b      	ldr	r3, [r7, #20]
 8008952:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008956:	f043 0210 	orr.w	r2, r3, #16
 800895a:	697b      	ldr	r3, [r7, #20]
 800895c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008960:	6978      	ldr	r0, [r7, #20]
 8008962:	f7ff f89b 	bl	8007a9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008966:	bf00      	nop
 8008968:	3718      	adds	r7, #24
 800896a:	46bd      	mov	sp, r7
 800896c:	bd80      	pop	{r7, pc}

0800896e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800896e:	b580      	push	{r7, lr}
 8008970:	b084      	sub	sp, #16
 8008972:	af00      	add	r7, sp, #0
 8008974:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800897a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	2200      	movs	r2, #0
 8008980:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	2200      	movs	r2, #0
 8008988:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800898c:	68f8      	ldr	r0, [r7, #12]
 800898e:	f7ff f885 	bl	8007a9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008992:	bf00      	nop
 8008994:	3710      	adds	r7, #16
 8008996:	46bd      	mov	sp, r7
 8008998:	bd80      	pop	{r7, pc}

0800899a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800899a:	b580      	push	{r7, lr}
 800899c:	b088      	sub	sp, #32
 800899e:	af00      	add	r7, sp, #0
 80089a0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	e853 3f00 	ldrex	r3, [r3]
 80089ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80089b0:	68bb      	ldr	r3, [r7, #8]
 80089b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80089b6:	61fb      	str	r3, [r7, #28]
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	461a      	mov	r2, r3
 80089be:	69fb      	ldr	r3, [r7, #28]
 80089c0:	61bb      	str	r3, [r7, #24]
 80089c2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089c4:	6979      	ldr	r1, [r7, #20]
 80089c6:	69ba      	ldr	r2, [r7, #24]
 80089c8:	e841 2300 	strex	r3, r2, [r1]
 80089cc:	613b      	str	r3, [r7, #16]
   return(result);
 80089ce:	693b      	ldr	r3, [r7, #16]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d1e6      	bne.n	80089a2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2220      	movs	r2, #32
 80089d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2200      	movs	r2, #0
 80089e0:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80089e2:	6878      	ldr	r0, [r7, #4]
 80089e4:	f7ff f83c 	bl	8007a60 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80089e8:	bf00      	nop
 80089ea:	3720      	adds	r7, #32
 80089ec:	46bd      	mov	sp, r7
 80089ee:	bd80      	pop	{r7, pc}

080089f0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80089f0:	b480      	push	{r7}
 80089f2:	b083      	sub	sp, #12
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80089f8:	bf00      	nop
 80089fa:	370c      	adds	r7, #12
 80089fc:	46bd      	mov	sp, r7
 80089fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a02:	4770      	bx	lr

08008a04 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008a04:	b480      	push	{r7}
 8008a06:	b083      	sub	sp, #12
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008a0c:	bf00      	nop
 8008a0e:	370c      	adds	r7, #12
 8008a10:	46bd      	mov	sp, r7
 8008a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a16:	4770      	bx	lr

08008a18 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008a18:	b480      	push	{r7}
 8008a1a:	b083      	sub	sp, #12
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008a20:	bf00      	nop
 8008a22:	370c      	adds	r7, #12
 8008a24:	46bd      	mov	sp, r7
 8008a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2a:	4770      	bx	lr

08008a2c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008a2c:	b480      	push	{r7}
 8008a2e:	b085      	sub	sp, #20
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008a3a:	2b01      	cmp	r3, #1
 8008a3c:	d101      	bne.n	8008a42 <HAL_UARTEx_DisableFifoMode+0x16>
 8008a3e:	2302      	movs	r3, #2
 8008a40:	e027      	b.n	8008a92 <HAL_UARTEx_DisableFifoMode+0x66>
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2201      	movs	r2, #1
 8008a46:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	2224      	movs	r2, #36	; 0x24
 8008a4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	681a      	ldr	r2, [r3, #0]
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	f022 0201 	bic.w	r2, r2, #1
 8008a68:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008a70:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	2200      	movs	r2, #0
 8008a76:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	68fa      	ldr	r2, [r7, #12]
 8008a7e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2220      	movs	r2, #32
 8008a84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008a90:	2300      	movs	r3, #0
}
 8008a92:	4618      	mov	r0, r3
 8008a94:	3714      	adds	r7, #20
 8008a96:	46bd      	mov	sp, r7
 8008a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9c:	4770      	bx	lr

08008a9e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008a9e:	b580      	push	{r7, lr}
 8008aa0:	b084      	sub	sp, #16
 8008aa2:	af00      	add	r7, sp, #0
 8008aa4:	6078      	str	r0, [r7, #4]
 8008aa6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008aae:	2b01      	cmp	r3, #1
 8008ab0:	d101      	bne.n	8008ab6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008ab2:	2302      	movs	r3, #2
 8008ab4:	e02d      	b.n	8008b12 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	2201      	movs	r2, #1
 8008aba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	2224      	movs	r2, #36	; 0x24
 8008ac2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	681a      	ldr	r2, [r3, #0]
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	f022 0201 	bic.w	r2, r2, #1
 8008adc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	689b      	ldr	r3, [r3, #8]
 8008ae4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	683a      	ldr	r2, [r7, #0]
 8008aee:	430a      	orrs	r2, r1
 8008af0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008af2:	6878      	ldr	r0, [r7, #4]
 8008af4:	f000 f850 	bl	8008b98 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	68fa      	ldr	r2, [r7, #12]
 8008afe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	2220      	movs	r2, #32
 8008b04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008b10:	2300      	movs	r3, #0
}
 8008b12:	4618      	mov	r0, r3
 8008b14:	3710      	adds	r7, #16
 8008b16:	46bd      	mov	sp, r7
 8008b18:	bd80      	pop	{r7, pc}

08008b1a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008b1a:	b580      	push	{r7, lr}
 8008b1c:	b084      	sub	sp, #16
 8008b1e:	af00      	add	r7, sp, #0
 8008b20:	6078      	str	r0, [r7, #4]
 8008b22:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008b2a:	2b01      	cmp	r3, #1
 8008b2c:	d101      	bne.n	8008b32 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008b2e:	2302      	movs	r3, #2
 8008b30:	e02d      	b.n	8008b8e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	2201      	movs	r2, #1
 8008b36:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	2224      	movs	r2, #36	; 0x24
 8008b3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	681a      	ldr	r2, [r3, #0]
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	f022 0201 	bic.w	r2, r2, #1
 8008b58:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	689b      	ldr	r3, [r3, #8]
 8008b60:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	683a      	ldr	r2, [r7, #0]
 8008b6a:	430a      	orrs	r2, r1
 8008b6c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008b6e:	6878      	ldr	r0, [r7, #4]
 8008b70:	f000 f812 	bl	8008b98 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	68fa      	ldr	r2, [r7, #12]
 8008b7a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2220      	movs	r2, #32
 8008b80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2200      	movs	r2, #0
 8008b88:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008b8c:	2300      	movs	r3, #0
}
 8008b8e:	4618      	mov	r0, r3
 8008b90:	3710      	adds	r7, #16
 8008b92:	46bd      	mov	sp, r7
 8008b94:	bd80      	pop	{r7, pc}
	...

08008b98 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008b98:	b480      	push	{r7}
 8008b9a:	b085      	sub	sp, #20
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d108      	bne.n	8008bba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2201      	movs	r2, #1
 8008bac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2201      	movs	r2, #1
 8008bb4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008bb8:	e031      	b.n	8008c1e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008bba:	2308      	movs	r3, #8
 8008bbc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008bbe:	2308      	movs	r3, #8
 8008bc0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	689b      	ldr	r3, [r3, #8]
 8008bc8:	0e5b      	lsrs	r3, r3, #25
 8008bca:	b2db      	uxtb	r3, r3
 8008bcc:	f003 0307 	and.w	r3, r3, #7
 8008bd0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	689b      	ldr	r3, [r3, #8]
 8008bd8:	0f5b      	lsrs	r3, r3, #29
 8008bda:	b2db      	uxtb	r3, r3
 8008bdc:	f003 0307 	and.w	r3, r3, #7
 8008be0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008be2:	7bbb      	ldrb	r3, [r7, #14]
 8008be4:	7b3a      	ldrb	r2, [r7, #12]
 8008be6:	4911      	ldr	r1, [pc, #68]	; (8008c2c <UARTEx_SetNbDataToProcess+0x94>)
 8008be8:	5c8a      	ldrb	r2, [r1, r2]
 8008bea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008bee:	7b3a      	ldrb	r2, [r7, #12]
 8008bf0:	490f      	ldr	r1, [pc, #60]	; (8008c30 <UARTEx_SetNbDataToProcess+0x98>)
 8008bf2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008bf4:	fb93 f3f2 	sdiv	r3, r3, r2
 8008bf8:	b29a      	uxth	r2, r3
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008c00:	7bfb      	ldrb	r3, [r7, #15]
 8008c02:	7b7a      	ldrb	r2, [r7, #13]
 8008c04:	4909      	ldr	r1, [pc, #36]	; (8008c2c <UARTEx_SetNbDataToProcess+0x94>)
 8008c06:	5c8a      	ldrb	r2, [r1, r2]
 8008c08:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008c0c:	7b7a      	ldrb	r2, [r7, #13]
 8008c0e:	4908      	ldr	r1, [pc, #32]	; (8008c30 <UARTEx_SetNbDataToProcess+0x98>)
 8008c10:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008c12:	fb93 f3f2 	sdiv	r3, r3, r2
 8008c16:	b29a      	uxth	r2, r3
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008c1e:	bf00      	nop
 8008c20:	3714      	adds	r7, #20
 8008c22:	46bd      	mov	sp, r7
 8008c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c28:	4770      	bx	lr
 8008c2a:	bf00      	nop
 8008c2c:	08008cd4 	.word	0x08008cd4
 8008c30:	08008cdc 	.word	0x08008cdc

08008c34 <memset>:
 8008c34:	4402      	add	r2, r0
 8008c36:	4603      	mov	r3, r0
 8008c38:	4293      	cmp	r3, r2
 8008c3a:	d100      	bne.n	8008c3e <memset+0xa>
 8008c3c:	4770      	bx	lr
 8008c3e:	f803 1b01 	strb.w	r1, [r3], #1
 8008c42:	e7f9      	b.n	8008c38 <memset+0x4>

08008c44 <__libc_init_array>:
 8008c44:	b570      	push	{r4, r5, r6, lr}
 8008c46:	4d0d      	ldr	r5, [pc, #52]	; (8008c7c <__libc_init_array+0x38>)
 8008c48:	4c0d      	ldr	r4, [pc, #52]	; (8008c80 <__libc_init_array+0x3c>)
 8008c4a:	1b64      	subs	r4, r4, r5
 8008c4c:	10a4      	asrs	r4, r4, #2
 8008c4e:	2600      	movs	r6, #0
 8008c50:	42a6      	cmp	r6, r4
 8008c52:	d109      	bne.n	8008c68 <__libc_init_array+0x24>
 8008c54:	4d0b      	ldr	r5, [pc, #44]	; (8008c84 <__libc_init_array+0x40>)
 8008c56:	4c0c      	ldr	r4, [pc, #48]	; (8008c88 <__libc_init_array+0x44>)
 8008c58:	f000 f818 	bl	8008c8c <_init>
 8008c5c:	1b64      	subs	r4, r4, r5
 8008c5e:	10a4      	asrs	r4, r4, #2
 8008c60:	2600      	movs	r6, #0
 8008c62:	42a6      	cmp	r6, r4
 8008c64:	d105      	bne.n	8008c72 <__libc_init_array+0x2e>
 8008c66:	bd70      	pop	{r4, r5, r6, pc}
 8008c68:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c6c:	4798      	blx	r3
 8008c6e:	3601      	adds	r6, #1
 8008c70:	e7ee      	b.n	8008c50 <__libc_init_array+0xc>
 8008c72:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c76:	4798      	blx	r3
 8008c78:	3601      	adds	r6, #1
 8008c7a:	e7f2      	b.n	8008c62 <__libc_init_array+0x1e>
 8008c7c:	08008cec 	.word	0x08008cec
 8008c80:	08008cec 	.word	0x08008cec
 8008c84:	08008cec 	.word	0x08008cec
 8008c88:	08008cf0 	.word	0x08008cf0

08008c8c <_init>:
 8008c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c8e:	bf00      	nop
 8008c90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c92:	bc08      	pop	{r3}
 8008c94:	469e      	mov	lr, r3
 8008c96:	4770      	bx	lr

08008c98 <_fini>:
 8008c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c9a:	bf00      	nop
 8008c9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c9e:	bc08      	pop	{r3}
 8008ca0:	469e      	mov	lr, r3
 8008ca2:	4770      	bx	lr
