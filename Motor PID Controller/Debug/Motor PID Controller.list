
Motor PID Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008aac  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08008c84  08008c84  00018c84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008cc4  08008cc4  00020024  2**0
                  CONTENTS
  4 .ARM          00000008  08008cc4  08008cc4  00018cc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008ccc  08008ccc  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ccc  08008ccc  00018ccc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008cd0  08008cd0  00018cd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08008cd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000acc  20000028  08008cf8  00020028  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000af4  08008cf8  00020af4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018522  00000000  00000000  00020097  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002afb  00000000  00000000  000385b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001530  00000000  00000000  0003b0b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010a5  00000000  00000000  0003c5e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028d3c  00000000  00000000  0003d68d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017fa3  00000000  00000000  000663c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001140d7  00000000  00000000  0007e36c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005c08  00000000  00000000  00192444  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007e  00000000  00000000  0019804c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000028 	.word	0x20000028
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08008c6c 	.word	0x08008c6c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000002c 	.word	0x2000002c
 8000214:	08008c6c 	.word	0x08008c6c

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000518:	f001 fbf1 	bl	8001cfe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051c:	f000 f8d4 	bl	80006c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000520:	f000 fc76 	bl	8000e10 <MX_GPIO_Init>
  MX_DMA_Init();
 8000524:	f000 fc2e 	bl	8000d84 <MX_DMA_Init>
  MX_TIM3_Init();
 8000528:	f000 fadc 	bl	8000ae4 <MX_TIM3_Init>
  MX_ADC1_Init();
 800052c:	f000 f918 	bl	8000760 <MX_ADC1_Init>
  MX_TIM15_Init();
 8000530:	f000 fbd6 	bl	8000ce0 <MX_TIM15_Init>
  MX_TIM5_Init();
 8000534:	f000 fb86 	bl	8000c44 <MX_TIM5_Init>
  MX_TIM4_Init();
 8000538:	f000 fb2a 	bl	8000b90 <MX_TIM4_Init>
  MX_LPUART1_UART_Init();
 800053c:	f000 f99a 	bl	8000874 <MX_LPUART1_UART_Init>
  MX_TIM1_Init();
 8000540:	f000 f9e2 	bl	8000908 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000544:	f000 fa80 	bl	8000a48 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	//-------------------------------Part1&3:Motor PID-------------------------------//
	UARTDMAconfig();
 8000548:	f000 ff16 	bl	8001378 <UARTDMAconfig>

//	HAL_UART_Receive_DMA(&hlpuart1, RxBuffer, 4);
	HAL_ADC_Start_DMA(&hadc1, InputRead, 400); // DMA Read
 800054c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000550:	4948      	ldr	r1, [pc, #288]	; (8000674 <main+0x160>)
 8000552:	4849      	ldr	r0, [pc, #292]	; (8000678 <main+0x164>)
 8000554:	f002 f840 	bl	80025d8 <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start_IT(&htim15);
 8000558:	4848      	ldr	r0, [pc, #288]	; (800067c <main+0x168>)
 800055a:	f005 f969 	bl	8005830 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(&htim5); // system time clock
 800055e:	4848      	ldr	r0, [pc, #288]	; (8000680 <main+0x16c>)
 8000560:	f005 f8f6 	bl	8005750 <HAL_TIM_Base_Start>

	HAL_TIM_Base_Start(&htim4);  //motor A2
 8000564:	4847      	ldr	r0, [pc, #284]	; (8000684 <main+0x170>)
 8000566:	f005 f8f3 	bl	8005750 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800056a:	2100      	movs	r1, #0
 800056c:	4845      	ldr	r0, [pc, #276]	; (8000684 <main+0x170>)
 800056e:	f005 fa2f 	bl	80059d0 <HAL_TIM_PWM_Start>

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0); //for Check Timer
 8000572:	4b44      	ldr	r3, [pc, #272]	; (8000684 <main+0x170>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	2200      	movs	r2, #0
 8000578:	635a      	str	r2, [r3, #52]	; 0x34

	A0 = Kp + Ki + Kd;
 800057a:	4b43      	ldr	r3, [pc, #268]	; (8000688 <main+0x174>)
 800057c:	ed93 7a00 	vldr	s14, [r3]
 8000580:	4b42      	ldr	r3, [pc, #264]	; (800068c <main+0x178>)
 8000582:	edd3 7a00 	vldr	s15, [r3]
 8000586:	ee37 7a27 	vadd.f32	s14, s14, s15
 800058a:	4b41      	ldr	r3, [pc, #260]	; (8000690 <main+0x17c>)
 800058c:	edd3 7a00 	vldr	s15, [r3]
 8000590:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000594:	4b3f      	ldr	r3, [pc, #252]	; (8000694 <main+0x180>)
 8000596:	edc3 7a00 	vstr	s15, [r3]
	A1 = -Kp - (2 * Kd);
 800059a:	4b3b      	ldr	r3, [pc, #236]	; (8000688 <main+0x174>)
 800059c:	edd3 7a00 	vldr	s15, [r3]
 80005a0:	eeb1 7a67 	vneg.f32	s14, s15
 80005a4:	4b3a      	ldr	r3, [pc, #232]	; (8000690 <main+0x17c>)
 80005a6:	edd3 7a00 	vldr	s15, [r3]
 80005aa:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80005ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80005b2:	4b39      	ldr	r3, [pc, #228]	; (8000698 <main+0x184>)
 80005b4:	edc3 7a00 	vstr	s15, [r3]
	A2 = Kd;
 80005b8:	4b35      	ldr	r3, [pc, #212]	; (8000690 <main+0x17c>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4a37      	ldr	r2, [pc, #220]	; (800069c <main+0x188>)
 80005be:	6013      	str	r3, [r2, #0]

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, SET);
 80005c0:	2201      	movs	r2, #1
 80005c2:	2101      	movs	r1, #1
 80005c4:	4836      	ldr	r0, [pc, #216]	; (80006a0 <main+0x18c>)
 80005c6:	f003 fff1 	bl	80045ac <HAL_GPIO_WritePin>
	//-------------------------------------------------------------------------------//
	//----------------------------------Part2:QEI------------------------------------//
	HAL_TIM_Base_Start(&htim3);
 80005ca:	4836      	ldr	r0, [pc, #216]	; (80006a4 <main+0x190>)
 80005cc:	f005 f8c0 	bl	8005750 <HAL_TIM_Base_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80005d0:	213c      	movs	r1, #60	; 0x3c
 80005d2:	4834      	ldr	r0, [pc, #208]	; (80006a4 <main+0x190>)
 80005d4:	f005 fbb4 	bl	8005d40 <HAL_TIM_Encoder_Start>

	HAL_TIM_Base_Start_IT(&htim2);
 80005d8:	4833      	ldr	r0, [pc, #204]	; (80006a8 <main+0x194>)
 80005da:	f005 f929 	bl	8005830 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(&htim2);
 80005de:	4832      	ldr	r0, [pc, #200]	; (80006a8 <main+0x194>)
 80005e0:	f005 f8b6 	bl	8005750 <HAL_TIM_Base_Start>

	HAL_TIM_Base_Start(&htim1);
 80005e4:	4831      	ldr	r0, [pc, #196]	; (80006ac <main+0x198>)
 80005e6:	f005 f8b3 	bl	8005750 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80005ea:	2100      	movs	r1, #0
 80005ec:	482f      	ldr	r0, [pc, #188]	; (80006ac <main+0x198>)
 80005ee:	f005 f9ef 	bl	80059d0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80005f2:	2104      	movs	r1, #4
 80005f4:	482d      	ldr	r0, [pc, #180]	; (80006ac <main+0x198>)
 80005f6:	f005 f9eb 	bl	80059d0 <HAL_TIM_PWM_Start>

	HAL_ADC_Start_DMA(&hadc1, ADC, 400);
 80005fa:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80005fe:	492c      	ldr	r1, [pc, #176]	; (80006b0 <main+0x19c>)
 8000600:	481d      	ldr	r0, [pc, #116]	; (8000678 <main+0x164>)
 8000602:	f001 ffe9 	bl	80025d8 <HAL_ADC_Start_DMA>
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//	  test = __HAL_TIM_GET_COUNTER(&htim5);
		Mode_LD2();
 8000606:	f000 ffd5 	bl	80015b4 <Mode_LD2>
		Communication();
 800060a:	f000 fdd7 	bl	80011bc <Communication>
		//QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim3);
		if (mode_status == 1) {
 800060e:	4b29      	ldr	r3, [pc, #164]	; (80006b4 <main+0x1a0>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	2b01      	cmp	r3, #1
 8000614:	d103      	bne.n	800061e <main+0x10a>
//			PWM = 0;

			duty = 0;
 8000616:	4b28      	ldr	r3, [pc, #160]	; (80006b8 <main+0x1a4>)
 8000618:	2200      	movs	r2, #0
 800061a:	801a      	strh	r2, [r3, #0]
 800061c:	e025      	b.n	800066a <main+0x156>
		} else if (mode_status == 2) {
 800061e:	4b25      	ldr	r3, [pc, #148]	; (80006b4 <main+0x1a0>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	2b02      	cmp	r3, #2
 8000624:	d105      	bne.n	8000632 <main+0x11e>
			PWM = 0;
 8000626:	4b25      	ldr	r3, [pc, #148]	; (80006bc <main+0x1a8>)
 8000628:	2200      	movs	r2, #0
 800062a:	801a      	strh	r2, [r3, #0]
			PID_QEI();
 800062c:	f000 ff1e 	bl	800146c <PID_QEI>
 8000630:	e01b      	b.n	800066a <main+0x156>


		} else if (mode_status == 3) {
 8000632:	4b20      	ldr	r3, [pc, #128]	; (80006b4 <main+0x1a0>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	2b03      	cmp	r3, #3
 8000638:	d117      	bne.n	800066a <main+0x156>
			PWM = abs(RxInt);
 800063a:	4b21      	ldr	r3, [pc, #132]	; (80006c0 <main+0x1ac>)
 800063c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000640:	2b00      	cmp	r3, #0
 8000642:	bfb8      	it	lt
 8000644:	425b      	neglt	r3, r3
 8000646:	b29a      	uxth	r2, r3
 8000648:	4b1c      	ldr	r3, [pc, #112]	; (80006bc <main+0x1a8>)
 800064a:	801a      	strh	r2, [r3, #0]
			duty = 0;
 800064c:	4b1a      	ldr	r3, [pc, #104]	; (80006b8 <main+0x1a4>)
 800064e:	2200      	movs	r2, #0
 8000650:	801a      	strh	r2, [r3, #0]
			if (RxInt >= 0)
 8000652:	4b1b      	ldr	r3, [pc, #108]	; (80006c0 <main+0x1ac>)
 8000654:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000658:	2b00      	cmp	r3, #0
 800065a:	db03      	blt.n	8000664 <main+0x150>
				direction = 1;
 800065c:	4b19      	ldr	r3, [pc, #100]	; (80006c4 <main+0x1b0>)
 800065e:	2201      	movs	r2, #1
 8000660:	701a      	strb	r2, [r3, #0]
 8000662:	e002      	b.n	800066a <main+0x156>
			else
				direction = 0;
 8000664:	4b17      	ldr	r3, [pc, #92]	; (80006c4 <main+0x1b0>)
 8000666:	2200      	movs	r2, #0
 8000668:	701a      	strb	r2, [r3, #0]
		}
		motorControl();
 800066a:	f000 fd6b 	bl	8001144 <motorControl>
		motor();
 800066e:	f000 fe9b 	bl	80013a8 <motor>
		Mode_LD2();
 8000672:	e7c8      	b.n	8000606 <main+0xf2>
 8000674:	20000438 	.word	0x20000438
 8000678:	20000044 	.word	0x20000044
 800067c:	200003e0 	.word	0x200003e0
 8000680:	20000394 	.word	0x20000394
 8000684:	20000348 	.word	0x20000348
 8000688:	20000004 	.word	0x20000004
 800068c:	20000008 	.word	0x20000008
 8000690:	2000000c 	.word	0x2000000c
 8000694:	20000788 	.word	0x20000788
 8000698:	2000078c 	.word	0x2000078c
 800069c:	20000790 	.word	0x20000790
 80006a0:	48000800 	.word	0x48000800
 80006a4:	200002fc 	.word	0x200002fc
 80006a8:	200002b0 	.word	0x200002b0
 80006ac:	20000264 	.word	0x20000264
 80006b0:	200007a4 	.word	0x200007a4
 80006b4:	20000000 	.word	0x20000000
 80006b8:	20000acc 	.word	0x20000acc
 80006bc:	20000780 	.word	0x20000780
 80006c0:	2000076e 	.word	0x2000076e
 80006c4:	20000782 	.word	0x20000782

080006c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b094      	sub	sp, #80	; 0x50
 80006cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ce:	f107 0318 	add.w	r3, r7, #24
 80006d2:	2238      	movs	r2, #56	; 0x38
 80006d4:	2100      	movs	r1, #0
 80006d6:	4618      	mov	r0, r3
 80006d8:	f008 fa9c 	bl	8008c14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006dc:	1d3b      	adds	r3, r7, #4
 80006de:	2200      	movs	r2, #0
 80006e0:	601a      	str	r2, [r3, #0]
 80006e2:	605a      	str	r2, [r3, #4]
 80006e4:	609a      	str	r2, [r3, #8]
 80006e6:	60da      	str	r2, [r3, #12]
 80006e8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80006ea:	2000      	movs	r0, #0
 80006ec:	f003 ffa8 	bl	8004640 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006f0:	2302      	movs	r3, #2
 80006f2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006f8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006fa:	2340      	movs	r3, #64	; 0x40
 80006fc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006fe:	2302      	movs	r3, #2
 8000700:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000702:	2302      	movs	r3, #2
 8000704:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000706:	2304      	movs	r3, #4
 8000708:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800070a:	2355      	movs	r3, #85	; 0x55
 800070c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800070e:	2302      	movs	r3, #2
 8000710:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000712:	2302      	movs	r3, #2
 8000714:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000716:	2302      	movs	r3, #2
 8000718:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800071a:	f107 0318 	add.w	r3, r7, #24
 800071e:	4618      	mov	r0, r3
 8000720:	f004 f842 	bl	80047a8 <HAL_RCC_OscConfig>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800072a:	f000 ff79 	bl	8001620 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800072e:	230f      	movs	r3, #15
 8000730:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000732:	2303      	movs	r3, #3
 8000734:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000736:	2300      	movs	r3, #0
 8000738:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800073a:	2300      	movs	r3, #0
 800073c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800073e:	2300      	movs	r3, #0
 8000740:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000742:	1d3b      	adds	r3, r7, #4
 8000744:	2104      	movs	r1, #4
 8000746:	4618      	mov	r0, r3
 8000748:	f004 fb40 	bl	8004dcc <HAL_RCC_ClockConfig>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000752:	f000 ff65 	bl	8001620 <Error_Handler>
  }
}
 8000756:	bf00      	nop
 8000758:	3750      	adds	r7, #80	; 0x50
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
	...

08000760 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b08c      	sub	sp, #48	; 0x30
 8000764:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000766:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
 800076e:	605a      	str	r2, [r3, #4]
 8000770:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000772:	1d3b      	adds	r3, r7, #4
 8000774:	2220      	movs	r2, #32
 8000776:	2100      	movs	r1, #0
 8000778:	4618      	mov	r0, r3
 800077a:	f008 fa4b 	bl	8008c14 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800077e:	4b3a      	ldr	r3, [pc, #232]	; (8000868 <MX_ADC1_Init+0x108>)
 8000780:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000784:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000786:	4b38      	ldr	r3, [pc, #224]	; (8000868 <MX_ADC1_Init+0x108>)
 8000788:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800078c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800078e:	4b36      	ldr	r3, [pc, #216]	; (8000868 <MX_ADC1_Init+0x108>)
 8000790:	2200      	movs	r2, #0
 8000792:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000794:	4b34      	ldr	r3, [pc, #208]	; (8000868 <MX_ADC1_Init+0x108>)
 8000796:	2200      	movs	r2, #0
 8000798:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800079a:	4b33      	ldr	r3, [pc, #204]	; (8000868 <MX_ADC1_Init+0x108>)
 800079c:	2200      	movs	r2, #0
 800079e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80007a0:	4b31      	ldr	r3, [pc, #196]	; (8000868 <MX_ADC1_Init+0x108>)
 80007a2:	2201      	movs	r2, #1
 80007a4:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007a6:	4b30      	ldr	r3, [pc, #192]	; (8000868 <MX_ADC1_Init+0x108>)
 80007a8:	2204      	movs	r2, #4
 80007aa:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007ac:	4b2e      	ldr	r3, [pc, #184]	; (8000868 <MX_ADC1_Init+0x108>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80007b2:	4b2d      	ldr	r3, [pc, #180]	; (8000868 <MX_ADC1_Init+0x108>)
 80007b4:	2201      	movs	r2, #1
 80007b6:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 80007b8:	4b2b      	ldr	r3, [pc, #172]	; (8000868 <MX_ADC1_Init+0x108>)
 80007ba:	2202      	movs	r2, #2
 80007bc:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007be:	4b2a      	ldr	r3, [pc, #168]	; (8000868 <MX_ADC1_Init+0x108>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T15_TRGO;
 80007c6:	4b28      	ldr	r3, [pc, #160]	; (8000868 <MX_ADC1_Init+0x108>)
 80007c8:	f44f 62b8 	mov.w	r2, #1472	; 0x5c0
 80007cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80007ce:	4b26      	ldr	r3, [pc, #152]	; (8000868 <MX_ADC1_Init+0x108>)
 80007d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007d4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80007d6:	4b24      	ldr	r3, [pc, #144]	; (8000868 <MX_ADC1_Init+0x108>)
 80007d8:	2201      	movs	r2, #1
 80007da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007de:	4b22      	ldr	r3, [pc, #136]	; (8000868 <MX_ADC1_Init+0x108>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80007e4:	4b20      	ldr	r3, [pc, #128]	; (8000868 <MX_ADC1_Init+0x108>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007ec:	481e      	ldr	r0, [pc, #120]	; (8000868 <MX_ADC1_Init+0x108>)
 80007ee:	f001 fd37 	bl	8002260 <HAL_ADC_Init>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 80007f8:	f000 ff12 	bl	8001620 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80007fc:	2300      	movs	r3, #0
 80007fe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000800:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000804:	4619      	mov	r1, r3
 8000806:	4818      	ldr	r0, [pc, #96]	; (8000868 <MX_ADC1_Init+0x108>)
 8000808:	f003 f804 	bl	8003814 <HAL_ADCEx_MultiModeConfigChannel>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8000812:	f000 ff05 	bl	8001620 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000816:	4b15      	ldr	r3, [pc, #84]	; (800086c <MX_ADC1_Init+0x10c>)
 8000818:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800081a:	2306      	movs	r3, #6
 800081c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800081e:	2307      	movs	r3, #7
 8000820:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000822:	237f      	movs	r3, #127	; 0x7f
 8000824:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000826:	2304      	movs	r3, #4
 8000828:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800082a:	2300      	movs	r3, #0
 800082c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800082e:	1d3b      	adds	r3, r7, #4
 8000830:	4619      	mov	r1, r3
 8000832:	480d      	ldr	r0, [pc, #52]	; (8000868 <MX_ADC1_Init+0x108>)
 8000834:	f002 fa2c 	bl	8002c90 <HAL_ADC_ConfigChannel>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 800083e:	f000 feef 	bl	8001620 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000842:	4b0b      	ldr	r3, [pc, #44]	; (8000870 <MX_ADC1_Init+0x110>)
 8000844:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000846:	230c      	movs	r3, #12
 8000848:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800084a:	1d3b      	adds	r3, r7, #4
 800084c:	4619      	mov	r1, r3
 800084e:	4806      	ldr	r0, [pc, #24]	; (8000868 <MX_ADC1_Init+0x108>)
 8000850:	f002 fa1e 	bl	8002c90 <HAL_ADC_ConfigChannel>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 800085a:	f000 fee1 	bl	8001620 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800085e:	bf00      	nop
 8000860:	3730      	adds	r7, #48	; 0x30
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	20000044 	.word	0x20000044
 800086c:	04300002 	.word	0x04300002
 8000870:	08600004 	.word	0x08600004

08000874 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000878:	4b21      	ldr	r3, [pc, #132]	; (8000900 <MX_LPUART1_UART_Init+0x8c>)
 800087a:	4a22      	ldr	r2, [pc, #136]	; (8000904 <MX_LPUART1_UART_Init+0x90>)
 800087c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800087e:	4b20      	ldr	r3, [pc, #128]	; (8000900 <MX_LPUART1_UART_Init+0x8c>)
 8000880:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000884:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000886:	4b1e      	ldr	r3, [pc, #120]	; (8000900 <MX_LPUART1_UART_Init+0x8c>)
 8000888:	2200      	movs	r2, #0
 800088a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800088c:	4b1c      	ldr	r3, [pc, #112]	; (8000900 <MX_LPUART1_UART_Init+0x8c>)
 800088e:	2200      	movs	r2, #0
 8000890:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000892:	4b1b      	ldr	r3, [pc, #108]	; (8000900 <MX_LPUART1_UART_Init+0x8c>)
 8000894:	2200      	movs	r2, #0
 8000896:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000898:	4b19      	ldr	r3, [pc, #100]	; (8000900 <MX_LPUART1_UART_Init+0x8c>)
 800089a:	220c      	movs	r2, #12
 800089c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800089e:	4b18      	ldr	r3, [pc, #96]	; (8000900 <MX_LPUART1_UART_Init+0x8c>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008a4:	4b16      	ldr	r3, [pc, #88]	; (8000900 <MX_LPUART1_UART_Init+0x8c>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008aa:	4b15      	ldr	r3, [pc, #84]	; (8000900 <MX_LPUART1_UART_Init+0x8c>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008b0:	4b13      	ldr	r3, [pc, #76]	; (8000900 <MX_LPUART1_UART_Init+0x8c>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80008b6:	4812      	ldr	r0, [pc, #72]	; (8000900 <MX_LPUART1_UART_Init+0x8c>)
 80008b8:	f006 fc82 	bl	80071c0 <HAL_UART_Init>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80008c2:	f000 fead 	bl	8001620 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008c6:	2100      	movs	r1, #0
 80008c8:	480d      	ldr	r0, [pc, #52]	; (8000900 <MX_LPUART1_UART_Init+0x8c>)
 80008ca:	f008 f8d8 	bl	8008a7e <HAL_UARTEx_SetTxFifoThreshold>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80008d4:	f000 fea4 	bl	8001620 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008d8:	2100      	movs	r1, #0
 80008da:	4809      	ldr	r0, [pc, #36]	; (8000900 <MX_LPUART1_UART_Init+0x8c>)
 80008dc:	f008 f90d 	bl	8008afa <HAL_UARTEx_SetRxFifoThreshold>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80008e6:	f000 fe9b 	bl	8001620 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80008ea:	4805      	ldr	r0, [pc, #20]	; (8000900 <MX_LPUART1_UART_Init+0x8c>)
 80008ec:	f008 f88e 	bl	8008a0c <HAL_UARTEx_DisableFifoMode>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80008f6:	f000 fe93 	bl	8001620 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80008fa:	bf00      	nop
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	20000110 	.word	0x20000110
 8000904:	40008000 	.word	0x40008000

08000908 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b098      	sub	sp, #96	; 0x60
 800090c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800090e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000912:	2200      	movs	r2, #0
 8000914:	601a      	str	r2, [r3, #0]
 8000916:	605a      	str	r2, [r3, #4]
 8000918:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800091a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800091e:	2200      	movs	r2, #0
 8000920:	601a      	str	r2, [r3, #0]
 8000922:	605a      	str	r2, [r3, #4]
 8000924:	609a      	str	r2, [r3, #8]
 8000926:	60da      	str	r2, [r3, #12]
 8000928:	611a      	str	r2, [r3, #16]
 800092a:	615a      	str	r2, [r3, #20]
 800092c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800092e:	1d3b      	adds	r3, r7, #4
 8000930:	2234      	movs	r2, #52	; 0x34
 8000932:	2100      	movs	r1, #0
 8000934:	4618      	mov	r0, r3
 8000936:	f008 f96d 	bl	8008c14 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800093a:	4b41      	ldr	r3, [pc, #260]	; (8000a40 <MX_TIM1_Init+0x138>)
 800093c:	4a41      	ldr	r2, [pc, #260]	; (8000a44 <MX_TIM1_Init+0x13c>)
 800093e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 169;
 8000940:	4b3f      	ldr	r3, [pc, #252]	; (8000a40 <MX_TIM1_Init+0x138>)
 8000942:	22a9      	movs	r2, #169	; 0xa9
 8000944:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000946:	4b3e      	ldr	r3, [pc, #248]	; (8000a40 <MX_TIM1_Init+0x138>)
 8000948:	2200      	movs	r2, #0
 800094a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 800094c:	4b3c      	ldr	r3, [pc, #240]	; (8000a40 <MX_TIM1_Init+0x138>)
 800094e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000952:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000954:	4b3a      	ldr	r3, [pc, #232]	; (8000a40 <MX_TIM1_Init+0x138>)
 8000956:	2200      	movs	r2, #0
 8000958:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800095a:	4b39      	ldr	r3, [pc, #228]	; (8000a40 <MX_TIM1_Init+0x138>)
 800095c:	2200      	movs	r2, #0
 800095e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000960:	4b37      	ldr	r3, [pc, #220]	; (8000a40 <MX_TIM1_Init+0x138>)
 8000962:	2200      	movs	r2, #0
 8000964:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000966:	4836      	ldr	r0, [pc, #216]	; (8000a40 <MX_TIM1_Init+0x138>)
 8000968:	f004 ffda 	bl	8005920 <HAL_TIM_PWM_Init>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000972:	f000 fe55 	bl	8001620 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000976:	2300      	movs	r3, #0
 8000978:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800097a:	2300      	movs	r3, #0
 800097c:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800097e:	2300      	movs	r3, #0
 8000980:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000982:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000986:	4619      	mov	r1, r3
 8000988:	482d      	ldr	r0, [pc, #180]	; (8000a40 <MX_TIM1_Init+0x138>)
 800098a:	f006 faa9 	bl	8006ee0 <HAL_TIMEx_MasterConfigSynchronization>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000994:	f000 fe44 	bl	8001620 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000998:	2360      	movs	r3, #96	; 0x60
 800099a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 800099c:	2300      	movs	r3, #0
 800099e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009a0:	2300      	movs	r3, #0
 80009a2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80009a4:	2300      	movs	r3, #0
 80009a6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009a8:	2300      	movs	r3, #0
 80009aa:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80009ac:	2300      	movs	r3, #0
 80009ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80009b0:	2300      	movs	r3, #0
 80009b2:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009b4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80009b8:	2200      	movs	r2, #0
 80009ba:	4619      	mov	r1, r3
 80009bc:	4820      	ldr	r0, [pc, #128]	; (8000a40 <MX_TIM1_Init+0x138>)
 80009be:	f005 fb9d 	bl	80060fc <HAL_TIM_PWM_ConfigChannel>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80009c8:	f000 fe2a 	bl	8001620 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80009cc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80009d0:	2204      	movs	r2, #4
 80009d2:	4619      	mov	r1, r3
 80009d4:	481a      	ldr	r0, [pc, #104]	; (8000a40 <MX_TIM1_Init+0x138>)
 80009d6:	f005 fb91 	bl	80060fc <HAL_TIM_PWM_ConfigChannel>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 80009e0:	f000 fe1e 	bl	8001620 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80009e4:	2300      	movs	r3, #0
 80009e6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80009e8:	2300      	movs	r3, #0
 80009ea:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80009ec:	2300      	movs	r3, #0
 80009ee:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80009f0:	2300      	movs	r3, #0
 80009f2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80009f4:	2300      	movs	r3, #0
 80009f6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80009f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009fc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80009fe:	2300      	movs	r3, #0
 8000a00:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000a02:	2300      	movs	r3, #0
 8000a04:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000a06:	2300      	movs	r3, #0
 8000a08:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000a0a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000a0e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000a10:	2300      	movs	r3, #0
 8000a12:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000a14:	2300      	movs	r3, #0
 8000a16:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a1c:	1d3b      	adds	r3, r7, #4
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4807      	ldr	r0, [pc, #28]	; (8000a40 <MX_TIM1_Init+0x138>)
 8000a22:	f006 faf3 	bl	800700c <HAL_TIMEx_ConfigBreakDeadTime>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000a2c:	f000 fdf8 	bl	8001620 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000a30:	4803      	ldr	r0, [pc, #12]	; (8000a40 <MX_TIM1_Init+0x138>)
 8000a32:	f001 f84f 	bl	8001ad4 <HAL_TIM_MspPostInit>

}
 8000a36:	bf00      	nop
 8000a38:	3760      	adds	r7, #96	; 0x60
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	20000264 	.word	0x20000264
 8000a44:	40012c00 	.word	0x40012c00

08000a48 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b088      	sub	sp, #32
 8000a4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a4e:	f107 0310 	add.w	r3, r7, #16
 8000a52:	2200      	movs	r2, #0
 8000a54:	601a      	str	r2, [r3, #0]
 8000a56:	605a      	str	r2, [r3, #4]
 8000a58:	609a      	str	r2, [r3, #8]
 8000a5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a5c:	1d3b      	adds	r3, r7, #4
 8000a5e:	2200      	movs	r2, #0
 8000a60:	601a      	str	r2, [r3, #0]
 8000a62:	605a      	str	r2, [r3, #4]
 8000a64:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a66:	4b1e      	ldr	r3, [pc, #120]	; (8000ae0 <MX_TIM2_Init+0x98>)
 8000a68:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a6c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 8000a6e:	4b1c      	ldr	r3, [pc, #112]	; (8000ae0 <MX_TIM2_Init+0x98>)
 8000a70:	22a9      	movs	r2, #169	; 0xa9
 8000a72:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a74:	4b1a      	ldr	r3, [pc, #104]	; (8000ae0 <MX_TIM2_Init+0x98>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000a7a:	4b19      	ldr	r3, [pc, #100]	; (8000ae0 <MX_TIM2_Init+0x98>)
 8000a7c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a80:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a82:	4b17      	ldr	r3, [pc, #92]	; (8000ae0 <MX_TIM2_Init+0x98>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a88:	4b15      	ldr	r3, [pc, #84]	; (8000ae0 <MX_TIM2_Init+0x98>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a8e:	4814      	ldr	r0, [pc, #80]	; (8000ae0 <MX_TIM2_Init+0x98>)
 8000a90:	f004 fe06 	bl	80056a0 <HAL_TIM_Base_Init>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000a9a:	f000 fdc1 	bl	8001620 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aa2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000aa4:	f107 0310 	add.w	r3, r7, #16
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	480d      	ldr	r0, [pc, #52]	; (8000ae0 <MX_TIM2_Init+0x98>)
 8000aac:	f005 fc3a 	bl	8006324 <HAL_TIM_ConfigClockSource>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000ab6:	f000 fdb3 	bl	8001620 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aba:	2300      	movs	r3, #0
 8000abc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ac2:	1d3b      	adds	r3, r7, #4
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4806      	ldr	r0, [pc, #24]	; (8000ae0 <MX_TIM2_Init+0x98>)
 8000ac8:	f006 fa0a 	bl	8006ee0 <HAL_TIMEx_MasterConfigSynchronization>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000ad2:	f000 fda5 	bl	8001620 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ad6:	bf00      	nop
 8000ad8:	3720      	adds	r7, #32
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	200002b0 	.word	0x200002b0

08000ae4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b08c      	sub	sp, #48	; 0x30
 8000ae8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000aea:	f107 030c 	add.w	r3, r7, #12
 8000aee:	2224      	movs	r2, #36	; 0x24
 8000af0:	2100      	movs	r1, #0
 8000af2:	4618      	mov	r0, r3
 8000af4:	f008 f88e 	bl	8008c14 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000af8:	463b      	mov	r3, r7
 8000afa:	2200      	movs	r2, #0
 8000afc:	601a      	str	r2, [r3, #0]
 8000afe:	605a      	str	r2, [r3, #4]
 8000b00:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b02:	4b21      	ldr	r3, [pc, #132]	; (8000b88 <MX_TIM3_Init+0xa4>)
 8000b04:	4a21      	ldr	r2, [pc, #132]	; (8000b8c <MX_TIM3_Init+0xa8>)
 8000b06:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000b08:	4b1f      	ldr	r3, [pc, #124]	; (8000b88 <MX_TIM3_Init+0xa4>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b0e:	4b1e      	ldr	r3, [pc, #120]	; (8000b88 <MX_TIM3_Init+0xa4>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3071;
 8000b14:	4b1c      	ldr	r3, [pc, #112]	; (8000b88 <MX_TIM3_Init+0xa4>)
 8000b16:	f640 32ff 	movw	r2, #3071	; 0xbff
 8000b1a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b1c:	4b1a      	ldr	r3, [pc, #104]	; (8000b88 <MX_TIM3_Init+0xa4>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b22:	4b19      	ldr	r3, [pc, #100]	; (8000b88 <MX_TIM3_Init+0xa4>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000b28:	2303      	movs	r3, #3
 8000b2a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000b30:	2301      	movs	r3, #1
 8000b32:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000b34:	2300      	movs	r3, #0
 8000b36:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000b40:	2301      	movs	r3, #1
 8000b42:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000b44:	2300      	movs	r3, #0
 8000b46:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000b4c:	f107 030c 	add.w	r3, r7, #12
 8000b50:	4619      	mov	r1, r3
 8000b52:	480d      	ldr	r0, [pc, #52]	; (8000b88 <MX_TIM3_Init+0xa4>)
 8000b54:	f005 f84e 	bl	8005bf4 <HAL_TIM_Encoder_Init>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000b5e:	f000 fd5f 	bl	8001620 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b62:	2300      	movs	r3, #0
 8000b64:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b66:	2300      	movs	r3, #0
 8000b68:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b6a:	463b      	mov	r3, r7
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	4806      	ldr	r0, [pc, #24]	; (8000b88 <MX_TIM3_Init+0xa4>)
 8000b70:	f006 f9b6 	bl	8006ee0 <HAL_TIMEx_MasterConfigSynchronization>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000b7a:	f000 fd51 	bl	8001620 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000b7e:	bf00      	nop
 8000b80:	3730      	adds	r7, #48	; 0x30
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	200002fc 	.word	0x200002fc
 8000b8c:	40000400 	.word	0x40000400

08000b90 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b08a      	sub	sp, #40	; 0x28
 8000b94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b96:	f107 031c 	add.w	r3, r7, #28
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	601a      	str	r2, [r3, #0]
 8000b9e:	605a      	str	r2, [r3, #4]
 8000ba0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ba2:	463b      	mov	r3, r7
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	601a      	str	r2, [r3, #0]
 8000ba8:	605a      	str	r2, [r3, #4]
 8000baa:	609a      	str	r2, [r3, #8]
 8000bac:	60da      	str	r2, [r3, #12]
 8000bae:	611a      	str	r2, [r3, #16]
 8000bb0:	615a      	str	r2, [r3, #20]
 8000bb2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000bb4:	4b21      	ldr	r3, [pc, #132]	; (8000c3c <MX_TIM4_Init+0xac>)
 8000bb6:	4a22      	ldr	r2, [pc, #136]	; (8000c40 <MX_TIM4_Init+0xb0>)
 8000bb8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 169;
 8000bba:	4b20      	ldr	r3, [pc, #128]	; (8000c3c <MX_TIM4_Init+0xac>)
 8000bbc:	22a9      	movs	r2, #169	; 0xa9
 8000bbe:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bc0:	4b1e      	ldr	r3, [pc, #120]	; (8000c3c <MX_TIM4_Init+0xac>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8000bc6:	4b1d      	ldr	r3, [pc, #116]	; (8000c3c <MX_TIM4_Init+0xac>)
 8000bc8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bcc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bce:	4b1b      	ldr	r3, [pc, #108]	; (8000c3c <MX_TIM4_Init+0xac>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bd4:	4b19      	ldr	r3, [pc, #100]	; (8000c3c <MX_TIM4_Init+0xac>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000bda:	4818      	ldr	r0, [pc, #96]	; (8000c3c <MX_TIM4_Init+0xac>)
 8000bdc:	f004 fea0 	bl	8005920 <HAL_TIM_PWM_Init>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8000be6:	f000 fd1b 	bl	8001620 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bea:	2300      	movs	r3, #0
 8000bec:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000bf2:	f107 031c 	add.w	r3, r7, #28
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	4810      	ldr	r0, [pc, #64]	; (8000c3c <MX_TIM4_Init+0xac>)
 8000bfa:	f006 f971 	bl	8006ee0 <HAL_TIMEx_MasterConfigSynchronization>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8000c04:	f000 fd0c 	bl	8001620 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c08:	2360      	movs	r3, #96	; 0x60
 8000c0a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c10:	2300      	movs	r3, #0
 8000c12:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c14:	2300      	movs	r3, #0
 8000c16:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c18:	463b      	mov	r3, r7
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	4807      	ldr	r0, [pc, #28]	; (8000c3c <MX_TIM4_Init+0xac>)
 8000c20:	f005 fa6c 	bl	80060fc <HAL_TIM_PWM_ConfigChannel>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8000c2a:	f000 fcf9 	bl	8001620 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000c2e:	4803      	ldr	r0, [pc, #12]	; (8000c3c <MX_TIM4_Init+0xac>)
 8000c30:	f000 ff50 	bl	8001ad4 <HAL_TIM_MspPostInit>

}
 8000c34:	bf00      	nop
 8000c36:	3728      	adds	r7, #40	; 0x28
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	20000348 	.word	0x20000348
 8000c40:	40000800 	.word	0x40000800

08000c44 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b088      	sub	sp, #32
 8000c48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c4a:	f107 0310 	add.w	r3, r7, #16
 8000c4e:	2200      	movs	r2, #0
 8000c50:	601a      	str	r2, [r3, #0]
 8000c52:	605a      	str	r2, [r3, #4]
 8000c54:	609a      	str	r2, [r3, #8]
 8000c56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c58:	1d3b      	adds	r3, r7, #4
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	601a      	str	r2, [r3, #0]
 8000c5e:	605a      	str	r2, [r3, #4]
 8000c60:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000c62:	4b1d      	ldr	r3, [pc, #116]	; (8000cd8 <MX_TIM5_Init+0x94>)
 8000c64:	4a1d      	ldr	r2, [pc, #116]	; (8000cdc <MX_TIM5_Init+0x98>)
 8000c66:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 169;
 8000c68:	4b1b      	ldr	r3, [pc, #108]	; (8000cd8 <MX_TIM5_Init+0x94>)
 8000c6a:	22a9      	movs	r2, #169	; 0xa9
 8000c6c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c6e:	4b1a      	ldr	r3, [pc, #104]	; (8000cd8 <MX_TIM5_Init+0x94>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4.294967295E9;
 8000c74:	4b18      	ldr	r3, [pc, #96]	; (8000cd8 <MX_TIM5_Init+0x94>)
 8000c76:	f04f 32ff 	mov.w	r2, #4294967295
 8000c7a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c7c:	4b16      	ldr	r3, [pc, #88]	; (8000cd8 <MX_TIM5_Init+0x94>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c82:	4b15      	ldr	r3, [pc, #84]	; (8000cd8 <MX_TIM5_Init+0x94>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000c88:	4813      	ldr	r0, [pc, #76]	; (8000cd8 <MX_TIM5_Init+0x94>)
 8000c8a:	f004 fd09 	bl	80056a0 <HAL_TIM_Base_Init>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8000c94:	f000 fcc4 	bl	8001620 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c9c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000c9e:	f107 0310 	add.w	r3, r7, #16
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	480c      	ldr	r0, [pc, #48]	; (8000cd8 <MX_TIM5_Init+0x94>)
 8000ca6:	f005 fb3d 	bl	8006324 <HAL_TIM_ConfigClockSource>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8000cb0:	f000 fcb6 	bl	8001620 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000cbc:	1d3b      	adds	r3, r7, #4
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	4805      	ldr	r0, [pc, #20]	; (8000cd8 <MX_TIM5_Init+0x94>)
 8000cc2:	f006 f90d 	bl	8006ee0 <HAL_TIMEx_MasterConfigSynchronization>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8000ccc:	f000 fca8 	bl	8001620 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000cd0:	bf00      	nop
 8000cd2:	3720      	adds	r7, #32
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	20000394 	.word	0x20000394
 8000cdc:	40000c00 	.word	0x40000c00

08000ce0 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b088      	sub	sp, #32
 8000ce4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ce6:	f107 0310 	add.w	r3, r7, #16
 8000cea:	2200      	movs	r2, #0
 8000cec:	601a      	str	r2, [r3, #0]
 8000cee:	605a      	str	r2, [r3, #4]
 8000cf0:	609a      	str	r2, [r3, #8]
 8000cf2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cf4:	1d3b      	adds	r3, r7, #4
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	601a      	str	r2, [r3, #0]
 8000cfa:	605a      	str	r2, [r3, #4]
 8000cfc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000cfe:	4b1f      	ldr	r3, [pc, #124]	; (8000d7c <MX_TIM15_Init+0x9c>)
 8000d00:	4a1f      	ldr	r2, [pc, #124]	; (8000d80 <MX_TIM15_Init+0xa0>)
 8000d02:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 169;
 8000d04:	4b1d      	ldr	r3, [pc, #116]	; (8000d7c <MX_TIM15_Init+0x9c>)
 8000d06:	22a9      	movs	r2, #169	; 0xa9
 8000d08:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d0a:	4b1c      	ldr	r3, [pc, #112]	; (8000d7c <MX_TIM15_Init+0x9c>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 999;
 8000d10:	4b1a      	ldr	r3, [pc, #104]	; (8000d7c <MX_TIM15_Init+0x9c>)
 8000d12:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d16:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d18:	4b18      	ldr	r3, [pc, #96]	; (8000d7c <MX_TIM15_Init+0x9c>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000d1e:	4b17      	ldr	r3, [pc, #92]	; (8000d7c <MX_TIM15_Init+0x9c>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d24:	4b15      	ldr	r3, [pc, #84]	; (8000d7c <MX_TIM15_Init+0x9c>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8000d2a:	4814      	ldr	r0, [pc, #80]	; (8000d7c <MX_TIM15_Init+0x9c>)
 8000d2c:	f004 fcb8 	bl	80056a0 <HAL_TIM_Base_Init>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 8000d36:	f000 fc73 	bl	8001620 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d3e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8000d40:	f107 0310 	add.w	r3, r7, #16
 8000d44:	4619      	mov	r1, r3
 8000d46:	480d      	ldr	r0, [pc, #52]	; (8000d7c <MX_TIM15_Init+0x9c>)
 8000d48:	f005 faec 	bl	8006324 <HAL_TIM_ConfigClockSource>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 8000d52:	f000 fc65 	bl	8001620 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000d56:	2320      	movs	r3, #32
 8000d58:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000d5e:	1d3b      	adds	r3, r7, #4
 8000d60:	4619      	mov	r1, r3
 8000d62:	4806      	ldr	r0, [pc, #24]	; (8000d7c <MX_TIM15_Init+0x9c>)
 8000d64:	f006 f8bc 	bl	8006ee0 <HAL_TIMEx_MasterConfigSynchronization>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 8000d6e:	f000 fc57 	bl	8001620 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8000d72:	bf00      	nop
 8000d74:	3720      	adds	r7, #32
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	200003e0 	.word	0x200003e0
 8000d80:	40014000 	.word	0x40014000

08000d84 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b084      	sub	sp, #16
 8000d88:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000d8a:	4b20      	ldr	r3, [pc, #128]	; (8000e0c <MX_DMA_Init+0x88>)
 8000d8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d8e:	4a1f      	ldr	r2, [pc, #124]	; (8000e0c <MX_DMA_Init+0x88>)
 8000d90:	f043 0304 	orr.w	r3, r3, #4
 8000d94:	6493      	str	r3, [r2, #72]	; 0x48
 8000d96:	4b1d      	ldr	r3, [pc, #116]	; (8000e0c <MX_DMA_Init+0x88>)
 8000d98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d9a:	f003 0304 	and.w	r3, r3, #4
 8000d9e:	60fb      	str	r3, [r7, #12]
 8000da0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000da2:	4b1a      	ldr	r3, [pc, #104]	; (8000e0c <MX_DMA_Init+0x88>)
 8000da4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000da6:	4a19      	ldr	r2, [pc, #100]	; (8000e0c <MX_DMA_Init+0x88>)
 8000da8:	f043 0302 	orr.w	r3, r3, #2
 8000dac:	6493      	str	r3, [r2, #72]	; 0x48
 8000dae:	4b17      	ldr	r3, [pc, #92]	; (8000e0c <MX_DMA_Init+0x88>)
 8000db0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000db2:	f003 0302 	and.w	r3, r3, #2
 8000db6:	60bb      	str	r3, [r7, #8]
 8000db8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000dba:	4b14      	ldr	r3, [pc, #80]	; (8000e0c <MX_DMA_Init+0x88>)
 8000dbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000dbe:	4a13      	ldr	r2, [pc, #76]	; (8000e0c <MX_DMA_Init+0x88>)
 8000dc0:	f043 0301 	orr.w	r3, r3, #1
 8000dc4:	6493      	str	r3, [r2, #72]	; 0x48
 8000dc6:	4b11      	ldr	r3, [pc, #68]	; (8000e0c <MX_DMA_Init+0x88>)
 8000dc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000dca:	f003 0301 	and.w	r3, r3, #1
 8000dce:	607b      	str	r3, [r7, #4]
 8000dd0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	200b      	movs	r0, #11
 8000dd8:	f002 feff 	bl	8003bda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000ddc:	200b      	movs	r0, #11
 8000dde:	f002 ff16 	bl	8003c0e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000de2:	2200      	movs	r2, #0
 8000de4:	2100      	movs	r1, #0
 8000de6:	200c      	movs	r0, #12
 8000de8:	f002 fef7 	bl	8003bda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000dec:	200c      	movs	r0, #12
 8000dee:	f002 ff0e 	bl	8003c0e <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 8000df2:	2200      	movs	r2, #0
 8000df4:	2100      	movs	r1, #0
 8000df6:	2038      	movs	r0, #56	; 0x38
 8000df8:	f002 feef 	bl	8003bda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8000dfc:	2038      	movs	r0, #56	; 0x38
 8000dfe:	f002 ff06 	bl	8003c0e <HAL_NVIC_EnableIRQ>

}
 8000e02:	bf00      	nop
 8000e04:	3710      	adds	r7, #16
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	40021000 	.word	0x40021000

08000e10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b08a      	sub	sp, #40	; 0x28
 8000e14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e16:	f107 0314 	add.w	r3, r7, #20
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	601a      	str	r2, [r3, #0]
 8000e1e:	605a      	str	r2, [r3, #4]
 8000e20:	609a      	str	r2, [r3, #8]
 8000e22:	60da      	str	r2, [r3, #12]
 8000e24:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e26:	4b39      	ldr	r3, [pc, #228]	; (8000f0c <MX_GPIO_Init+0xfc>)
 8000e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e2a:	4a38      	ldr	r2, [pc, #224]	; (8000f0c <MX_GPIO_Init+0xfc>)
 8000e2c:	f043 0304 	orr.w	r3, r3, #4
 8000e30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e32:	4b36      	ldr	r3, [pc, #216]	; (8000f0c <MX_GPIO_Init+0xfc>)
 8000e34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e36:	f003 0304 	and.w	r3, r3, #4
 8000e3a:	613b      	str	r3, [r7, #16]
 8000e3c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e3e:	4b33      	ldr	r3, [pc, #204]	; (8000f0c <MX_GPIO_Init+0xfc>)
 8000e40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e42:	4a32      	ldr	r2, [pc, #200]	; (8000f0c <MX_GPIO_Init+0xfc>)
 8000e44:	f043 0320 	orr.w	r3, r3, #32
 8000e48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e4a:	4b30      	ldr	r3, [pc, #192]	; (8000f0c <MX_GPIO_Init+0xfc>)
 8000e4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e4e:	f003 0320 	and.w	r3, r3, #32
 8000e52:	60fb      	str	r3, [r7, #12]
 8000e54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e56:	4b2d      	ldr	r3, [pc, #180]	; (8000f0c <MX_GPIO_Init+0xfc>)
 8000e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e5a:	4a2c      	ldr	r2, [pc, #176]	; (8000f0c <MX_GPIO_Init+0xfc>)
 8000e5c:	f043 0301 	orr.w	r3, r3, #1
 8000e60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e62:	4b2a      	ldr	r3, [pc, #168]	; (8000f0c <MX_GPIO_Init+0xfc>)
 8000e64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e66:	f003 0301 	and.w	r3, r3, #1
 8000e6a:	60bb      	str	r3, [r7, #8]
 8000e6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e6e:	4b27      	ldr	r3, [pc, #156]	; (8000f0c <MX_GPIO_Init+0xfc>)
 8000e70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e72:	4a26      	ldr	r2, [pc, #152]	; (8000f0c <MX_GPIO_Init+0xfc>)
 8000e74:	f043 0302 	orr.w	r3, r3, #2
 8000e78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e7a:	4b24      	ldr	r3, [pc, #144]	; (8000f0c <MX_GPIO_Init+0xfc>)
 8000e7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e7e:	f003 0302 	and.w	r3, r3, #2
 8000e82:	607b      	str	r3, [r7, #4]
 8000e84:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8000e86:	2200      	movs	r2, #0
 8000e88:	2101      	movs	r1, #1
 8000e8a:	4821      	ldr	r0, [pc, #132]	; (8000f10 <MX_GPIO_Init+0x100>)
 8000e8c:	f003 fb8e 	bl	80045ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000e90:	2200      	movs	r2, #0
 8000e92:	2120      	movs	r1, #32
 8000e94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e98:	f003 fb88 	bl	80045ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ea0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ea2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ea6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000eac:	f107 0314 	add.w	r3, r7, #20
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	4817      	ldr	r0, [pc, #92]	; (8000f10 <MX_GPIO_Init+0x100>)
 8000eb4:	f003 f9f8 	bl	80042a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000eb8:	2301      	movs	r3, #1
 8000eba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ec8:	f107 0314 	add.w	r3, r7, #20
 8000ecc:	4619      	mov	r1, r3
 8000ece:	4810      	ldr	r0, [pc, #64]	; (8000f10 <MX_GPIO_Init+0x100>)
 8000ed0:	f003 f9ea 	bl	80042a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000ed4:	2320      	movs	r3, #32
 8000ed6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000edc:	2300      	movs	r3, #0
 8000ede:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ee4:	f107 0314 	add.w	r3, r7, #20
 8000ee8:	4619      	mov	r1, r3
 8000eea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eee:	f003 f9db 	bl	80042a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	2028      	movs	r0, #40	; 0x28
 8000ef8:	f002 fe6f 	bl	8003bda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000efc:	2028      	movs	r0, #40	; 0x28
 8000efe:	f002 fe86 	bl	8003c0e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f02:	bf00      	nop
 8000f04:	3728      	adds	r7, #40	; 0x28
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	40021000 	.word	0x40021000
 8000f10:	48000800 	.word	0x48000800

08000f14 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
//------------------------------Part1&3:Motor PID----------------------------------//


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000f14:	b5b0      	push	{r4, r5, r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
	if (htim == &htim5) {
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	4a0d      	ldr	r2, [pc, #52]	; (8000f54 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d108      	bne.n	8000f36 <HAL_TIM_PeriodElapsedCallback+0x22>
		_micros += UINT32_MAX;
 8000f24:	4b0c      	ldr	r3, [pc, #48]	; (8000f58 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f2a:	1e54      	subs	r4, r2, #1
 8000f2c:	f143 0500 	adc.w	r5, r3, #0
 8000f30:	4b09      	ldr	r3, [pc, #36]	; (8000f58 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000f32:	e9c3 4500 	strd	r4, r5, [r3]
	}
	if (htim == &htim2) {
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	4a08      	ldr	r2, [pc, #32]	; (8000f5c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d106      	bne.n	8000f4c <HAL_TIM_PeriodElapsedCallback+0x38>
			updateInput();
 8000f3e:	f000 f82d 	bl	8000f9c <updateInput>
			QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim3);
 8000f42:	4b07      	ldr	r3, [pc, #28]	; (8000f60 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f48:	4a06      	ldr	r2, [pc, #24]	; (8000f64 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000f4a:	6013      	str	r3, [r2, #0]
		}
}
 8000f4c:	bf00      	nop
 8000f4e:	3708      	adds	r7, #8
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bdb0      	pop	{r4, r5, r7, pc}
 8000f54:	20000394 	.word	0x20000394
 8000f58:	20000430 	.word	0x20000430
 8000f5c:	200002b0 	.word	0x200002b0
 8000f60:	200002fc 	.word	0x200002fc
 8000f64:	200007a0 	.word	0x200007a0

08000f68 <micros>:

uint64_t micros() {
 8000f68:	b4b0      	push	{r4, r5, r7}
 8000f6a:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim5) + _micros;
 8000f6c:	4b09      	ldr	r3, [pc, #36]	; (8000f94 <micros+0x2c>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f72:	2200      	movs	r2, #0
 8000f74:	4618      	mov	r0, r3
 8000f76:	4611      	mov	r1, r2
 8000f78:	4b07      	ldr	r3, [pc, #28]	; (8000f98 <micros+0x30>)
 8000f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f7e:	1884      	adds	r4, r0, r2
 8000f80:	eb41 0503 	adc.w	r5, r1, r3
 8000f84:	4622      	mov	r2, r4
 8000f86:	462b      	mov	r3, r5
}
 8000f88:	4610      	mov	r0, r2
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bcb0      	pop	{r4, r5, r7}
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	20000394 	.word	0x20000394
 8000f98:	20000430 	.word	0x20000430

08000f9c <updateInput>:

void updateInput() {
 8000f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000fa0:	b083      	sub	sp, #12
 8000fa2:	af00      	add	r7, sp, #0
	sumEncode = 0;
 8000fa4:	4e5c      	ldr	r6, [pc, #368]	; (8001118 <updateInput+0x17c>)
 8000fa6:	f04f 0200 	mov.w	r2, #0
 8000faa:	f04f 0300 	mov.w	r3, #0
 8000fae:	e9c6 2300 	strd	r2, r3, [r6]
	sumTrimpot = 0;
 8000fb2:	4e5a      	ldr	r6, [pc, #360]	; (800111c <updateInput+0x180>)
 8000fb4:	f04f 0200 	mov.w	r2, #0
 8000fb8:	f04f 0300 	mov.w	r3, #0
 8000fbc:	e9c6 2300 	strd	r2, r3, [r6]
	for (int i = 0; i < 200; i++) {
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	607b      	str	r3, [r7, #4]
 8000fc4:	e029      	b.n	800101a <updateInput+0x7e>
		sumEncode += InputRead[2 * i];
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	005b      	lsls	r3, r3, #1
 8000fca:	4a55      	ldr	r2, [pc, #340]	; (8001120 <updateInput+0x184>)
 8000fcc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000fd0:	b29b      	uxth	r3, r3
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	4611      	mov	r1, r2
 8000fd8:	4b4f      	ldr	r3, [pc, #316]	; (8001118 <updateInput+0x17c>)
 8000fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fde:	eb10 0802 	adds.w	r8, r0, r2
 8000fe2:	eb41 0903 	adc.w	r9, r1, r3
 8000fe6:	4b4c      	ldr	r3, [pc, #304]	; (8001118 <updateInput+0x17c>)
 8000fe8:	e9c3 8900 	strd	r8, r9, [r3]
		sumTrimpot += InputRead[1 + (2 * i)];
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	005b      	lsls	r3, r3, #1
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	4a4b      	ldr	r2, [pc, #300]	; (8001120 <updateInput+0x184>)
 8000ff4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ff8:	b29b      	uxth	r3, r3
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	461c      	mov	r4, r3
 8000ffe:	4615      	mov	r5, r2
 8001000:	4b46      	ldr	r3, [pc, #280]	; (800111c <updateInput+0x180>)
 8001002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001006:	eb14 0a02 	adds.w	sl, r4, r2
 800100a:	eb45 0b03 	adc.w	fp, r5, r3
 800100e:	4b43      	ldr	r3, [pc, #268]	; (800111c <updateInput+0x180>)
 8001010:	e9c3 ab00 	strd	sl, fp, [r3]
	for (int i = 0; i < 200; i++) {
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	3301      	adds	r3, #1
 8001018:	607b      	str	r3, [r7, #4]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2bc7      	cmp	r3, #199	; 0xc7
 800101e:	ddd2      	ble.n	8000fc6 <updateInput+0x2a>
	}


	avgEncode = sumEncode / 200;
 8001020:	4b3d      	ldr	r3, [pc, #244]	; (8001118 <updateInput+0x17c>)
 8001022:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001026:	f04f 02c8 	mov.w	r2, #200	; 0xc8
 800102a:	f04f 0300 	mov.w	r3, #0
 800102e:	f7ff f8f3 	bl	8000218 <__aeabi_uldivmod>
 8001032:	4602      	mov	r2, r0
 8001034:	460b      	mov	r3, r1
 8001036:	4b3b      	ldr	r3, [pc, #236]	; (8001124 <updateInput+0x188>)
 8001038:	601a      	str	r2, [r3, #0]
	avgTrimpot = sumTrimpot / 200;
 800103a:	4b38      	ldr	r3, [pc, #224]	; (800111c <updateInput+0x180>)
 800103c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001040:	f04f 02c8 	mov.w	r2, #200	; 0xc8
 8001044:	f04f 0300 	mov.w	r3, #0
 8001048:	f7ff f8e6 	bl	8000218 <__aeabi_uldivmod>
 800104c:	4602      	mov	r2, r0
 800104e:	460b      	mov	r3, r1
 8001050:	b292      	uxth	r2, r2
 8001052:	4b35      	ldr	r3, [pc, #212]	; (8001128 <updateInput+0x18c>)
 8001054:	801a      	strh	r2, [r3, #0]
		/*if (mode_status == 2)
		{
			avgTrimpot = 2048;
		}*/

	directError = avgTrimpot - avgEncode;
 8001056:	4b34      	ldr	r3, [pc, #208]	; (8001128 <updateInput+0x18c>)
 8001058:	881a      	ldrh	r2, [r3, #0]
 800105a:	4b32      	ldr	r3, [pc, #200]	; (8001124 <updateInput+0x188>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	b29b      	uxth	r3, r3
 8001060:	1ad3      	subs	r3, r2, r3
 8001062:	b29b      	uxth	r3, r3
 8001064:	b21a      	sxth	r2, r3
 8001066:	4b31      	ldr	r3, [pc, #196]	; (800112c <updateInput+0x190>)
 8001068:	801a      	strh	r2, [r3, #0]



	if (directError > 0) {
 800106a:	4b30      	ldr	r3, [pc, #192]	; (800112c <updateInput+0x190>)
 800106c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001070:	2b00      	cmp	r3, #0
 8001072:	dd0a      	ble.n	800108a <updateInput+0xee>
		wrappedError = directError - 4096; // Moving backward with wrap-around
 8001074:	4b2d      	ldr	r3, [pc, #180]	; (800112c <updateInput+0x190>)
 8001076:	f9b3 3000 	ldrsh.w	r3, [r3]
 800107a:	b29b      	uxth	r3, r3
 800107c:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 8001080:	b29b      	uxth	r3, r3
 8001082:	b21a      	sxth	r2, r3
 8001084:	4b2a      	ldr	r3, [pc, #168]	; (8001130 <updateInput+0x194>)
 8001086:	801a      	strh	r2, [r3, #0]
 8001088:	e009      	b.n	800109e <updateInput+0x102>
	} else {
		wrappedError = directError + 4096; // Moving forward with wrap-around
 800108a:	4b28      	ldr	r3, [pc, #160]	; (800112c <updateInput+0x190>)
 800108c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001090:	b29b      	uxth	r3, r3
 8001092:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001096:	b29b      	uxth	r3, r3
 8001098:	b21a      	sxth	r2, r3
 800109a:	4b25      	ldr	r3, [pc, #148]	; (8001130 <updateInput+0x194>)
 800109c:	801a      	strh	r2, [r3, #0]
	}

	if (abs(directError) < abs(wrappedError)) {
 800109e:	4b23      	ldr	r3, [pc, #140]	; (800112c <updateInput+0x190>)
 80010a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	bfb8      	it	lt
 80010a8:	425b      	neglt	r3, r3
 80010aa:	b29a      	uxth	r2, r3
 80010ac:	4b20      	ldr	r3, [pc, #128]	; (8001130 <updateInput+0x194>)
 80010ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	bfb8      	it	lt
 80010b6:	425b      	neglt	r3, r3
 80010b8:	b29b      	uxth	r3, r3
 80010ba:	429a      	cmp	r2, r3
 80010bc:	d205      	bcs.n	80010ca <updateInput+0x12e>
		Error = directError;
 80010be:	4b1b      	ldr	r3, [pc, #108]	; (800112c <updateInput+0x190>)
 80010c0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80010c4:	4b1b      	ldr	r3, [pc, #108]	; (8001134 <updateInput+0x198>)
 80010c6:	801a      	strh	r2, [r3, #0]
 80010c8:	e004      	b.n	80010d4 <updateInput+0x138>
	} else {
		Error = wrappedError;
 80010ca:	4b19      	ldr	r3, [pc, #100]	; (8001130 <updateInput+0x194>)
 80010cc:	f9b3 2000 	ldrsh.w	r2, [r3]
 80010d0:	4b18      	ldr	r3, [pc, #96]	; (8001134 <updateInput+0x198>)
 80010d2:	801a      	strh	r2, [r3, #0]
	}

	if (Error < 0) {
 80010d4:	4b17      	ldr	r3, [pc, #92]	; (8001134 <updateInput+0x198>)
 80010d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	da03      	bge.n	80010e6 <updateInput+0x14a>
		direction = 0; // Counter-clockwise / backward
 80010de:	4b16      	ldr	r3, [pc, #88]	; (8001138 <updateInput+0x19c>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	701a      	strb	r2, [r3, #0]
 80010e4:	e002      	b.n	80010ec <updateInput+0x150>
	} else {
		direction = 1; // Clockwise / forward
 80010e6:	4b14      	ldr	r3, [pc, #80]	; (8001138 <updateInput+0x19c>)
 80010e8:	2201      	movs	r2, #1
 80010ea:	701a      	strb	r2, [r3, #0]
	}


	PIDcalculate();
 80010ec:	f000 f8ae 	bl	800124c <PIDcalculate>
	RxInt = (((int16_t)RxBuffer[2] << 8)) + ((int8_t)(RxBuffer[1]));
 80010f0:	4b12      	ldr	r3, [pc, #72]	; (800113c <updateInput+0x1a0>)
 80010f2:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80010f6:	b29b      	uxth	r3, r3
 80010f8:	021b      	lsls	r3, r3, #8
 80010fa:	b29a      	uxth	r2, r3
 80010fc:	4b0f      	ldr	r3, [pc, #60]	; (800113c <updateInput+0x1a0>)
 80010fe:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001102:	b29b      	uxth	r3, r3
 8001104:	4413      	add	r3, r2
 8001106:	b29b      	uxth	r3, r3
 8001108:	b21a      	sxth	r2, r3
 800110a:	4b0d      	ldr	r3, [pc, #52]	; (8001140 <updateInput+0x1a4>)
 800110c:	801a      	strh	r2, [r3, #0]


//	PWM = arm_pid_f32(&PID, Error);
}
 800110e:	bf00      	nop
 8001110:	370c      	adds	r7, #12
 8001112:	46bd      	mov	sp, r7
 8001114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001118:	20000758 	.word	0x20000758
 800111c:	20000760 	.word	0x20000760
 8001120:	20000438 	.word	0x20000438
 8001124:	20000768 	.word	0x20000768
 8001128:	2000076c 	.word	0x2000076c
 800112c:	2000077e 	.word	0x2000077e
 8001130:	20000784 	.word	0x20000784
 8001134:	20000778 	.word	0x20000778
 8001138:	20000782 	.word	0x20000782
 800113c:	20000798 	.word	0x20000798
 8001140:	2000076e 	.word	0x2000076e

08001144 <motorControl>:

void motorControl() {
 8001144:	b598      	push	{r3, r4, r7, lr}
 8001146:	af00      	add	r7, sp, #0
	static uint16_t motorTime = 0;
	if (motorTime < HAL_GetTick()) {
 8001148:	4b17      	ldr	r3, [pc, #92]	; (80011a8 <motorControl+0x64>)
 800114a:	881b      	ldrh	r3, [r3, #0]
 800114c:	461c      	mov	r4, r3
 800114e:	f000 fe3b 	bl	8001dc8 <HAL_GetTick>
 8001152:	4603      	mov	r3, r0
 8001154:	429c      	cmp	r4, r3
 8001156:	d224      	bcs.n	80011a2 <motorControl+0x5e>
		motorTime = HAL_GetTick() + 1;
 8001158:	f000 fe36 	bl	8001dc8 <HAL_GetTick>
 800115c:	4603      	mov	r3, r0
 800115e:	b29b      	uxth	r3, r3
 8001160:	3301      	adds	r3, #1
 8001162:	b29a      	uxth	r2, r3
 8001164:	4b10      	ldr	r3, [pc, #64]	; (80011a8 <motorControl+0x64>)
 8001166:	801a      	strh	r2, [r3, #0]
		if (direction == 0) // ทว�?เ�?�?ม
 8001168:	4b10      	ldr	r3, [pc, #64]	; (80011ac <motorControl+0x68>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d10a      	bne.n	8001186 <motorControl+0x42>
				{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, RESET);
 8001170:	2200      	movs	r2, #0
 8001172:	2101      	movs	r1, #1
 8001174:	480e      	ldr	r0, [pc, #56]	; (80011b0 <motorControl+0x6c>)
 8001176:	f003 fa19 	bl	80045ac <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, PWM);
 800117a:	4b0e      	ldr	r3, [pc, #56]	; (80011b4 <motorControl+0x70>)
 800117c:	881a      	ldrh	r2, [r3, #0]
 800117e:	4b0e      	ldr	r3, [pc, #56]	; (80011b8 <motorControl+0x74>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, SET);
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, PWM);
		}

	}
}
 8001184:	e00d      	b.n	80011a2 <motorControl+0x5e>
		} else if (direction == 1) // ตามเ�?�?ม
 8001186:	4b09      	ldr	r3, [pc, #36]	; (80011ac <motorControl+0x68>)
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	2b01      	cmp	r3, #1
 800118c:	d109      	bne.n	80011a2 <motorControl+0x5e>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, SET);
 800118e:	2201      	movs	r2, #1
 8001190:	2101      	movs	r1, #1
 8001192:	4807      	ldr	r0, [pc, #28]	; (80011b0 <motorControl+0x6c>)
 8001194:	f003 fa0a 	bl	80045ac <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, PWM);
 8001198:	4b06      	ldr	r3, [pc, #24]	; (80011b4 <motorControl+0x70>)
 800119a:	881a      	ldrh	r2, [r3, #0]
 800119c:	4b06      	ldr	r3, [pc, #24]	; (80011b8 <motorControl+0x74>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	635a      	str	r2, [r3, #52]	; 0x34
}
 80011a2:	bf00      	nop
 80011a4:	bd98      	pop	{r3, r4, r7, pc}
 80011a6:	bf00      	nop
 80011a8:	20000ae8 	.word	0x20000ae8
 80011ac:	20000782 	.word	0x20000782
 80011b0:	48000800 	.word	0x48000800
 80011b4:	20000780 	.word	0x20000780
 80011b8:	20000348 	.word	0x20000348

080011bc <Communication>:

void Communication() {
 80011bc:	b5b0      	push	{r4, r5, r7, lr}
 80011be:	af00      	add	r7, sp, #0
	static uint16_t CommTime = 0;
	if (CommTime < micros()) {
 80011c0:	4b1c      	ldr	r3, [pc, #112]	; (8001234 <Communication+0x78>)
 80011c2:	881b      	ldrh	r3, [r3, #0]
 80011c4:	b29b      	uxth	r3, r3
 80011c6:	2200      	movs	r2, #0
 80011c8:	461c      	mov	r4, r3
 80011ca:	4615      	mov	r5, r2
 80011cc:	f7ff fecc 	bl	8000f68 <micros>
 80011d0:	4602      	mov	r2, r0
 80011d2:	460b      	mov	r3, r1
 80011d4:	4294      	cmp	r4, r2
 80011d6:	eb75 0303 	sbcs.w	r3, r5, r3
 80011da:	d228      	bcs.n	800122e <Communication+0x72>
		CommTime = micros() + 5000;
 80011dc:	f7ff fec4 	bl	8000f68 <micros>
 80011e0:	4602      	mov	r2, r0
 80011e2:	460b      	mov	r3, r1
 80011e4:	b293      	uxth	r3, r2
 80011e6:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80011ea:	3308      	adds	r3, #8
 80011ec:	b29a      	uxth	r2, r3
 80011ee:	4b11      	ldr	r3, [pc, #68]	; (8001234 <Communication+0x78>)
 80011f0:	801a      	strh	r2, [r3, #0]
		HigherPos = (uint8_t) (avgEncode >> 8);
 80011f2:	4b11      	ldr	r3, [pc, #68]	; (8001238 <Communication+0x7c>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	0a1b      	lsrs	r3, r3, #8
 80011f8:	b2da      	uxtb	r2, r3
 80011fa:	4b10      	ldr	r3, [pc, #64]	; (800123c <Communication+0x80>)
 80011fc:	701a      	strb	r2, [r3, #0]
		LowerPos = (uint8_t) avgEncode;
 80011fe:	4b0e      	ldr	r3, [pc, #56]	; (8001238 <Communication+0x7c>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	b2da      	uxtb	r2, r3
 8001204:	4b0e      	ldr	r3, [pc, #56]	; (8001240 <Communication+0x84>)
 8001206:	701a      	strb	r2, [r3, #0]
		TxBuffer[0] = 69;
 8001208:	4b0e      	ldr	r3, [pc, #56]	; (8001244 <Communication+0x88>)
 800120a:	2245      	movs	r2, #69	; 0x45
 800120c:	701a      	strb	r2, [r3, #0]
		TxBuffer[1] = HigherPos;
 800120e:	4b0b      	ldr	r3, [pc, #44]	; (800123c <Communication+0x80>)
 8001210:	781a      	ldrb	r2, [r3, #0]
 8001212:	4b0c      	ldr	r3, [pc, #48]	; (8001244 <Communication+0x88>)
 8001214:	705a      	strb	r2, [r3, #1]
		TxBuffer[2] = LowerPos;
 8001216:	4b0a      	ldr	r3, [pc, #40]	; (8001240 <Communication+0x84>)
 8001218:	781a      	ldrb	r2, [r3, #0]
 800121a:	4b0a      	ldr	r3, [pc, #40]	; (8001244 <Communication+0x88>)
 800121c:	709a      	strb	r2, [r3, #2]
		TxBuffer[3] = 10;
 800121e:	4b09      	ldr	r3, [pc, #36]	; (8001244 <Communication+0x88>)
 8001220:	220a      	movs	r2, #10
 8001222:	70da      	strb	r2, [r3, #3]
		HAL_UART_Transmit_DMA(&hlpuart1, TxBuffer, 4);
 8001224:	2204      	movs	r2, #4
 8001226:	4907      	ldr	r1, [pc, #28]	; (8001244 <Communication+0x88>)
 8001228:	4807      	ldr	r0, [pc, #28]	; (8001248 <Communication+0x8c>)
 800122a:	f006 f819 	bl	8007260 <HAL_UART_Transmit_DMA>
	}
}
 800122e:	bf00      	nop
 8001230:	bdb0      	pop	{r4, r5, r7, pc}
 8001232:	bf00      	nop
 8001234:	20000aea 	.word	0x20000aea
 8001238:	20000768 	.word	0x20000768
 800123c:	2000079c 	.word	0x2000079c
 8001240:	2000079d 	.word	0x2000079d
 8001244:	20000794 	.word	0x20000794
 8001248:	20000110 	.word	0x20000110

0800124c <PIDcalculate>:

void PIDcalculate() {
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
	/* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
	cmd = cmd_1 + A0 * Error + A1 * Error_1 + A2 * Error_2;
 8001250:	4b3b      	ldr	r3, [pc, #236]	; (8001340 <PIDcalculate+0xf4>)
 8001252:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001256:	ee07 3a90 	vmov	s15, r3
 800125a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800125e:	4b39      	ldr	r3, [pc, #228]	; (8001344 <PIDcalculate+0xf8>)
 8001260:	edd3 7a00 	vldr	s15, [r3]
 8001264:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001268:	4b37      	ldr	r3, [pc, #220]	; (8001348 <PIDcalculate+0xfc>)
 800126a:	edd3 7a00 	vldr	s15, [r3]
 800126e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001272:	4b36      	ldr	r3, [pc, #216]	; (800134c <PIDcalculate+0x100>)
 8001274:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001278:	ee07 3a90 	vmov	s15, r3
 800127c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001280:	4b33      	ldr	r3, [pc, #204]	; (8001350 <PIDcalculate+0x104>)
 8001282:	edd3 7a00 	vldr	s15, [r3]
 8001286:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800128a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800128e:	4b31      	ldr	r3, [pc, #196]	; (8001354 <PIDcalculate+0x108>)
 8001290:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001294:	ee07 3a90 	vmov	s15, r3
 8001298:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800129c:	4b2e      	ldr	r3, [pc, #184]	; (8001358 <PIDcalculate+0x10c>)
 800129e:	edd3 7a00 	vldr	s15, [r3]
 80012a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012aa:	4b2c      	ldr	r3, [pc, #176]	; (800135c <PIDcalculate+0x110>)
 80012ac:	edc3 7a00 	vstr	s15, [r3]
	if (cmd > 1000 && direction == 1) // ตามเ�?�?ม Anti windup
 80012b0:	4b2a      	ldr	r3, [pc, #168]	; (800135c <PIDcalculate+0x110>)
 80012b2:	edd3 7a00 	vldr	s15, [r3]
 80012b6:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8001360 <PIDcalculate+0x114>
 80012ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012c2:	dd0a      	ble.n	80012da <PIDcalculate+0x8e>
 80012c4:	4b27      	ldr	r3, [pc, #156]	; (8001364 <PIDcalculate+0x118>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d106      	bne.n	80012da <PIDcalculate+0x8e>
			{
		cmd = 1000;
 80012cc:	4b23      	ldr	r3, [pc, #140]	; (800135c <PIDcalculate+0x110>)
 80012ce:	4a26      	ldr	r2, [pc, #152]	; (8001368 <PIDcalculate+0x11c>)
 80012d0:	601a      	str	r2, [r3, #0]
		direction = 1;
 80012d2:	4b24      	ldr	r3, [pc, #144]	; (8001364 <PIDcalculate+0x118>)
 80012d4:	2201      	movs	r2, #1
 80012d6:	701a      	strb	r2, [r3, #0]
 80012d8:	e013      	b.n	8001302 <PIDcalculate+0xb6>
	} else if (cmd < -1000 && direction == 0) // ทว�?เ�?�?ม
 80012da:	4b20      	ldr	r3, [pc, #128]	; (800135c <PIDcalculate+0x110>)
 80012dc:	edd3 7a00 	vldr	s15, [r3]
 80012e0:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800136c <PIDcalculate+0x120>
 80012e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ec:	d509      	bpl.n	8001302 <PIDcalculate+0xb6>
 80012ee:	4b1d      	ldr	r3, [pc, #116]	; (8001364 <PIDcalculate+0x118>)
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d105      	bne.n	8001302 <PIDcalculate+0xb6>
			{
		cmd = -1000;
 80012f6:	4b19      	ldr	r3, [pc, #100]	; (800135c <PIDcalculate+0x110>)
 80012f8:	4a1d      	ldr	r2, [pc, #116]	; (8001370 <PIDcalculate+0x124>)
 80012fa:	601a      	str	r2, [r3, #0]
		direction = 0;
 80012fc:	4b19      	ldr	r3, [pc, #100]	; (8001364 <PIDcalculate+0x118>)
 80012fe:	2200      	movs	r2, #0
 8001300:	701a      	strb	r2, [r3, #0]
	}
	cmd_1 = cmd;
 8001302:	4b16      	ldr	r3, [pc, #88]	; (800135c <PIDcalculate+0x110>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4a10      	ldr	r2, [pc, #64]	; (8001348 <PIDcalculate+0xfc>)
 8001308:	6013      	str	r3, [r2, #0]
	Error_2 = Error_1;
 800130a:	4b10      	ldr	r3, [pc, #64]	; (800134c <PIDcalculate+0x100>)
 800130c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001310:	4b10      	ldr	r3, [pc, #64]	; (8001354 <PIDcalculate+0x108>)
 8001312:	801a      	strh	r2, [r3, #0]
	Error_1 = Error;
 8001314:	4b0a      	ldr	r3, [pc, #40]	; (8001340 <PIDcalculate+0xf4>)
 8001316:	f9b3 2000 	ldrsh.w	r2, [r3]
 800131a:	4b0c      	ldr	r3, [pc, #48]	; (800134c <PIDcalculate+0x100>)
 800131c:	801a      	strh	r2, [r3, #0]

	PWM = fabs(cmd);
 800131e:	4b0f      	ldr	r3, [pc, #60]	; (800135c <PIDcalculate+0x110>)
 8001320:	edd3 7a00 	vldr	s15, [r3]
 8001324:	eef0 7ae7 	vabs.f32	s15, s15
 8001328:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800132c:	ee17 3a90 	vmov	r3, s15
 8001330:	b29a      	uxth	r2, r3
 8001332:	4b10      	ldr	r3, [pc, #64]	; (8001374 <PIDcalculate+0x128>)
 8001334:	801a      	strh	r2, [r3, #0]
}
 8001336:	bf00      	nop
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr
 8001340:	20000778 	.word	0x20000778
 8001344:	20000788 	.word	0x20000788
 8001348:	20000774 	.word	0x20000774
 800134c:	2000077a 	.word	0x2000077a
 8001350:	2000078c 	.word	0x2000078c
 8001354:	2000077c 	.word	0x2000077c
 8001358:	20000790 	.word	0x20000790
 800135c:	20000770 	.word	0x20000770
 8001360:	447a0000 	.word	0x447a0000
 8001364:	20000782 	.word	0x20000782
 8001368:	447a0000 	.word	0x447a0000
 800136c:	c47a0000 	.word	0xc47a0000
 8001370:	c47a0000 	.word	0xc47a0000
 8001374:	20000780 	.word	0x20000780

08001378 <UARTDMAconfig>:

void UARTDMAconfig() {
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(&hlpuart1, RxBuffer, 4);
 800137c:	2204      	movs	r2, #4
 800137e:	4903      	ldr	r1, [pc, #12]	; (800138c <UARTDMAconfig+0x14>)
 8001380:	4803      	ldr	r0, [pc, #12]	; (8001390 <UARTDMAconfig+0x18>)
 8001382:	f005 ffed 	bl	8007360 <HAL_UART_Receive_DMA>
}
 8001386:	bf00      	nop
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	20000798 	.word	0x20000798
 8001390:	20000110 	.word	0x20000110

08001394 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *uart) {
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]

}
 800139c:	bf00      	nop
 800139e:	370c      	adds	r7, #12
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr

080013a8 <motor>:
//------------------------------------------------------------------------------//
//----------------------------------Part2:QEI-----------------------------------//
void motor() {
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
	x = (period / 100) * duty;
 80013ac:	4b28      	ldr	r3, [pc, #160]	; (8001450 <motor+0xa8>)
 80013ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013b2:	4a28      	ldr	r2, [pc, #160]	; (8001454 <motor+0xac>)
 80013b4:	fb82 1203 	smull	r1, r2, r2, r3
 80013b8:	1152      	asrs	r2, r2, #5
 80013ba:	17db      	asrs	r3, r3, #31
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	b21b      	sxth	r3, r3
 80013c0:	b29a      	uxth	r2, r3
 80013c2:	4b25      	ldr	r3, [pc, #148]	; (8001458 <motor+0xb0>)
 80013c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013c8:	b29b      	uxth	r3, r3
 80013ca:	fb12 f303 	smulbb	r3, r2, r3
 80013ce:	b29b      	uxth	r3, r3
 80013d0:	b21a      	sxth	r2, r3
 80013d2:	4b22      	ldr	r3, [pc, #136]	; (800145c <motor+0xb4>)
 80013d4:	801a      	strh	r2, [r3, #0]

	if (duty > 0) {
 80013d6:	4b20      	ldr	r3, [pc, #128]	; (8001458 <motor+0xb0>)
 80013d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	dd09      	ble.n	80013f4 <motor+0x4c>
		InA = x;
 80013e0:	4b1e      	ldr	r3, [pc, #120]	; (800145c <motor+0xb4>)
 80013e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013e6:	461a      	mov	r2, r3
 80013e8:	4b1d      	ldr	r3, [pc, #116]	; (8001460 <motor+0xb8>)
 80013ea:	601a      	str	r2, [r3, #0]
		InB = 0;
 80013ec:	4b1d      	ldr	r3, [pc, #116]	; (8001464 <motor+0xbc>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	601a      	str	r2, [r3, #0]
 80013f2:	e01d      	b.n	8001430 <motor+0x88>
	}

	else if (duty < 0) {
 80013f4:	4b18      	ldr	r3, [pc, #96]	; (8001458 <motor+0xb0>)
 80013f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	da0d      	bge.n	800141a <motor+0x72>
		InA = 0;
 80013fe:	4b18      	ldr	r3, [pc, #96]	; (8001460 <motor+0xb8>)
 8001400:	2200      	movs	r2, #0
 8001402:	601a      	str	r2, [r3, #0]
		InB = abs(x);
 8001404:	4b15      	ldr	r3, [pc, #84]	; (800145c <motor+0xb4>)
 8001406:	f9b3 3000 	ldrsh.w	r3, [r3]
 800140a:	2b00      	cmp	r3, #0
 800140c:	bfb8      	it	lt
 800140e:	425b      	neglt	r3, r3
 8001410:	b29b      	uxth	r3, r3
 8001412:	461a      	mov	r2, r3
 8001414:	4b13      	ldr	r3, [pc, #76]	; (8001464 <motor+0xbc>)
 8001416:	601a      	str	r2, [r3, #0]
 8001418:	e00a      	b.n	8001430 <motor+0x88>
	}

	else if (duty == 0) {
 800141a:	4b0f      	ldr	r3, [pc, #60]	; (8001458 <motor+0xb0>)
 800141c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d105      	bne.n	8001430 <motor+0x88>
		InA = 0;
 8001424:	4b0e      	ldr	r3, [pc, #56]	; (8001460 <motor+0xb8>)
 8001426:	2200      	movs	r2, #0
 8001428:	601a      	str	r2, [r3, #0]
		InB = 0;
 800142a:	4b0e      	ldr	r3, [pc, #56]	; (8001464 <motor+0xbc>)
 800142c:	2200      	movs	r2, #0
 800142e:	601a      	str	r2, [r3, #0]
	}

	//__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, InA);
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, InA);
 8001430:	4b0b      	ldr	r3, [pc, #44]	; (8001460 <motor+0xb8>)
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	4b0c      	ldr	r3, [pc, #48]	; (8001468 <motor+0xc0>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, InB);
 800143a:	4b0a      	ldr	r3, [pc, #40]	; (8001464 <motor+0xbc>)
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	4b0a      	ldr	r3, [pc, #40]	; (8001468 <motor+0xc0>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001444:	bf00      	nop
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	20000010 	.word	0x20000010
 8001454:	51eb851f 	.word	0x51eb851f
 8001458:	20000acc 	.word	0x20000acc
 800145c:	20000ace 	.word	0x20000ace
 8001460:	20000ac4 	.word	0x20000ac4
 8001464:	20000ac8 	.word	0x20000ac8
 8001468:	20000264 	.word	0x20000264

0800146c <PID_QEI>:

void PID_QEI() {
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
//			error = directError;
//		} else {
//			error = wrappedError;
//		}

	error = avgTrimpot - (QEIReadRaw*4096)/3072;
 8001470:	4b31      	ldr	r3, [pc, #196]	; (8001538 <PID_QEI+0xcc>)
 8001472:	881a      	ldrh	r2, [r3, #0]
 8001474:	4b31      	ldr	r3, [pc, #196]	; (800153c <PID_QEI+0xd0>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	031b      	lsls	r3, r3, #12
 800147a:	4931      	ldr	r1, [pc, #196]	; (8001540 <PID_QEI+0xd4>)
 800147c:	fba1 1303 	umull	r1, r3, r1, r3
 8001480:	0adb      	lsrs	r3, r3, #11
 8001482:	b29b      	uxth	r3, r3
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	b29b      	uxth	r3, r3
 8001488:	b21a      	sxth	r2, r3
 800148a:	4b2e      	ldr	r3, [pc, #184]	; (8001544 <PID_QEI+0xd8>)
 800148c:	801a      	strh	r2, [r3, #0]
	sum_e = sum_e + error;
 800148e:	4b2d      	ldr	r3, [pc, #180]	; (8001544 <PID_QEI+0xd8>)
 8001490:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001494:	ee07 3a90 	vmov	s15, r3
 8001498:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800149c:	4b2a      	ldr	r3, [pc, #168]	; (8001548 <PID_QEI+0xdc>)
 800149e:	edd3 7a00 	vldr	s15, [r3]
 80014a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014a6:	4b28      	ldr	r3, [pc, #160]	; (8001548 <PID_QEI+0xdc>)
 80014a8:	edc3 7a00 	vstr	s15, [r3]
	u = (Kp_QEI * error) + (Ki_QEI * sum_e) + (Kd_QEI * (error - error_p));
 80014ac:	4b25      	ldr	r3, [pc, #148]	; (8001544 <PID_QEI+0xd8>)
 80014ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014b2:	ee07 3a90 	vmov	s15, r3
 80014b6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014ba:	4b24      	ldr	r3, [pc, #144]	; (800154c <PID_QEI+0xe0>)
 80014bc:	edd3 7a00 	vldr	s15, [r3]
 80014c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014c4:	4b22      	ldr	r3, [pc, #136]	; (8001550 <PID_QEI+0xe4>)
 80014c6:	edd3 6a00 	vldr	s13, [r3]
 80014ca:	4b1f      	ldr	r3, [pc, #124]	; (8001548 <PID_QEI+0xdc>)
 80014cc:	edd3 7a00 	vldr	s15, [r3]
 80014d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014d8:	4b1a      	ldr	r3, [pc, #104]	; (8001544 <PID_QEI+0xd8>)
 80014da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014de:	ee07 3a90 	vmov	s15, r3
 80014e2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80014e6:	4b1b      	ldr	r3, [pc, #108]	; (8001554 <PID_QEI+0xe8>)
 80014e8:	edd3 7a00 	vldr	s15, [r3]
 80014ec:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80014f0:	4b19      	ldr	r3, [pc, #100]	; (8001558 <PID_QEI+0xec>)
 80014f2:	edd3 7a00 	vldr	s15, [r3]
 80014f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014fe:	4b17      	ldr	r3, [pc, #92]	; (800155c <PID_QEI+0xf0>)
 8001500:	edc3 7a00 	vstr	s15, [r3]
	duty = u;
 8001504:	4b15      	ldr	r3, [pc, #84]	; (800155c <PID_QEI+0xf0>)
 8001506:	edd3 7a00 	vldr	s15, [r3]
 800150a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800150e:	ee17 3a90 	vmov	r3, s15
 8001512:	b21a      	sxth	r2, r3
 8001514:	4b12      	ldr	r3, [pc, #72]	; (8001560 <PID_QEI+0xf4>)
 8001516:	801a      	strh	r2, [r3, #0]
	error_p = error;
 8001518:	4b0a      	ldr	r3, [pc, #40]	; (8001544 <PID_QEI+0xd8>)
 800151a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800151e:	ee07 3a90 	vmov	s15, r3
 8001522:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001526:	4b0b      	ldr	r3, [pc, #44]	; (8001554 <PID_QEI+0xe8>)
 8001528:	edc3 7a00 	vstr	s15, [r3]
}
 800152c:	bf00      	nop
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	2000076c 	.word	0x2000076c
 800153c:	200007a0 	.word	0x200007a0
 8001540:	aaaaaaab 	.word	0xaaaaaaab
 8001544:	20000ad0 	.word	0x20000ad0
 8001548:	20000ad4 	.word	0x20000ad4
 800154c:	20000014 	.word	0x20000014
 8001550:	20000ad8 	.word	0x20000ad8
 8001554:	20000ae0 	.word	0x20000ae0
 8001558:	20000adc 	.word	0x20000adc
 800155c:	20000ae4 	.word	0x20000ae4
 8001560:	20000acc 	.word	0x20000acc

08001564 <HAL_GPIO_EXTI_Callback>:
//-------------------------------------------------------------------------------//
//-------------------------------------Mode--------------------------------------//
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001564:	b480      	push	{r7}
 8001566:	b085      	sub	sp, #20
 8001568:	af00      	add	r7, sp, #0
 800156a:	4603      	mov	r3, r0
 800156c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_13) {
 800156e:	88fb      	ldrh	r3, [r7, #6]
 8001570:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001574:	d116      	bne.n	80015a4 <HAL_GPIO_EXTI_Callback+0x40>
		int pre_mode_status = mode_status;
 8001576:	4b0e      	ldr	r3, [pc, #56]	; (80015b0 <HAL_GPIO_EXTI_Callback+0x4c>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	60fb      	str	r3, [r7, #12]
		if (pre_mode_status == 3) {
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	2b03      	cmp	r3, #3
 8001580:	d103      	bne.n	800158a <HAL_GPIO_EXTI_Callback+0x26>
			mode_status = 1;
 8001582:	4b0b      	ldr	r3, [pc, #44]	; (80015b0 <HAL_GPIO_EXTI_Callback+0x4c>)
 8001584:	2201      	movs	r2, #1
 8001586:	601a      	str	r2, [r3, #0]
			mode_status = 2;
		} else if (pre_mode_status == 2) {
			mode_status = 3;
		}
	}
}
 8001588:	e00c      	b.n	80015a4 <HAL_GPIO_EXTI_Callback+0x40>
		} else if (pre_mode_status == 1) {
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	2b01      	cmp	r3, #1
 800158e:	d103      	bne.n	8001598 <HAL_GPIO_EXTI_Callback+0x34>
			mode_status = 2;
 8001590:	4b07      	ldr	r3, [pc, #28]	; (80015b0 <HAL_GPIO_EXTI_Callback+0x4c>)
 8001592:	2202      	movs	r2, #2
 8001594:	601a      	str	r2, [r3, #0]
}
 8001596:	e005      	b.n	80015a4 <HAL_GPIO_EXTI_Callback+0x40>
		} else if (pre_mode_status == 2) {
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	2b02      	cmp	r3, #2
 800159c:	d102      	bne.n	80015a4 <HAL_GPIO_EXTI_Callback+0x40>
			mode_status = 3;
 800159e:	4b04      	ldr	r3, [pc, #16]	; (80015b0 <HAL_GPIO_EXTI_Callback+0x4c>)
 80015a0:	2203      	movs	r2, #3
 80015a2:	601a      	str	r2, [r3, #0]
}
 80015a4:	bf00      	nop
 80015a6:	3714      	adds	r7, #20
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr
 80015b0:	20000000 	.word	0x20000000

080015b4 <Mode_LD2>:
void Mode_LD2() {
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
	if (mode_status == 1) {
 80015b8:	4b17      	ldr	r3, [pc, #92]	; (8001618 <Mode_LD2+0x64>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d106      	bne.n	80015ce <Mode_LD2+0x1a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET); //เปิดไฟ
 80015c0:	2201      	movs	r2, #1
 80015c2:	2120      	movs	r1, #32
 80015c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015c8:	f002 fff0 	bl	80045ac <HAL_GPIO_WritePin>
		if (timestamp <= HAL_GetTick()) {
			timestamp = HAL_GetTick() + 1000;
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5); // สลับสถานะของ LED
		}
	}
}
 80015cc:	e021      	b.n	8001612 <Mode_LD2+0x5e>
	} else if (mode_status == 2) {
 80015ce:	4b12      	ldr	r3, [pc, #72]	; (8001618 <Mode_LD2+0x64>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	2b02      	cmp	r3, #2
 80015d4:	d106      	bne.n	80015e4 <Mode_LD2+0x30>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET); //เปิดไฟ
 80015d6:	2200      	movs	r2, #0
 80015d8:	2120      	movs	r1, #32
 80015da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015de:	f002 ffe5 	bl	80045ac <HAL_GPIO_WritePin>
}
 80015e2:	e016      	b.n	8001612 <Mode_LD2+0x5e>
	} else if (mode_status == 3) {
 80015e4:	4b0c      	ldr	r3, [pc, #48]	; (8001618 <Mode_LD2+0x64>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	2b03      	cmp	r3, #3
 80015ea:	d112      	bne.n	8001612 <Mode_LD2+0x5e>
		if (timestamp <= HAL_GetTick()) {
 80015ec:	f000 fbec 	bl	8001dc8 <HAL_GetTick>
 80015f0:	4602      	mov	r2, r0
 80015f2:	4b0a      	ldr	r3, [pc, #40]	; (800161c <Mode_LD2+0x68>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	429a      	cmp	r2, r3
 80015f8:	d30b      	bcc.n	8001612 <Mode_LD2+0x5e>
			timestamp = HAL_GetTick() + 1000;
 80015fa:	f000 fbe5 	bl	8001dc8 <HAL_GetTick>
 80015fe:	4603      	mov	r3, r0
 8001600:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001604:	4a05      	ldr	r2, [pc, #20]	; (800161c <Mode_LD2+0x68>)
 8001606:	6013      	str	r3, [r2, #0]
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5); // สลับสถานะของ LED
 8001608:	2120      	movs	r1, #32
 800160a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800160e:	f002 ffe5 	bl	80045dc <HAL_GPIO_TogglePin>
}
 8001612:	bf00      	nop
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	20000000 	.word	0x20000000
 800161c:	20000aec 	.word	0x20000aec

08001620 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001624:	b672      	cpsid	i
}
 8001626:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001628:	e7fe      	b.n	8001628 <Error_Handler+0x8>
	...

0800162c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001632:	4b0f      	ldr	r3, [pc, #60]	; (8001670 <HAL_MspInit+0x44>)
 8001634:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001636:	4a0e      	ldr	r2, [pc, #56]	; (8001670 <HAL_MspInit+0x44>)
 8001638:	f043 0301 	orr.w	r3, r3, #1
 800163c:	6613      	str	r3, [r2, #96]	; 0x60
 800163e:	4b0c      	ldr	r3, [pc, #48]	; (8001670 <HAL_MspInit+0x44>)
 8001640:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001642:	f003 0301 	and.w	r3, r3, #1
 8001646:	607b      	str	r3, [r7, #4]
 8001648:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800164a:	4b09      	ldr	r3, [pc, #36]	; (8001670 <HAL_MspInit+0x44>)
 800164c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800164e:	4a08      	ldr	r2, [pc, #32]	; (8001670 <HAL_MspInit+0x44>)
 8001650:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001654:	6593      	str	r3, [r2, #88]	; 0x58
 8001656:	4b06      	ldr	r3, [pc, #24]	; (8001670 <HAL_MspInit+0x44>)
 8001658:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800165a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800165e:	603b      	str	r3, [r7, #0]
 8001660:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001662:	f003 f891 	bl	8004788 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001666:	bf00      	nop
 8001668:	3708      	adds	r7, #8
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	40021000 	.word	0x40021000

08001674 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b0a0      	sub	sp, #128	; 0x80
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800167c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001680:	2200      	movs	r2, #0
 8001682:	601a      	str	r2, [r3, #0]
 8001684:	605a      	str	r2, [r3, #4]
 8001686:	609a      	str	r2, [r3, #8]
 8001688:	60da      	str	r2, [r3, #12]
 800168a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800168c:	f107 0318 	add.w	r3, r7, #24
 8001690:	2254      	movs	r2, #84	; 0x54
 8001692:	2100      	movs	r1, #0
 8001694:	4618      	mov	r0, r3
 8001696:	f007 fabd 	bl	8008c14 <memset>
  if(hadc->Instance==ADC1)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80016a2:	d17f      	bne.n	80017a4 <HAL_ADC_MspInit+0x130>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80016a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80016a8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80016aa:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80016ae:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016b0:	f107 0318 	add.w	r3, r7, #24
 80016b4:	4618      	mov	r0, r3
 80016b6:	f003 fda5 	bl	8005204 <HAL_RCCEx_PeriphCLKConfig>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80016c0:	f7ff ffae 	bl	8001620 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80016c4:	4b39      	ldr	r3, [pc, #228]	; (80017ac <HAL_ADC_MspInit+0x138>)
 80016c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016c8:	4a38      	ldr	r2, [pc, #224]	; (80017ac <HAL_ADC_MspInit+0x138>)
 80016ca:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80016ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016d0:	4b36      	ldr	r3, [pc, #216]	; (80017ac <HAL_ADC_MspInit+0x138>)
 80016d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016d8:	617b      	str	r3, [r7, #20]
 80016da:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016dc:	4b33      	ldr	r3, [pc, #204]	; (80017ac <HAL_ADC_MspInit+0x138>)
 80016de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016e0:	4a32      	ldr	r2, [pc, #200]	; (80017ac <HAL_ADC_MspInit+0x138>)
 80016e2:	f043 0304 	orr.w	r3, r3, #4
 80016e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016e8:	4b30      	ldr	r3, [pc, #192]	; (80017ac <HAL_ADC_MspInit+0x138>)
 80016ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ec:	f003 0304 	and.w	r3, r3, #4
 80016f0:	613b      	str	r3, [r7, #16]
 80016f2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016f4:	4b2d      	ldr	r3, [pc, #180]	; (80017ac <HAL_ADC_MspInit+0x138>)
 80016f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016f8:	4a2c      	ldr	r2, [pc, #176]	; (80017ac <HAL_ADC_MspInit+0x138>)
 80016fa:	f043 0301 	orr.w	r3, r3, #1
 80016fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001700:	4b2a      	ldr	r3, [pc, #168]	; (80017ac <HAL_ADC_MspInit+0x138>)
 8001702:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001704:	f003 0301 	and.w	r3, r3, #1
 8001708:	60fb      	str	r3, [r7, #12]
 800170a:	68fb      	ldr	r3, [r7, #12]
    PC1     ------> ADC1_IN7
    PC2     ------> ADC1_IN8
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 800170c:	2306      	movs	r3, #6
 800170e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001710:	2303      	movs	r3, #3
 8001712:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001714:	2300      	movs	r3, #0
 8001716:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001718:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800171c:	4619      	mov	r1, r3
 800171e:	4824      	ldr	r0, [pc, #144]	; (80017b0 <HAL_ADC_MspInit+0x13c>)
 8001720:	f002 fdc2 	bl	80042a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001724:	2303      	movs	r3, #3
 8001726:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001728:	2303      	movs	r3, #3
 800172a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172c:	2300      	movs	r3, #0
 800172e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001730:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001734:	4619      	mov	r1, r3
 8001736:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800173a:	f002 fdb5 	bl	80042a8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Channel1;
 800173e:	4b1d      	ldr	r3, [pc, #116]	; (80017b4 <HAL_ADC_MspInit+0x140>)
 8001740:	4a1d      	ldr	r2, [pc, #116]	; (80017b8 <HAL_ADC_MspInit+0x144>)
 8001742:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001744:	4b1b      	ldr	r3, [pc, #108]	; (80017b4 <HAL_ADC_MspInit+0x140>)
 8001746:	2205      	movs	r2, #5
 8001748:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800174a:	4b1a      	ldr	r3, [pc, #104]	; (80017b4 <HAL_ADC_MspInit+0x140>)
 800174c:	2200      	movs	r2, #0
 800174e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001750:	4b18      	ldr	r3, [pc, #96]	; (80017b4 <HAL_ADC_MspInit+0x140>)
 8001752:	2200      	movs	r2, #0
 8001754:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001756:	4b17      	ldr	r3, [pc, #92]	; (80017b4 <HAL_ADC_MspInit+0x140>)
 8001758:	2280      	movs	r2, #128	; 0x80
 800175a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800175c:	4b15      	ldr	r3, [pc, #84]	; (80017b4 <HAL_ADC_MspInit+0x140>)
 800175e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001762:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001764:	4b13      	ldr	r3, [pc, #76]	; (80017b4 <HAL_ADC_MspInit+0x140>)
 8001766:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800176a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800176c:	4b11      	ldr	r3, [pc, #68]	; (80017b4 <HAL_ADC_MspInit+0x140>)
 800176e:	2220      	movs	r2, #32
 8001770:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001772:	4b10      	ldr	r3, [pc, #64]	; (80017b4 <HAL_ADC_MspInit+0x140>)
 8001774:	2200      	movs	r2, #0
 8001776:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001778:	480e      	ldr	r0, [pc, #56]	; (80017b4 <HAL_ADC_MspInit+0x140>)
 800177a:	f002 fa63 	bl	8003c44 <HAL_DMA_Init>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <HAL_ADC_MspInit+0x114>
    {
      Error_Handler();
 8001784:	f7ff ff4c 	bl	8001620 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	4a0a      	ldr	r2, [pc, #40]	; (80017b4 <HAL_ADC_MspInit+0x140>)
 800178c:	655a      	str	r2, [r3, #84]	; 0x54
 800178e:	4a09      	ldr	r2, [pc, #36]	; (80017b4 <HAL_ADC_MspInit+0x140>)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001794:	2200      	movs	r2, #0
 8001796:	2100      	movs	r1, #0
 8001798:	2012      	movs	r0, #18
 800179a:	f002 fa1e 	bl	8003bda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800179e:	2012      	movs	r0, #18
 80017a0:	f002 fa35 	bl	8003c0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80017a4:	bf00      	nop
 80017a6:	3780      	adds	r7, #128	; 0x80
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	40021000 	.word	0x40021000
 80017b0:	48000800 	.word	0x48000800
 80017b4:	200000b0 	.word	0x200000b0
 80017b8:	40020408 	.word	0x40020408

080017bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b09e      	sub	sp, #120	; 0x78
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80017c8:	2200      	movs	r2, #0
 80017ca:	601a      	str	r2, [r3, #0]
 80017cc:	605a      	str	r2, [r3, #4]
 80017ce:	609a      	str	r2, [r3, #8]
 80017d0:	60da      	str	r2, [r3, #12]
 80017d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017d4:	f107 0310 	add.w	r3, r7, #16
 80017d8:	2254      	movs	r2, #84	; 0x54
 80017da:	2100      	movs	r1, #0
 80017dc:	4618      	mov	r0, r3
 80017de:	f007 fa19 	bl	8008c14 <memset>
  if(huart->Instance==LPUART1)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a4d      	ldr	r2, [pc, #308]	; (800191c <HAL_UART_MspInit+0x160>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	f040 8092 	bne.w	8001912 <HAL_UART_MspInit+0x156>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80017ee:	2320      	movs	r3, #32
 80017f0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80017f2:	2300      	movs	r3, #0
 80017f4:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017f6:	f107 0310 	add.w	r3, r7, #16
 80017fa:	4618      	mov	r0, r3
 80017fc:	f003 fd02 	bl	8005204 <HAL_RCCEx_PeriphCLKConfig>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001806:	f7ff ff0b 	bl	8001620 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800180a:	4b45      	ldr	r3, [pc, #276]	; (8001920 <HAL_UART_MspInit+0x164>)
 800180c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800180e:	4a44      	ldr	r2, [pc, #272]	; (8001920 <HAL_UART_MspInit+0x164>)
 8001810:	f043 0301 	orr.w	r3, r3, #1
 8001814:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001816:	4b42      	ldr	r3, [pc, #264]	; (8001920 <HAL_UART_MspInit+0x164>)
 8001818:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800181a:	f003 0301 	and.w	r3, r3, #1
 800181e:	60fb      	str	r3, [r7, #12]
 8001820:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001822:	4b3f      	ldr	r3, [pc, #252]	; (8001920 <HAL_UART_MspInit+0x164>)
 8001824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001826:	4a3e      	ldr	r2, [pc, #248]	; (8001920 <HAL_UART_MspInit+0x164>)
 8001828:	f043 0301 	orr.w	r3, r3, #1
 800182c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800182e:	4b3c      	ldr	r3, [pc, #240]	; (8001920 <HAL_UART_MspInit+0x164>)
 8001830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001832:	f003 0301 	and.w	r3, r3, #1
 8001836:	60bb      	str	r3, [r7, #8]
 8001838:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|LPUART1_RX_Pin;
 800183a:	230c      	movs	r3, #12
 800183c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800183e:	2302      	movs	r3, #2
 8001840:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001842:	2300      	movs	r3, #0
 8001844:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001846:	2300      	movs	r3, #0
 8001848:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 800184a:	230c      	movs	r3, #12
 800184c:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800184e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001852:	4619      	mov	r1, r3
 8001854:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001858:	f002 fd26 	bl	80042a8 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel1;
 800185c:	4b31      	ldr	r3, [pc, #196]	; (8001924 <HAL_UART_MspInit+0x168>)
 800185e:	4a32      	ldr	r2, [pc, #200]	; (8001928 <HAL_UART_MspInit+0x16c>)
 8001860:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8001862:	4b30      	ldr	r3, [pc, #192]	; (8001924 <HAL_UART_MspInit+0x168>)
 8001864:	2222      	movs	r2, #34	; 0x22
 8001866:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001868:	4b2e      	ldr	r3, [pc, #184]	; (8001924 <HAL_UART_MspInit+0x168>)
 800186a:	2200      	movs	r2, #0
 800186c:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800186e:	4b2d      	ldr	r3, [pc, #180]	; (8001924 <HAL_UART_MspInit+0x168>)
 8001870:	2200      	movs	r2, #0
 8001872:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001874:	4b2b      	ldr	r3, [pc, #172]	; (8001924 <HAL_UART_MspInit+0x168>)
 8001876:	2280      	movs	r2, #128	; 0x80
 8001878:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800187a:	4b2a      	ldr	r3, [pc, #168]	; (8001924 <HAL_UART_MspInit+0x168>)
 800187c:	2200      	movs	r2, #0
 800187e:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001880:	4b28      	ldr	r3, [pc, #160]	; (8001924 <HAL_UART_MspInit+0x168>)
 8001882:	2200      	movs	r2, #0
 8001884:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 8001886:	4b27      	ldr	r3, [pc, #156]	; (8001924 <HAL_UART_MspInit+0x168>)
 8001888:	2220      	movs	r2, #32
 800188a:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800188c:	4b25      	ldr	r3, [pc, #148]	; (8001924 <HAL_UART_MspInit+0x168>)
 800188e:	2200      	movs	r2, #0
 8001890:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8001892:	4824      	ldr	r0, [pc, #144]	; (8001924 <HAL_UART_MspInit+0x168>)
 8001894:	f002 f9d6 	bl	8003c44 <HAL_DMA_Init>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 800189e:	f7ff febf 	bl	8001620 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_lpuart1_rx);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4a1f      	ldr	r2, [pc, #124]	; (8001924 <HAL_UART_MspInit+0x168>)
 80018a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80018aa:	4a1e      	ldr	r2, [pc, #120]	; (8001924 <HAL_UART_MspInit+0x168>)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel2;
 80018b0:	4b1e      	ldr	r3, [pc, #120]	; (800192c <HAL_UART_MspInit+0x170>)
 80018b2:	4a1f      	ldr	r2, [pc, #124]	; (8001930 <HAL_UART_MspInit+0x174>)
 80018b4:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 80018b6:	4b1d      	ldr	r3, [pc, #116]	; (800192c <HAL_UART_MspInit+0x170>)
 80018b8:	2223      	movs	r2, #35	; 0x23
 80018ba:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80018bc:	4b1b      	ldr	r3, [pc, #108]	; (800192c <HAL_UART_MspInit+0x170>)
 80018be:	2210      	movs	r2, #16
 80018c0:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018c2:	4b1a      	ldr	r3, [pc, #104]	; (800192c <HAL_UART_MspInit+0x170>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80018c8:	4b18      	ldr	r3, [pc, #96]	; (800192c <HAL_UART_MspInit+0x170>)
 80018ca:	2280      	movs	r2, #128	; 0x80
 80018cc:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018ce:	4b17      	ldr	r3, [pc, #92]	; (800192c <HAL_UART_MspInit+0x170>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018d4:	4b15      	ldr	r3, [pc, #84]	; (800192c <HAL_UART_MspInit+0x170>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 80018da:	4b14      	ldr	r3, [pc, #80]	; (800192c <HAL_UART_MspInit+0x170>)
 80018dc:	2200      	movs	r2, #0
 80018de:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80018e0:	4b12      	ldr	r3, [pc, #72]	; (800192c <HAL_UART_MspInit+0x170>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 80018e6:	4811      	ldr	r0, [pc, #68]	; (800192c <HAL_UART_MspInit+0x170>)
 80018e8:	f002 f9ac 	bl	8003c44 <HAL_DMA_Init>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 80018f2:	f7ff fe95 	bl	8001620 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4a0c      	ldr	r2, [pc, #48]	; (800192c <HAL_UART_MspInit+0x170>)
 80018fa:	67da      	str	r2, [r3, #124]	; 0x7c
 80018fc:	4a0b      	ldr	r2, [pc, #44]	; (800192c <HAL_UART_MspInit+0x170>)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8001902:	2200      	movs	r2, #0
 8001904:	2100      	movs	r1, #0
 8001906:	205b      	movs	r0, #91	; 0x5b
 8001908:	f002 f967 	bl	8003bda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 800190c:	205b      	movs	r0, #91	; 0x5b
 800190e:	f002 f97e 	bl	8003c0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8001912:	bf00      	nop
 8001914:	3778      	adds	r7, #120	; 0x78
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	40008000 	.word	0x40008000
 8001920:	40021000 	.word	0x40021000
 8001924:	200001a4 	.word	0x200001a4
 8001928:	40020008 	.word	0x40020008
 800192c:	20000204 	.word	0x20000204
 8001930:	4002001c 	.word	0x4002001c

08001934 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b084      	sub	sp, #16
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a16      	ldr	r2, [pc, #88]	; (800199c <HAL_TIM_PWM_MspInit+0x68>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d114      	bne.n	8001970 <HAL_TIM_PWM_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001946:	4b16      	ldr	r3, [pc, #88]	; (80019a0 <HAL_TIM_PWM_MspInit+0x6c>)
 8001948:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800194a:	4a15      	ldr	r2, [pc, #84]	; (80019a0 <HAL_TIM_PWM_MspInit+0x6c>)
 800194c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001950:	6613      	str	r3, [r2, #96]	; 0x60
 8001952:	4b13      	ldr	r3, [pc, #76]	; (80019a0 <HAL_TIM_PWM_MspInit+0x6c>)
 8001954:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001956:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800195a:	60fb      	str	r3, [r7, #12]
 800195c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 800195e:	2200      	movs	r2, #0
 8001960:	2100      	movs	r1, #0
 8001962:	2018      	movs	r0, #24
 8001964:	f002 f939 	bl	8003bda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001968:	2018      	movs	r0, #24
 800196a:	f002 f950 	bl	8003c0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800196e:	e010      	b.n	8001992 <HAL_TIM_PWM_MspInit+0x5e>
  else if(htim_pwm->Instance==TIM4)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a0b      	ldr	r2, [pc, #44]	; (80019a4 <HAL_TIM_PWM_MspInit+0x70>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d10b      	bne.n	8001992 <HAL_TIM_PWM_MspInit+0x5e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800197a:	4b09      	ldr	r3, [pc, #36]	; (80019a0 <HAL_TIM_PWM_MspInit+0x6c>)
 800197c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800197e:	4a08      	ldr	r2, [pc, #32]	; (80019a0 <HAL_TIM_PWM_MspInit+0x6c>)
 8001980:	f043 0304 	orr.w	r3, r3, #4
 8001984:	6593      	str	r3, [r2, #88]	; 0x58
 8001986:	4b06      	ldr	r3, [pc, #24]	; (80019a0 <HAL_TIM_PWM_MspInit+0x6c>)
 8001988:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800198a:	f003 0304 	and.w	r3, r3, #4
 800198e:	60bb      	str	r3, [r7, #8]
 8001990:	68bb      	ldr	r3, [r7, #8]
}
 8001992:	bf00      	nop
 8001994:	3710      	adds	r7, #16
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	40012c00 	.word	0x40012c00
 80019a0:	40021000 	.word	0x40021000
 80019a4:	40000800 	.word	0x40000800

080019a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b086      	sub	sp, #24
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019b8:	d114      	bne.n	80019e4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80019ba:	4b22      	ldr	r3, [pc, #136]	; (8001a44 <HAL_TIM_Base_MspInit+0x9c>)
 80019bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019be:	4a21      	ldr	r2, [pc, #132]	; (8001a44 <HAL_TIM_Base_MspInit+0x9c>)
 80019c0:	f043 0301 	orr.w	r3, r3, #1
 80019c4:	6593      	str	r3, [r2, #88]	; 0x58
 80019c6:	4b1f      	ldr	r3, [pc, #124]	; (8001a44 <HAL_TIM_Base_MspInit+0x9c>)
 80019c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ca:	f003 0301 	and.w	r3, r3, #1
 80019ce:	617b      	str	r3, [r7, #20]
 80019d0:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80019d2:	2200      	movs	r2, #0
 80019d4:	2100      	movs	r1, #0
 80019d6:	201c      	movs	r0, #28
 80019d8:	f002 f8ff 	bl	8003bda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80019dc:	201c      	movs	r0, #28
 80019de:	f002 f916 	bl	8003c0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80019e2:	e02a      	b.n	8001a3a <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM5)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a17      	ldr	r2, [pc, #92]	; (8001a48 <HAL_TIM_Base_MspInit+0xa0>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d10c      	bne.n	8001a08 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80019ee:	4b15      	ldr	r3, [pc, #84]	; (8001a44 <HAL_TIM_Base_MspInit+0x9c>)
 80019f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019f2:	4a14      	ldr	r2, [pc, #80]	; (8001a44 <HAL_TIM_Base_MspInit+0x9c>)
 80019f4:	f043 0308 	orr.w	r3, r3, #8
 80019f8:	6593      	str	r3, [r2, #88]	; 0x58
 80019fa:	4b12      	ldr	r3, [pc, #72]	; (8001a44 <HAL_TIM_Base_MspInit+0x9c>)
 80019fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019fe:	f003 0308 	and.w	r3, r3, #8
 8001a02:	613b      	str	r3, [r7, #16]
 8001a04:	693b      	ldr	r3, [r7, #16]
}
 8001a06:	e018      	b.n	8001a3a <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM15)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a0f      	ldr	r2, [pc, #60]	; (8001a4c <HAL_TIM_Base_MspInit+0xa4>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d113      	bne.n	8001a3a <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001a12:	4b0c      	ldr	r3, [pc, #48]	; (8001a44 <HAL_TIM_Base_MspInit+0x9c>)
 8001a14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a16:	4a0b      	ldr	r2, [pc, #44]	; (8001a44 <HAL_TIM_Base_MspInit+0x9c>)
 8001a18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a1c:	6613      	str	r3, [r2, #96]	; 0x60
 8001a1e:	4b09      	ldr	r3, [pc, #36]	; (8001a44 <HAL_TIM_Base_MspInit+0x9c>)
 8001a20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a26:	60fb      	str	r3, [r7, #12]
 8001a28:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	2100      	movs	r1, #0
 8001a2e:	2018      	movs	r0, #24
 8001a30:	f002 f8d3 	bl	8003bda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001a34:	2018      	movs	r0, #24
 8001a36:	f002 f8ea 	bl	8003c0e <HAL_NVIC_EnableIRQ>
}
 8001a3a:	bf00      	nop
 8001a3c:	3718      	adds	r7, #24
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	40021000 	.word	0x40021000
 8001a48:	40000c00 	.word	0x40000c00
 8001a4c:	40014000 	.word	0x40014000

08001a50 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b08a      	sub	sp, #40	; 0x28
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a58:	f107 0314 	add.w	r3, r7, #20
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]
 8001a60:	605a      	str	r2, [r3, #4]
 8001a62:	609a      	str	r2, [r3, #8]
 8001a64:	60da      	str	r2, [r3, #12]
 8001a66:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a17      	ldr	r2, [pc, #92]	; (8001acc <HAL_TIM_Encoder_MspInit+0x7c>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d128      	bne.n	8001ac4 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a72:	4b17      	ldr	r3, [pc, #92]	; (8001ad0 <HAL_TIM_Encoder_MspInit+0x80>)
 8001a74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a76:	4a16      	ldr	r2, [pc, #88]	; (8001ad0 <HAL_TIM_Encoder_MspInit+0x80>)
 8001a78:	f043 0302 	orr.w	r3, r3, #2
 8001a7c:	6593      	str	r3, [r2, #88]	; 0x58
 8001a7e:	4b14      	ldr	r3, [pc, #80]	; (8001ad0 <HAL_TIM_Encoder_MspInit+0x80>)
 8001a80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a82:	f003 0302 	and.w	r3, r3, #2
 8001a86:	613b      	str	r3, [r7, #16]
 8001a88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a8a:	4b11      	ldr	r3, [pc, #68]	; (8001ad0 <HAL_TIM_Encoder_MspInit+0x80>)
 8001a8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a8e:	4a10      	ldr	r2, [pc, #64]	; (8001ad0 <HAL_TIM_Encoder_MspInit+0x80>)
 8001a90:	f043 0301 	orr.w	r3, r3, #1
 8001a94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a96:	4b0e      	ldr	r3, [pc, #56]	; (8001ad0 <HAL_TIM_Encoder_MspInit+0x80>)
 8001a98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a9a:	f003 0301 	and.w	r3, r3, #1
 8001a9e:	60fb      	str	r3, [r7, #12]
 8001aa0:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001aa2:	23c0      	movs	r3, #192	; 0xc0
 8001aa4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa6:	2302      	movs	r3, #2
 8001aa8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001ab2:	2302      	movs	r3, #2
 8001ab4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ab6:	f107 0314 	add.w	r3, r7, #20
 8001aba:	4619      	mov	r1, r3
 8001abc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ac0:	f002 fbf2 	bl	80042a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001ac4:	bf00      	nop
 8001ac6:	3728      	adds	r7, #40	; 0x28
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	40000400 	.word	0x40000400
 8001ad0:	40021000 	.word	0x40021000

08001ad4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b08a      	sub	sp, #40	; 0x28
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001adc:	f107 0314 	add.w	r3, r7, #20
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	601a      	str	r2, [r3, #0]
 8001ae4:	605a      	str	r2, [r3, #4]
 8001ae6:	609a      	str	r2, [r3, #8]
 8001ae8:	60da      	str	r2, [r3, #12]
 8001aea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a23      	ldr	r2, [pc, #140]	; (8001b80 <HAL_TIM_MspPostInit+0xac>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d11e      	bne.n	8001b34 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001af6:	4b23      	ldr	r3, [pc, #140]	; (8001b84 <HAL_TIM_MspPostInit+0xb0>)
 8001af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001afa:	4a22      	ldr	r2, [pc, #136]	; (8001b84 <HAL_TIM_MspPostInit+0xb0>)
 8001afc:	f043 0301 	orr.w	r3, r3, #1
 8001b00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b02:	4b20      	ldr	r3, [pc, #128]	; (8001b84 <HAL_TIM_MspPostInit+0xb0>)
 8001b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b06:	f003 0301 	and.w	r3, r3, #1
 8001b0a:	613b      	str	r3, [r7, #16]
 8001b0c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001b0e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b14:	2302      	movs	r3, #2
 8001b16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001b20:	2306      	movs	r3, #6
 8001b22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b24:	f107 0314 	add.w	r3, r7, #20
 8001b28:	4619      	mov	r1, r3
 8001b2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b2e:	f002 fbbb 	bl	80042a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001b32:	e020      	b.n	8001b76 <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM4)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a13      	ldr	r2, [pc, #76]	; (8001b88 <HAL_TIM_MspPostInit+0xb4>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d11b      	bne.n	8001b76 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b3e:	4b11      	ldr	r3, [pc, #68]	; (8001b84 <HAL_TIM_MspPostInit+0xb0>)
 8001b40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b42:	4a10      	ldr	r2, [pc, #64]	; (8001b84 <HAL_TIM_MspPostInit+0xb0>)
 8001b44:	f043 0302 	orr.w	r3, r3, #2
 8001b48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b4a:	4b0e      	ldr	r3, [pc, #56]	; (8001b84 <HAL_TIM_MspPostInit+0xb0>)
 8001b4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b4e:	f003 0302 	and.w	r3, r3, #2
 8001b52:	60fb      	str	r3, [r7, #12]
 8001b54:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001b56:	2340      	movs	r3, #64	; 0x40
 8001b58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b5a:	2302      	movs	r3, #2
 8001b5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b62:	2300      	movs	r3, #0
 8001b64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001b66:	2302      	movs	r3, #2
 8001b68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b6a:	f107 0314 	add.w	r3, r7, #20
 8001b6e:	4619      	mov	r1, r3
 8001b70:	4806      	ldr	r0, [pc, #24]	; (8001b8c <HAL_TIM_MspPostInit+0xb8>)
 8001b72:	f002 fb99 	bl	80042a8 <HAL_GPIO_Init>
}
 8001b76:	bf00      	nop
 8001b78:	3728      	adds	r7, #40	; 0x28
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	40012c00 	.word	0x40012c00
 8001b84:	40021000 	.word	0x40021000
 8001b88:	40000800 	.word	0x40000800
 8001b8c:	48000400 	.word	0x48000400

08001b90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b94:	e7fe      	b.n	8001b94 <NMI_Handler+0x4>

08001b96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b96:	b480      	push	{r7}
 8001b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b9a:	e7fe      	b.n	8001b9a <HardFault_Handler+0x4>

08001b9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ba0:	e7fe      	b.n	8001ba0 <MemManage_Handler+0x4>

08001ba2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ba2:	b480      	push	{r7}
 8001ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ba6:	e7fe      	b.n	8001ba6 <BusFault_Handler+0x4>

08001ba8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bac:	e7fe      	b.n	8001bac <UsageFault_Handler+0x4>

08001bae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bae:	b480      	push	{r7}
 8001bb0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bb2:	bf00      	nop
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr

08001bbc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bc0:	bf00      	nop
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr

08001bca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bca:	b480      	push	{r7}
 8001bcc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bce:	bf00      	nop
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr

08001bd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bdc:	f000 f8e2 	bl	8001da4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001be0:	bf00      	nop
 8001be2:	bd80      	pop	{r7, pc}

08001be4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8001be8:	4802      	ldr	r0, [pc, #8]	; (8001bf4 <DMA1_Channel1_IRQHandler+0x10>)
 8001bea:	f002 fa0e 	bl	800400a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001bee:	bf00      	nop
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	200001a4 	.word	0x200001a4

08001bf8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8001bfc:	4802      	ldr	r0, [pc, #8]	; (8001c08 <DMA1_Channel2_IRQHandler+0x10>)
 8001bfe:	f002 fa04 	bl	800400a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001c02:	bf00      	nop
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	20000204 	.word	0x20000204

08001c0c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001c10:	4802      	ldr	r0, [pc, #8]	; (8001c1c <ADC1_2_IRQHandler+0x10>)
 8001c12:	f000 fdb5 	bl	8002780 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001c16:	bf00      	nop
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	20000044 	.word	0x20000044

08001c20 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c24:	4803      	ldr	r0, [pc, #12]	; (8001c34 <TIM1_BRK_TIM15_IRQHandler+0x14>)
 8001c26:	f004 f919 	bl	8005e5c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 8001c2a:	4803      	ldr	r0, [pc, #12]	; (8001c38 <TIM1_BRK_TIM15_IRQHandler+0x18>)
 8001c2c:	f004 f916 	bl	8005e5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8001c30:	bf00      	nop
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	20000264 	.word	0x20000264
 8001c38:	200003e0 	.word	0x200003e0

08001c3c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001c40:	4802      	ldr	r0, [pc, #8]	; (8001c4c <TIM2_IRQHandler+0x10>)
 8001c42:	f004 f90b 	bl	8005e5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001c46:	bf00      	nop
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	200002b0 	.word	0x200002b0

08001c50 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001c54:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001c58:	f002 fcda 	bl	8004610 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001c5c:	bf00      	nop
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001c64:	4802      	ldr	r0, [pc, #8]	; (8001c70 <DMA2_Channel1_IRQHandler+0x10>)
 8001c66:	f002 f9d0 	bl	800400a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8001c6a:	bf00      	nop
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	200000b0 	.word	0x200000b0

08001c74 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8001c78:	4802      	ldr	r0, [pc, #8]	; (8001c84 <LPUART1_IRQHandler+0x10>)
 8001c7a:	f005 fbbd 	bl	80073f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8001c7e:	bf00      	nop
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	20000110 	.word	0x20000110

08001c88 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001c8c:	4b06      	ldr	r3, [pc, #24]	; (8001ca8 <SystemInit+0x20>)
 8001c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c92:	4a05      	ldr	r2, [pc, #20]	; (8001ca8 <SystemInit+0x20>)
 8001c94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c9c:	bf00      	nop
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	e000ed00 	.word	0xe000ed00

08001cac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
ldr   r0, =_estack
 8001cac:	480d      	ldr	r0, [pc, #52]	; (8001ce4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001cae:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001cb0:	f7ff ffea 	bl	8001c88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001cb4:	480c      	ldr	r0, [pc, #48]	; (8001ce8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001cb6:	490d      	ldr	r1, [pc, #52]	; (8001cec <LoopForever+0xa>)
  ldr r2, =_sidata
 8001cb8:	4a0d      	ldr	r2, [pc, #52]	; (8001cf0 <LoopForever+0xe>)
  movs r3, #0
 8001cba:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001cbc:	e002      	b.n	8001cc4 <LoopCopyDataInit>

08001cbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cc2:	3304      	adds	r3, #4

08001cc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cc8:	d3f9      	bcc.n	8001cbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cca:	4a0a      	ldr	r2, [pc, #40]	; (8001cf4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ccc:	4c0a      	ldr	r4, [pc, #40]	; (8001cf8 <LoopForever+0x16>)
  movs r3, #0
 8001cce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cd0:	e001      	b.n	8001cd6 <LoopFillZerobss>

08001cd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cd4:	3204      	adds	r2, #4

08001cd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cd8:	d3fb      	bcc.n	8001cd2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001cda:	f006 ffa3 	bl	8008c24 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001cde:	f7fe fc19 	bl	8000514 <main>

08001ce2 <LoopForever>:

LoopForever:
    b LoopForever
 8001ce2:	e7fe      	b.n	8001ce2 <LoopForever>
ldr   r0, =_estack
 8001ce4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ce8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cec:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8001cf0:	08008cd4 	.word	0x08008cd4
  ldr r2, =_sbss
 8001cf4:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8001cf8:	20000af4 	.word	0x20000af4

08001cfc <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001cfc:	e7fe      	b.n	8001cfc <ADC3_IRQHandler>

08001cfe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cfe:	b580      	push	{r7, lr}
 8001d00:	b082      	sub	sp, #8
 8001d02:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d04:	2300      	movs	r3, #0
 8001d06:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d08:	2003      	movs	r0, #3
 8001d0a:	f001 ff5b 	bl	8003bc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d0e:	2000      	movs	r0, #0
 8001d10:	f000 f80e 	bl	8001d30 <HAL_InitTick>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d002      	beq.n	8001d20 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	71fb      	strb	r3, [r7, #7]
 8001d1e:	e001      	b.n	8001d24 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d20:	f7ff fc84 	bl	800162c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d24:	79fb      	ldrb	r3, [r7, #7]

}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3708      	adds	r7, #8
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
	...

08001d30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b084      	sub	sp, #16
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001d3c:	4b16      	ldr	r3, [pc, #88]	; (8001d98 <HAL_InitTick+0x68>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d022      	beq.n	8001d8a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001d44:	4b15      	ldr	r3, [pc, #84]	; (8001d9c <HAL_InitTick+0x6c>)
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	4b13      	ldr	r3, [pc, #76]	; (8001d98 <HAL_InitTick+0x68>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001d50:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d54:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f001 ff66 	bl	8003c2a <HAL_SYSTICK_Config>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d10f      	bne.n	8001d84 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2b0f      	cmp	r3, #15
 8001d68:	d809      	bhi.n	8001d7e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	6879      	ldr	r1, [r7, #4]
 8001d6e:	f04f 30ff 	mov.w	r0, #4294967295
 8001d72:	f001 ff32 	bl	8003bda <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d76:	4a0a      	ldr	r2, [pc, #40]	; (8001da0 <HAL_InitTick+0x70>)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6013      	str	r3, [r2, #0]
 8001d7c:	e007      	b.n	8001d8e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	73fb      	strb	r3, [r7, #15]
 8001d82:	e004      	b.n	8001d8e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	73fb      	strb	r3, [r7, #15]
 8001d88:	e001      	b.n	8001d8e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001d8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3710      	adds	r7, #16
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	20000020 	.word	0x20000020
 8001d9c:	20000018 	.word	0x20000018
 8001da0:	2000001c 	.word	0x2000001c

08001da4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001da8:	4b05      	ldr	r3, [pc, #20]	; (8001dc0 <HAL_IncTick+0x1c>)
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	4b05      	ldr	r3, [pc, #20]	; (8001dc4 <HAL_IncTick+0x20>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4413      	add	r3, r2
 8001db2:	4a03      	ldr	r2, [pc, #12]	; (8001dc0 <HAL_IncTick+0x1c>)
 8001db4:	6013      	str	r3, [r2, #0]
}
 8001db6:	bf00      	nop
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr
 8001dc0:	20000af0 	.word	0x20000af0
 8001dc4:	20000020 	.word	0x20000020

08001dc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
  return uwTick;
 8001dcc:	4b03      	ldr	r3, [pc, #12]	; (8001ddc <HAL_GetTick+0x14>)
 8001dce:	681b      	ldr	r3, [r3, #0]
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop
 8001ddc:	20000af0 	.word	0x20000af0

08001de0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	431a      	orrs	r2, r3
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	609a      	str	r2, [r3, #8]
}
 8001dfa:	bf00      	nop
 8001dfc:	370c      	adds	r7, #12
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr

08001e06 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001e06:	b480      	push	{r7}
 8001e08:	b083      	sub	sp, #12
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	6078      	str	r0, [r7, #4]
 8001e0e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	431a      	orrs	r2, r3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	609a      	str	r2, [r3, #8]
}
 8001e20:	bf00      	nop
 8001e22:	370c      	adds	r7, #12
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr

08001e2c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	370c      	adds	r7, #12
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr

08001e48 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b087      	sub	sp, #28
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	60f8      	str	r0, [r7, #12]
 8001e50:	60b9      	str	r1, [r7, #8]
 8001e52:	607a      	str	r2, [r7, #4]
 8001e54:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	3360      	adds	r3, #96	; 0x60
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	4413      	add	r3, r2
 8001e62:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	4b08      	ldr	r3, [pc, #32]	; (8001e8c <LL_ADC_SetOffset+0x44>)
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	687a      	ldr	r2, [r7, #4]
 8001e6e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001e72:	683a      	ldr	r2, [r7, #0]
 8001e74:	430a      	orrs	r2, r1
 8001e76:	4313      	orrs	r3, r2
 8001e78:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001e80:	bf00      	nop
 8001e82:	371c      	adds	r7, #28
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr
 8001e8c:	03fff000 	.word	0x03fff000

08001e90 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b085      	sub	sp, #20
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
 8001e98:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	3360      	adds	r3, #96	; 0x60
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	4413      	add	r3, r2
 8001ea6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3714      	adds	r7, #20
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr

08001ebc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b087      	sub	sp, #28
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	60f8      	str	r0, [r7, #12]
 8001ec4:	60b9      	str	r1, [r7, #8]
 8001ec6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	3360      	adds	r3, #96	; 0x60
 8001ecc:	461a      	mov	r2, r3
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	009b      	lsls	r3, r3, #2
 8001ed2:	4413      	add	r3, r2
 8001ed4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	431a      	orrs	r2, r3
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001ee6:	bf00      	nop
 8001ee8:	371c      	adds	r7, #28
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr

08001ef2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001ef2:	b480      	push	{r7}
 8001ef4:	b087      	sub	sp, #28
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	60f8      	str	r0, [r7, #12]
 8001efa:	60b9      	str	r1, [r7, #8]
 8001efc:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	3360      	adds	r3, #96	; 0x60
 8001f02:	461a      	mov	r2, r3
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	4413      	add	r3, r2
 8001f0a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	431a      	orrs	r2, r3
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001f1c:	bf00      	nop
 8001f1e:	371c      	adds	r7, #28
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr

08001f28 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b087      	sub	sp, #28
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	60f8      	str	r0, [r7, #12]
 8001f30:	60b9      	str	r1, [r7, #8]
 8001f32:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	3360      	adds	r3, #96	; 0x60
 8001f38:	461a      	mov	r2, r3
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	4413      	add	r3, r2
 8001f40:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	431a      	orrs	r2, r3
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001f52:	bf00      	nop
 8001f54:	371c      	adds	r7, #28
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr

08001f5e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001f5e:	b480      	push	{r7}
 8001f60:	b083      	sub	sp, #12
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	6078      	str	r0, [r7, #4]
 8001f66:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	695b      	ldr	r3, [r3, #20]
 8001f6c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	431a      	orrs	r2, r3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	615a      	str	r2, [r3, #20]
}
 8001f78:	bf00      	nop
 8001f7a:	370c      	adds	r7, #12
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr

08001f84 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d101      	bne.n	8001f9c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e000      	b.n	8001f9e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001f9c:	2300      	movs	r3, #0
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	370c      	adds	r7, #12
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr

08001faa <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001faa:	b480      	push	{r7}
 8001fac:	b087      	sub	sp, #28
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	60f8      	str	r0, [r7, #12]
 8001fb2:	60b9      	str	r1, [r7, #8]
 8001fb4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	3330      	adds	r3, #48	; 0x30
 8001fba:	461a      	mov	r2, r3
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	0a1b      	lsrs	r3, r3, #8
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	f003 030c 	and.w	r3, r3, #12
 8001fc6:	4413      	add	r3, r2
 8001fc8:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	f003 031f 	and.w	r3, r3, #31
 8001fd4:	211f      	movs	r1, #31
 8001fd6:	fa01 f303 	lsl.w	r3, r1, r3
 8001fda:	43db      	mvns	r3, r3
 8001fdc:	401a      	ands	r2, r3
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	0e9b      	lsrs	r3, r3, #26
 8001fe2:	f003 011f 	and.w	r1, r3, #31
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	f003 031f 	and.w	r3, r3, #31
 8001fec:	fa01 f303 	lsl.w	r3, r1, r3
 8001ff0:	431a      	orrs	r2, r3
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001ff6:	bf00      	nop
 8001ff8:	371c      	adds	r7, #28
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr

08002002 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002002:	b480      	push	{r7}
 8002004:	b083      	sub	sp, #12
 8002006:	af00      	add	r7, sp, #0
 8002008:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800200e:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8002012:	2b00      	cmp	r3, #0
 8002014:	d101      	bne.n	800201a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002016:	2301      	movs	r3, #1
 8002018:	e000      	b.n	800201c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800201a:	2300      	movs	r3, #0
}
 800201c:	4618      	mov	r0, r3
 800201e:	370c      	adds	r7, #12
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr

08002028 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002028:	b480      	push	{r7}
 800202a:	b087      	sub	sp, #28
 800202c:	af00      	add	r7, sp, #0
 800202e:	60f8      	str	r0, [r7, #12]
 8002030:	60b9      	str	r1, [r7, #8]
 8002032:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	3314      	adds	r3, #20
 8002038:	461a      	mov	r2, r3
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	0e5b      	lsrs	r3, r3, #25
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	f003 0304 	and.w	r3, r3, #4
 8002044:	4413      	add	r3, r2
 8002046:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	0d1b      	lsrs	r3, r3, #20
 8002050:	f003 031f 	and.w	r3, r3, #31
 8002054:	2107      	movs	r1, #7
 8002056:	fa01 f303 	lsl.w	r3, r1, r3
 800205a:	43db      	mvns	r3, r3
 800205c:	401a      	ands	r2, r3
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	0d1b      	lsrs	r3, r3, #20
 8002062:	f003 031f 	and.w	r3, r3, #31
 8002066:	6879      	ldr	r1, [r7, #4]
 8002068:	fa01 f303 	lsl.w	r3, r1, r3
 800206c:	431a      	orrs	r2, r3
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002072:	bf00      	nop
 8002074:	371c      	adds	r7, #28
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr
	...

08002080 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002080:	b480      	push	{r7}
 8002082:	b085      	sub	sp, #20
 8002084:	af00      	add	r7, sp, #0
 8002086:	60f8      	str	r0, [r7, #12]
 8002088:	60b9      	str	r1, [r7, #8]
 800208a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002098:	43db      	mvns	r3, r3
 800209a:	401a      	ands	r2, r3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	f003 0318 	and.w	r3, r3, #24
 80020a2:	4908      	ldr	r1, [pc, #32]	; (80020c4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80020a4:	40d9      	lsrs	r1, r3
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	400b      	ands	r3, r1
 80020aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020ae:	431a      	orrs	r2, r3
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80020b6:	bf00      	nop
 80020b8:	3714      	adds	r7, #20
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	0007ffff 	.word	0x0007ffff

080020c8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	f003 031f 	and.w	r3, r3, #31
}
 80020d8:	4618      	mov	r0, r3
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr

080020e4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	370c      	adds	r7, #12
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr

08002100 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002110:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	6093      	str	r3, [r2, #8]
}
 8002118:	bf00      	nop
 800211a:	370c      	adds	r7, #12
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr

08002124 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002134:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002138:	d101      	bne.n	800213e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800213a:	2301      	movs	r3, #1
 800213c:	e000      	b.n	8002140 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800213e:	2300      	movs	r3, #0
}
 8002140:	4618      	mov	r0, r3
 8002142:	370c      	adds	r7, #12
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr

0800214c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800215c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002160:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002168:	bf00      	nop
 800216a:	370c      	adds	r7, #12
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr

08002174 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002184:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002188:	d101      	bne.n	800218e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800218a:	2301      	movs	r3, #1
 800218c:	e000      	b.n	8002190 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800218e:	2300      	movs	r3, #0
}
 8002190:	4618      	mov	r0, r3
 8002192:	370c      	adds	r7, #12
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr

0800219c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80021ac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80021b0:	f043 0201 	orr.w	r2, r3, #1
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80021b8:	bf00      	nop
 80021ba:	370c      	adds	r7, #12
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr

080021c4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	f003 0301 	and.w	r3, r3, #1
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d101      	bne.n	80021dc <LL_ADC_IsEnabled+0x18>
 80021d8:	2301      	movs	r3, #1
 80021da:	e000      	b.n	80021de <LL_ADC_IsEnabled+0x1a>
 80021dc:	2300      	movs	r3, #0
}
 80021de:	4618      	mov	r0, r3
 80021e0:	370c      	adds	r7, #12
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr

080021ea <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80021ea:	b480      	push	{r7}
 80021ec:	b083      	sub	sp, #12
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80021fa:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80021fe:	f043 0204 	orr.w	r2, r3, #4
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002206:	bf00      	nop
 8002208:	370c      	adds	r7, #12
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr

08002212 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002212:	b480      	push	{r7}
 8002214:	b083      	sub	sp, #12
 8002216:	af00      	add	r7, sp, #0
 8002218:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	f003 0304 	and.w	r3, r3, #4
 8002222:	2b04      	cmp	r3, #4
 8002224:	d101      	bne.n	800222a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002226:	2301      	movs	r3, #1
 8002228:	e000      	b.n	800222c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800222a:	2300      	movs	r3, #0
}
 800222c:	4618      	mov	r0, r3
 800222e:	370c      	adds	r7, #12
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr

08002238 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	f003 0308 	and.w	r3, r3, #8
 8002248:	2b08      	cmp	r3, #8
 800224a:	d101      	bne.n	8002250 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800224c:	2301      	movs	r3, #1
 800224e:	e000      	b.n	8002252 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002250:	2300      	movs	r3, #0
}
 8002252:	4618      	mov	r0, r3
 8002254:	370c      	adds	r7, #12
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
	...

08002260 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002260:	b590      	push	{r4, r7, lr}
 8002262:	b089      	sub	sp, #36	; 0x24
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002268:	2300      	movs	r3, #0
 800226a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800226c:	2300      	movs	r3, #0
 800226e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d101      	bne.n	800227a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e1a9      	b.n	80025ce <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	695b      	ldr	r3, [r3, #20]
 800227e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002284:	2b00      	cmp	r3, #0
 8002286:	d109      	bne.n	800229c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	f7ff f9f3 	bl	8001674 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2200      	movs	r2, #0
 8002292:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2200      	movs	r2, #0
 8002298:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4618      	mov	r0, r3
 80022a2:	f7ff ff3f 	bl	8002124 <LL_ADC_IsDeepPowerDownEnabled>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d004      	beq.n	80022b6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4618      	mov	r0, r3
 80022b2:	f7ff ff25 	bl	8002100 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4618      	mov	r0, r3
 80022bc:	f7ff ff5a 	bl	8002174 <LL_ADC_IsInternalRegulatorEnabled>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d115      	bne.n	80022f2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4618      	mov	r0, r3
 80022cc:	f7ff ff3e 	bl	800214c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80022d0:	4b9c      	ldr	r3, [pc, #624]	; (8002544 <HAL_ADC_Init+0x2e4>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	099b      	lsrs	r3, r3, #6
 80022d6:	4a9c      	ldr	r2, [pc, #624]	; (8002548 <HAL_ADC_Init+0x2e8>)
 80022d8:	fba2 2303 	umull	r2, r3, r2, r3
 80022dc:	099b      	lsrs	r3, r3, #6
 80022de:	3301      	adds	r3, #1
 80022e0:	005b      	lsls	r3, r3, #1
 80022e2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80022e4:	e002      	b.n	80022ec <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	3b01      	subs	r3, #1
 80022ea:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d1f9      	bne.n	80022e6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4618      	mov	r0, r3
 80022f8:	f7ff ff3c 	bl	8002174 <LL_ADC_IsInternalRegulatorEnabled>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d10d      	bne.n	800231e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002306:	f043 0210 	orr.w	r2, r3, #16
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002312:	f043 0201 	orr.w	r2, r3, #1
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4618      	mov	r0, r3
 8002324:	f7ff ff75 	bl	8002212 <LL_ADC_REG_IsConversionOngoing>
 8002328:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800232e:	f003 0310 	and.w	r3, r3, #16
 8002332:	2b00      	cmp	r3, #0
 8002334:	f040 8142 	bne.w	80025bc <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	2b00      	cmp	r3, #0
 800233c:	f040 813e 	bne.w	80025bc <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002344:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002348:	f043 0202 	orr.w	r2, r3, #2
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4618      	mov	r0, r3
 8002356:	f7ff ff35 	bl	80021c4 <LL_ADC_IsEnabled>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d141      	bne.n	80023e4 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002368:	d004      	beq.n	8002374 <HAL_ADC_Init+0x114>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a77      	ldr	r2, [pc, #476]	; (800254c <HAL_ADC_Init+0x2ec>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d10f      	bne.n	8002394 <HAL_ADC_Init+0x134>
 8002374:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002378:	f7ff ff24 	bl	80021c4 <LL_ADC_IsEnabled>
 800237c:	4604      	mov	r4, r0
 800237e:	4873      	ldr	r0, [pc, #460]	; (800254c <HAL_ADC_Init+0x2ec>)
 8002380:	f7ff ff20 	bl	80021c4 <LL_ADC_IsEnabled>
 8002384:	4603      	mov	r3, r0
 8002386:	4323      	orrs	r3, r4
 8002388:	2b00      	cmp	r3, #0
 800238a:	bf0c      	ite	eq
 800238c:	2301      	moveq	r3, #1
 800238e:	2300      	movne	r3, #0
 8002390:	b2db      	uxtb	r3, r3
 8002392:	e012      	b.n	80023ba <HAL_ADC_Init+0x15a>
 8002394:	486e      	ldr	r0, [pc, #440]	; (8002550 <HAL_ADC_Init+0x2f0>)
 8002396:	f7ff ff15 	bl	80021c4 <LL_ADC_IsEnabled>
 800239a:	4604      	mov	r4, r0
 800239c:	486d      	ldr	r0, [pc, #436]	; (8002554 <HAL_ADC_Init+0x2f4>)
 800239e:	f7ff ff11 	bl	80021c4 <LL_ADC_IsEnabled>
 80023a2:	4603      	mov	r3, r0
 80023a4:	431c      	orrs	r4, r3
 80023a6:	486c      	ldr	r0, [pc, #432]	; (8002558 <HAL_ADC_Init+0x2f8>)
 80023a8:	f7ff ff0c 	bl	80021c4 <LL_ADC_IsEnabled>
 80023ac:	4603      	mov	r3, r0
 80023ae:	4323      	orrs	r3, r4
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	bf0c      	ite	eq
 80023b4:	2301      	moveq	r3, #1
 80023b6:	2300      	movne	r3, #0
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d012      	beq.n	80023e4 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80023c6:	d004      	beq.n	80023d2 <HAL_ADC_Init+0x172>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a5f      	ldr	r2, [pc, #380]	; (800254c <HAL_ADC_Init+0x2ec>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d101      	bne.n	80023d6 <HAL_ADC_Init+0x176>
 80023d2:	4a62      	ldr	r2, [pc, #392]	; (800255c <HAL_ADC_Init+0x2fc>)
 80023d4:	e000      	b.n	80023d8 <HAL_ADC_Init+0x178>
 80023d6:	4a62      	ldr	r2, [pc, #392]	; (8002560 <HAL_ADC_Init+0x300>)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	4619      	mov	r1, r3
 80023de:	4610      	mov	r0, r2
 80023e0:	f7ff fcfe 	bl	8001de0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	7f5b      	ldrb	r3, [r3, #29]
 80023e8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80023ee:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80023f4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80023fa:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002402:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002404:	4313      	orrs	r3, r2
 8002406:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800240e:	2b01      	cmp	r3, #1
 8002410:	d106      	bne.n	8002420 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002416:	3b01      	subs	r3, #1
 8002418:	045b      	lsls	r3, r3, #17
 800241a:	69ba      	ldr	r2, [r7, #24]
 800241c:	4313      	orrs	r3, r2
 800241e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002424:	2b00      	cmp	r3, #0
 8002426:	d009      	beq.n	800243c <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800242c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002434:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002436:	69ba      	ldr	r2, [r7, #24]
 8002438:	4313      	orrs	r3, r2
 800243a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	68da      	ldr	r2, [r3, #12]
 8002442:	4b48      	ldr	r3, [pc, #288]	; (8002564 <HAL_ADC_Init+0x304>)
 8002444:	4013      	ands	r3, r2
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	6812      	ldr	r2, [r2, #0]
 800244a:	69b9      	ldr	r1, [r7, #24]
 800244c:	430b      	orrs	r3, r1
 800244e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	691b      	ldr	r3, [r3, #16]
 8002456:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	430a      	orrs	r2, r1
 8002464:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4618      	mov	r0, r3
 800246c:	f7ff fee4 	bl	8002238 <LL_ADC_INJ_IsConversionOngoing>
 8002470:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d17f      	bne.n	8002578 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d17c      	bne.n	8002578 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002482:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800248a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800248c:	4313      	orrs	r3, r2
 800248e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	68db      	ldr	r3, [r3, #12]
 8002496:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800249a:	f023 0302 	bic.w	r3, r3, #2
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	6812      	ldr	r2, [r2, #0]
 80024a2:	69b9      	ldr	r1, [r7, #24]
 80024a4:	430b      	orrs	r3, r1
 80024a6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	691b      	ldr	r3, [r3, #16]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d017      	beq.n	80024e0 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	691a      	ldr	r2, [r3, #16]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80024be:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80024c8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80024cc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	6911      	ldr	r1, [r2, #16]
 80024d4:	687a      	ldr	r2, [r7, #4]
 80024d6:	6812      	ldr	r2, [r2, #0]
 80024d8:	430b      	orrs	r3, r1
 80024da:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80024de:	e013      	b.n	8002508 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	691a      	ldr	r2, [r3, #16]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80024ee:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	6812      	ldr	r2, [r2, #0]
 80024fc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002500:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002504:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800250e:	2b01      	cmp	r3, #1
 8002510:	d12a      	bne.n	8002568 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	691b      	ldr	r3, [r3, #16]
 8002518:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800251c:	f023 0304 	bic.w	r3, r3, #4
 8002520:	687a      	ldr	r2, [r7, #4]
 8002522:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002524:	687a      	ldr	r2, [r7, #4]
 8002526:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002528:	4311      	orrs	r1, r2
 800252a:	687a      	ldr	r2, [r7, #4]
 800252c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800252e:	4311      	orrs	r1, r2
 8002530:	687a      	ldr	r2, [r7, #4]
 8002532:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002534:	430a      	orrs	r2, r1
 8002536:	431a      	orrs	r2, r3
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f042 0201 	orr.w	r2, r2, #1
 8002540:	611a      	str	r2, [r3, #16]
 8002542:	e019      	b.n	8002578 <HAL_ADC_Init+0x318>
 8002544:	20000018 	.word	0x20000018
 8002548:	053e2d63 	.word	0x053e2d63
 800254c:	50000100 	.word	0x50000100
 8002550:	50000400 	.word	0x50000400
 8002554:	50000500 	.word	0x50000500
 8002558:	50000600 	.word	0x50000600
 800255c:	50000300 	.word	0x50000300
 8002560:	50000700 	.word	0x50000700
 8002564:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	691a      	ldr	r2, [r3, #16]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f022 0201 	bic.w	r2, r2, #1
 8002576:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	695b      	ldr	r3, [r3, #20]
 800257c:	2b01      	cmp	r3, #1
 800257e:	d10c      	bne.n	800259a <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002586:	f023 010f 	bic.w	r1, r3, #15
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6a1b      	ldr	r3, [r3, #32]
 800258e:	1e5a      	subs	r2, r3, #1
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	430a      	orrs	r2, r1
 8002596:	631a      	str	r2, [r3, #48]	; 0x30
 8002598:	e007      	b.n	80025aa <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f022 020f 	bic.w	r2, r2, #15
 80025a8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025ae:	f023 0303 	bic.w	r3, r3, #3
 80025b2:	f043 0201 	orr.w	r2, r3, #1
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	65da      	str	r2, [r3, #92]	; 0x5c
 80025ba:	e007      	b.n	80025cc <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025c0:	f043 0210 	orr.w	r2, r3, #16
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80025cc:	7ffb      	ldrb	r3, [r7, #31]
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3724      	adds	r7, #36	; 0x24
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd90      	pop	{r4, r7, pc}
 80025d6:	bf00      	nop

080025d8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b086      	sub	sp, #24
 80025dc:	af00      	add	r7, sp, #0
 80025de:	60f8      	str	r0, [r7, #12]
 80025e0:	60b9      	str	r1, [r7, #8]
 80025e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80025ec:	d004      	beq.n	80025f8 <HAL_ADC_Start_DMA+0x20>
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a5a      	ldr	r2, [pc, #360]	; (800275c <HAL_ADC_Start_DMA+0x184>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d101      	bne.n	80025fc <HAL_ADC_Start_DMA+0x24>
 80025f8:	4b59      	ldr	r3, [pc, #356]	; (8002760 <HAL_ADC_Start_DMA+0x188>)
 80025fa:	e000      	b.n	80025fe <HAL_ADC_Start_DMA+0x26>
 80025fc:	4b59      	ldr	r3, [pc, #356]	; (8002764 <HAL_ADC_Start_DMA+0x18c>)
 80025fe:	4618      	mov	r0, r3
 8002600:	f7ff fd62 	bl	80020c8 <LL_ADC_GetMultimode>
 8002604:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4618      	mov	r0, r3
 800260c:	f7ff fe01 	bl	8002212 <LL_ADC_REG_IsConversionOngoing>
 8002610:	4603      	mov	r3, r0
 8002612:	2b00      	cmp	r3, #0
 8002614:	f040 809b 	bne.w	800274e <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800261e:	2b01      	cmp	r3, #1
 8002620:	d101      	bne.n	8002626 <HAL_ADC_Start_DMA+0x4e>
 8002622:	2302      	movs	r3, #2
 8002624:	e096      	b.n	8002754 <HAL_ADC_Start_DMA+0x17c>
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	2201      	movs	r2, #1
 800262a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a4d      	ldr	r2, [pc, #308]	; (8002768 <HAL_ADC_Start_DMA+0x190>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d008      	beq.n	800264a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d005      	beq.n	800264a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	2b05      	cmp	r3, #5
 8002642:	d002      	beq.n	800264a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	2b09      	cmp	r3, #9
 8002648:	d17a      	bne.n	8002740 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800264a:	68f8      	ldr	r0, [r7, #12]
 800264c:	f000 ff60 	bl	8003510 <ADC_Enable>
 8002650:	4603      	mov	r3, r0
 8002652:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002654:	7dfb      	ldrb	r3, [r7, #23]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d16d      	bne.n	8002736 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800265e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002662:	f023 0301 	bic.w	r3, r3, #1
 8002666:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a3a      	ldr	r2, [pc, #232]	; (800275c <HAL_ADC_Start_DMA+0x184>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d009      	beq.n	800268c <HAL_ADC_Start_DMA+0xb4>
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a3b      	ldr	r2, [pc, #236]	; (800276c <HAL_ADC_Start_DMA+0x194>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d002      	beq.n	8002688 <HAL_ADC_Start_DMA+0xb0>
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	e003      	b.n	8002690 <HAL_ADC_Start_DMA+0xb8>
 8002688:	4b39      	ldr	r3, [pc, #228]	; (8002770 <HAL_ADC_Start_DMA+0x198>)
 800268a:	e001      	b.n	8002690 <HAL_ADC_Start_DMA+0xb8>
 800268c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002690:	68fa      	ldr	r2, [r7, #12]
 8002692:	6812      	ldr	r2, [r2, #0]
 8002694:	4293      	cmp	r3, r2
 8002696:	d002      	beq.n	800269e <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d105      	bne.n	80026aa <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026a2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d006      	beq.n	80026c4 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026ba:	f023 0206 	bic.w	r2, r3, #6
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	661a      	str	r2, [r3, #96]	; 0x60
 80026c2:	e002      	b.n	80026ca <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2200      	movs	r2, #0
 80026c8:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ce:	4a29      	ldr	r2, [pc, #164]	; (8002774 <HAL_ADC_Start_DMA+0x19c>)
 80026d0:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026d6:	4a28      	ldr	r2, [pc, #160]	; (8002778 <HAL_ADC_Start_DMA+0x1a0>)
 80026d8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026de:	4a27      	ldr	r2, [pc, #156]	; (800277c <HAL_ADC_Start_DMA+0x1a4>)
 80026e0:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	221c      	movs	r2, #28
 80026e8:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2200      	movs	r2, #0
 80026ee:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	685a      	ldr	r2, [r3, #4]
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f042 0210 	orr.w	r2, r2, #16
 8002700:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	68da      	ldr	r2, [r3, #12]
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f042 0201 	orr.w	r2, r2, #1
 8002710:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	3340      	adds	r3, #64	; 0x40
 800271c:	4619      	mov	r1, r3
 800271e:	68ba      	ldr	r2, [r7, #8]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	f001 fb37 	bl	8003d94 <HAL_DMA_Start_IT>
 8002726:	4603      	mov	r3, r0
 8002728:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4618      	mov	r0, r3
 8002730:	f7ff fd5b 	bl	80021ea <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002734:	e00d      	b.n	8002752 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2200      	movs	r2, #0
 800273a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 800273e:	e008      	b.n	8002752 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2200      	movs	r2, #0
 8002748:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 800274c:	e001      	b.n	8002752 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800274e:	2302      	movs	r3, #2
 8002750:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002752:	7dfb      	ldrb	r3, [r7, #23]
}
 8002754:	4618      	mov	r0, r3
 8002756:	3718      	adds	r7, #24
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}
 800275c:	50000100 	.word	0x50000100
 8002760:	50000300 	.word	0x50000300
 8002764:	50000700 	.word	0x50000700
 8002768:	50000600 	.word	0x50000600
 800276c:	50000500 	.word	0x50000500
 8002770:	50000400 	.word	0x50000400
 8002774:	0800363d 	.word	0x0800363d
 8002778:	08003715 	.word	0x08003715
 800277c:	08003731 	.word	0x08003731

08002780 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b08a      	sub	sp, #40	; 0x28
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002788:	2300      	movs	r3, #0
 800278a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027a4:	d004      	beq.n	80027b0 <HAL_ADC_IRQHandler+0x30>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a8e      	ldr	r2, [pc, #568]	; (80029e4 <HAL_ADC_IRQHandler+0x264>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d101      	bne.n	80027b4 <HAL_ADC_IRQHandler+0x34>
 80027b0:	4b8d      	ldr	r3, [pc, #564]	; (80029e8 <HAL_ADC_IRQHandler+0x268>)
 80027b2:	e000      	b.n	80027b6 <HAL_ADC_IRQHandler+0x36>
 80027b4:	4b8d      	ldr	r3, [pc, #564]	; (80029ec <HAL_ADC_IRQHandler+0x26c>)
 80027b6:	4618      	mov	r0, r3
 80027b8:	f7ff fc86 	bl	80020c8 <LL_ADC_GetMultimode>
 80027bc:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	f003 0302 	and.w	r3, r3, #2
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d017      	beq.n	80027f8 <HAL_ADC_IRQHandler+0x78>
 80027c8:	69bb      	ldr	r3, [r7, #24]
 80027ca:	f003 0302 	and.w	r3, r3, #2
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d012      	beq.n	80027f8 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027d6:	f003 0310 	and.w	r3, r3, #16
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d105      	bne.n	80027ea <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027e2:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f001 f808 	bl	8003800 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	2202      	movs	r2, #2
 80027f6:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	f003 0304 	and.w	r3, r3, #4
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d004      	beq.n	800280c <HAL_ADC_IRQHandler+0x8c>
 8002802:	69bb      	ldr	r3, [r7, #24]
 8002804:	f003 0304 	and.w	r3, r3, #4
 8002808:	2b00      	cmp	r3, #0
 800280a:	d10b      	bne.n	8002824 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002812:	2b00      	cmp	r3, #0
 8002814:	f000 8094 	beq.w	8002940 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002818:	69bb      	ldr	r3, [r7, #24]
 800281a:	f003 0308 	and.w	r3, r3, #8
 800281e:	2b00      	cmp	r3, #0
 8002820:	f000 808e 	beq.w	8002940 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002828:	f003 0310 	and.w	r3, r3, #16
 800282c:	2b00      	cmp	r3, #0
 800282e:	d105      	bne.n	800283c <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002834:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4618      	mov	r0, r3
 8002842:	f7ff fb9f 	bl	8001f84 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d072      	beq.n	8002932 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a64      	ldr	r2, [pc, #400]	; (80029e4 <HAL_ADC_IRQHandler+0x264>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d009      	beq.n	800286a <HAL_ADC_IRQHandler+0xea>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a65      	ldr	r2, [pc, #404]	; (80029f0 <HAL_ADC_IRQHandler+0x270>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d002      	beq.n	8002866 <HAL_ADC_IRQHandler+0xe6>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	e003      	b.n	800286e <HAL_ADC_IRQHandler+0xee>
 8002866:	4b63      	ldr	r3, [pc, #396]	; (80029f4 <HAL_ADC_IRQHandler+0x274>)
 8002868:	e001      	b.n	800286e <HAL_ADC_IRQHandler+0xee>
 800286a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	6812      	ldr	r2, [r2, #0]
 8002872:	4293      	cmp	r3, r2
 8002874:	d008      	beq.n	8002888 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d005      	beq.n	8002888 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	2b05      	cmp	r3, #5
 8002880:	d002      	beq.n	8002888 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	2b09      	cmp	r3, #9
 8002886:	d104      	bne.n	8002892 <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	68db      	ldr	r3, [r3, #12]
 800288e:	623b      	str	r3, [r7, #32]
 8002890:	e014      	b.n	80028bc <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a53      	ldr	r2, [pc, #332]	; (80029e4 <HAL_ADC_IRQHandler+0x264>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d009      	beq.n	80028b0 <HAL_ADC_IRQHandler+0x130>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a53      	ldr	r2, [pc, #332]	; (80029f0 <HAL_ADC_IRQHandler+0x270>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d002      	beq.n	80028ac <HAL_ADC_IRQHandler+0x12c>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	e003      	b.n	80028b4 <HAL_ADC_IRQHandler+0x134>
 80028ac:	4b51      	ldr	r3, [pc, #324]	; (80029f4 <HAL_ADC_IRQHandler+0x274>)
 80028ae:	e001      	b.n	80028b4 <HAL_ADC_IRQHandler+0x134>
 80028b0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80028b4:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	68db      	ldr	r3, [r3, #12]
 80028ba:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80028bc:	6a3b      	ldr	r3, [r7, #32]
 80028be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d135      	bne.n	8002932 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 0308 	and.w	r3, r3, #8
 80028d0:	2b08      	cmp	r3, #8
 80028d2:	d12e      	bne.n	8002932 <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4618      	mov	r0, r3
 80028da:	f7ff fc9a 	bl	8002212 <LL_ADC_REG_IsConversionOngoing>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d11a      	bne.n	800291a <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	685a      	ldr	r2, [r3, #4]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f022 020c 	bic.w	r2, r2, #12
 80028f2:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028f8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002904:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002908:	2b00      	cmp	r3, #0
 800290a:	d112      	bne.n	8002932 <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002910:	f043 0201 	orr.w	r2, r3, #1
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	65da      	str	r2, [r3, #92]	; 0x5c
 8002918:	e00b      	b.n	8002932 <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800291e:	f043 0210 	orr.w	r2, r3, #16
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800292a:	f043 0201 	orr.w	r2, r3, #1
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	f000 f984 	bl	8002c40 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	220c      	movs	r2, #12
 800293e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002940:	69fb      	ldr	r3, [r7, #28]
 8002942:	f003 0320 	and.w	r3, r3, #32
 8002946:	2b00      	cmp	r3, #0
 8002948:	d004      	beq.n	8002954 <HAL_ADC_IRQHandler+0x1d4>
 800294a:	69bb      	ldr	r3, [r7, #24]
 800294c:	f003 0320 	and.w	r3, r3, #32
 8002950:	2b00      	cmp	r3, #0
 8002952:	d10b      	bne.n	800296c <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800295a:	2b00      	cmp	r3, #0
 800295c:	f000 80b3 	beq.w	8002ac6 <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002960:	69bb      	ldr	r3, [r7, #24]
 8002962:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002966:	2b00      	cmp	r3, #0
 8002968:	f000 80ad 	beq.w	8002ac6 <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002970:	f003 0310 	and.w	r3, r3, #16
 8002974:	2b00      	cmp	r3, #0
 8002976:	d105      	bne.n	8002984 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800297c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4618      	mov	r0, r3
 800298a:	f7ff fb3a 	bl	8002002 <LL_ADC_INJ_IsTriggerSourceSWStart>
 800298e:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4618      	mov	r0, r3
 8002996:	f7ff faf5 	bl	8001f84 <LL_ADC_REG_IsTriggerSourceSWStart>
 800299a:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a10      	ldr	r2, [pc, #64]	; (80029e4 <HAL_ADC_IRQHandler+0x264>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d009      	beq.n	80029ba <HAL_ADC_IRQHandler+0x23a>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a11      	ldr	r2, [pc, #68]	; (80029f0 <HAL_ADC_IRQHandler+0x270>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d002      	beq.n	80029b6 <HAL_ADC_IRQHandler+0x236>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	e003      	b.n	80029be <HAL_ADC_IRQHandler+0x23e>
 80029b6:	4b0f      	ldr	r3, [pc, #60]	; (80029f4 <HAL_ADC_IRQHandler+0x274>)
 80029b8:	e001      	b.n	80029be <HAL_ADC_IRQHandler+0x23e>
 80029ba:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	6812      	ldr	r2, [r2, #0]
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d008      	beq.n	80029d8 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d005      	beq.n	80029d8 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	2b06      	cmp	r3, #6
 80029d0:	d002      	beq.n	80029d8 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	2b07      	cmp	r3, #7
 80029d6:	d10f      	bne.n	80029f8 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	623b      	str	r3, [r7, #32]
 80029e0:	e01f      	b.n	8002a22 <HAL_ADC_IRQHandler+0x2a2>
 80029e2:	bf00      	nop
 80029e4:	50000100 	.word	0x50000100
 80029e8:	50000300 	.word	0x50000300
 80029ec:	50000700 	.word	0x50000700
 80029f0:	50000500 	.word	0x50000500
 80029f4:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a8b      	ldr	r2, [pc, #556]	; (8002c2c <HAL_ADC_IRQHandler+0x4ac>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d009      	beq.n	8002a16 <HAL_ADC_IRQHandler+0x296>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a8a      	ldr	r2, [pc, #552]	; (8002c30 <HAL_ADC_IRQHandler+0x4b0>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d002      	beq.n	8002a12 <HAL_ADC_IRQHandler+0x292>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	e003      	b.n	8002a1a <HAL_ADC_IRQHandler+0x29a>
 8002a12:	4b88      	ldr	r3, [pc, #544]	; (8002c34 <HAL_ADC_IRQHandler+0x4b4>)
 8002a14:	e001      	b.n	8002a1a <HAL_ADC_IRQHandler+0x29a>
 8002a16:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002a1a:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d047      	beq.n	8002ab8 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002a28:	6a3b      	ldr	r3, [r7, #32]
 8002a2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d007      	beq.n	8002a42 <HAL_ADC_IRQHandler+0x2c2>
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d03f      	beq.n	8002ab8 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002a38:	6a3b      	ldr	r3, [r7, #32]
 8002a3a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d13a      	bne.n	8002ab8 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a4c:	2b40      	cmp	r3, #64	; 0x40
 8002a4e:	d133      	bne.n	8002ab8 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002a50:	6a3b      	ldr	r3, [r7, #32]
 8002a52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d12e      	bne.n	8002ab8 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f7ff fbea 	bl	8002238 <LL_ADC_INJ_IsConversionOngoing>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d11a      	bne.n	8002aa0 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	685a      	ldr	r2, [r3, #4]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002a78:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a7e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d112      	bne.n	8002ab8 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a96:	f043 0201 	orr.w	r2, r3, #1
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	65da      	str	r2, [r3, #92]	; 0x5c
 8002a9e:	e00b      	b.n	8002ab8 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aa4:	f043 0210 	orr.w	r2, r3, #16
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ab0:	f043 0201 	orr.w	r2, r3, #1
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	f000 fe79 	bl	80037b0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	2260      	movs	r2, #96	; 0x60
 8002ac4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d011      	beq.n	8002af4 <HAL_ADC_IRQHandler+0x374>
 8002ad0:	69bb      	ldr	r3, [r7, #24]
 8002ad2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d00c      	beq.n	8002af4 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ade:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f000 f8be 	bl	8002c68 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2280      	movs	r2, #128	; 0x80
 8002af2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d012      	beq.n	8002b24 <HAL_ADC_IRQHandler+0x3a4>
 8002afe:	69bb      	ldr	r3, [r7, #24]
 8002b00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d00d      	beq.n	8002b24 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b0c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	f000 fe5f 	bl	80037d8 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b22:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d012      	beq.n	8002b54 <HAL_ADC_IRQHandler+0x3d4>
 8002b2e:	69bb      	ldr	r3, [r7, #24]
 8002b30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d00d      	beq.n	8002b54 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b3c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	f000 fe51 	bl	80037ec <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b52:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	f003 0310 	and.w	r3, r3, #16
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d043      	beq.n	8002be6 <HAL_ADC_IRQHandler+0x466>
 8002b5e:	69bb      	ldr	r3, [r7, #24]
 8002b60:	f003 0310 	and.w	r3, r3, #16
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d03e      	beq.n	8002be6 <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d102      	bne.n	8002b76 <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8002b70:	2301      	movs	r3, #1
 8002b72:	627b      	str	r3, [r7, #36]	; 0x24
 8002b74:	e021      	b.n	8002bba <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d015      	beq.n	8002ba8 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b84:	d004      	beq.n	8002b90 <HAL_ADC_IRQHandler+0x410>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a28      	ldr	r2, [pc, #160]	; (8002c2c <HAL_ADC_IRQHandler+0x4ac>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d101      	bne.n	8002b94 <HAL_ADC_IRQHandler+0x414>
 8002b90:	4b29      	ldr	r3, [pc, #164]	; (8002c38 <HAL_ADC_IRQHandler+0x4b8>)
 8002b92:	e000      	b.n	8002b96 <HAL_ADC_IRQHandler+0x416>
 8002b94:	4b29      	ldr	r3, [pc, #164]	; (8002c3c <HAL_ADC_IRQHandler+0x4bc>)
 8002b96:	4618      	mov	r0, r3
 8002b98:	f7ff faa4 	bl	80020e4 <LL_ADC_GetMultiDMATransfer>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d00b      	beq.n	8002bba <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	627b      	str	r3, [r7, #36]	; 0x24
 8002ba6:	e008      	b.n	8002bba <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	68db      	ldr	r3, [r3, #12]
 8002bae:	f003 0301 	and.w	r3, r3, #1
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d001      	beq.n	8002bba <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d10e      	bne.n	8002bde <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bc4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bd0:	f043 0202 	orr.w	r2, r3, #2
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	f000 f84f 	bl	8002c7c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	2210      	movs	r2, #16
 8002be4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d018      	beq.n	8002c22 <HAL_ADC_IRQHandler+0x4a2>
 8002bf0:	69bb      	ldr	r3, [r7, #24]
 8002bf2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d013      	beq.n	8002c22 <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bfe:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c0a:	f043 0208 	orr.w	r2, r3, #8
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c1a:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	f000 fdd1 	bl	80037c4 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002c22:	bf00      	nop
 8002c24:	3728      	adds	r7, #40	; 0x28
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	50000100 	.word	0x50000100
 8002c30:	50000500 	.word	0x50000500
 8002c34:	50000400 	.word	0x50000400
 8002c38:	50000300 	.word	0x50000300
 8002c3c:	50000700 	.word	0x50000700

08002c40 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b083      	sub	sp, #12
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002c48:	bf00      	nop
 8002c4a:	370c      	adds	r7, #12
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr

08002c54 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b083      	sub	sp, #12
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002c5c:	bf00      	nop
 8002c5e:	370c      	adds	r7, #12
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr

08002c68 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002c70:	bf00      	nop
 8002c72:	370c      	adds	r7, #12
 8002c74:	46bd      	mov	sp, r7
 8002c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7a:	4770      	bx	lr

08002c7c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b083      	sub	sp, #12
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002c84:	bf00      	nop
 8002c86:	370c      	adds	r7, #12
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr

08002c90 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b0b6      	sub	sp, #216	; 0xd8
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
 8002c98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d102      	bne.n	8002cb4 <HAL_ADC_ConfigChannel+0x24>
 8002cae:	2302      	movs	r3, #2
 8002cb0:	f000 bc13 	b.w	80034da <HAL_ADC_ConfigChannel+0x84a>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f7ff faa6 	bl	8002212 <LL_ADC_REG_IsConversionOngoing>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	f040 83f3 	bne.w	80034b4 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6818      	ldr	r0, [r3, #0]
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	6859      	ldr	r1, [r3, #4]
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	461a      	mov	r2, r3
 8002cdc:	f7ff f965 	bl	8001faa <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f7ff fa94 	bl	8002212 <LL_ADC_REG_IsConversionOngoing>
 8002cea:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f7ff faa0 	bl	8002238 <LL_ADC_INJ_IsConversionOngoing>
 8002cf8:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002cfc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	f040 81d9 	bne.w	80030b8 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002d06:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	f040 81d4 	bne.w	80030b8 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002d18:	d10f      	bne.n	8002d3a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6818      	ldr	r0, [r3, #0]
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	2200      	movs	r2, #0
 8002d24:	4619      	mov	r1, r3
 8002d26:	f7ff f97f 	bl	8002028 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002d32:	4618      	mov	r0, r3
 8002d34:	f7ff f913 	bl	8001f5e <LL_ADC_SetSamplingTimeCommonConfig>
 8002d38:	e00e      	b.n	8002d58 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6818      	ldr	r0, [r3, #0]
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	6819      	ldr	r1, [r3, #0]
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	461a      	mov	r2, r3
 8002d48:	f7ff f96e 	bl	8002028 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	2100      	movs	r1, #0
 8002d52:	4618      	mov	r0, r3
 8002d54:	f7ff f903 	bl	8001f5e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	695a      	ldr	r2, [r3, #20]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	68db      	ldr	r3, [r3, #12]
 8002d62:	08db      	lsrs	r3, r3, #3
 8002d64:	f003 0303 	and.w	r3, r3, #3
 8002d68:	005b      	lsls	r3, r3, #1
 8002d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	691b      	ldr	r3, [r3, #16]
 8002d76:	2b04      	cmp	r3, #4
 8002d78:	d022      	beq.n	8002dc0 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6818      	ldr	r0, [r3, #0]
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	6919      	ldr	r1, [r3, #16]
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002d8a:	f7ff f85d 	bl	8001e48 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6818      	ldr	r0, [r3, #0]
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	6919      	ldr	r1, [r3, #16]
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	699b      	ldr	r3, [r3, #24]
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	f7ff f8a9 	bl	8001ef2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6818      	ldr	r0, [r3, #0]
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d102      	bne.n	8002db6 <HAL_ADC_ConfigChannel+0x126>
 8002db0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002db4:	e000      	b.n	8002db8 <HAL_ADC_ConfigChannel+0x128>
 8002db6:	2300      	movs	r3, #0
 8002db8:	461a      	mov	r2, r3
 8002dba:	f7ff f8b5 	bl	8001f28 <LL_ADC_SetOffsetSaturation>
 8002dbe:	e17b      	b.n	80030b8 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	2100      	movs	r1, #0
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f7ff f862 	bl	8001e90 <LL_ADC_GetOffsetChannel>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d10a      	bne.n	8002dec <HAL_ADC_ConfigChannel+0x15c>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	2100      	movs	r1, #0
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f7ff f857 	bl	8001e90 <LL_ADC_GetOffsetChannel>
 8002de2:	4603      	mov	r3, r0
 8002de4:	0e9b      	lsrs	r3, r3, #26
 8002de6:	f003 021f 	and.w	r2, r3, #31
 8002dea:	e01e      	b.n	8002e2a <HAL_ADC_ConfigChannel+0x19a>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	2100      	movs	r1, #0
 8002df2:	4618      	mov	r0, r3
 8002df4:	f7ff f84c 	bl	8001e90 <LL_ADC_GetOffsetChannel>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dfe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002e02:	fa93 f3a3 	rbit	r3, r3
 8002e06:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002e0a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002e0e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002e12:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d101      	bne.n	8002e1e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002e1a:	2320      	movs	r3, #32
 8002e1c:	e004      	b.n	8002e28 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002e1e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002e22:	fab3 f383 	clz	r3, r3
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d105      	bne.n	8002e42 <HAL_ADC_ConfigChannel+0x1b2>
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	0e9b      	lsrs	r3, r3, #26
 8002e3c:	f003 031f 	and.w	r3, r3, #31
 8002e40:	e018      	b.n	8002e74 <HAL_ADC_ConfigChannel+0x1e4>
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e4a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002e4e:	fa93 f3a3 	rbit	r3, r3
 8002e52:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002e56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002e5a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002e5e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d101      	bne.n	8002e6a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002e66:	2320      	movs	r3, #32
 8002e68:	e004      	b.n	8002e74 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002e6a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002e6e:	fab3 f383 	clz	r3, r3
 8002e72:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d106      	bne.n	8002e86 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	2100      	movs	r1, #0
 8002e80:	4618      	mov	r0, r3
 8002e82:	f7ff f81b 	bl	8001ebc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	2101      	movs	r1, #1
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f7fe ffff 	bl	8001e90 <LL_ADC_GetOffsetChannel>
 8002e92:	4603      	mov	r3, r0
 8002e94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d10a      	bne.n	8002eb2 <HAL_ADC_ConfigChannel+0x222>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	2101      	movs	r1, #1
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f7fe fff4 	bl	8001e90 <LL_ADC_GetOffsetChannel>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	0e9b      	lsrs	r3, r3, #26
 8002eac:	f003 021f 	and.w	r2, r3, #31
 8002eb0:	e01e      	b.n	8002ef0 <HAL_ADC_ConfigChannel+0x260>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	2101      	movs	r1, #1
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f7fe ffe9 	bl	8001e90 <LL_ADC_GetOffsetChannel>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ec4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002ec8:	fa93 f3a3 	rbit	r3, r3
 8002ecc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002ed0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002ed4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002ed8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d101      	bne.n	8002ee4 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002ee0:	2320      	movs	r3, #32
 8002ee2:	e004      	b.n	8002eee <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002ee4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002ee8:	fab3 f383 	clz	r3, r3
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d105      	bne.n	8002f08 <HAL_ADC_ConfigChannel+0x278>
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	0e9b      	lsrs	r3, r3, #26
 8002f02:	f003 031f 	and.w	r3, r3, #31
 8002f06:	e018      	b.n	8002f3a <HAL_ADC_ConfigChannel+0x2aa>
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f10:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002f14:	fa93 f3a3 	rbit	r3, r3
 8002f18:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002f1c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002f20:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002f24:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d101      	bne.n	8002f30 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002f2c:	2320      	movs	r3, #32
 8002f2e:	e004      	b.n	8002f3a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002f30:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002f34:	fab3 f383 	clz	r3, r3
 8002f38:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d106      	bne.n	8002f4c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	2200      	movs	r2, #0
 8002f44:	2101      	movs	r1, #1
 8002f46:	4618      	mov	r0, r3
 8002f48:	f7fe ffb8 	bl	8001ebc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	2102      	movs	r1, #2
 8002f52:	4618      	mov	r0, r3
 8002f54:	f7fe ff9c 	bl	8001e90 <LL_ADC_GetOffsetChannel>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d10a      	bne.n	8002f78 <HAL_ADC_ConfigChannel+0x2e8>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	2102      	movs	r1, #2
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f7fe ff91 	bl	8001e90 <LL_ADC_GetOffsetChannel>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	0e9b      	lsrs	r3, r3, #26
 8002f72:	f003 021f 	and.w	r2, r3, #31
 8002f76:	e01e      	b.n	8002fb6 <HAL_ADC_ConfigChannel+0x326>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	2102      	movs	r1, #2
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f7fe ff86 	bl	8001e90 <LL_ADC_GetOffsetChannel>
 8002f84:	4603      	mov	r3, r0
 8002f86:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f8e:	fa93 f3a3 	rbit	r3, r3
 8002f92:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002f96:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002f9a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002f9e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d101      	bne.n	8002faa <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002fa6:	2320      	movs	r3, #32
 8002fa8:	e004      	b.n	8002fb4 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002faa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002fae:	fab3 f383 	clz	r3, r3
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d105      	bne.n	8002fce <HAL_ADC_ConfigChannel+0x33e>
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	0e9b      	lsrs	r3, r3, #26
 8002fc8:	f003 031f 	and.w	r3, r3, #31
 8002fcc:	e016      	b.n	8002ffc <HAL_ADC_ConfigChannel+0x36c>
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002fda:	fa93 f3a3 	rbit	r3, r3
 8002fde:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002fe0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002fe2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002fe6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d101      	bne.n	8002ff2 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002fee:	2320      	movs	r3, #32
 8002ff0:	e004      	b.n	8002ffc <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002ff2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ff6:	fab3 f383 	clz	r3, r3
 8002ffa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d106      	bne.n	800300e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	2200      	movs	r2, #0
 8003006:	2102      	movs	r1, #2
 8003008:	4618      	mov	r0, r3
 800300a:	f7fe ff57 	bl	8001ebc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	2103      	movs	r1, #3
 8003014:	4618      	mov	r0, r3
 8003016:	f7fe ff3b 	bl	8001e90 <LL_ADC_GetOffsetChannel>
 800301a:	4603      	mov	r3, r0
 800301c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003020:	2b00      	cmp	r3, #0
 8003022:	d10a      	bne.n	800303a <HAL_ADC_ConfigChannel+0x3aa>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	2103      	movs	r1, #3
 800302a:	4618      	mov	r0, r3
 800302c:	f7fe ff30 	bl	8001e90 <LL_ADC_GetOffsetChannel>
 8003030:	4603      	mov	r3, r0
 8003032:	0e9b      	lsrs	r3, r3, #26
 8003034:	f003 021f 	and.w	r2, r3, #31
 8003038:	e017      	b.n	800306a <HAL_ADC_ConfigChannel+0x3da>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	2103      	movs	r1, #3
 8003040:	4618      	mov	r0, r3
 8003042:	f7fe ff25 	bl	8001e90 <LL_ADC_GetOffsetChannel>
 8003046:	4603      	mov	r3, r0
 8003048:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800304a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800304c:	fa93 f3a3 	rbit	r3, r3
 8003050:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003052:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003054:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003056:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003058:	2b00      	cmp	r3, #0
 800305a:	d101      	bne.n	8003060 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 800305c:	2320      	movs	r3, #32
 800305e:	e003      	b.n	8003068 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003060:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003062:	fab3 f383 	clz	r3, r3
 8003066:	b2db      	uxtb	r3, r3
 8003068:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003072:	2b00      	cmp	r3, #0
 8003074:	d105      	bne.n	8003082 <HAL_ADC_ConfigChannel+0x3f2>
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	0e9b      	lsrs	r3, r3, #26
 800307c:	f003 031f 	and.w	r3, r3, #31
 8003080:	e011      	b.n	80030a6 <HAL_ADC_ConfigChannel+0x416>
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003088:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800308a:	fa93 f3a3 	rbit	r3, r3
 800308e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003090:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003092:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003094:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003096:	2b00      	cmp	r3, #0
 8003098:	d101      	bne.n	800309e <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800309a:	2320      	movs	r3, #32
 800309c:	e003      	b.n	80030a6 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800309e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030a0:	fab3 f383 	clz	r3, r3
 80030a4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d106      	bne.n	80030b8 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	2200      	movs	r2, #0
 80030b0:	2103      	movs	r1, #3
 80030b2:	4618      	mov	r0, r3
 80030b4:	f7fe ff02 	bl	8001ebc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4618      	mov	r0, r3
 80030be:	f7ff f881 	bl	80021c4 <LL_ADC_IsEnabled>
 80030c2:	4603      	mov	r3, r0
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	f040 813d 	bne.w	8003344 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6818      	ldr	r0, [r3, #0]
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	6819      	ldr	r1, [r3, #0]
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	68db      	ldr	r3, [r3, #12]
 80030d6:	461a      	mov	r2, r3
 80030d8:	f7fe ffd2 	bl	8002080 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	4aa2      	ldr	r2, [pc, #648]	; (800336c <HAL_ADC_ConfigChannel+0x6dc>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	f040 812e 	bne.w	8003344 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d10b      	bne.n	8003110 <HAL_ADC_ConfigChannel+0x480>
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	0e9b      	lsrs	r3, r3, #26
 80030fe:	3301      	adds	r3, #1
 8003100:	f003 031f 	and.w	r3, r3, #31
 8003104:	2b09      	cmp	r3, #9
 8003106:	bf94      	ite	ls
 8003108:	2301      	movls	r3, #1
 800310a:	2300      	movhi	r3, #0
 800310c:	b2db      	uxtb	r3, r3
 800310e:	e019      	b.n	8003144 <HAL_ADC_ConfigChannel+0x4b4>
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003116:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003118:	fa93 f3a3 	rbit	r3, r3
 800311c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800311e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003120:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003122:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003124:	2b00      	cmp	r3, #0
 8003126:	d101      	bne.n	800312c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003128:	2320      	movs	r3, #32
 800312a:	e003      	b.n	8003134 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 800312c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800312e:	fab3 f383 	clz	r3, r3
 8003132:	b2db      	uxtb	r3, r3
 8003134:	3301      	adds	r3, #1
 8003136:	f003 031f 	and.w	r3, r3, #31
 800313a:	2b09      	cmp	r3, #9
 800313c:	bf94      	ite	ls
 800313e:	2301      	movls	r3, #1
 8003140:	2300      	movhi	r3, #0
 8003142:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003144:	2b00      	cmp	r3, #0
 8003146:	d079      	beq.n	800323c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003150:	2b00      	cmp	r3, #0
 8003152:	d107      	bne.n	8003164 <HAL_ADC_ConfigChannel+0x4d4>
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	0e9b      	lsrs	r3, r3, #26
 800315a:	3301      	adds	r3, #1
 800315c:	069b      	lsls	r3, r3, #26
 800315e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003162:	e015      	b.n	8003190 <HAL_ADC_ConfigChannel+0x500>
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800316a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800316c:	fa93 f3a3 	rbit	r3, r3
 8003170:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003172:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003174:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003176:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003178:	2b00      	cmp	r3, #0
 800317a:	d101      	bne.n	8003180 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 800317c:	2320      	movs	r3, #32
 800317e:	e003      	b.n	8003188 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003180:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003182:	fab3 f383 	clz	r3, r3
 8003186:	b2db      	uxtb	r3, r3
 8003188:	3301      	adds	r3, #1
 800318a:	069b      	lsls	r3, r3, #26
 800318c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003198:	2b00      	cmp	r3, #0
 800319a:	d109      	bne.n	80031b0 <HAL_ADC_ConfigChannel+0x520>
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	0e9b      	lsrs	r3, r3, #26
 80031a2:	3301      	adds	r3, #1
 80031a4:	f003 031f 	and.w	r3, r3, #31
 80031a8:	2101      	movs	r1, #1
 80031aa:	fa01 f303 	lsl.w	r3, r1, r3
 80031ae:	e017      	b.n	80031e0 <HAL_ADC_ConfigChannel+0x550>
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031b8:	fa93 f3a3 	rbit	r3, r3
 80031bc:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80031be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031c0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80031c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d101      	bne.n	80031cc <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80031c8:	2320      	movs	r3, #32
 80031ca:	e003      	b.n	80031d4 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80031cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031ce:	fab3 f383 	clz	r3, r3
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	3301      	adds	r3, #1
 80031d6:	f003 031f 	and.w	r3, r3, #31
 80031da:	2101      	movs	r1, #1
 80031dc:	fa01 f303 	lsl.w	r3, r1, r3
 80031e0:	ea42 0103 	orr.w	r1, r2, r3
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d10a      	bne.n	8003206 <HAL_ADC_ConfigChannel+0x576>
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	0e9b      	lsrs	r3, r3, #26
 80031f6:	3301      	adds	r3, #1
 80031f8:	f003 021f 	and.w	r2, r3, #31
 80031fc:	4613      	mov	r3, r2
 80031fe:	005b      	lsls	r3, r3, #1
 8003200:	4413      	add	r3, r2
 8003202:	051b      	lsls	r3, r3, #20
 8003204:	e018      	b.n	8003238 <HAL_ADC_ConfigChannel+0x5a8>
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800320c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800320e:	fa93 f3a3 	rbit	r3, r3
 8003212:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003214:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003216:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003218:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800321a:	2b00      	cmp	r3, #0
 800321c:	d101      	bne.n	8003222 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800321e:	2320      	movs	r3, #32
 8003220:	e003      	b.n	800322a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8003222:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003224:	fab3 f383 	clz	r3, r3
 8003228:	b2db      	uxtb	r3, r3
 800322a:	3301      	adds	r3, #1
 800322c:	f003 021f 	and.w	r2, r3, #31
 8003230:	4613      	mov	r3, r2
 8003232:	005b      	lsls	r3, r3, #1
 8003234:	4413      	add	r3, r2
 8003236:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003238:	430b      	orrs	r3, r1
 800323a:	e07e      	b.n	800333a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003244:	2b00      	cmp	r3, #0
 8003246:	d107      	bne.n	8003258 <HAL_ADC_ConfigChannel+0x5c8>
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	0e9b      	lsrs	r3, r3, #26
 800324e:	3301      	adds	r3, #1
 8003250:	069b      	lsls	r3, r3, #26
 8003252:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003256:	e015      	b.n	8003284 <HAL_ADC_ConfigChannel+0x5f4>
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800325e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003260:	fa93 f3a3 	rbit	r3, r3
 8003264:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003268:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800326a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800326c:	2b00      	cmp	r3, #0
 800326e:	d101      	bne.n	8003274 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003270:	2320      	movs	r3, #32
 8003272:	e003      	b.n	800327c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003276:	fab3 f383 	clz	r3, r3
 800327a:	b2db      	uxtb	r3, r3
 800327c:	3301      	adds	r3, #1
 800327e:	069b      	lsls	r3, r3, #26
 8003280:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800328c:	2b00      	cmp	r3, #0
 800328e:	d109      	bne.n	80032a4 <HAL_ADC_ConfigChannel+0x614>
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	0e9b      	lsrs	r3, r3, #26
 8003296:	3301      	adds	r3, #1
 8003298:	f003 031f 	and.w	r3, r3, #31
 800329c:	2101      	movs	r1, #1
 800329e:	fa01 f303 	lsl.w	r3, r1, r3
 80032a2:	e017      	b.n	80032d4 <HAL_ADC_ConfigChannel+0x644>
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032aa:	6a3b      	ldr	r3, [r7, #32]
 80032ac:	fa93 f3a3 	rbit	r3, r3
 80032b0:	61fb      	str	r3, [r7, #28]
  return result;
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80032b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d101      	bne.n	80032c0 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80032bc:	2320      	movs	r3, #32
 80032be:	e003      	b.n	80032c8 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80032c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c2:	fab3 f383 	clz	r3, r3
 80032c6:	b2db      	uxtb	r3, r3
 80032c8:	3301      	adds	r3, #1
 80032ca:	f003 031f 	and.w	r3, r3, #31
 80032ce:	2101      	movs	r1, #1
 80032d0:	fa01 f303 	lsl.w	r3, r1, r3
 80032d4:	ea42 0103 	orr.w	r1, r2, r3
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d10d      	bne.n	8003300 <HAL_ADC_ConfigChannel+0x670>
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	0e9b      	lsrs	r3, r3, #26
 80032ea:	3301      	adds	r3, #1
 80032ec:	f003 021f 	and.w	r2, r3, #31
 80032f0:	4613      	mov	r3, r2
 80032f2:	005b      	lsls	r3, r3, #1
 80032f4:	4413      	add	r3, r2
 80032f6:	3b1e      	subs	r3, #30
 80032f8:	051b      	lsls	r3, r3, #20
 80032fa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80032fe:	e01b      	b.n	8003338 <HAL_ADC_ConfigChannel+0x6a8>
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	fa93 f3a3 	rbit	r3, r3
 800330c:	613b      	str	r3, [r7, #16]
  return result;
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003312:	69bb      	ldr	r3, [r7, #24]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d101      	bne.n	800331c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003318:	2320      	movs	r3, #32
 800331a:	e003      	b.n	8003324 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 800331c:	69bb      	ldr	r3, [r7, #24]
 800331e:	fab3 f383 	clz	r3, r3
 8003322:	b2db      	uxtb	r3, r3
 8003324:	3301      	adds	r3, #1
 8003326:	f003 021f 	and.w	r2, r3, #31
 800332a:	4613      	mov	r3, r2
 800332c:	005b      	lsls	r3, r3, #1
 800332e:	4413      	add	r3, r2
 8003330:	3b1e      	subs	r3, #30
 8003332:	051b      	lsls	r3, r3, #20
 8003334:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003338:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800333a:	683a      	ldr	r2, [r7, #0]
 800333c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800333e:	4619      	mov	r1, r3
 8003340:	f7fe fe72 	bl	8002028 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	4b09      	ldr	r3, [pc, #36]	; (8003370 <HAL_ADC_ConfigChannel+0x6e0>)
 800334a:	4013      	ands	r3, r2
 800334c:	2b00      	cmp	r3, #0
 800334e:	f000 80be 	beq.w	80034ce <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800335a:	d004      	beq.n	8003366 <HAL_ADC_ConfigChannel+0x6d6>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a04      	ldr	r2, [pc, #16]	; (8003374 <HAL_ADC_ConfigChannel+0x6e4>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d10a      	bne.n	800337c <HAL_ADC_ConfigChannel+0x6ec>
 8003366:	4b04      	ldr	r3, [pc, #16]	; (8003378 <HAL_ADC_ConfigChannel+0x6e8>)
 8003368:	e009      	b.n	800337e <HAL_ADC_ConfigChannel+0x6ee>
 800336a:	bf00      	nop
 800336c:	407f0000 	.word	0x407f0000
 8003370:	80080000 	.word	0x80080000
 8003374:	50000100 	.word	0x50000100
 8003378:	50000300 	.word	0x50000300
 800337c:	4b59      	ldr	r3, [pc, #356]	; (80034e4 <HAL_ADC_ConfigChannel+0x854>)
 800337e:	4618      	mov	r0, r3
 8003380:	f7fe fd54 	bl	8001e2c <LL_ADC_GetCommonPathInternalCh>
 8003384:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a56      	ldr	r2, [pc, #344]	; (80034e8 <HAL_ADC_ConfigChannel+0x858>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d004      	beq.n	800339c <HAL_ADC_ConfigChannel+0x70c>
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a55      	ldr	r2, [pc, #340]	; (80034ec <HAL_ADC_ConfigChannel+0x85c>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d13a      	bne.n	8003412 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800339c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80033a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d134      	bne.n	8003412 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80033b0:	d005      	beq.n	80033be <HAL_ADC_ConfigChannel+0x72e>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a4e      	ldr	r2, [pc, #312]	; (80034f0 <HAL_ADC_ConfigChannel+0x860>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	f040 8085 	bne.w	80034c8 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80033c6:	d004      	beq.n	80033d2 <HAL_ADC_ConfigChannel+0x742>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a49      	ldr	r2, [pc, #292]	; (80034f4 <HAL_ADC_ConfigChannel+0x864>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d101      	bne.n	80033d6 <HAL_ADC_ConfigChannel+0x746>
 80033d2:	4a49      	ldr	r2, [pc, #292]	; (80034f8 <HAL_ADC_ConfigChannel+0x868>)
 80033d4:	e000      	b.n	80033d8 <HAL_ADC_ConfigChannel+0x748>
 80033d6:	4a43      	ldr	r2, [pc, #268]	; (80034e4 <HAL_ADC_ConfigChannel+0x854>)
 80033d8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80033dc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80033e0:	4619      	mov	r1, r3
 80033e2:	4610      	mov	r0, r2
 80033e4:	f7fe fd0f 	bl	8001e06 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80033e8:	4b44      	ldr	r3, [pc, #272]	; (80034fc <HAL_ADC_ConfigChannel+0x86c>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	099b      	lsrs	r3, r3, #6
 80033ee:	4a44      	ldr	r2, [pc, #272]	; (8003500 <HAL_ADC_ConfigChannel+0x870>)
 80033f0:	fba2 2303 	umull	r2, r3, r2, r3
 80033f4:	099b      	lsrs	r3, r3, #6
 80033f6:	1c5a      	adds	r2, r3, #1
 80033f8:	4613      	mov	r3, r2
 80033fa:	005b      	lsls	r3, r3, #1
 80033fc:	4413      	add	r3, r2
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003402:	e002      	b.n	800340a <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	3b01      	subs	r3, #1
 8003408:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d1f9      	bne.n	8003404 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003410:	e05a      	b.n	80034c8 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a3b      	ldr	r2, [pc, #236]	; (8003504 <HAL_ADC_ConfigChannel+0x874>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d125      	bne.n	8003468 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800341c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003420:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003424:	2b00      	cmp	r3, #0
 8003426:	d11f      	bne.n	8003468 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a31      	ldr	r2, [pc, #196]	; (80034f4 <HAL_ADC_ConfigChannel+0x864>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d104      	bne.n	800343c <HAL_ADC_ConfigChannel+0x7ac>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a34      	ldr	r2, [pc, #208]	; (8003508 <HAL_ADC_ConfigChannel+0x878>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d047      	beq.n	80034cc <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003444:	d004      	beq.n	8003450 <HAL_ADC_ConfigChannel+0x7c0>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a2a      	ldr	r2, [pc, #168]	; (80034f4 <HAL_ADC_ConfigChannel+0x864>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d101      	bne.n	8003454 <HAL_ADC_ConfigChannel+0x7c4>
 8003450:	4a29      	ldr	r2, [pc, #164]	; (80034f8 <HAL_ADC_ConfigChannel+0x868>)
 8003452:	e000      	b.n	8003456 <HAL_ADC_ConfigChannel+0x7c6>
 8003454:	4a23      	ldr	r2, [pc, #140]	; (80034e4 <HAL_ADC_ConfigChannel+0x854>)
 8003456:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800345a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800345e:	4619      	mov	r1, r3
 8003460:	4610      	mov	r0, r2
 8003462:	f7fe fcd0 	bl	8001e06 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003466:	e031      	b.n	80034cc <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a27      	ldr	r2, [pc, #156]	; (800350c <HAL_ADC_ConfigChannel+0x87c>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d12d      	bne.n	80034ce <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003472:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003476:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d127      	bne.n	80034ce <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a1c      	ldr	r2, [pc, #112]	; (80034f4 <HAL_ADC_ConfigChannel+0x864>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d022      	beq.n	80034ce <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003490:	d004      	beq.n	800349c <HAL_ADC_ConfigChannel+0x80c>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a17      	ldr	r2, [pc, #92]	; (80034f4 <HAL_ADC_ConfigChannel+0x864>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d101      	bne.n	80034a0 <HAL_ADC_ConfigChannel+0x810>
 800349c:	4a16      	ldr	r2, [pc, #88]	; (80034f8 <HAL_ADC_ConfigChannel+0x868>)
 800349e:	e000      	b.n	80034a2 <HAL_ADC_ConfigChannel+0x812>
 80034a0:	4a10      	ldr	r2, [pc, #64]	; (80034e4 <HAL_ADC_ConfigChannel+0x854>)
 80034a2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80034a6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80034aa:	4619      	mov	r1, r3
 80034ac:	4610      	mov	r0, r2
 80034ae:	f7fe fcaa 	bl	8001e06 <LL_ADC_SetCommonPathInternalCh>
 80034b2:	e00c      	b.n	80034ce <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034b8:	f043 0220 	orr.w	r2, r3, #32
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80034c6:	e002      	b.n	80034ce <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80034c8:	bf00      	nop
 80034ca:	e000      	b.n	80034ce <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80034cc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80034d6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80034da:	4618      	mov	r0, r3
 80034dc:	37d8      	adds	r7, #216	; 0xd8
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	bf00      	nop
 80034e4:	50000700 	.word	0x50000700
 80034e8:	c3210000 	.word	0xc3210000
 80034ec:	90c00010 	.word	0x90c00010
 80034f0:	50000600 	.word	0x50000600
 80034f4:	50000100 	.word	0x50000100
 80034f8:	50000300 	.word	0x50000300
 80034fc:	20000018 	.word	0x20000018
 8003500:	053e2d63 	.word	0x053e2d63
 8003504:	c7520000 	.word	0xc7520000
 8003508:	50000500 	.word	0x50000500
 800350c:	cb840000 	.word	0xcb840000

08003510 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b084      	sub	sp, #16
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003518:	2300      	movs	r3, #0
 800351a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4618      	mov	r0, r3
 8003522:	f7fe fe4f 	bl	80021c4 <LL_ADC_IsEnabled>
 8003526:	4603      	mov	r3, r0
 8003528:	2b00      	cmp	r3, #0
 800352a:	d176      	bne.n	800361a <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	689a      	ldr	r2, [r3, #8]
 8003532:	4b3c      	ldr	r3, [pc, #240]	; (8003624 <ADC_Enable+0x114>)
 8003534:	4013      	ands	r3, r2
 8003536:	2b00      	cmp	r3, #0
 8003538:	d00d      	beq.n	8003556 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800353e:	f043 0210 	orr.w	r2, r3, #16
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800354a:	f043 0201 	orr.w	r2, r3, #1
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e062      	b.n	800361c <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4618      	mov	r0, r3
 800355c:	f7fe fe1e 	bl	800219c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003568:	d004      	beq.n	8003574 <ADC_Enable+0x64>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a2e      	ldr	r2, [pc, #184]	; (8003628 <ADC_Enable+0x118>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d101      	bne.n	8003578 <ADC_Enable+0x68>
 8003574:	4b2d      	ldr	r3, [pc, #180]	; (800362c <ADC_Enable+0x11c>)
 8003576:	e000      	b.n	800357a <ADC_Enable+0x6a>
 8003578:	4b2d      	ldr	r3, [pc, #180]	; (8003630 <ADC_Enable+0x120>)
 800357a:	4618      	mov	r0, r3
 800357c:	f7fe fc56 	bl	8001e2c <LL_ADC_GetCommonPathInternalCh>
 8003580:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003582:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003586:	2b00      	cmp	r3, #0
 8003588:	d013      	beq.n	80035b2 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800358a:	4b2a      	ldr	r3, [pc, #168]	; (8003634 <ADC_Enable+0x124>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	099b      	lsrs	r3, r3, #6
 8003590:	4a29      	ldr	r2, [pc, #164]	; (8003638 <ADC_Enable+0x128>)
 8003592:	fba2 2303 	umull	r2, r3, r2, r3
 8003596:	099b      	lsrs	r3, r3, #6
 8003598:	1c5a      	adds	r2, r3, #1
 800359a:	4613      	mov	r3, r2
 800359c:	005b      	lsls	r3, r3, #1
 800359e:	4413      	add	r3, r2
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80035a4:	e002      	b.n	80035ac <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	3b01      	subs	r3, #1
 80035aa:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d1f9      	bne.n	80035a6 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80035b2:	f7fe fc09 	bl	8001dc8 <HAL_GetTick>
 80035b6:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80035b8:	e028      	b.n	800360c <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4618      	mov	r0, r3
 80035c0:	f7fe fe00 	bl	80021c4 <LL_ADC_IsEnabled>
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d104      	bne.n	80035d4 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4618      	mov	r0, r3
 80035d0:	f7fe fde4 	bl	800219c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80035d4:	f7fe fbf8 	bl	8001dc8 <HAL_GetTick>
 80035d8:	4602      	mov	r2, r0
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	2b02      	cmp	r3, #2
 80035e0:	d914      	bls.n	800360c <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0301 	and.w	r3, r3, #1
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d00d      	beq.n	800360c <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035f4:	f043 0210 	orr.w	r2, r3, #16
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003600:	f043 0201 	orr.w	r2, r3, #1
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	e007      	b.n	800361c <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0301 	and.w	r3, r3, #1
 8003616:	2b01      	cmp	r3, #1
 8003618:	d1cf      	bne.n	80035ba <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800361a:	2300      	movs	r3, #0
}
 800361c:	4618      	mov	r0, r3
 800361e:	3710      	adds	r7, #16
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}
 8003624:	8000003f 	.word	0x8000003f
 8003628:	50000100 	.word	0x50000100
 800362c:	50000300 	.word	0x50000300
 8003630:	50000700 	.word	0x50000700
 8003634:	20000018 	.word	0x20000018
 8003638:	053e2d63 	.word	0x053e2d63

0800363c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b084      	sub	sp, #16
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003648:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800364e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003652:	2b00      	cmp	r3, #0
 8003654:	d14b      	bne.n	80036ee <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800365a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 0308 	and.w	r3, r3, #8
 800366c:	2b00      	cmp	r3, #0
 800366e:	d021      	beq.n	80036b4 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4618      	mov	r0, r3
 8003676:	f7fe fc85 	bl	8001f84 <LL_ADC_REG_IsTriggerSourceSWStart>
 800367a:	4603      	mov	r3, r0
 800367c:	2b00      	cmp	r3, #0
 800367e:	d032      	beq.n	80036e6 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	68db      	ldr	r3, [r3, #12]
 8003686:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800368a:	2b00      	cmp	r3, #0
 800368c:	d12b      	bne.n	80036e6 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003692:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800369e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d11f      	bne.n	80036e6 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036aa:	f043 0201 	orr.w	r2, r3, #1
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	65da      	str	r2, [r3, #92]	; 0x5c
 80036b2:	e018      	b.n	80036e6 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	68db      	ldr	r3, [r3, #12]
 80036ba:	f003 0302 	and.w	r3, r3, #2
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d111      	bne.n	80036e6 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d105      	bne.n	80036e6 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036de:	f043 0201 	orr.w	r2, r3, #1
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80036e6:	68f8      	ldr	r0, [r7, #12]
 80036e8:	f7ff faaa 	bl	8002c40 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80036ec:	e00e      	b.n	800370c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036f2:	f003 0310 	and.w	r3, r3, #16
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d003      	beq.n	8003702 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80036fa:	68f8      	ldr	r0, [r7, #12]
 80036fc:	f7ff fabe 	bl	8002c7c <HAL_ADC_ErrorCallback>
}
 8003700:	e004      	b.n	800370c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003706:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	4798      	blx	r3
}
 800370c:	bf00      	nop
 800370e:	3710      	adds	r7, #16
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}

08003714 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b084      	sub	sp, #16
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003720:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003722:	68f8      	ldr	r0, [r7, #12]
 8003724:	f7ff fa96 	bl	8002c54 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003728:	bf00      	nop
 800372a:	3710      	adds	r7, #16
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}

08003730 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b084      	sub	sp, #16
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800373c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003742:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800374e:	f043 0204 	orr.w	r2, r3, #4
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003756:	68f8      	ldr	r0, [r7, #12]
 8003758:	f7ff fa90 	bl	8002c7c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800375c:	bf00      	nop
 800375e:	3710      	adds	r7, #16
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}

08003764 <LL_ADC_IsEnabled>:
{
 8003764:	b480      	push	{r7}
 8003766:	b083      	sub	sp, #12
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	f003 0301 	and.w	r3, r3, #1
 8003774:	2b01      	cmp	r3, #1
 8003776:	d101      	bne.n	800377c <LL_ADC_IsEnabled+0x18>
 8003778:	2301      	movs	r3, #1
 800377a:	e000      	b.n	800377e <LL_ADC_IsEnabled+0x1a>
 800377c:	2300      	movs	r3, #0
}
 800377e:	4618      	mov	r0, r3
 8003780:	370c      	adds	r7, #12
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr

0800378a <LL_ADC_REG_IsConversionOngoing>:
{
 800378a:	b480      	push	{r7}
 800378c:	b083      	sub	sp, #12
 800378e:	af00      	add	r7, sp, #0
 8003790:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	f003 0304 	and.w	r3, r3, #4
 800379a:	2b04      	cmp	r3, #4
 800379c:	d101      	bne.n	80037a2 <LL_ADC_REG_IsConversionOngoing+0x18>
 800379e:	2301      	movs	r3, #1
 80037a0:	e000      	b.n	80037a4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80037a2:	2300      	movs	r3, #0
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	370c      	adds	r7, #12
 80037a8:	46bd      	mov	sp, r7
 80037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ae:	4770      	bx	lr

080037b0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b083      	sub	sp, #12
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80037b8:	bf00      	nop
 80037ba:	370c      	adds	r7, #12
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr

080037c4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b083      	sub	sp, #12
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80037cc:	bf00      	nop
 80037ce:	370c      	adds	r7, #12
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr

080037d8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80037d8:	b480      	push	{r7}
 80037da:	b083      	sub	sp, #12
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80037e0:	bf00      	nop
 80037e2:	370c      	adds	r7, #12
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr

080037ec <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b083      	sub	sp, #12
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80037f4:	bf00      	nop
 80037f6:	370c      	adds	r7, #12
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr

08003800 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003800:	b480      	push	{r7}
 8003802:	b083      	sub	sp, #12
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003808:	bf00      	nop
 800380a:	370c      	adds	r7, #12
 800380c:	46bd      	mov	sp, r7
 800380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003812:	4770      	bx	lr

08003814 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003814:	b590      	push	{r4, r7, lr}
 8003816:	b0a1      	sub	sp, #132	; 0x84
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
 800381c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800381e:	2300      	movs	r3, #0
 8003820:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800382a:	2b01      	cmp	r3, #1
 800382c:	d101      	bne.n	8003832 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800382e:	2302      	movs	r3, #2
 8003830:	e0e7      	b.n	8003a02 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2201      	movs	r2, #1
 8003836:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800383a:	2300      	movs	r3, #0
 800383c:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800383e:	2300      	movs	r3, #0
 8003840:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800384a:	d102      	bne.n	8003852 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800384c:	4b6f      	ldr	r3, [pc, #444]	; (8003a0c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800384e:	60bb      	str	r3, [r7, #8]
 8003850:	e009      	b.n	8003866 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a6e      	ldr	r2, [pc, #440]	; (8003a10 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d102      	bne.n	8003862 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 800385c:	4b6d      	ldr	r3, [pc, #436]	; (8003a14 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800385e:	60bb      	str	r3, [r7, #8]
 8003860:	e001      	b.n	8003866 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003862:	2300      	movs	r3, #0
 8003864:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d10b      	bne.n	8003884 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003870:	f043 0220 	orr.w	r2, r3, #32
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2200      	movs	r2, #0
 800387c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	e0be      	b.n	8003a02 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	4618      	mov	r0, r3
 8003888:	f7ff ff7f 	bl	800378a <LL_ADC_REG_IsConversionOngoing>
 800388c:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4618      	mov	r0, r3
 8003894:	f7ff ff79 	bl	800378a <LL_ADC_REG_IsConversionOngoing>
 8003898:	4603      	mov	r3, r0
 800389a:	2b00      	cmp	r3, #0
 800389c:	f040 80a0 	bne.w	80039e0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80038a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	f040 809c 	bne.w	80039e0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80038b0:	d004      	beq.n	80038bc <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a55      	ldr	r2, [pc, #340]	; (8003a0c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d101      	bne.n	80038c0 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80038bc:	4b56      	ldr	r3, [pc, #344]	; (8003a18 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80038be:	e000      	b.n	80038c2 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80038c0:	4b56      	ldr	r3, [pc, #344]	; (8003a1c <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80038c2:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d04b      	beq.n	8003964 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80038cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	6859      	ldr	r1, [r3, #4]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80038de:	035b      	lsls	r3, r3, #13
 80038e0:	430b      	orrs	r3, r1
 80038e2:	431a      	orrs	r2, r3
 80038e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038e6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80038f0:	d004      	beq.n	80038fc <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a45      	ldr	r2, [pc, #276]	; (8003a0c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d10f      	bne.n	800391c <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80038fc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003900:	f7ff ff30 	bl	8003764 <LL_ADC_IsEnabled>
 8003904:	4604      	mov	r4, r0
 8003906:	4841      	ldr	r0, [pc, #260]	; (8003a0c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003908:	f7ff ff2c 	bl	8003764 <LL_ADC_IsEnabled>
 800390c:	4603      	mov	r3, r0
 800390e:	4323      	orrs	r3, r4
 8003910:	2b00      	cmp	r3, #0
 8003912:	bf0c      	ite	eq
 8003914:	2301      	moveq	r3, #1
 8003916:	2300      	movne	r3, #0
 8003918:	b2db      	uxtb	r3, r3
 800391a:	e012      	b.n	8003942 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 800391c:	483c      	ldr	r0, [pc, #240]	; (8003a10 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800391e:	f7ff ff21 	bl	8003764 <LL_ADC_IsEnabled>
 8003922:	4604      	mov	r4, r0
 8003924:	483b      	ldr	r0, [pc, #236]	; (8003a14 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003926:	f7ff ff1d 	bl	8003764 <LL_ADC_IsEnabled>
 800392a:	4603      	mov	r3, r0
 800392c:	431c      	orrs	r4, r3
 800392e:	483c      	ldr	r0, [pc, #240]	; (8003a20 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003930:	f7ff ff18 	bl	8003764 <LL_ADC_IsEnabled>
 8003934:	4603      	mov	r3, r0
 8003936:	4323      	orrs	r3, r4
 8003938:	2b00      	cmp	r3, #0
 800393a:	bf0c      	ite	eq
 800393c:	2301      	moveq	r3, #1
 800393e:	2300      	movne	r3, #0
 8003940:	b2db      	uxtb	r3, r3
 8003942:	2b00      	cmp	r3, #0
 8003944:	d056      	beq.n	80039f4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003946:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800394e:	f023 030f 	bic.w	r3, r3, #15
 8003952:	683a      	ldr	r2, [r7, #0]
 8003954:	6811      	ldr	r1, [r2, #0]
 8003956:	683a      	ldr	r2, [r7, #0]
 8003958:	6892      	ldr	r2, [r2, #8]
 800395a:	430a      	orrs	r2, r1
 800395c:	431a      	orrs	r2, r3
 800395e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003960:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003962:	e047      	b.n	80039f4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003964:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800396c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800396e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003978:	d004      	beq.n	8003984 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a23      	ldr	r2, [pc, #140]	; (8003a0c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d10f      	bne.n	80039a4 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003984:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003988:	f7ff feec 	bl	8003764 <LL_ADC_IsEnabled>
 800398c:	4604      	mov	r4, r0
 800398e:	481f      	ldr	r0, [pc, #124]	; (8003a0c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003990:	f7ff fee8 	bl	8003764 <LL_ADC_IsEnabled>
 8003994:	4603      	mov	r3, r0
 8003996:	4323      	orrs	r3, r4
 8003998:	2b00      	cmp	r3, #0
 800399a:	bf0c      	ite	eq
 800399c:	2301      	moveq	r3, #1
 800399e:	2300      	movne	r3, #0
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	e012      	b.n	80039ca <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80039a4:	481a      	ldr	r0, [pc, #104]	; (8003a10 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80039a6:	f7ff fedd 	bl	8003764 <LL_ADC_IsEnabled>
 80039aa:	4604      	mov	r4, r0
 80039ac:	4819      	ldr	r0, [pc, #100]	; (8003a14 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80039ae:	f7ff fed9 	bl	8003764 <LL_ADC_IsEnabled>
 80039b2:	4603      	mov	r3, r0
 80039b4:	431c      	orrs	r4, r3
 80039b6:	481a      	ldr	r0, [pc, #104]	; (8003a20 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80039b8:	f7ff fed4 	bl	8003764 <LL_ADC_IsEnabled>
 80039bc:	4603      	mov	r3, r0
 80039be:	4323      	orrs	r3, r4
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	bf0c      	ite	eq
 80039c4:	2301      	moveq	r3, #1
 80039c6:	2300      	movne	r3, #0
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d012      	beq.n	80039f4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80039ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80039d6:	f023 030f 	bic.w	r3, r3, #15
 80039da:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80039dc:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80039de:	e009      	b.n	80039f4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039e4:	f043 0220 	orr.w	r2, r3, #32
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80039f2:	e000      	b.n	80039f6 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80039f4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2200      	movs	r2, #0
 80039fa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80039fe:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3784      	adds	r7, #132	; 0x84
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd90      	pop	{r4, r7, pc}
 8003a0a:	bf00      	nop
 8003a0c:	50000100 	.word	0x50000100
 8003a10:	50000400 	.word	0x50000400
 8003a14:	50000500 	.word	0x50000500
 8003a18:	50000300 	.word	0x50000300
 8003a1c:	50000700 	.word	0x50000700
 8003a20:	50000600 	.word	0x50000600

08003a24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b085      	sub	sp, #20
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	f003 0307 	and.w	r3, r3, #7
 8003a32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a34:	4b0c      	ldr	r3, [pc, #48]	; (8003a68 <__NVIC_SetPriorityGrouping+0x44>)
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a3a:	68ba      	ldr	r2, [r7, #8]
 8003a3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003a40:	4013      	ands	r3, r2
 8003a42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003a50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a56:	4a04      	ldr	r2, [pc, #16]	; (8003a68 <__NVIC_SetPriorityGrouping+0x44>)
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	60d3      	str	r3, [r2, #12]
}
 8003a5c:	bf00      	nop
 8003a5e:	3714      	adds	r7, #20
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr
 8003a68:	e000ed00 	.word	0xe000ed00

08003a6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a70:	4b04      	ldr	r3, [pc, #16]	; (8003a84 <__NVIC_GetPriorityGrouping+0x18>)
 8003a72:	68db      	ldr	r3, [r3, #12]
 8003a74:	0a1b      	lsrs	r3, r3, #8
 8003a76:	f003 0307 	and.w	r3, r3, #7
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr
 8003a84:	e000ed00 	.word	0xe000ed00

08003a88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b083      	sub	sp, #12
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	4603      	mov	r3, r0
 8003a90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	db0b      	blt.n	8003ab2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a9a:	79fb      	ldrb	r3, [r7, #7]
 8003a9c:	f003 021f 	and.w	r2, r3, #31
 8003aa0:	4907      	ldr	r1, [pc, #28]	; (8003ac0 <__NVIC_EnableIRQ+0x38>)
 8003aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aa6:	095b      	lsrs	r3, r3, #5
 8003aa8:	2001      	movs	r0, #1
 8003aaa:	fa00 f202 	lsl.w	r2, r0, r2
 8003aae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003ab2:	bf00      	nop
 8003ab4:	370c      	adds	r7, #12
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr
 8003abe:	bf00      	nop
 8003ac0:	e000e100 	.word	0xe000e100

08003ac4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b083      	sub	sp, #12
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	4603      	mov	r3, r0
 8003acc:	6039      	str	r1, [r7, #0]
 8003ace:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ad0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	db0a      	blt.n	8003aee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	b2da      	uxtb	r2, r3
 8003adc:	490c      	ldr	r1, [pc, #48]	; (8003b10 <__NVIC_SetPriority+0x4c>)
 8003ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ae2:	0112      	lsls	r2, r2, #4
 8003ae4:	b2d2      	uxtb	r2, r2
 8003ae6:	440b      	add	r3, r1
 8003ae8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003aec:	e00a      	b.n	8003b04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	b2da      	uxtb	r2, r3
 8003af2:	4908      	ldr	r1, [pc, #32]	; (8003b14 <__NVIC_SetPriority+0x50>)
 8003af4:	79fb      	ldrb	r3, [r7, #7]
 8003af6:	f003 030f 	and.w	r3, r3, #15
 8003afa:	3b04      	subs	r3, #4
 8003afc:	0112      	lsls	r2, r2, #4
 8003afe:	b2d2      	uxtb	r2, r2
 8003b00:	440b      	add	r3, r1
 8003b02:	761a      	strb	r2, [r3, #24]
}
 8003b04:	bf00      	nop
 8003b06:	370c      	adds	r7, #12
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0e:	4770      	bx	lr
 8003b10:	e000e100 	.word	0xe000e100
 8003b14:	e000ed00 	.word	0xe000ed00

08003b18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b089      	sub	sp, #36	; 0x24
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	60f8      	str	r0, [r7, #12]
 8003b20:	60b9      	str	r1, [r7, #8]
 8003b22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f003 0307 	and.w	r3, r3, #7
 8003b2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b2c:	69fb      	ldr	r3, [r7, #28]
 8003b2e:	f1c3 0307 	rsb	r3, r3, #7
 8003b32:	2b04      	cmp	r3, #4
 8003b34:	bf28      	it	cs
 8003b36:	2304      	movcs	r3, #4
 8003b38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b3a:	69fb      	ldr	r3, [r7, #28]
 8003b3c:	3304      	adds	r3, #4
 8003b3e:	2b06      	cmp	r3, #6
 8003b40:	d902      	bls.n	8003b48 <NVIC_EncodePriority+0x30>
 8003b42:	69fb      	ldr	r3, [r7, #28]
 8003b44:	3b03      	subs	r3, #3
 8003b46:	e000      	b.n	8003b4a <NVIC_EncodePriority+0x32>
 8003b48:	2300      	movs	r3, #0
 8003b4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b4c:	f04f 32ff 	mov.w	r2, #4294967295
 8003b50:	69bb      	ldr	r3, [r7, #24]
 8003b52:	fa02 f303 	lsl.w	r3, r2, r3
 8003b56:	43da      	mvns	r2, r3
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	401a      	ands	r2, r3
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b60:	f04f 31ff 	mov.w	r1, #4294967295
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	fa01 f303 	lsl.w	r3, r1, r3
 8003b6a:	43d9      	mvns	r1, r3
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b70:	4313      	orrs	r3, r2
         );
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3724      	adds	r7, #36	; 0x24
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr
	...

08003b80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b082      	sub	sp, #8
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	3b01      	subs	r3, #1
 8003b8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b90:	d301      	bcc.n	8003b96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b92:	2301      	movs	r3, #1
 8003b94:	e00f      	b.n	8003bb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b96:	4a0a      	ldr	r2, [pc, #40]	; (8003bc0 <SysTick_Config+0x40>)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	3b01      	subs	r3, #1
 8003b9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b9e:	210f      	movs	r1, #15
 8003ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ba4:	f7ff ff8e 	bl	8003ac4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ba8:	4b05      	ldr	r3, [pc, #20]	; (8003bc0 <SysTick_Config+0x40>)
 8003baa:	2200      	movs	r2, #0
 8003bac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003bae:	4b04      	ldr	r3, [pc, #16]	; (8003bc0 <SysTick_Config+0x40>)
 8003bb0:	2207      	movs	r2, #7
 8003bb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003bb4:	2300      	movs	r3, #0
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3708      	adds	r7, #8
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}
 8003bbe:	bf00      	nop
 8003bc0:	e000e010 	.word	0xe000e010

08003bc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b082      	sub	sp, #8
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	f7ff ff29 	bl	8003a24 <__NVIC_SetPriorityGrouping>
}
 8003bd2:	bf00      	nop
 8003bd4:	3708      	adds	r7, #8
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}

08003bda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003bda:	b580      	push	{r7, lr}
 8003bdc:	b086      	sub	sp, #24
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	4603      	mov	r3, r0
 8003be2:	60b9      	str	r1, [r7, #8]
 8003be4:	607a      	str	r2, [r7, #4]
 8003be6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003be8:	f7ff ff40 	bl	8003a6c <__NVIC_GetPriorityGrouping>
 8003bec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003bee:	687a      	ldr	r2, [r7, #4]
 8003bf0:	68b9      	ldr	r1, [r7, #8]
 8003bf2:	6978      	ldr	r0, [r7, #20]
 8003bf4:	f7ff ff90 	bl	8003b18 <NVIC_EncodePriority>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bfe:	4611      	mov	r1, r2
 8003c00:	4618      	mov	r0, r3
 8003c02:	f7ff ff5f 	bl	8003ac4 <__NVIC_SetPriority>
}
 8003c06:	bf00      	nop
 8003c08:	3718      	adds	r7, #24
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}

08003c0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c0e:	b580      	push	{r7, lr}
 8003c10:	b082      	sub	sp, #8
 8003c12:	af00      	add	r7, sp, #0
 8003c14:	4603      	mov	r3, r0
 8003c16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f7ff ff33 	bl	8003a88 <__NVIC_EnableIRQ>
}
 8003c22:	bf00      	nop
 8003c24:	3708      	adds	r7, #8
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}

08003c2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003c2a:	b580      	push	{r7, lr}
 8003c2c:	b082      	sub	sp, #8
 8003c2e:	af00      	add	r7, sp, #0
 8003c30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f7ff ffa4 	bl	8003b80 <SysTick_Config>
 8003c38:	4603      	mov	r3, r0
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3708      	adds	r7, #8
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
	...

08003c44 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b084      	sub	sp, #16
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d101      	bne.n	8003c56 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e08d      	b.n	8003d72 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	461a      	mov	r2, r3
 8003c5c:	4b47      	ldr	r3, [pc, #284]	; (8003d7c <HAL_DMA_Init+0x138>)
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	d80f      	bhi.n	8003c82 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	461a      	mov	r2, r3
 8003c68:	4b45      	ldr	r3, [pc, #276]	; (8003d80 <HAL_DMA_Init+0x13c>)
 8003c6a:	4413      	add	r3, r2
 8003c6c:	4a45      	ldr	r2, [pc, #276]	; (8003d84 <HAL_DMA_Init+0x140>)
 8003c6e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c72:	091b      	lsrs	r3, r3, #4
 8003c74:	009a      	lsls	r2, r3, #2
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	4a42      	ldr	r2, [pc, #264]	; (8003d88 <HAL_DMA_Init+0x144>)
 8003c7e:	641a      	str	r2, [r3, #64]	; 0x40
 8003c80:	e00e      	b.n	8003ca0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	461a      	mov	r2, r3
 8003c88:	4b40      	ldr	r3, [pc, #256]	; (8003d8c <HAL_DMA_Init+0x148>)
 8003c8a:	4413      	add	r3, r2
 8003c8c:	4a3d      	ldr	r2, [pc, #244]	; (8003d84 <HAL_DMA_Init+0x140>)
 8003c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c92:	091b      	lsrs	r3, r3, #4
 8003c94:	009a      	lsls	r2, r3, #2
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4a3c      	ldr	r2, [pc, #240]	; (8003d90 <HAL_DMA_Init+0x14c>)
 8003c9e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2202      	movs	r2, #2
 8003ca4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003cb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cba:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003cc4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	691b      	ldr	r3, [r3, #16]
 8003cca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003cd0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	699b      	ldr	r3, [r3, #24]
 8003cd6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cdc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6a1b      	ldr	r3, [r3, #32]
 8003ce2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003ce4:	68fa      	ldr	r2, [r7, #12]
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	68fa      	ldr	r2, [r7, #12]
 8003cf0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f000 fa76 	bl	80041e4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d00:	d102      	bne.n	8003d08 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2200      	movs	r2, #0
 8003d06:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	685a      	ldr	r2, [r3, #4]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d10:	b2d2      	uxtb	r2, r2
 8003d12:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d18:	687a      	ldr	r2, [r7, #4]
 8003d1a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003d1c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d010      	beq.n	8003d48 <HAL_DMA_Init+0x104>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	2b04      	cmp	r3, #4
 8003d2c:	d80c      	bhi.n	8003d48 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f000 fa96 	bl	8004260 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d38:	2200      	movs	r2, #0
 8003d3a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d40:	687a      	ldr	r2, [r7, #4]
 8003d42:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003d44:	605a      	str	r2, [r3, #4]
 8003d46:	e008      	b.n	8003d5a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2200      	movs	r2, #0
 8003d58:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2201      	movs	r2, #1
 8003d64:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003d70:	2300      	movs	r3, #0
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3710      	adds	r7, #16
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	40020407 	.word	0x40020407
 8003d80:	bffdfff8 	.word	0xbffdfff8
 8003d84:	cccccccd 	.word	0xcccccccd
 8003d88:	40020000 	.word	0x40020000
 8003d8c:	bffdfbf8 	.word	0xbffdfbf8
 8003d90:	40020400 	.word	0x40020400

08003d94 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b086      	sub	sp, #24
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	60f8      	str	r0, [r7, #12]
 8003d9c:	60b9      	str	r1, [r7, #8]
 8003d9e:	607a      	str	r2, [r7, #4]
 8003da0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003da2:	2300      	movs	r3, #0
 8003da4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d101      	bne.n	8003db4 <HAL_DMA_Start_IT+0x20>
 8003db0:	2302      	movs	r3, #2
 8003db2:	e066      	b.n	8003e82 <HAL_DMA_Start_IT+0xee>
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2201      	movs	r2, #1
 8003db8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	d155      	bne.n	8003e74 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2202      	movs	r2, #2
 8003dcc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f022 0201 	bic.w	r2, r2, #1
 8003de4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	687a      	ldr	r2, [r7, #4]
 8003dea:	68b9      	ldr	r1, [r7, #8]
 8003dec:	68f8      	ldr	r0, [r7, #12]
 8003dee:	f000 f9bb 	bl	8004168 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d008      	beq.n	8003e0c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f042 020e 	orr.w	r2, r2, #14
 8003e08:	601a      	str	r2, [r3, #0]
 8003e0a:	e00f      	b.n	8003e2c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f022 0204 	bic.w	r2, r2, #4
 8003e1a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f042 020a 	orr.w	r2, r2, #10
 8003e2a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d007      	beq.n	8003e4a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e48:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d007      	beq.n	8003e62 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e60:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f042 0201 	orr.w	r2, r2, #1
 8003e70:	601a      	str	r2, [r3, #0]
 8003e72:	e005      	b.n	8003e80 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2200      	movs	r2, #0
 8003e78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003e7c:	2302      	movs	r3, #2
 8003e7e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003e80:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3718      	adds	r7, #24
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}

08003e8a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003e8a:	b480      	push	{r7}
 8003e8c:	b085      	sub	sp, #20
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e92:	2300      	movs	r3, #0
 8003e94:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	2b02      	cmp	r3, #2
 8003ea0:	d005      	beq.n	8003eae <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2204      	movs	r2, #4
 8003ea6:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	73fb      	strb	r3, [r7, #15]
 8003eac:	e037      	b.n	8003f1e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f022 020e 	bic.w	r2, r2, #14
 8003ebc:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ec8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ecc:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f022 0201 	bic.w	r2, r2, #1
 8003edc:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ee2:	f003 021f 	and.w	r2, r3, #31
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eea:	2101      	movs	r1, #1
 8003eec:	fa01 f202 	lsl.w	r2, r1, r2
 8003ef0:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003efa:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d00c      	beq.n	8003f1e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f0e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f12:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f18:	687a      	ldr	r2, [r7, #4]
 8003f1a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003f1c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2201      	movs	r2, #1
 8003f22:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8003f2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	3714      	adds	r7, #20
 8003f34:	46bd      	mov	sp, r7
 8003f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3a:	4770      	bx	lr

08003f3c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b084      	sub	sp, #16
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f44:	2300      	movs	r3, #0
 8003f46:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003f4e:	b2db      	uxtb	r3, r3
 8003f50:	2b02      	cmp	r3, #2
 8003f52:	d00d      	beq.n	8003f70 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2204      	movs	r2, #4
 8003f58:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2200      	movs	r2, #0
 8003f66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	73fb      	strb	r3, [r7, #15]
 8003f6e:	e047      	b.n	8004000 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f022 020e 	bic.w	r2, r2, #14
 8003f7e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f022 0201 	bic.w	r2, r2, #1
 8003f8e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f9a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f9e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fa4:	f003 021f 	and.w	r2, r3, #31
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fac:	2101      	movs	r1, #1
 8003fae:	fa01 f202 	lsl.w	r2, r1, r2
 8003fb2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fb8:	687a      	ldr	r2, [r7, #4]
 8003fba:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003fbc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d00c      	beq.n	8003fe0 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fd0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003fd4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fda:	687a      	ldr	r2, [r7, #4]
 8003fdc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003fde:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2200      	movs	r2, #0
 8003fec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d003      	beq.n	8004000 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	4798      	blx	r3
    }
  }
  return status;
 8004000:	7bfb      	ldrb	r3, [r7, #15]
}
 8004002:	4618      	mov	r0, r3
 8004004:	3710      	adds	r7, #16
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}

0800400a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800400a:	b580      	push	{r7, lr}
 800400c:	b084      	sub	sp, #16
 800400e:	af00      	add	r7, sp, #0
 8004010:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004026:	f003 031f 	and.w	r3, r3, #31
 800402a:	2204      	movs	r2, #4
 800402c:	409a      	lsls	r2, r3
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	4013      	ands	r3, r2
 8004032:	2b00      	cmp	r3, #0
 8004034:	d026      	beq.n	8004084 <HAL_DMA_IRQHandler+0x7a>
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	f003 0304 	and.w	r3, r3, #4
 800403c:	2b00      	cmp	r3, #0
 800403e:	d021      	beq.n	8004084 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 0320 	and.w	r3, r3, #32
 800404a:	2b00      	cmp	r3, #0
 800404c:	d107      	bne.n	800405e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f022 0204 	bic.w	r2, r2, #4
 800405c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004062:	f003 021f 	and.w	r2, r3, #31
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800406a:	2104      	movs	r1, #4
 800406c:	fa01 f202 	lsl.w	r2, r1, r2
 8004070:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004076:	2b00      	cmp	r3, #0
 8004078:	d071      	beq.n	800415e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004082:	e06c      	b.n	800415e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004088:	f003 031f 	and.w	r3, r3, #31
 800408c:	2202      	movs	r2, #2
 800408e:	409a      	lsls	r2, r3
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	4013      	ands	r3, r2
 8004094:	2b00      	cmp	r3, #0
 8004096:	d02e      	beq.n	80040f6 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	f003 0302 	and.w	r3, r3, #2
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d029      	beq.n	80040f6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 0320 	and.w	r3, r3, #32
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d10b      	bne.n	80040c8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f022 020a 	bic.w	r2, r2, #10
 80040be:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2201      	movs	r2, #1
 80040c4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040cc:	f003 021f 	and.w	r2, r3, #31
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d4:	2102      	movs	r1, #2
 80040d6:	fa01 f202 	lsl.w	r2, r1, r2
 80040da:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2200      	movs	r2, #0
 80040e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d038      	beq.n	800415e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80040f4:	e033      	b.n	800415e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040fa:	f003 031f 	and.w	r3, r3, #31
 80040fe:	2208      	movs	r2, #8
 8004100:	409a      	lsls	r2, r3
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	4013      	ands	r3, r2
 8004106:	2b00      	cmp	r3, #0
 8004108:	d02a      	beq.n	8004160 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	f003 0308 	and.w	r3, r3, #8
 8004110:	2b00      	cmp	r3, #0
 8004112:	d025      	beq.n	8004160 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f022 020e 	bic.w	r2, r2, #14
 8004122:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004128:	f003 021f 	and.w	r2, r3, #31
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004130:	2101      	movs	r1, #1
 8004132:	fa01 f202 	lsl.w	r2, r1, r2
 8004136:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2201      	movs	r2, #1
 800413c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2201      	movs	r2, #1
 8004142:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2200      	movs	r2, #0
 800414a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004152:	2b00      	cmp	r3, #0
 8004154:	d004      	beq.n	8004160 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800415e:	bf00      	nop
 8004160:	bf00      	nop
}
 8004162:	3710      	adds	r7, #16
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}

08004168 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004168:	b480      	push	{r7}
 800416a:	b085      	sub	sp, #20
 800416c:	af00      	add	r7, sp, #0
 800416e:	60f8      	str	r0, [r7, #12]
 8004170:	60b9      	str	r1, [r7, #8]
 8004172:	607a      	str	r2, [r7, #4]
 8004174:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800417a:	68fa      	ldr	r2, [r7, #12]
 800417c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800417e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004184:	2b00      	cmp	r3, #0
 8004186:	d004      	beq.n	8004192 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800418c:	68fa      	ldr	r2, [r7, #12]
 800418e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004190:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004196:	f003 021f 	and.w	r2, r3, #31
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800419e:	2101      	movs	r1, #1
 80041a0:	fa01 f202 	lsl.w	r2, r1, r2
 80041a4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	683a      	ldr	r2, [r7, #0]
 80041ac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	2b10      	cmp	r3, #16
 80041b4:	d108      	bne.n	80041c8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	687a      	ldr	r2, [r7, #4]
 80041bc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	68ba      	ldr	r2, [r7, #8]
 80041c4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80041c6:	e007      	b.n	80041d8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	68ba      	ldr	r2, [r7, #8]
 80041ce:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	687a      	ldr	r2, [r7, #4]
 80041d6:	60da      	str	r2, [r3, #12]
}
 80041d8:	bf00      	nop
 80041da:	3714      	adds	r7, #20
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr

080041e4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b087      	sub	sp, #28
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	461a      	mov	r2, r3
 80041f2:	4b16      	ldr	r3, [pc, #88]	; (800424c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d802      	bhi.n	80041fe <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80041f8:	4b15      	ldr	r3, [pc, #84]	; (8004250 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80041fa:	617b      	str	r3, [r7, #20]
 80041fc:	e001      	b.n	8004202 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80041fe:	4b15      	ldr	r3, [pc, #84]	; (8004254 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004200:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	b2db      	uxtb	r3, r3
 800420c:	3b08      	subs	r3, #8
 800420e:	4a12      	ldr	r2, [pc, #72]	; (8004258 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004210:	fba2 2303 	umull	r2, r3, r2, r3
 8004214:	091b      	lsrs	r3, r3, #4
 8004216:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800421c:	089b      	lsrs	r3, r3, #2
 800421e:	009a      	lsls	r2, r3, #2
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	4413      	add	r3, r2
 8004224:	461a      	mov	r2, r3
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	4a0b      	ldr	r2, [pc, #44]	; (800425c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800422e:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	f003 031f 	and.w	r3, r3, #31
 8004236:	2201      	movs	r2, #1
 8004238:	409a      	lsls	r2, r3
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800423e:	bf00      	nop
 8004240:	371c      	adds	r7, #28
 8004242:	46bd      	mov	sp, r7
 8004244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004248:	4770      	bx	lr
 800424a:	bf00      	nop
 800424c:	40020407 	.word	0x40020407
 8004250:	40020800 	.word	0x40020800
 8004254:	40020820 	.word	0x40020820
 8004258:	cccccccd 	.word	0xcccccccd
 800425c:	40020880 	.word	0x40020880

08004260 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004260:	b480      	push	{r7}
 8004262:	b085      	sub	sp, #20
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	b2db      	uxtb	r3, r3
 800426e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004270:	68fa      	ldr	r2, [r7, #12]
 8004272:	4b0b      	ldr	r3, [pc, #44]	; (80042a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004274:	4413      	add	r3, r2
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	461a      	mov	r2, r3
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	4a08      	ldr	r2, [pc, #32]	; (80042a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004282:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	3b01      	subs	r3, #1
 8004288:	f003 031f 	and.w	r3, r3, #31
 800428c:	2201      	movs	r2, #1
 800428e:	409a      	lsls	r2, r3
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004294:	bf00      	nop
 8004296:	3714      	adds	r7, #20
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr
 80042a0:	1000823f 	.word	0x1000823f
 80042a4:	40020940 	.word	0x40020940

080042a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b087      	sub	sp, #28
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
 80042b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80042b2:	2300      	movs	r3, #0
 80042b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80042b6:	e15a      	b.n	800456e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	2101      	movs	r1, #1
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	fa01 f303 	lsl.w	r3, r1, r3
 80042c4:	4013      	ands	r3, r2
 80042c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	f000 814c 	beq.w	8004568 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	f003 0303 	and.w	r3, r3, #3
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d005      	beq.n	80042e8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80042e4:	2b02      	cmp	r3, #2
 80042e6:	d130      	bne.n	800434a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	005b      	lsls	r3, r3, #1
 80042f2:	2203      	movs	r2, #3
 80042f4:	fa02 f303 	lsl.w	r3, r2, r3
 80042f8:	43db      	mvns	r3, r3
 80042fa:	693a      	ldr	r2, [r7, #16]
 80042fc:	4013      	ands	r3, r2
 80042fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	68da      	ldr	r2, [r3, #12]
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	005b      	lsls	r3, r3, #1
 8004308:	fa02 f303 	lsl.w	r3, r2, r3
 800430c:	693a      	ldr	r2, [r7, #16]
 800430e:	4313      	orrs	r3, r2
 8004310:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	693a      	ldr	r2, [r7, #16]
 8004316:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800431e:	2201      	movs	r2, #1
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	fa02 f303 	lsl.w	r3, r2, r3
 8004326:	43db      	mvns	r3, r3
 8004328:	693a      	ldr	r2, [r7, #16]
 800432a:	4013      	ands	r3, r2
 800432c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	091b      	lsrs	r3, r3, #4
 8004334:	f003 0201 	and.w	r2, r3, #1
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	fa02 f303 	lsl.w	r3, r2, r3
 800433e:	693a      	ldr	r2, [r7, #16]
 8004340:	4313      	orrs	r3, r2
 8004342:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	693a      	ldr	r2, [r7, #16]
 8004348:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	f003 0303 	and.w	r3, r3, #3
 8004352:	2b03      	cmp	r3, #3
 8004354:	d017      	beq.n	8004386 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	68db      	ldr	r3, [r3, #12]
 800435a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	005b      	lsls	r3, r3, #1
 8004360:	2203      	movs	r2, #3
 8004362:	fa02 f303 	lsl.w	r3, r2, r3
 8004366:	43db      	mvns	r3, r3
 8004368:	693a      	ldr	r2, [r7, #16]
 800436a:	4013      	ands	r3, r2
 800436c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	689a      	ldr	r2, [r3, #8]
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	005b      	lsls	r3, r3, #1
 8004376:	fa02 f303 	lsl.w	r3, r2, r3
 800437a:	693a      	ldr	r2, [r7, #16]
 800437c:	4313      	orrs	r3, r2
 800437e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	693a      	ldr	r2, [r7, #16]
 8004384:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	f003 0303 	and.w	r3, r3, #3
 800438e:	2b02      	cmp	r3, #2
 8004390:	d123      	bne.n	80043da <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	08da      	lsrs	r2, r3, #3
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	3208      	adds	r2, #8
 800439a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800439e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	f003 0307 	and.w	r3, r3, #7
 80043a6:	009b      	lsls	r3, r3, #2
 80043a8:	220f      	movs	r2, #15
 80043aa:	fa02 f303 	lsl.w	r3, r2, r3
 80043ae:	43db      	mvns	r3, r3
 80043b0:	693a      	ldr	r2, [r7, #16]
 80043b2:	4013      	ands	r3, r2
 80043b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	691a      	ldr	r2, [r3, #16]
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	f003 0307 	and.w	r3, r3, #7
 80043c0:	009b      	lsls	r3, r3, #2
 80043c2:	fa02 f303 	lsl.w	r3, r2, r3
 80043c6:	693a      	ldr	r2, [r7, #16]
 80043c8:	4313      	orrs	r3, r2
 80043ca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	08da      	lsrs	r2, r3, #3
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	3208      	adds	r2, #8
 80043d4:	6939      	ldr	r1, [r7, #16]
 80043d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	005b      	lsls	r3, r3, #1
 80043e4:	2203      	movs	r2, #3
 80043e6:	fa02 f303 	lsl.w	r3, r2, r3
 80043ea:	43db      	mvns	r3, r3
 80043ec:	693a      	ldr	r2, [r7, #16]
 80043ee:	4013      	ands	r3, r2
 80043f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	f003 0203 	and.w	r2, r3, #3
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	005b      	lsls	r3, r3, #1
 80043fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004402:	693a      	ldr	r2, [r7, #16]
 8004404:	4313      	orrs	r3, r2
 8004406:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	693a      	ldr	r2, [r7, #16]
 800440c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004416:	2b00      	cmp	r3, #0
 8004418:	f000 80a6 	beq.w	8004568 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800441c:	4b5b      	ldr	r3, [pc, #364]	; (800458c <HAL_GPIO_Init+0x2e4>)
 800441e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004420:	4a5a      	ldr	r2, [pc, #360]	; (800458c <HAL_GPIO_Init+0x2e4>)
 8004422:	f043 0301 	orr.w	r3, r3, #1
 8004426:	6613      	str	r3, [r2, #96]	; 0x60
 8004428:	4b58      	ldr	r3, [pc, #352]	; (800458c <HAL_GPIO_Init+0x2e4>)
 800442a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800442c:	f003 0301 	and.w	r3, r3, #1
 8004430:	60bb      	str	r3, [r7, #8]
 8004432:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004434:	4a56      	ldr	r2, [pc, #344]	; (8004590 <HAL_GPIO_Init+0x2e8>)
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	089b      	lsrs	r3, r3, #2
 800443a:	3302      	adds	r3, #2
 800443c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004440:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	f003 0303 	and.w	r3, r3, #3
 8004448:	009b      	lsls	r3, r3, #2
 800444a:	220f      	movs	r2, #15
 800444c:	fa02 f303 	lsl.w	r3, r2, r3
 8004450:	43db      	mvns	r3, r3
 8004452:	693a      	ldr	r2, [r7, #16]
 8004454:	4013      	ands	r3, r2
 8004456:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800445e:	d01f      	beq.n	80044a0 <HAL_GPIO_Init+0x1f8>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	4a4c      	ldr	r2, [pc, #304]	; (8004594 <HAL_GPIO_Init+0x2ec>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d019      	beq.n	800449c <HAL_GPIO_Init+0x1f4>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	4a4b      	ldr	r2, [pc, #300]	; (8004598 <HAL_GPIO_Init+0x2f0>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d013      	beq.n	8004498 <HAL_GPIO_Init+0x1f0>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	4a4a      	ldr	r2, [pc, #296]	; (800459c <HAL_GPIO_Init+0x2f4>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d00d      	beq.n	8004494 <HAL_GPIO_Init+0x1ec>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	4a49      	ldr	r2, [pc, #292]	; (80045a0 <HAL_GPIO_Init+0x2f8>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d007      	beq.n	8004490 <HAL_GPIO_Init+0x1e8>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	4a48      	ldr	r2, [pc, #288]	; (80045a4 <HAL_GPIO_Init+0x2fc>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d101      	bne.n	800448c <HAL_GPIO_Init+0x1e4>
 8004488:	2305      	movs	r3, #5
 800448a:	e00a      	b.n	80044a2 <HAL_GPIO_Init+0x1fa>
 800448c:	2306      	movs	r3, #6
 800448e:	e008      	b.n	80044a2 <HAL_GPIO_Init+0x1fa>
 8004490:	2304      	movs	r3, #4
 8004492:	e006      	b.n	80044a2 <HAL_GPIO_Init+0x1fa>
 8004494:	2303      	movs	r3, #3
 8004496:	e004      	b.n	80044a2 <HAL_GPIO_Init+0x1fa>
 8004498:	2302      	movs	r3, #2
 800449a:	e002      	b.n	80044a2 <HAL_GPIO_Init+0x1fa>
 800449c:	2301      	movs	r3, #1
 800449e:	e000      	b.n	80044a2 <HAL_GPIO_Init+0x1fa>
 80044a0:	2300      	movs	r3, #0
 80044a2:	697a      	ldr	r2, [r7, #20]
 80044a4:	f002 0203 	and.w	r2, r2, #3
 80044a8:	0092      	lsls	r2, r2, #2
 80044aa:	4093      	lsls	r3, r2
 80044ac:	693a      	ldr	r2, [r7, #16]
 80044ae:	4313      	orrs	r3, r2
 80044b0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80044b2:	4937      	ldr	r1, [pc, #220]	; (8004590 <HAL_GPIO_Init+0x2e8>)
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	089b      	lsrs	r3, r3, #2
 80044b8:	3302      	adds	r3, #2
 80044ba:	693a      	ldr	r2, [r7, #16]
 80044bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80044c0:	4b39      	ldr	r3, [pc, #228]	; (80045a8 <HAL_GPIO_Init+0x300>)
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	43db      	mvns	r3, r3
 80044ca:	693a      	ldr	r2, [r7, #16]
 80044cc:	4013      	ands	r3, r2
 80044ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d003      	beq.n	80044e4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80044dc:	693a      	ldr	r2, [r7, #16]
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	4313      	orrs	r3, r2
 80044e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80044e4:	4a30      	ldr	r2, [pc, #192]	; (80045a8 <HAL_GPIO_Init+0x300>)
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80044ea:	4b2f      	ldr	r3, [pc, #188]	; (80045a8 <HAL_GPIO_Init+0x300>)
 80044ec:	68db      	ldr	r3, [r3, #12]
 80044ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	43db      	mvns	r3, r3
 80044f4:	693a      	ldr	r2, [r7, #16]
 80044f6:	4013      	ands	r3, r2
 80044f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004502:	2b00      	cmp	r3, #0
 8004504:	d003      	beq.n	800450e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004506:	693a      	ldr	r2, [r7, #16]
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	4313      	orrs	r3, r2
 800450c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800450e:	4a26      	ldr	r2, [pc, #152]	; (80045a8 <HAL_GPIO_Init+0x300>)
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004514:	4b24      	ldr	r3, [pc, #144]	; (80045a8 <HAL_GPIO_Init+0x300>)
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	43db      	mvns	r3, r3
 800451e:	693a      	ldr	r2, [r7, #16]
 8004520:	4013      	ands	r3, r2
 8004522:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800452c:	2b00      	cmp	r3, #0
 800452e:	d003      	beq.n	8004538 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004530:	693a      	ldr	r2, [r7, #16]
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	4313      	orrs	r3, r2
 8004536:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004538:	4a1b      	ldr	r2, [pc, #108]	; (80045a8 <HAL_GPIO_Init+0x300>)
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800453e:	4b1a      	ldr	r3, [pc, #104]	; (80045a8 <HAL_GPIO_Init+0x300>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	43db      	mvns	r3, r3
 8004548:	693a      	ldr	r2, [r7, #16]
 800454a:	4013      	ands	r3, r2
 800454c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004556:	2b00      	cmp	r3, #0
 8004558:	d003      	beq.n	8004562 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800455a:	693a      	ldr	r2, [r7, #16]
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	4313      	orrs	r3, r2
 8004560:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004562:	4a11      	ldr	r2, [pc, #68]	; (80045a8 <HAL_GPIO_Init+0x300>)
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	3301      	adds	r3, #1
 800456c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	fa22 f303 	lsr.w	r3, r2, r3
 8004578:	2b00      	cmp	r3, #0
 800457a:	f47f ae9d 	bne.w	80042b8 <HAL_GPIO_Init+0x10>
  }
}
 800457e:	bf00      	nop
 8004580:	bf00      	nop
 8004582:	371c      	adds	r7, #28
 8004584:	46bd      	mov	sp, r7
 8004586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458a:	4770      	bx	lr
 800458c:	40021000 	.word	0x40021000
 8004590:	40010000 	.word	0x40010000
 8004594:	48000400 	.word	0x48000400
 8004598:	48000800 	.word	0x48000800
 800459c:	48000c00 	.word	0x48000c00
 80045a0:	48001000 	.word	0x48001000
 80045a4:	48001400 	.word	0x48001400
 80045a8:	40010400 	.word	0x40010400

080045ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b083      	sub	sp, #12
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
 80045b4:	460b      	mov	r3, r1
 80045b6:	807b      	strh	r3, [r7, #2]
 80045b8:	4613      	mov	r3, r2
 80045ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80045bc:	787b      	ldrb	r3, [r7, #1]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d003      	beq.n	80045ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80045c2:	887a      	ldrh	r2, [r7, #2]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80045c8:	e002      	b.n	80045d0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80045ca:	887a      	ldrh	r2, [r7, #2]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	629a      	str	r2, [r3, #40]	; 0x28
}
 80045d0:	bf00      	nop
 80045d2:	370c      	adds	r7, #12
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr

080045dc <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80045dc:	b480      	push	{r7}
 80045de:	b085      	sub	sp, #20
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	460b      	mov	r3, r1
 80045e6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	695b      	ldr	r3, [r3, #20]
 80045ec:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80045ee:	887a      	ldrh	r2, [r7, #2]
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	4013      	ands	r3, r2
 80045f4:	041a      	lsls	r2, r3, #16
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	43d9      	mvns	r1, r3
 80045fa:	887b      	ldrh	r3, [r7, #2]
 80045fc:	400b      	ands	r3, r1
 80045fe:	431a      	orrs	r2, r3
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	619a      	str	r2, [r3, #24]
}
 8004604:	bf00      	nop
 8004606:	3714      	adds	r7, #20
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr

08004610 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b082      	sub	sp, #8
 8004614:	af00      	add	r7, sp, #0
 8004616:	4603      	mov	r3, r0
 8004618:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800461a:	4b08      	ldr	r3, [pc, #32]	; (800463c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800461c:	695a      	ldr	r2, [r3, #20]
 800461e:	88fb      	ldrh	r3, [r7, #6]
 8004620:	4013      	ands	r3, r2
 8004622:	2b00      	cmp	r3, #0
 8004624:	d006      	beq.n	8004634 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004626:	4a05      	ldr	r2, [pc, #20]	; (800463c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004628:	88fb      	ldrh	r3, [r7, #6]
 800462a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800462c:	88fb      	ldrh	r3, [r7, #6]
 800462e:	4618      	mov	r0, r3
 8004630:	f7fc ff98 	bl	8001564 <HAL_GPIO_EXTI_Callback>
  }
}
 8004634:	bf00      	nop
 8004636:	3708      	adds	r7, #8
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}
 800463c:	40010400 	.word	0x40010400

08004640 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004640:	b480      	push	{r7}
 8004642:	b085      	sub	sp, #20
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d141      	bne.n	80046d2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800464e:	4b4b      	ldr	r3, [pc, #300]	; (800477c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004656:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800465a:	d131      	bne.n	80046c0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800465c:	4b47      	ldr	r3, [pc, #284]	; (800477c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800465e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004662:	4a46      	ldr	r2, [pc, #280]	; (800477c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004664:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004668:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800466c:	4b43      	ldr	r3, [pc, #268]	; (800477c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004674:	4a41      	ldr	r2, [pc, #260]	; (800477c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004676:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800467a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800467c:	4b40      	ldr	r3, [pc, #256]	; (8004780 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	2232      	movs	r2, #50	; 0x32
 8004682:	fb02 f303 	mul.w	r3, r2, r3
 8004686:	4a3f      	ldr	r2, [pc, #252]	; (8004784 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004688:	fba2 2303 	umull	r2, r3, r2, r3
 800468c:	0c9b      	lsrs	r3, r3, #18
 800468e:	3301      	adds	r3, #1
 8004690:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004692:	e002      	b.n	800469a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	3b01      	subs	r3, #1
 8004698:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800469a:	4b38      	ldr	r3, [pc, #224]	; (800477c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800469c:	695b      	ldr	r3, [r3, #20]
 800469e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046a6:	d102      	bne.n	80046ae <HAL_PWREx_ControlVoltageScaling+0x6e>
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d1f2      	bne.n	8004694 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80046ae:	4b33      	ldr	r3, [pc, #204]	; (800477c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046b0:	695b      	ldr	r3, [r3, #20]
 80046b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046ba:	d158      	bne.n	800476e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80046bc:	2303      	movs	r3, #3
 80046be:	e057      	b.n	8004770 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80046c0:	4b2e      	ldr	r3, [pc, #184]	; (800477c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046c6:	4a2d      	ldr	r2, [pc, #180]	; (800477c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046cc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80046d0:	e04d      	b.n	800476e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046d8:	d141      	bne.n	800475e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80046da:	4b28      	ldr	r3, [pc, #160]	; (800477c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80046e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046e6:	d131      	bne.n	800474c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80046e8:	4b24      	ldr	r3, [pc, #144]	; (800477c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046ee:	4a23      	ldr	r2, [pc, #140]	; (800477c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046f4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80046f8:	4b20      	ldr	r3, [pc, #128]	; (800477c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004700:	4a1e      	ldr	r2, [pc, #120]	; (800477c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004702:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004706:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004708:	4b1d      	ldr	r3, [pc, #116]	; (8004780 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	2232      	movs	r2, #50	; 0x32
 800470e:	fb02 f303 	mul.w	r3, r2, r3
 8004712:	4a1c      	ldr	r2, [pc, #112]	; (8004784 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004714:	fba2 2303 	umull	r2, r3, r2, r3
 8004718:	0c9b      	lsrs	r3, r3, #18
 800471a:	3301      	adds	r3, #1
 800471c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800471e:	e002      	b.n	8004726 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	3b01      	subs	r3, #1
 8004724:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004726:	4b15      	ldr	r3, [pc, #84]	; (800477c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004728:	695b      	ldr	r3, [r3, #20]
 800472a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800472e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004732:	d102      	bne.n	800473a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d1f2      	bne.n	8004720 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800473a:	4b10      	ldr	r3, [pc, #64]	; (800477c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800473c:	695b      	ldr	r3, [r3, #20]
 800473e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004742:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004746:	d112      	bne.n	800476e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004748:	2303      	movs	r3, #3
 800474a:	e011      	b.n	8004770 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800474c:	4b0b      	ldr	r3, [pc, #44]	; (800477c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800474e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004752:	4a0a      	ldr	r2, [pc, #40]	; (800477c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004754:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004758:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800475c:	e007      	b.n	800476e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800475e:	4b07      	ldr	r3, [pc, #28]	; (800477c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004766:	4a05      	ldr	r2, [pc, #20]	; (800477c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004768:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800476c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800476e:	2300      	movs	r3, #0
}
 8004770:	4618      	mov	r0, r3
 8004772:	3714      	adds	r7, #20
 8004774:	46bd      	mov	sp, r7
 8004776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477a:	4770      	bx	lr
 800477c:	40007000 	.word	0x40007000
 8004780:	20000018 	.word	0x20000018
 8004784:	431bde83 	.word	0x431bde83

08004788 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004788:	b480      	push	{r7}
 800478a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800478c:	4b05      	ldr	r3, [pc, #20]	; (80047a4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	4a04      	ldr	r2, [pc, #16]	; (80047a4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004792:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004796:	6093      	str	r3, [r2, #8]
}
 8004798:	bf00      	nop
 800479a:	46bd      	mov	sp, r7
 800479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a0:	4770      	bx	lr
 80047a2:	bf00      	nop
 80047a4:	40007000 	.word	0x40007000

080047a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b088      	sub	sp, #32
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d101      	bne.n	80047ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	e2fe      	b.n	8004db8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 0301 	and.w	r3, r3, #1
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d075      	beq.n	80048b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047c6:	4b97      	ldr	r3, [pc, #604]	; (8004a24 <HAL_RCC_OscConfig+0x27c>)
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	f003 030c 	and.w	r3, r3, #12
 80047ce:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80047d0:	4b94      	ldr	r3, [pc, #592]	; (8004a24 <HAL_RCC_OscConfig+0x27c>)
 80047d2:	68db      	ldr	r3, [r3, #12]
 80047d4:	f003 0303 	and.w	r3, r3, #3
 80047d8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80047da:	69bb      	ldr	r3, [r7, #24]
 80047dc:	2b0c      	cmp	r3, #12
 80047de:	d102      	bne.n	80047e6 <HAL_RCC_OscConfig+0x3e>
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	2b03      	cmp	r3, #3
 80047e4:	d002      	beq.n	80047ec <HAL_RCC_OscConfig+0x44>
 80047e6:	69bb      	ldr	r3, [r7, #24]
 80047e8:	2b08      	cmp	r3, #8
 80047ea:	d10b      	bne.n	8004804 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047ec:	4b8d      	ldr	r3, [pc, #564]	; (8004a24 <HAL_RCC_OscConfig+0x27c>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d05b      	beq.n	80048b0 <HAL_RCC_OscConfig+0x108>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d157      	bne.n	80048b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	e2d9      	b.n	8004db8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800480c:	d106      	bne.n	800481c <HAL_RCC_OscConfig+0x74>
 800480e:	4b85      	ldr	r3, [pc, #532]	; (8004a24 <HAL_RCC_OscConfig+0x27c>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a84      	ldr	r2, [pc, #528]	; (8004a24 <HAL_RCC_OscConfig+0x27c>)
 8004814:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004818:	6013      	str	r3, [r2, #0]
 800481a:	e01d      	b.n	8004858 <HAL_RCC_OscConfig+0xb0>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004824:	d10c      	bne.n	8004840 <HAL_RCC_OscConfig+0x98>
 8004826:	4b7f      	ldr	r3, [pc, #508]	; (8004a24 <HAL_RCC_OscConfig+0x27c>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a7e      	ldr	r2, [pc, #504]	; (8004a24 <HAL_RCC_OscConfig+0x27c>)
 800482c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004830:	6013      	str	r3, [r2, #0]
 8004832:	4b7c      	ldr	r3, [pc, #496]	; (8004a24 <HAL_RCC_OscConfig+0x27c>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a7b      	ldr	r2, [pc, #492]	; (8004a24 <HAL_RCC_OscConfig+0x27c>)
 8004838:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800483c:	6013      	str	r3, [r2, #0]
 800483e:	e00b      	b.n	8004858 <HAL_RCC_OscConfig+0xb0>
 8004840:	4b78      	ldr	r3, [pc, #480]	; (8004a24 <HAL_RCC_OscConfig+0x27c>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a77      	ldr	r2, [pc, #476]	; (8004a24 <HAL_RCC_OscConfig+0x27c>)
 8004846:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800484a:	6013      	str	r3, [r2, #0]
 800484c:	4b75      	ldr	r3, [pc, #468]	; (8004a24 <HAL_RCC_OscConfig+0x27c>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a74      	ldr	r2, [pc, #464]	; (8004a24 <HAL_RCC_OscConfig+0x27c>)
 8004852:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004856:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d013      	beq.n	8004888 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004860:	f7fd fab2 	bl	8001dc8 <HAL_GetTick>
 8004864:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004866:	e008      	b.n	800487a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004868:	f7fd faae 	bl	8001dc8 <HAL_GetTick>
 800486c:	4602      	mov	r2, r0
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	1ad3      	subs	r3, r2, r3
 8004872:	2b64      	cmp	r3, #100	; 0x64
 8004874:	d901      	bls.n	800487a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004876:	2303      	movs	r3, #3
 8004878:	e29e      	b.n	8004db8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800487a:	4b6a      	ldr	r3, [pc, #424]	; (8004a24 <HAL_RCC_OscConfig+0x27c>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004882:	2b00      	cmp	r3, #0
 8004884:	d0f0      	beq.n	8004868 <HAL_RCC_OscConfig+0xc0>
 8004886:	e014      	b.n	80048b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004888:	f7fd fa9e 	bl	8001dc8 <HAL_GetTick>
 800488c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800488e:	e008      	b.n	80048a2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004890:	f7fd fa9a 	bl	8001dc8 <HAL_GetTick>
 8004894:	4602      	mov	r2, r0
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	1ad3      	subs	r3, r2, r3
 800489a:	2b64      	cmp	r3, #100	; 0x64
 800489c:	d901      	bls.n	80048a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800489e:	2303      	movs	r3, #3
 80048a0:	e28a      	b.n	8004db8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80048a2:	4b60      	ldr	r3, [pc, #384]	; (8004a24 <HAL_RCC_OscConfig+0x27c>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d1f0      	bne.n	8004890 <HAL_RCC_OscConfig+0xe8>
 80048ae:	e000      	b.n	80048b2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f003 0302 	and.w	r3, r3, #2
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d075      	beq.n	80049aa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048be:	4b59      	ldr	r3, [pc, #356]	; (8004a24 <HAL_RCC_OscConfig+0x27c>)
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	f003 030c 	and.w	r3, r3, #12
 80048c6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80048c8:	4b56      	ldr	r3, [pc, #344]	; (8004a24 <HAL_RCC_OscConfig+0x27c>)
 80048ca:	68db      	ldr	r3, [r3, #12]
 80048cc:	f003 0303 	and.w	r3, r3, #3
 80048d0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80048d2:	69bb      	ldr	r3, [r7, #24]
 80048d4:	2b0c      	cmp	r3, #12
 80048d6:	d102      	bne.n	80048de <HAL_RCC_OscConfig+0x136>
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	2b02      	cmp	r3, #2
 80048dc:	d002      	beq.n	80048e4 <HAL_RCC_OscConfig+0x13c>
 80048de:	69bb      	ldr	r3, [r7, #24]
 80048e0:	2b04      	cmp	r3, #4
 80048e2:	d11f      	bne.n	8004924 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80048e4:	4b4f      	ldr	r3, [pc, #316]	; (8004a24 <HAL_RCC_OscConfig+0x27c>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d005      	beq.n	80048fc <HAL_RCC_OscConfig+0x154>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	68db      	ldr	r3, [r3, #12]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d101      	bne.n	80048fc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	e25d      	b.n	8004db8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048fc:	4b49      	ldr	r3, [pc, #292]	; (8004a24 <HAL_RCC_OscConfig+0x27c>)
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	691b      	ldr	r3, [r3, #16]
 8004908:	061b      	lsls	r3, r3, #24
 800490a:	4946      	ldr	r1, [pc, #280]	; (8004a24 <HAL_RCC_OscConfig+0x27c>)
 800490c:	4313      	orrs	r3, r2
 800490e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004910:	4b45      	ldr	r3, [pc, #276]	; (8004a28 <HAL_RCC_OscConfig+0x280>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4618      	mov	r0, r3
 8004916:	f7fd fa0b 	bl	8001d30 <HAL_InitTick>
 800491a:	4603      	mov	r3, r0
 800491c:	2b00      	cmp	r3, #0
 800491e:	d043      	beq.n	80049a8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004920:	2301      	movs	r3, #1
 8004922:	e249      	b.n	8004db8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	68db      	ldr	r3, [r3, #12]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d023      	beq.n	8004974 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800492c:	4b3d      	ldr	r3, [pc, #244]	; (8004a24 <HAL_RCC_OscConfig+0x27c>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a3c      	ldr	r2, [pc, #240]	; (8004a24 <HAL_RCC_OscConfig+0x27c>)
 8004932:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004936:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004938:	f7fd fa46 	bl	8001dc8 <HAL_GetTick>
 800493c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800493e:	e008      	b.n	8004952 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004940:	f7fd fa42 	bl	8001dc8 <HAL_GetTick>
 8004944:	4602      	mov	r2, r0
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	1ad3      	subs	r3, r2, r3
 800494a:	2b02      	cmp	r3, #2
 800494c:	d901      	bls.n	8004952 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800494e:	2303      	movs	r3, #3
 8004950:	e232      	b.n	8004db8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004952:	4b34      	ldr	r3, [pc, #208]	; (8004a24 <HAL_RCC_OscConfig+0x27c>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800495a:	2b00      	cmp	r3, #0
 800495c:	d0f0      	beq.n	8004940 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800495e:	4b31      	ldr	r3, [pc, #196]	; (8004a24 <HAL_RCC_OscConfig+0x27c>)
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	691b      	ldr	r3, [r3, #16]
 800496a:	061b      	lsls	r3, r3, #24
 800496c:	492d      	ldr	r1, [pc, #180]	; (8004a24 <HAL_RCC_OscConfig+0x27c>)
 800496e:	4313      	orrs	r3, r2
 8004970:	604b      	str	r3, [r1, #4]
 8004972:	e01a      	b.n	80049aa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004974:	4b2b      	ldr	r3, [pc, #172]	; (8004a24 <HAL_RCC_OscConfig+0x27c>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a2a      	ldr	r2, [pc, #168]	; (8004a24 <HAL_RCC_OscConfig+0x27c>)
 800497a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800497e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004980:	f7fd fa22 	bl	8001dc8 <HAL_GetTick>
 8004984:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004986:	e008      	b.n	800499a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004988:	f7fd fa1e 	bl	8001dc8 <HAL_GetTick>
 800498c:	4602      	mov	r2, r0
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	1ad3      	subs	r3, r2, r3
 8004992:	2b02      	cmp	r3, #2
 8004994:	d901      	bls.n	800499a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004996:	2303      	movs	r3, #3
 8004998:	e20e      	b.n	8004db8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800499a:	4b22      	ldr	r3, [pc, #136]	; (8004a24 <HAL_RCC_OscConfig+0x27c>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d1f0      	bne.n	8004988 <HAL_RCC_OscConfig+0x1e0>
 80049a6:	e000      	b.n	80049aa <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80049a8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f003 0308 	and.w	r3, r3, #8
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d041      	beq.n	8004a3a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	695b      	ldr	r3, [r3, #20]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d01c      	beq.n	80049f8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049be:	4b19      	ldr	r3, [pc, #100]	; (8004a24 <HAL_RCC_OscConfig+0x27c>)
 80049c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049c4:	4a17      	ldr	r2, [pc, #92]	; (8004a24 <HAL_RCC_OscConfig+0x27c>)
 80049c6:	f043 0301 	orr.w	r3, r3, #1
 80049ca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049ce:	f7fd f9fb 	bl	8001dc8 <HAL_GetTick>
 80049d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80049d4:	e008      	b.n	80049e8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049d6:	f7fd f9f7 	bl	8001dc8 <HAL_GetTick>
 80049da:	4602      	mov	r2, r0
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	1ad3      	subs	r3, r2, r3
 80049e0:	2b02      	cmp	r3, #2
 80049e2:	d901      	bls.n	80049e8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80049e4:	2303      	movs	r3, #3
 80049e6:	e1e7      	b.n	8004db8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80049e8:	4b0e      	ldr	r3, [pc, #56]	; (8004a24 <HAL_RCC_OscConfig+0x27c>)
 80049ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049ee:	f003 0302 	and.w	r3, r3, #2
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d0ef      	beq.n	80049d6 <HAL_RCC_OscConfig+0x22e>
 80049f6:	e020      	b.n	8004a3a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049f8:	4b0a      	ldr	r3, [pc, #40]	; (8004a24 <HAL_RCC_OscConfig+0x27c>)
 80049fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049fe:	4a09      	ldr	r2, [pc, #36]	; (8004a24 <HAL_RCC_OscConfig+0x27c>)
 8004a00:	f023 0301 	bic.w	r3, r3, #1
 8004a04:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a08:	f7fd f9de 	bl	8001dc8 <HAL_GetTick>
 8004a0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004a0e:	e00d      	b.n	8004a2c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a10:	f7fd f9da 	bl	8001dc8 <HAL_GetTick>
 8004a14:	4602      	mov	r2, r0
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	1ad3      	subs	r3, r2, r3
 8004a1a:	2b02      	cmp	r3, #2
 8004a1c:	d906      	bls.n	8004a2c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004a1e:	2303      	movs	r3, #3
 8004a20:	e1ca      	b.n	8004db8 <HAL_RCC_OscConfig+0x610>
 8004a22:	bf00      	nop
 8004a24:	40021000 	.word	0x40021000
 8004a28:	2000001c 	.word	0x2000001c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004a2c:	4b8c      	ldr	r3, [pc, #560]	; (8004c60 <HAL_RCC_OscConfig+0x4b8>)
 8004a2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a32:	f003 0302 	and.w	r3, r3, #2
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d1ea      	bne.n	8004a10 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f003 0304 	and.w	r3, r3, #4
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	f000 80a6 	beq.w	8004b94 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004a4c:	4b84      	ldr	r3, [pc, #528]	; (8004c60 <HAL_RCC_OscConfig+0x4b8>)
 8004a4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d101      	bne.n	8004a5c <HAL_RCC_OscConfig+0x2b4>
 8004a58:	2301      	movs	r3, #1
 8004a5a:	e000      	b.n	8004a5e <HAL_RCC_OscConfig+0x2b6>
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d00d      	beq.n	8004a7e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a62:	4b7f      	ldr	r3, [pc, #508]	; (8004c60 <HAL_RCC_OscConfig+0x4b8>)
 8004a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a66:	4a7e      	ldr	r2, [pc, #504]	; (8004c60 <HAL_RCC_OscConfig+0x4b8>)
 8004a68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a6c:	6593      	str	r3, [r2, #88]	; 0x58
 8004a6e:	4b7c      	ldr	r3, [pc, #496]	; (8004c60 <HAL_RCC_OscConfig+0x4b8>)
 8004a70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a76:	60fb      	str	r3, [r7, #12]
 8004a78:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a7e:	4b79      	ldr	r3, [pc, #484]	; (8004c64 <HAL_RCC_OscConfig+0x4bc>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d118      	bne.n	8004abc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a8a:	4b76      	ldr	r3, [pc, #472]	; (8004c64 <HAL_RCC_OscConfig+0x4bc>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a75      	ldr	r2, [pc, #468]	; (8004c64 <HAL_RCC_OscConfig+0x4bc>)
 8004a90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a96:	f7fd f997 	bl	8001dc8 <HAL_GetTick>
 8004a9a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a9c:	e008      	b.n	8004ab0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a9e:	f7fd f993 	bl	8001dc8 <HAL_GetTick>
 8004aa2:	4602      	mov	r2, r0
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	1ad3      	subs	r3, r2, r3
 8004aa8:	2b02      	cmp	r3, #2
 8004aaa:	d901      	bls.n	8004ab0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004aac:	2303      	movs	r3, #3
 8004aae:	e183      	b.n	8004db8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ab0:	4b6c      	ldr	r3, [pc, #432]	; (8004c64 <HAL_RCC_OscConfig+0x4bc>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d0f0      	beq.n	8004a9e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	d108      	bne.n	8004ad6 <HAL_RCC_OscConfig+0x32e>
 8004ac4:	4b66      	ldr	r3, [pc, #408]	; (8004c60 <HAL_RCC_OscConfig+0x4b8>)
 8004ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aca:	4a65      	ldr	r2, [pc, #404]	; (8004c60 <HAL_RCC_OscConfig+0x4b8>)
 8004acc:	f043 0301 	orr.w	r3, r3, #1
 8004ad0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004ad4:	e024      	b.n	8004b20 <HAL_RCC_OscConfig+0x378>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	2b05      	cmp	r3, #5
 8004adc:	d110      	bne.n	8004b00 <HAL_RCC_OscConfig+0x358>
 8004ade:	4b60      	ldr	r3, [pc, #384]	; (8004c60 <HAL_RCC_OscConfig+0x4b8>)
 8004ae0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ae4:	4a5e      	ldr	r2, [pc, #376]	; (8004c60 <HAL_RCC_OscConfig+0x4b8>)
 8004ae6:	f043 0304 	orr.w	r3, r3, #4
 8004aea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004aee:	4b5c      	ldr	r3, [pc, #368]	; (8004c60 <HAL_RCC_OscConfig+0x4b8>)
 8004af0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004af4:	4a5a      	ldr	r2, [pc, #360]	; (8004c60 <HAL_RCC_OscConfig+0x4b8>)
 8004af6:	f043 0301 	orr.w	r3, r3, #1
 8004afa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004afe:	e00f      	b.n	8004b20 <HAL_RCC_OscConfig+0x378>
 8004b00:	4b57      	ldr	r3, [pc, #348]	; (8004c60 <HAL_RCC_OscConfig+0x4b8>)
 8004b02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b06:	4a56      	ldr	r2, [pc, #344]	; (8004c60 <HAL_RCC_OscConfig+0x4b8>)
 8004b08:	f023 0301 	bic.w	r3, r3, #1
 8004b0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004b10:	4b53      	ldr	r3, [pc, #332]	; (8004c60 <HAL_RCC_OscConfig+0x4b8>)
 8004b12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b16:	4a52      	ldr	r2, [pc, #328]	; (8004c60 <HAL_RCC_OscConfig+0x4b8>)
 8004b18:	f023 0304 	bic.w	r3, r3, #4
 8004b1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d016      	beq.n	8004b56 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b28:	f7fd f94e 	bl	8001dc8 <HAL_GetTick>
 8004b2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b2e:	e00a      	b.n	8004b46 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b30:	f7fd f94a 	bl	8001dc8 <HAL_GetTick>
 8004b34:	4602      	mov	r2, r0
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	1ad3      	subs	r3, r2, r3
 8004b3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d901      	bls.n	8004b46 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004b42:	2303      	movs	r3, #3
 8004b44:	e138      	b.n	8004db8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b46:	4b46      	ldr	r3, [pc, #280]	; (8004c60 <HAL_RCC_OscConfig+0x4b8>)
 8004b48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b4c:	f003 0302 	and.w	r3, r3, #2
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d0ed      	beq.n	8004b30 <HAL_RCC_OscConfig+0x388>
 8004b54:	e015      	b.n	8004b82 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b56:	f7fd f937 	bl	8001dc8 <HAL_GetTick>
 8004b5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004b5c:	e00a      	b.n	8004b74 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b5e:	f7fd f933 	bl	8001dc8 <HAL_GetTick>
 8004b62:	4602      	mov	r2, r0
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	1ad3      	subs	r3, r2, r3
 8004b68:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d901      	bls.n	8004b74 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004b70:	2303      	movs	r3, #3
 8004b72:	e121      	b.n	8004db8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004b74:	4b3a      	ldr	r3, [pc, #232]	; (8004c60 <HAL_RCC_OscConfig+0x4b8>)
 8004b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b7a:	f003 0302 	and.w	r3, r3, #2
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d1ed      	bne.n	8004b5e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004b82:	7ffb      	ldrb	r3, [r7, #31]
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d105      	bne.n	8004b94 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b88:	4b35      	ldr	r3, [pc, #212]	; (8004c60 <HAL_RCC_OscConfig+0x4b8>)
 8004b8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b8c:	4a34      	ldr	r2, [pc, #208]	; (8004c60 <HAL_RCC_OscConfig+0x4b8>)
 8004b8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b92:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f003 0320 	and.w	r3, r3, #32
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d03c      	beq.n	8004c1a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	699b      	ldr	r3, [r3, #24]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d01c      	beq.n	8004be2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004ba8:	4b2d      	ldr	r3, [pc, #180]	; (8004c60 <HAL_RCC_OscConfig+0x4b8>)
 8004baa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004bae:	4a2c      	ldr	r2, [pc, #176]	; (8004c60 <HAL_RCC_OscConfig+0x4b8>)
 8004bb0:	f043 0301 	orr.w	r3, r3, #1
 8004bb4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bb8:	f7fd f906 	bl	8001dc8 <HAL_GetTick>
 8004bbc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004bbe:	e008      	b.n	8004bd2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004bc0:	f7fd f902 	bl	8001dc8 <HAL_GetTick>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	1ad3      	subs	r3, r2, r3
 8004bca:	2b02      	cmp	r3, #2
 8004bcc:	d901      	bls.n	8004bd2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004bce:	2303      	movs	r3, #3
 8004bd0:	e0f2      	b.n	8004db8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004bd2:	4b23      	ldr	r3, [pc, #140]	; (8004c60 <HAL_RCC_OscConfig+0x4b8>)
 8004bd4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004bd8:	f003 0302 	and.w	r3, r3, #2
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d0ef      	beq.n	8004bc0 <HAL_RCC_OscConfig+0x418>
 8004be0:	e01b      	b.n	8004c1a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004be2:	4b1f      	ldr	r3, [pc, #124]	; (8004c60 <HAL_RCC_OscConfig+0x4b8>)
 8004be4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004be8:	4a1d      	ldr	r2, [pc, #116]	; (8004c60 <HAL_RCC_OscConfig+0x4b8>)
 8004bea:	f023 0301 	bic.w	r3, r3, #1
 8004bee:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bf2:	f7fd f8e9 	bl	8001dc8 <HAL_GetTick>
 8004bf6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004bf8:	e008      	b.n	8004c0c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004bfa:	f7fd f8e5 	bl	8001dc8 <HAL_GetTick>
 8004bfe:	4602      	mov	r2, r0
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	1ad3      	subs	r3, r2, r3
 8004c04:	2b02      	cmp	r3, #2
 8004c06:	d901      	bls.n	8004c0c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004c08:	2303      	movs	r3, #3
 8004c0a:	e0d5      	b.n	8004db8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004c0c:	4b14      	ldr	r3, [pc, #80]	; (8004c60 <HAL_RCC_OscConfig+0x4b8>)
 8004c0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004c12:	f003 0302 	and.w	r3, r3, #2
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d1ef      	bne.n	8004bfa <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	69db      	ldr	r3, [r3, #28]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	f000 80c9 	beq.w	8004db6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c24:	4b0e      	ldr	r3, [pc, #56]	; (8004c60 <HAL_RCC_OscConfig+0x4b8>)
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	f003 030c 	and.w	r3, r3, #12
 8004c2c:	2b0c      	cmp	r3, #12
 8004c2e:	f000 8083 	beq.w	8004d38 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	69db      	ldr	r3, [r3, #28]
 8004c36:	2b02      	cmp	r3, #2
 8004c38:	d15e      	bne.n	8004cf8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c3a:	4b09      	ldr	r3, [pc, #36]	; (8004c60 <HAL_RCC_OscConfig+0x4b8>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a08      	ldr	r2, [pc, #32]	; (8004c60 <HAL_RCC_OscConfig+0x4b8>)
 8004c40:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c46:	f7fd f8bf 	bl	8001dc8 <HAL_GetTick>
 8004c4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c4c:	e00c      	b.n	8004c68 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c4e:	f7fd f8bb 	bl	8001dc8 <HAL_GetTick>
 8004c52:	4602      	mov	r2, r0
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	1ad3      	subs	r3, r2, r3
 8004c58:	2b02      	cmp	r3, #2
 8004c5a:	d905      	bls.n	8004c68 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004c5c:	2303      	movs	r3, #3
 8004c5e:	e0ab      	b.n	8004db8 <HAL_RCC_OscConfig+0x610>
 8004c60:	40021000 	.word	0x40021000
 8004c64:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c68:	4b55      	ldr	r3, [pc, #340]	; (8004dc0 <HAL_RCC_OscConfig+0x618>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d1ec      	bne.n	8004c4e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c74:	4b52      	ldr	r3, [pc, #328]	; (8004dc0 <HAL_RCC_OscConfig+0x618>)
 8004c76:	68da      	ldr	r2, [r3, #12]
 8004c78:	4b52      	ldr	r3, [pc, #328]	; (8004dc4 <HAL_RCC_OscConfig+0x61c>)
 8004c7a:	4013      	ands	r3, r2
 8004c7c:	687a      	ldr	r2, [r7, #4]
 8004c7e:	6a11      	ldr	r1, [r2, #32]
 8004c80:	687a      	ldr	r2, [r7, #4]
 8004c82:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004c84:	3a01      	subs	r2, #1
 8004c86:	0112      	lsls	r2, r2, #4
 8004c88:	4311      	orrs	r1, r2
 8004c8a:	687a      	ldr	r2, [r7, #4]
 8004c8c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004c8e:	0212      	lsls	r2, r2, #8
 8004c90:	4311      	orrs	r1, r2
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004c96:	0852      	lsrs	r2, r2, #1
 8004c98:	3a01      	subs	r2, #1
 8004c9a:	0552      	lsls	r2, r2, #21
 8004c9c:	4311      	orrs	r1, r2
 8004c9e:	687a      	ldr	r2, [r7, #4]
 8004ca0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004ca2:	0852      	lsrs	r2, r2, #1
 8004ca4:	3a01      	subs	r2, #1
 8004ca6:	0652      	lsls	r2, r2, #25
 8004ca8:	4311      	orrs	r1, r2
 8004caa:	687a      	ldr	r2, [r7, #4]
 8004cac:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004cae:	06d2      	lsls	r2, r2, #27
 8004cb0:	430a      	orrs	r2, r1
 8004cb2:	4943      	ldr	r1, [pc, #268]	; (8004dc0 <HAL_RCC_OscConfig+0x618>)
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004cb8:	4b41      	ldr	r3, [pc, #260]	; (8004dc0 <HAL_RCC_OscConfig+0x618>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a40      	ldr	r2, [pc, #256]	; (8004dc0 <HAL_RCC_OscConfig+0x618>)
 8004cbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004cc2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004cc4:	4b3e      	ldr	r3, [pc, #248]	; (8004dc0 <HAL_RCC_OscConfig+0x618>)
 8004cc6:	68db      	ldr	r3, [r3, #12]
 8004cc8:	4a3d      	ldr	r2, [pc, #244]	; (8004dc0 <HAL_RCC_OscConfig+0x618>)
 8004cca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004cce:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cd0:	f7fd f87a 	bl	8001dc8 <HAL_GetTick>
 8004cd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004cd6:	e008      	b.n	8004cea <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cd8:	f7fd f876 	bl	8001dc8 <HAL_GetTick>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	1ad3      	subs	r3, r2, r3
 8004ce2:	2b02      	cmp	r3, #2
 8004ce4:	d901      	bls.n	8004cea <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004ce6:	2303      	movs	r3, #3
 8004ce8:	e066      	b.n	8004db8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004cea:	4b35      	ldr	r3, [pc, #212]	; (8004dc0 <HAL_RCC_OscConfig+0x618>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d0f0      	beq.n	8004cd8 <HAL_RCC_OscConfig+0x530>
 8004cf6:	e05e      	b.n	8004db6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cf8:	4b31      	ldr	r3, [pc, #196]	; (8004dc0 <HAL_RCC_OscConfig+0x618>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a30      	ldr	r2, [pc, #192]	; (8004dc0 <HAL_RCC_OscConfig+0x618>)
 8004cfe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d04:	f7fd f860 	bl	8001dc8 <HAL_GetTick>
 8004d08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d0a:	e008      	b.n	8004d1e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d0c:	f7fd f85c 	bl	8001dc8 <HAL_GetTick>
 8004d10:	4602      	mov	r2, r0
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	1ad3      	subs	r3, r2, r3
 8004d16:	2b02      	cmp	r3, #2
 8004d18:	d901      	bls.n	8004d1e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004d1a:	2303      	movs	r3, #3
 8004d1c:	e04c      	b.n	8004db8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d1e:	4b28      	ldr	r3, [pc, #160]	; (8004dc0 <HAL_RCC_OscConfig+0x618>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d1f0      	bne.n	8004d0c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004d2a:	4b25      	ldr	r3, [pc, #148]	; (8004dc0 <HAL_RCC_OscConfig+0x618>)
 8004d2c:	68da      	ldr	r2, [r3, #12]
 8004d2e:	4924      	ldr	r1, [pc, #144]	; (8004dc0 <HAL_RCC_OscConfig+0x618>)
 8004d30:	4b25      	ldr	r3, [pc, #148]	; (8004dc8 <HAL_RCC_OscConfig+0x620>)
 8004d32:	4013      	ands	r3, r2
 8004d34:	60cb      	str	r3, [r1, #12]
 8004d36:	e03e      	b.n	8004db6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	69db      	ldr	r3, [r3, #28]
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d101      	bne.n	8004d44 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
 8004d42:	e039      	b.n	8004db8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004d44:	4b1e      	ldr	r3, [pc, #120]	; (8004dc0 <HAL_RCC_OscConfig+0x618>)
 8004d46:	68db      	ldr	r3, [r3, #12]
 8004d48:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	f003 0203 	and.w	r2, r3, #3
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6a1b      	ldr	r3, [r3, #32]
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d12c      	bne.n	8004db2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d62:	3b01      	subs	r3, #1
 8004d64:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d66:	429a      	cmp	r2, r3
 8004d68:	d123      	bne.n	8004db2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d74:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004d76:	429a      	cmp	r2, r3
 8004d78:	d11b      	bne.n	8004db2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d84:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d86:	429a      	cmp	r2, r3
 8004d88:	d113      	bne.n	8004db2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d94:	085b      	lsrs	r3, r3, #1
 8004d96:	3b01      	subs	r3, #1
 8004d98:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	d109      	bne.n	8004db2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004da8:	085b      	lsrs	r3, r3, #1
 8004daa:	3b01      	subs	r3, #1
 8004dac:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004dae:	429a      	cmp	r2, r3
 8004db0:	d001      	beq.n	8004db6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	e000      	b.n	8004db8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004db6:	2300      	movs	r3, #0
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	3720      	adds	r7, #32
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}
 8004dc0:	40021000 	.word	0x40021000
 8004dc4:	019f800c 	.word	0x019f800c
 8004dc8:	feeefffc 	.word	0xfeeefffc

08004dcc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b086      	sub	sp, #24
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
 8004dd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d101      	bne.n	8004de4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004de0:	2301      	movs	r3, #1
 8004de2:	e11e      	b.n	8005022 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004de4:	4b91      	ldr	r3, [pc, #580]	; (800502c <HAL_RCC_ClockConfig+0x260>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f003 030f 	and.w	r3, r3, #15
 8004dec:	683a      	ldr	r2, [r7, #0]
 8004dee:	429a      	cmp	r2, r3
 8004df0:	d910      	bls.n	8004e14 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004df2:	4b8e      	ldr	r3, [pc, #568]	; (800502c <HAL_RCC_ClockConfig+0x260>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f023 020f 	bic.w	r2, r3, #15
 8004dfa:	498c      	ldr	r1, [pc, #560]	; (800502c <HAL_RCC_ClockConfig+0x260>)
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e02:	4b8a      	ldr	r3, [pc, #552]	; (800502c <HAL_RCC_ClockConfig+0x260>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f003 030f 	and.w	r3, r3, #15
 8004e0a:	683a      	ldr	r2, [r7, #0]
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	d001      	beq.n	8004e14 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004e10:	2301      	movs	r3, #1
 8004e12:	e106      	b.n	8005022 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f003 0301 	and.w	r3, r3, #1
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d073      	beq.n	8004f08 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	2b03      	cmp	r3, #3
 8004e26:	d129      	bne.n	8004e7c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e28:	4b81      	ldr	r3, [pc, #516]	; (8005030 <HAL_RCC_ClockConfig+0x264>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d101      	bne.n	8004e38 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004e34:	2301      	movs	r3, #1
 8004e36:	e0f4      	b.n	8005022 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004e38:	f000 f99e 	bl	8005178 <RCC_GetSysClockFreqFromPLLSource>
 8004e3c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	4a7c      	ldr	r2, [pc, #496]	; (8005034 <HAL_RCC_ClockConfig+0x268>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d93f      	bls.n	8004ec6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004e46:	4b7a      	ldr	r3, [pc, #488]	; (8005030 <HAL_RCC_ClockConfig+0x264>)
 8004e48:	689b      	ldr	r3, [r3, #8]
 8004e4a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d009      	beq.n	8004e66 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d033      	beq.n	8004ec6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d12f      	bne.n	8004ec6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004e66:	4b72      	ldr	r3, [pc, #456]	; (8005030 <HAL_RCC_ClockConfig+0x264>)
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e6e:	4a70      	ldr	r2, [pc, #448]	; (8005030 <HAL_RCC_ClockConfig+0x264>)
 8004e70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e74:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004e76:	2380      	movs	r3, #128	; 0x80
 8004e78:	617b      	str	r3, [r7, #20]
 8004e7a:	e024      	b.n	8004ec6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	2b02      	cmp	r3, #2
 8004e82:	d107      	bne.n	8004e94 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e84:	4b6a      	ldr	r3, [pc, #424]	; (8005030 <HAL_RCC_ClockConfig+0x264>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d109      	bne.n	8004ea4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004e90:	2301      	movs	r3, #1
 8004e92:	e0c6      	b.n	8005022 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e94:	4b66      	ldr	r3, [pc, #408]	; (8005030 <HAL_RCC_ClockConfig+0x264>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d101      	bne.n	8004ea4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	e0be      	b.n	8005022 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004ea4:	f000 f8ce 	bl	8005044 <HAL_RCC_GetSysClockFreq>
 8004ea8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	4a61      	ldr	r2, [pc, #388]	; (8005034 <HAL_RCC_ClockConfig+0x268>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d909      	bls.n	8004ec6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004eb2:	4b5f      	ldr	r3, [pc, #380]	; (8005030 <HAL_RCC_ClockConfig+0x264>)
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004eba:	4a5d      	ldr	r2, [pc, #372]	; (8005030 <HAL_RCC_ClockConfig+0x264>)
 8004ebc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ec0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004ec2:	2380      	movs	r3, #128	; 0x80
 8004ec4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004ec6:	4b5a      	ldr	r3, [pc, #360]	; (8005030 <HAL_RCC_ClockConfig+0x264>)
 8004ec8:	689b      	ldr	r3, [r3, #8]
 8004eca:	f023 0203 	bic.w	r2, r3, #3
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	4957      	ldr	r1, [pc, #348]	; (8005030 <HAL_RCC_ClockConfig+0x264>)
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ed8:	f7fc ff76 	bl	8001dc8 <HAL_GetTick>
 8004edc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ede:	e00a      	b.n	8004ef6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ee0:	f7fc ff72 	bl	8001dc8 <HAL_GetTick>
 8004ee4:	4602      	mov	r2, r0
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	1ad3      	subs	r3, r2, r3
 8004eea:	f241 3288 	movw	r2, #5000	; 0x1388
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d901      	bls.n	8004ef6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004ef2:	2303      	movs	r3, #3
 8004ef4:	e095      	b.n	8005022 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ef6:	4b4e      	ldr	r3, [pc, #312]	; (8005030 <HAL_RCC_ClockConfig+0x264>)
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	f003 020c 	and.w	r2, r3, #12
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	009b      	lsls	r3, r3, #2
 8004f04:	429a      	cmp	r2, r3
 8004f06:	d1eb      	bne.n	8004ee0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f003 0302 	and.w	r3, r3, #2
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d023      	beq.n	8004f5c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f003 0304 	and.w	r3, r3, #4
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d005      	beq.n	8004f2c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f20:	4b43      	ldr	r3, [pc, #268]	; (8005030 <HAL_RCC_ClockConfig+0x264>)
 8004f22:	689b      	ldr	r3, [r3, #8]
 8004f24:	4a42      	ldr	r2, [pc, #264]	; (8005030 <HAL_RCC_ClockConfig+0x264>)
 8004f26:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004f2a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f003 0308 	and.w	r3, r3, #8
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d007      	beq.n	8004f48 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004f38:	4b3d      	ldr	r3, [pc, #244]	; (8005030 <HAL_RCC_ClockConfig+0x264>)
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004f40:	4a3b      	ldr	r2, [pc, #236]	; (8005030 <HAL_RCC_ClockConfig+0x264>)
 8004f42:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004f46:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f48:	4b39      	ldr	r3, [pc, #228]	; (8005030 <HAL_RCC_ClockConfig+0x264>)
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	4936      	ldr	r1, [pc, #216]	; (8005030 <HAL_RCC_ClockConfig+0x264>)
 8004f56:	4313      	orrs	r3, r2
 8004f58:	608b      	str	r3, [r1, #8]
 8004f5a:	e008      	b.n	8004f6e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	2b80      	cmp	r3, #128	; 0x80
 8004f60:	d105      	bne.n	8004f6e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004f62:	4b33      	ldr	r3, [pc, #204]	; (8005030 <HAL_RCC_ClockConfig+0x264>)
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	4a32      	ldr	r2, [pc, #200]	; (8005030 <HAL_RCC_ClockConfig+0x264>)
 8004f68:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f6c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004f6e:	4b2f      	ldr	r3, [pc, #188]	; (800502c <HAL_RCC_ClockConfig+0x260>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f003 030f 	and.w	r3, r3, #15
 8004f76:	683a      	ldr	r2, [r7, #0]
 8004f78:	429a      	cmp	r2, r3
 8004f7a:	d21d      	bcs.n	8004fb8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f7c:	4b2b      	ldr	r3, [pc, #172]	; (800502c <HAL_RCC_ClockConfig+0x260>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f023 020f 	bic.w	r2, r3, #15
 8004f84:	4929      	ldr	r1, [pc, #164]	; (800502c <HAL_RCC_ClockConfig+0x260>)
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004f8c:	f7fc ff1c 	bl	8001dc8 <HAL_GetTick>
 8004f90:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f92:	e00a      	b.n	8004faa <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f94:	f7fc ff18 	bl	8001dc8 <HAL_GetTick>
 8004f98:	4602      	mov	r2, r0
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	1ad3      	subs	r3, r2, r3
 8004f9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d901      	bls.n	8004faa <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004fa6:	2303      	movs	r3, #3
 8004fa8:	e03b      	b.n	8005022 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004faa:	4b20      	ldr	r3, [pc, #128]	; (800502c <HAL_RCC_ClockConfig+0x260>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f003 030f 	and.w	r3, r3, #15
 8004fb2:	683a      	ldr	r2, [r7, #0]
 8004fb4:	429a      	cmp	r2, r3
 8004fb6:	d1ed      	bne.n	8004f94 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f003 0304 	and.w	r3, r3, #4
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d008      	beq.n	8004fd6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004fc4:	4b1a      	ldr	r3, [pc, #104]	; (8005030 <HAL_RCC_ClockConfig+0x264>)
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	68db      	ldr	r3, [r3, #12]
 8004fd0:	4917      	ldr	r1, [pc, #92]	; (8005030 <HAL_RCC_ClockConfig+0x264>)
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f003 0308 	and.w	r3, r3, #8
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d009      	beq.n	8004ff6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004fe2:	4b13      	ldr	r3, [pc, #76]	; (8005030 <HAL_RCC_ClockConfig+0x264>)
 8004fe4:	689b      	ldr	r3, [r3, #8]
 8004fe6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	691b      	ldr	r3, [r3, #16]
 8004fee:	00db      	lsls	r3, r3, #3
 8004ff0:	490f      	ldr	r1, [pc, #60]	; (8005030 <HAL_RCC_ClockConfig+0x264>)
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004ff6:	f000 f825 	bl	8005044 <HAL_RCC_GetSysClockFreq>
 8004ffa:	4602      	mov	r2, r0
 8004ffc:	4b0c      	ldr	r3, [pc, #48]	; (8005030 <HAL_RCC_ClockConfig+0x264>)
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	091b      	lsrs	r3, r3, #4
 8005002:	f003 030f 	and.w	r3, r3, #15
 8005006:	490c      	ldr	r1, [pc, #48]	; (8005038 <HAL_RCC_ClockConfig+0x26c>)
 8005008:	5ccb      	ldrb	r3, [r1, r3]
 800500a:	f003 031f 	and.w	r3, r3, #31
 800500e:	fa22 f303 	lsr.w	r3, r2, r3
 8005012:	4a0a      	ldr	r2, [pc, #40]	; (800503c <HAL_RCC_ClockConfig+0x270>)
 8005014:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005016:	4b0a      	ldr	r3, [pc, #40]	; (8005040 <HAL_RCC_ClockConfig+0x274>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4618      	mov	r0, r3
 800501c:	f7fc fe88 	bl	8001d30 <HAL_InitTick>
 8005020:	4603      	mov	r3, r0
}
 8005022:	4618      	mov	r0, r3
 8005024:	3718      	adds	r7, #24
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}
 800502a:	bf00      	nop
 800502c:	40022000 	.word	0x40022000
 8005030:	40021000 	.word	0x40021000
 8005034:	04c4b400 	.word	0x04c4b400
 8005038:	08008c84 	.word	0x08008c84
 800503c:	20000018 	.word	0x20000018
 8005040:	2000001c 	.word	0x2000001c

08005044 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005044:	b480      	push	{r7}
 8005046:	b087      	sub	sp, #28
 8005048:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800504a:	4b2c      	ldr	r3, [pc, #176]	; (80050fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	f003 030c 	and.w	r3, r3, #12
 8005052:	2b04      	cmp	r3, #4
 8005054:	d102      	bne.n	800505c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005056:	4b2a      	ldr	r3, [pc, #168]	; (8005100 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005058:	613b      	str	r3, [r7, #16]
 800505a:	e047      	b.n	80050ec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800505c:	4b27      	ldr	r3, [pc, #156]	; (80050fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	f003 030c 	and.w	r3, r3, #12
 8005064:	2b08      	cmp	r3, #8
 8005066:	d102      	bne.n	800506e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005068:	4b26      	ldr	r3, [pc, #152]	; (8005104 <HAL_RCC_GetSysClockFreq+0xc0>)
 800506a:	613b      	str	r3, [r7, #16]
 800506c:	e03e      	b.n	80050ec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800506e:	4b23      	ldr	r3, [pc, #140]	; (80050fc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	f003 030c 	and.w	r3, r3, #12
 8005076:	2b0c      	cmp	r3, #12
 8005078:	d136      	bne.n	80050e8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800507a:	4b20      	ldr	r3, [pc, #128]	; (80050fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800507c:	68db      	ldr	r3, [r3, #12]
 800507e:	f003 0303 	and.w	r3, r3, #3
 8005082:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005084:	4b1d      	ldr	r3, [pc, #116]	; (80050fc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005086:	68db      	ldr	r3, [r3, #12]
 8005088:	091b      	lsrs	r3, r3, #4
 800508a:	f003 030f 	and.w	r3, r3, #15
 800508e:	3301      	adds	r3, #1
 8005090:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	2b03      	cmp	r3, #3
 8005096:	d10c      	bne.n	80050b2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005098:	4a1a      	ldr	r2, [pc, #104]	; (8005104 <HAL_RCC_GetSysClockFreq+0xc0>)
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	fbb2 f3f3 	udiv	r3, r2, r3
 80050a0:	4a16      	ldr	r2, [pc, #88]	; (80050fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80050a2:	68d2      	ldr	r2, [r2, #12]
 80050a4:	0a12      	lsrs	r2, r2, #8
 80050a6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80050aa:	fb02 f303 	mul.w	r3, r2, r3
 80050ae:	617b      	str	r3, [r7, #20]
      break;
 80050b0:	e00c      	b.n	80050cc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80050b2:	4a13      	ldr	r2, [pc, #76]	; (8005100 <HAL_RCC_GetSysClockFreq+0xbc>)
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80050ba:	4a10      	ldr	r2, [pc, #64]	; (80050fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80050bc:	68d2      	ldr	r2, [r2, #12]
 80050be:	0a12      	lsrs	r2, r2, #8
 80050c0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80050c4:	fb02 f303 	mul.w	r3, r2, r3
 80050c8:	617b      	str	r3, [r7, #20]
      break;
 80050ca:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80050cc:	4b0b      	ldr	r3, [pc, #44]	; (80050fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80050ce:	68db      	ldr	r3, [r3, #12]
 80050d0:	0e5b      	lsrs	r3, r3, #25
 80050d2:	f003 0303 	and.w	r3, r3, #3
 80050d6:	3301      	adds	r3, #1
 80050d8:	005b      	lsls	r3, r3, #1
 80050da:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80050dc:	697a      	ldr	r2, [r7, #20]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80050e4:	613b      	str	r3, [r7, #16]
 80050e6:	e001      	b.n	80050ec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80050e8:	2300      	movs	r3, #0
 80050ea:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80050ec:	693b      	ldr	r3, [r7, #16]
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	371c      	adds	r7, #28
 80050f2:	46bd      	mov	sp, r7
 80050f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f8:	4770      	bx	lr
 80050fa:	bf00      	nop
 80050fc:	40021000 	.word	0x40021000
 8005100:	00f42400 	.word	0x00f42400
 8005104:	016e3600 	.word	0x016e3600

08005108 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005108:	b480      	push	{r7}
 800510a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800510c:	4b03      	ldr	r3, [pc, #12]	; (800511c <HAL_RCC_GetHCLKFreq+0x14>)
 800510e:	681b      	ldr	r3, [r3, #0]
}
 8005110:	4618      	mov	r0, r3
 8005112:	46bd      	mov	sp, r7
 8005114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005118:	4770      	bx	lr
 800511a:	bf00      	nop
 800511c:	20000018 	.word	0x20000018

08005120 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005124:	f7ff fff0 	bl	8005108 <HAL_RCC_GetHCLKFreq>
 8005128:	4602      	mov	r2, r0
 800512a:	4b06      	ldr	r3, [pc, #24]	; (8005144 <HAL_RCC_GetPCLK1Freq+0x24>)
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	0a1b      	lsrs	r3, r3, #8
 8005130:	f003 0307 	and.w	r3, r3, #7
 8005134:	4904      	ldr	r1, [pc, #16]	; (8005148 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005136:	5ccb      	ldrb	r3, [r1, r3]
 8005138:	f003 031f 	and.w	r3, r3, #31
 800513c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005140:	4618      	mov	r0, r3
 8005142:	bd80      	pop	{r7, pc}
 8005144:	40021000 	.word	0x40021000
 8005148:	08008c94 	.word	0x08008c94

0800514c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005150:	f7ff ffda 	bl	8005108 <HAL_RCC_GetHCLKFreq>
 8005154:	4602      	mov	r2, r0
 8005156:	4b06      	ldr	r3, [pc, #24]	; (8005170 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005158:	689b      	ldr	r3, [r3, #8]
 800515a:	0adb      	lsrs	r3, r3, #11
 800515c:	f003 0307 	and.w	r3, r3, #7
 8005160:	4904      	ldr	r1, [pc, #16]	; (8005174 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005162:	5ccb      	ldrb	r3, [r1, r3]
 8005164:	f003 031f 	and.w	r3, r3, #31
 8005168:	fa22 f303 	lsr.w	r3, r2, r3
}
 800516c:	4618      	mov	r0, r3
 800516e:	bd80      	pop	{r7, pc}
 8005170:	40021000 	.word	0x40021000
 8005174:	08008c94 	.word	0x08008c94

08005178 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005178:	b480      	push	{r7}
 800517a:	b087      	sub	sp, #28
 800517c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800517e:	4b1e      	ldr	r3, [pc, #120]	; (80051f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005180:	68db      	ldr	r3, [r3, #12]
 8005182:	f003 0303 	and.w	r3, r3, #3
 8005186:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005188:	4b1b      	ldr	r3, [pc, #108]	; (80051f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800518a:	68db      	ldr	r3, [r3, #12]
 800518c:	091b      	lsrs	r3, r3, #4
 800518e:	f003 030f 	and.w	r3, r3, #15
 8005192:	3301      	adds	r3, #1
 8005194:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	2b03      	cmp	r3, #3
 800519a:	d10c      	bne.n	80051b6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800519c:	4a17      	ldr	r2, [pc, #92]	; (80051fc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80051a4:	4a14      	ldr	r2, [pc, #80]	; (80051f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80051a6:	68d2      	ldr	r2, [r2, #12]
 80051a8:	0a12      	lsrs	r2, r2, #8
 80051aa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80051ae:	fb02 f303 	mul.w	r3, r2, r3
 80051b2:	617b      	str	r3, [r7, #20]
    break;
 80051b4:	e00c      	b.n	80051d0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80051b6:	4a12      	ldr	r2, [pc, #72]	; (8005200 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80051be:	4a0e      	ldr	r2, [pc, #56]	; (80051f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80051c0:	68d2      	ldr	r2, [r2, #12]
 80051c2:	0a12      	lsrs	r2, r2, #8
 80051c4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80051c8:	fb02 f303 	mul.w	r3, r2, r3
 80051cc:	617b      	str	r3, [r7, #20]
    break;
 80051ce:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80051d0:	4b09      	ldr	r3, [pc, #36]	; (80051f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80051d2:	68db      	ldr	r3, [r3, #12]
 80051d4:	0e5b      	lsrs	r3, r3, #25
 80051d6:	f003 0303 	and.w	r3, r3, #3
 80051da:	3301      	adds	r3, #1
 80051dc:	005b      	lsls	r3, r3, #1
 80051de:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80051e0:	697a      	ldr	r2, [r7, #20]
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80051e8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80051ea:	687b      	ldr	r3, [r7, #4]
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	371c      	adds	r7, #28
 80051f0:	46bd      	mov	sp, r7
 80051f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f6:	4770      	bx	lr
 80051f8:	40021000 	.word	0x40021000
 80051fc:	016e3600 	.word	0x016e3600
 8005200:	00f42400 	.word	0x00f42400

08005204 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b086      	sub	sp, #24
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800520c:	2300      	movs	r3, #0
 800520e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005210:	2300      	movs	r3, #0
 8005212:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800521c:	2b00      	cmp	r3, #0
 800521e:	f000 8098 	beq.w	8005352 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005222:	2300      	movs	r3, #0
 8005224:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005226:	4b43      	ldr	r3, [pc, #268]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005228:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800522a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800522e:	2b00      	cmp	r3, #0
 8005230:	d10d      	bne.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005232:	4b40      	ldr	r3, [pc, #256]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005236:	4a3f      	ldr	r2, [pc, #252]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005238:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800523c:	6593      	str	r3, [r2, #88]	; 0x58
 800523e:	4b3d      	ldr	r3, [pc, #244]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005240:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005242:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005246:	60bb      	str	r3, [r7, #8]
 8005248:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800524a:	2301      	movs	r3, #1
 800524c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800524e:	4b3a      	ldr	r3, [pc, #232]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a39      	ldr	r2, [pc, #228]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005254:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005258:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800525a:	f7fc fdb5 	bl	8001dc8 <HAL_GetTick>
 800525e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005260:	e009      	b.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005262:	f7fc fdb1 	bl	8001dc8 <HAL_GetTick>
 8005266:	4602      	mov	r2, r0
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	1ad3      	subs	r3, r2, r3
 800526c:	2b02      	cmp	r3, #2
 800526e:	d902      	bls.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005270:	2303      	movs	r3, #3
 8005272:	74fb      	strb	r3, [r7, #19]
        break;
 8005274:	e005      	b.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005276:	4b30      	ldr	r3, [pc, #192]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800527e:	2b00      	cmp	r3, #0
 8005280:	d0ef      	beq.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005282:	7cfb      	ldrb	r3, [r7, #19]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d159      	bne.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005288:	4b2a      	ldr	r3, [pc, #168]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800528a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800528e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005292:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d01e      	beq.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800529e:	697a      	ldr	r2, [r7, #20]
 80052a0:	429a      	cmp	r2, r3
 80052a2:	d019      	beq.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80052a4:	4b23      	ldr	r3, [pc, #140]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052ae:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80052b0:	4b20      	ldr	r3, [pc, #128]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052b6:	4a1f      	ldr	r2, [pc, #124]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80052c0:	4b1c      	ldr	r3, [pc, #112]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052c6:	4a1b      	ldr	r2, [pc, #108]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80052d0:	4a18      	ldr	r2, [pc, #96]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	f003 0301 	and.w	r3, r3, #1
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d016      	beq.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052e2:	f7fc fd71 	bl	8001dc8 <HAL_GetTick>
 80052e6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052e8:	e00b      	b.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052ea:	f7fc fd6d 	bl	8001dc8 <HAL_GetTick>
 80052ee:	4602      	mov	r2, r0
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	1ad3      	subs	r3, r2, r3
 80052f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d902      	bls.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80052fc:	2303      	movs	r3, #3
 80052fe:	74fb      	strb	r3, [r7, #19]
            break;
 8005300:	e006      	b.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005302:	4b0c      	ldr	r3, [pc, #48]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005304:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005308:	f003 0302 	and.w	r3, r3, #2
 800530c:	2b00      	cmp	r3, #0
 800530e:	d0ec      	beq.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005310:	7cfb      	ldrb	r3, [r7, #19]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d10b      	bne.n	800532e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005316:	4b07      	ldr	r3, [pc, #28]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005318:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800531c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005324:	4903      	ldr	r1, [pc, #12]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005326:	4313      	orrs	r3, r2
 8005328:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800532c:	e008      	b.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800532e:	7cfb      	ldrb	r3, [r7, #19]
 8005330:	74bb      	strb	r3, [r7, #18]
 8005332:	e005      	b.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005334:	40021000 	.word	0x40021000
 8005338:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800533c:	7cfb      	ldrb	r3, [r7, #19]
 800533e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005340:	7c7b      	ldrb	r3, [r7, #17]
 8005342:	2b01      	cmp	r3, #1
 8005344:	d105      	bne.n	8005352 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005346:	4ba7      	ldr	r3, [pc, #668]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800534a:	4aa6      	ldr	r2, [pc, #664]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800534c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005350:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f003 0301 	and.w	r3, r3, #1
 800535a:	2b00      	cmp	r3, #0
 800535c:	d00a      	beq.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800535e:	4ba1      	ldr	r3, [pc, #644]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005360:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005364:	f023 0203 	bic.w	r2, r3, #3
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	499d      	ldr	r1, [pc, #628]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800536e:	4313      	orrs	r3, r2
 8005370:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f003 0302 	and.w	r3, r3, #2
 800537c:	2b00      	cmp	r3, #0
 800537e:	d00a      	beq.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005380:	4b98      	ldr	r3, [pc, #608]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005382:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005386:	f023 020c 	bic.w	r2, r3, #12
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	689b      	ldr	r3, [r3, #8]
 800538e:	4995      	ldr	r1, [pc, #596]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005390:	4313      	orrs	r3, r2
 8005392:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f003 0304 	and.w	r3, r3, #4
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d00a      	beq.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80053a2:	4b90      	ldr	r3, [pc, #576]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053a8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	68db      	ldr	r3, [r3, #12]
 80053b0:	498c      	ldr	r1, [pc, #560]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053b2:	4313      	orrs	r3, r2
 80053b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f003 0308 	and.w	r3, r3, #8
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d00a      	beq.n	80053da <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80053c4:	4b87      	ldr	r3, [pc, #540]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053ca:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	691b      	ldr	r3, [r3, #16]
 80053d2:	4984      	ldr	r1, [pc, #528]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053d4:	4313      	orrs	r3, r2
 80053d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f003 0310 	and.w	r3, r3, #16
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d00a      	beq.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80053e6:	4b7f      	ldr	r3, [pc, #508]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	695b      	ldr	r3, [r3, #20]
 80053f4:	497b      	ldr	r1, [pc, #492]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053f6:	4313      	orrs	r3, r2
 80053f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f003 0320 	and.w	r3, r3, #32
 8005404:	2b00      	cmp	r3, #0
 8005406:	d00a      	beq.n	800541e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005408:	4b76      	ldr	r3, [pc, #472]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800540a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800540e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	699b      	ldr	r3, [r3, #24]
 8005416:	4973      	ldr	r1, [pc, #460]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005418:	4313      	orrs	r3, r2
 800541a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005426:	2b00      	cmp	r3, #0
 8005428:	d00a      	beq.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800542a:	4b6e      	ldr	r3, [pc, #440]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800542c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005430:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	69db      	ldr	r3, [r3, #28]
 8005438:	496a      	ldr	r1, [pc, #424]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800543a:	4313      	orrs	r3, r2
 800543c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005448:	2b00      	cmp	r3, #0
 800544a:	d00a      	beq.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800544c:	4b65      	ldr	r3, [pc, #404]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800544e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005452:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6a1b      	ldr	r3, [r3, #32]
 800545a:	4962      	ldr	r1, [pc, #392]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800545c:	4313      	orrs	r3, r2
 800545e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800546a:	2b00      	cmp	r3, #0
 800546c:	d00a      	beq.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800546e:	4b5d      	ldr	r3, [pc, #372]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005470:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005474:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800547c:	4959      	ldr	r1, [pc, #356]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800547e:	4313      	orrs	r3, r2
 8005480:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800548c:	2b00      	cmp	r3, #0
 800548e:	d00a      	beq.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005490:	4b54      	ldr	r3, [pc, #336]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005492:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005496:	f023 0203 	bic.w	r2, r3, #3
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800549e:	4951      	ldr	r1, [pc, #324]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054a0:	4313      	orrs	r3, r2
 80054a2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d00a      	beq.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80054b2:	4b4c      	ldr	r3, [pc, #304]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054b8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054c0:	4948      	ldr	r1, [pc, #288]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054c2:	4313      	orrs	r3, r2
 80054c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d015      	beq.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80054d4:	4b43      	ldr	r3, [pc, #268]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054da:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054e2:	4940      	ldr	r1, [pc, #256]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054e4:	4313      	orrs	r3, r2
 80054e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054f2:	d105      	bne.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80054f4:	4b3b      	ldr	r3, [pc, #236]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054f6:	68db      	ldr	r3, [r3, #12]
 80054f8:	4a3a      	ldr	r2, [pc, #232]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80054fe:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005508:	2b00      	cmp	r3, #0
 800550a:	d015      	beq.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800550c:	4b35      	ldr	r3, [pc, #212]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800550e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005512:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800551a:	4932      	ldr	r1, [pc, #200]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800551c:	4313      	orrs	r3, r2
 800551e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005526:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800552a:	d105      	bne.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800552c:	4b2d      	ldr	r3, [pc, #180]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800552e:	68db      	ldr	r3, [r3, #12]
 8005530:	4a2c      	ldr	r2, [pc, #176]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005532:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005536:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005540:	2b00      	cmp	r3, #0
 8005542:	d015      	beq.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005544:	4b27      	ldr	r3, [pc, #156]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005546:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800554a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005552:	4924      	ldr	r1, [pc, #144]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005554:	4313      	orrs	r3, r2
 8005556:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800555e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005562:	d105      	bne.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005564:	4b1f      	ldr	r3, [pc, #124]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005566:	68db      	ldr	r3, [r3, #12]
 8005568:	4a1e      	ldr	r2, [pc, #120]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800556a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800556e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005578:	2b00      	cmp	r3, #0
 800557a:	d015      	beq.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800557c:	4b19      	ldr	r3, [pc, #100]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800557e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005582:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800558a:	4916      	ldr	r1, [pc, #88]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800558c:	4313      	orrs	r3, r2
 800558e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005596:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800559a:	d105      	bne.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800559c:	4b11      	ldr	r3, [pc, #68]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800559e:	68db      	ldr	r3, [r3, #12]
 80055a0:	4a10      	ldr	r2, [pc, #64]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80055a6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d019      	beq.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80055b4:	4b0b      	ldr	r3, [pc, #44]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055ba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055c2:	4908      	ldr	r1, [pc, #32]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055c4:	4313      	orrs	r3, r2
 80055c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80055d2:	d109      	bne.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80055d4:	4b03      	ldr	r3, [pc, #12]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055d6:	68db      	ldr	r3, [r3, #12]
 80055d8:	4a02      	ldr	r2, [pc, #8]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80055de:	60d3      	str	r3, [r2, #12]
 80055e0:	e002      	b.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80055e2:	bf00      	nop
 80055e4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d015      	beq.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80055f4:	4b29      	ldr	r3, [pc, #164]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80055f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055fa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005602:	4926      	ldr	r1, [pc, #152]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005604:	4313      	orrs	r3, r2
 8005606:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800560e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005612:	d105      	bne.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005614:	4b21      	ldr	r3, [pc, #132]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005616:	68db      	ldr	r3, [r3, #12]
 8005618:	4a20      	ldr	r2, [pc, #128]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800561a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800561e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005628:	2b00      	cmp	r3, #0
 800562a:	d015      	beq.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800562c:	4b1b      	ldr	r3, [pc, #108]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800562e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005632:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800563a:	4918      	ldr	r1, [pc, #96]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800563c:	4313      	orrs	r3, r2
 800563e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005646:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800564a:	d105      	bne.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800564c:	4b13      	ldr	r3, [pc, #76]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800564e:	68db      	ldr	r3, [r3, #12]
 8005650:	4a12      	ldr	r2, [pc, #72]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005652:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005656:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005660:	2b00      	cmp	r3, #0
 8005662:	d015      	beq.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005664:	4b0d      	ldr	r3, [pc, #52]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005666:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800566a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005672:	490a      	ldr	r1, [pc, #40]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005674:	4313      	orrs	r3, r2
 8005676:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800567e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005682:	d105      	bne.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005684:	4b05      	ldr	r3, [pc, #20]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005686:	68db      	ldr	r3, [r3, #12]
 8005688:	4a04      	ldr	r2, [pc, #16]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800568a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800568e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005690:	7cbb      	ldrb	r3, [r7, #18]
}
 8005692:	4618      	mov	r0, r3
 8005694:	3718      	adds	r7, #24
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}
 800569a:	bf00      	nop
 800569c:	40021000 	.word	0x40021000

080056a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b082      	sub	sp, #8
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d101      	bne.n	80056b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80056ae:	2301      	movs	r3, #1
 80056b0:	e049      	b.n	8005746 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056b8:	b2db      	uxtb	r3, r3
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d106      	bne.n	80056cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2200      	movs	r2, #0
 80056c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f7fc f96e 	bl	80019a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2202      	movs	r2, #2
 80056d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681a      	ldr	r2, [r3, #0]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	3304      	adds	r3, #4
 80056dc:	4619      	mov	r1, r3
 80056de:	4610      	mov	r0, r2
 80056e0:	f000 ff5e 	bl	80065a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2201      	movs	r2, #1
 80056e8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2201      	movs	r2, #1
 80056f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2201      	movs	r2, #1
 80056f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2201      	movs	r2, #1
 8005700:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2201      	movs	r2, #1
 8005708:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2201      	movs	r2, #1
 8005710:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2201      	movs	r2, #1
 8005718:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2201      	movs	r2, #1
 8005720:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2201      	movs	r2, #1
 8005728:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2201      	movs	r2, #1
 8005730:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2201      	movs	r2, #1
 8005738:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2201      	movs	r2, #1
 8005740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005744:	2300      	movs	r3, #0
}
 8005746:	4618      	mov	r0, r3
 8005748:	3708      	adds	r7, #8
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}
	...

08005750 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005750:	b480      	push	{r7}
 8005752:	b085      	sub	sp, #20
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800575e:	b2db      	uxtb	r3, r3
 8005760:	2b01      	cmp	r3, #1
 8005762:	d001      	beq.n	8005768 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005764:	2301      	movs	r3, #1
 8005766:	e04c      	b.n	8005802 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2202      	movs	r2, #2
 800576c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a26      	ldr	r2, [pc, #152]	; (8005810 <HAL_TIM_Base_Start+0xc0>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d022      	beq.n	80057c0 <HAL_TIM_Base_Start+0x70>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005782:	d01d      	beq.n	80057c0 <HAL_TIM_Base_Start+0x70>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a22      	ldr	r2, [pc, #136]	; (8005814 <HAL_TIM_Base_Start+0xc4>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d018      	beq.n	80057c0 <HAL_TIM_Base_Start+0x70>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a21      	ldr	r2, [pc, #132]	; (8005818 <HAL_TIM_Base_Start+0xc8>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d013      	beq.n	80057c0 <HAL_TIM_Base_Start+0x70>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a1f      	ldr	r2, [pc, #124]	; (800581c <HAL_TIM_Base_Start+0xcc>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d00e      	beq.n	80057c0 <HAL_TIM_Base_Start+0x70>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4a1e      	ldr	r2, [pc, #120]	; (8005820 <HAL_TIM_Base_Start+0xd0>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d009      	beq.n	80057c0 <HAL_TIM_Base_Start+0x70>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a1c      	ldr	r2, [pc, #112]	; (8005824 <HAL_TIM_Base_Start+0xd4>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d004      	beq.n	80057c0 <HAL_TIM_Base_Start+0x70>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a1b      	ldr	r2, [pc, #108]	; (8005828 <HAL_TIM_Base_Start+0xd8>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d115      	bne.n	80057ec <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	689a      	ldr	r2, [r3, #8]
 80057c6:	4b19      	ldr	r3, [pc, #100]	; (800582c <HAL_TIM_Base_Start+0xdc>)
 80057c8:	4013      	ands	r3, r2
 80057ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2b06      	cmp	r3, #6
 80057d0:	d015      	beq.n	80057fe <HAL_TIM_Base_Start+0xae>
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057d8:	d011      	beq.n	80057fe <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	681a      	ldr	r2, [r3, #0]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f042 0201 	orr.w	r2, r2, #1
 80057e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057ea:	e008      	b.n	80057fe <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	681a      	ldr	r2, [r3, #0]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f042 0201 	orr.w	r2, r2, #1
 80057fa:	601a      	str	r2, [r3, #0]
 80057fc:	e000      	b.n	8005800 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057fe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005800:	2300      	movs	r3, #0
}
 8005802:	4618      	mov	r0, r3
 8005804:	3714      	adds	r7, #20
 8005806:	46bd      	mov	sp, r7
 8005808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580c:	4770      	bx	lr
 800580e:	bf00      	nop
 8005810:	40012c00 	.word	0x40012c00
 8005814:	40000400 	.word	0x40000400
 8005818:	40000800 	.word	0x40000800
 800581c:	40000c00 	.word	0x40000c00
 8005820:	40013400 	.word	0x40013400
 8005824:	40014000 	.word	0x40014000
 8005828:	40015000 	.word	0x40015000
 800582c:	00010007 	.word	0x00010007

08005830 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005830:	b480      	push	{r7}
 8005832:	b085      	sub	sp, #20
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800583e:	b2db      	uxtb	r3, r3
 8005840:	2b01      	cmp	r3, #1
 8005842:	d001      	beq.n	8005848 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005844:	2301      	movs	r3, #1
 8005846:	e054      	b.n	80058f2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2202      	movs	r2, #2
 800584c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	68da      	ldr	r2, [r3, #12]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f042 0201 	orr.w	r2, r2, #1
 800585e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a26      	ldr	r2, [pc, #152]	; (8005900 <HAL_TIM_Base_Start_IT+0xd0>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d022      	beq.n	80058b0 <HAL_TIM_Base_Start_IT+0x80>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005872:	d01d      	beq.n	80058b0 <HAL_TIM_Base_Start_IT+0x80>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a22      	ldr	r2, [pc, #136]	; (8005904 <HAL_TIM_Base_Start_IT+0xd4>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d018      	beq.n	80058b0 <HAL_TIM_Base_Start_IT+0x80>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a21      	ldr	r2, [pc, #132]	; (8005908 <HAL_TIM_Base_Start_IT+0xd8>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d013      	beq.n	80058b0 <HAL_TIM_Base_Start_IT+0x80>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a1f      	ldr	r2, [pc, #124]	; (800590c <HAL_TIM_Base_Start_IT+0xdc>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d00e      	beq.n	80058b0 <HAL_TIM_Base_Start_IT+0x80>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a1e      	ldr	r2, [pc, #120]	; (8005910 <HAL_TIM_Base_Start_IT+0xe0>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d009      	beq.n	80058b0 <HAL_TIM_Base_Start_IT+0x80>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a1c      	ldr	r2, [pc, #112]	; (8005914 <HAL_TIM_Base_Start_IT+0xe4>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d004      	beq.n	80058b0 <HAL_TIM_Base_Start_IT+0x80>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a1b      	ldr	r2, [pc, #108]	; (8005918 <HAL_TIM_Base_Start_IT+0xe8>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d115      	bne.n	80058dc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	689a      	ldr	r2, [r3, #8]
 80058b6:	4b19      	ldr	r3, [pc, #100]	; (800591c <HAL_TIM_Base_Start_IT+0xec>)
 80058b8:	4013      	ands	r3, r2
 80058ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2b06      	cmp	r3, #6
 80058c0:	d015      	beq.n	80058ee <HAL_TIM_Base_Start_IT+0xbe>
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058c8:	d011      	beq.n	80058ee <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	681a      	ldr	r2, [r3, #0]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f042 0201 	orr.w	r2, r2, #1
 80058d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058da:	e008      	b.n	80058ee <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	681a      	ldr	r2, [r3, #0]
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f042 0201 	orr.w	r2, r2, #1
 80058ea:	601a      	str	r2, [r3, #0]
 80058ec:	e000      	b.n	80058f0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058ee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80058f0:	2300      	movs	r3, #0
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	3714      	adds	r7, #20
 80058f6:	46bd      	mov	sp, r7
 80058f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fc:	4770      	bx	lr
 80058fe:	bf00      	nop
 8005900:	40012c00 	.word	0x40012c00
 8005904:	40000400 	.word	0x40000400
 8005908:	40000800 	.word	0x40000800
 800590c:	40000c00 	.word	0x40000c00
 8005910:	40013400 	.word	0x40013400
 8005914:	40014000 	.word	0x40014000
 8005918:	40015000 	.word	0x40015000
 800591c:	00010007 	.word	0x00010007

08005920 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b082      	sub	sp, #8
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d101      	bne.n	8005932 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800592e:	2301      	movs	r3, #1
 8005930:	e049      	b.n	80059c6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005938:	b2db      	uxtb	r3, r3
 800593a:	2b00      	cmp	r3, #0
 800593c:	d106      	bne.n	800594c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2200      	movs	r2, #0
 8005942:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f7fb fff4 	bl	8001934 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2202      	movs	r2, #2
 8005950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681a      	ldr	r2, [r3, #0]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	3304      	adds	r3, #4
 800595c:	4619      	mov	r1, r3
 800595e:	4610      	mov	r0, r2
 8005960:	f000 fe1e 	bl	80065a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2201      	movs	r2, #1
 8005968:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2201      	movs	r2, #1
 8005970:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2201      	movs	r2, #1
 8005978:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2201      	movs	r2, #1
 8005980:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2201      	movs	r2, #1
 8005988:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2201      	movs	r2, #1
 8005990:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2201      	movs	r2, #1
 8005998:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2201      	movs	r2, #1
 80059a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2201      	movs	r2, #1
 80059a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2201      	movs	r2, #1
 80059b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2201      	movs	r2, #1
 80059b8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2201      	movs	r2, #1
 80059c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80059c4:	2300      	movs	r3, #0
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	3708      	adds	r7, #8
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}
	...

080059d0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b084      	sub	sp, #16
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
 80059d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d109      	bne.n	80059f4 <HAL_TIM_PWM_Start+0x24>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80059e6:	b2db      	uxtb	r3, r3
 80059e8:	2b01      	cmp	r3, #1
 80059ea:	bf14      	ite	ne
 80059ec:	2301      	movne	r3, #1
 80059ee:	2300      	moveq	r3, #0
 80059f0:	b2db      	uxtb	r3, r3
 80059f2:	e03c      	b.n	8005a6e <HAL_TIM_PWM_Start+0x9e>
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	2b04      	cmp	r3, #4
 80059f8:	d109      	bne.n	8005a0e <HAL_TIM_PWM_Start+0x3e>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005a00:	b2db      	uxtb	r3, r3
 8005a02:	2b01      	cmp	r3, #1
 8005a04:	bf14      	ite	ne
 8005a06:	2301      	movne	r3, #1
 8005a08:	2300      	moveq	r3, #0
 8005a0a:	b2db      	uxtb	r3, r3
 8005a0c:	e02f      	b.n	8005a6e <HAL_TIM_PWM_Start+0x9e>
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	2b08      	cmp	r3, #8
 8005a12:	d109      	bne.n	8005a28 <HAL_TIM_PWM_Start+0x58>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005a1a:	b2db      	uxtb	r3, r3
 8005a1c:	2b01      	cmp	r3, #1
 8005a1e:	bf14      	ite	ne
 8005a20:	2301      	movne	r3, #1
 8005a22:	2300      	moveq	r3, #0
 8005a24:	b2db      	uxtb	r3, r3
 8005a26:	e022      	b.n	8005a6e <HAL_TIM_PWM_Start+0x9e>
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	2b0c      	cmp	r3, #12
 8005a2c:	d109      	bne.n	8005a42 <HAL_TIM_PWM_Start+0x72>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a34:	b2db      	uxtb	r3, r3
 8005a36:	2b01      	cmp	r3, #1
 8005a38:	bf14      	ite	ne
 8005a3a:	2301      	movne	r3, #1
 8005a3c:	2300      	moveq	r3, #0
 8005a3e:	b2db      	uxtb	r3, r3
 8005a40:	e015      	b.n	8005a6e <HAL_TIM_PWM_Start+0x9e>
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	2b10      	cmp	r3, #16
 8005a46:	d109      	bne.n	8005a5c <HAL_TIM_PWM_Start+0x8c>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005a4e:	b2db      	uxtb	r3, r3
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	bf14      	ite	ne
 8005a54:	2301      	movne	r3, #1
 8005a56:	2300      	moveq	r3, #0
 8005a58:	b2db      	uxtb	r3, r3
 8005a5a:	e008      	b.n	8005a6e <HAL_TIM_PWM_Start+0x9e>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005a62:	b2db      	uxtb	r3, r3
 8005a64:	2b01      	cmp	r3, #1
 8005a66:	bf14      	ite	ne
 8005a68:	2301      	movne	r3, #1
 8005a6a:	2300      	moveq	r3, #0
 8005a6c:	b2db      	uxtb	r3, r3
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d001      	beq.n	8005a76 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005a72:	2301      	movs	r3, #1
 8005a74:	e0a6      	b.n	8005bc4 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d104      	bne.n	8005a86 <HAL_TIM_PWM_Start+0xb6>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2202      	movs	r2, #2
 8005a80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a84:	e023      	b.n	8005ace <HAL_TIM_PWM_Start+0xfe>
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	2b04      	cmp	r3, #4
 8005a8a:	d104      	bne.n	8005a96 <HAL_TIM_PWM_Start+0xc6>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2202      	movs	r2, #2
 8005a90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a94:	e01b      	b.n	8005ace <HAL_TIM_PWM_Start+0xfe>
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	2b08      	cmp	r3, #8
 8005a9a:	d104      	bne.n	8005aa6 <HAL_TIM_PWM_Start+0xd6>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2202      	movs	r2, #2
 8005aa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005aa4:	e013      	b.n	8005ace <HAL_TIM_PWM_Start+0xfe>
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	2b0c      	cmp	r3, #12
 8005aaa:	d104      	bne.n	8005ab6 <HAL_TIM_PWM_Start+0xe6>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2202      	movs	r2, #2
 8005ab0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005ab4:	e00b      	b.n	8005ace <HAL_TIM_PWM_Start+0xfe>
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	2b10      	cmp	r3, #16
 8005aba:	d104      	bne.n	8005ac6 <HAL_TIM_PWM_Start+0xf6>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2202      	movs	r2, #2
 8005ac0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ac4:	e003      	b.n	8005ace <HAL_TIM_PWM_Start+0xfe>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2202      	movs	r2, #2
 8005aca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	6839      	ldr	r1, [r7, #0]
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f001 f9dc 	bl	8006e94 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a3a      	ldr	r2, [pc, #232]	; (8005bcc <HAL_TIM_PWM_Start+0x1fc>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d018      	beq.n	8005b18 <HAL_TIM_PWM_Start+0x148>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a39      	ldr	r2, [pc, #228]	; (8005bd0 <HAL_TIM_PWM_Start+0x200>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d013      	beq.n	8005b18 <HAL_TIM_PWM_Start+0x148>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a37      	ldr	r2, [pc, #220]	; (8005bd4 <HAL_TIM_PWM_Start+0x204>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d00e      	beq.n	8005b18 <HAL_TIM_PWM_Start+0x148>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a36      	ldr	r2, [pc, #216]	; (8005bd8 <HAL_TIM_PWM_Start+0x208>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d009      	beq.n	8005b18 <HAL_TIM_PWM_Start+0x148>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a34      	ldr	r2, [pc, #208]	; (8005bdc <HAL_TIM_PWM_Start+0x20c>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d004      	beq.n	8005b18 <HAL_TIM_PWM_Start+0x148>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a33      	ldr	r2, [pc, #204]	; (8005be0 <HAL_TIM_PWM_Start+0x210>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d101      	bne.n	8005b1c <HAL_TIM_PWM_Start+0x14c>
 8005b18:	2301      	movs	r3, #1
 8005b1a:	e000      	b.n	8005b1e <HAL_TIM_PWM_Start+0x14e>
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d007      	beq.n	8005b32 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005b30:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a25      	ldr	r2, [pc, #148]	; (8005bcc <HAL_TIM_PWM_Start+0x1fc>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d022      	beq.n	8005b82 <HAL_TIM_PWM_Start+0x1b2>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b44:	d01d      	beq.n	8005b82 <HAL_TIM_PWM_Start+0x1b2>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a26      	ldr	r2, [pc, #152]	; (8005be4 <HAL_TIM_PWM_Start+0x214>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d018      	beq.n	8005b82 <HAL_TIM_PWM_Start+0x1b2>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a24      	ldr	r2, [pc, #144]	; (8005be8 <HAL_TIM_PWM_Start+0x218>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d013      	beq.n	8005b82 <HAL_TIM_PWM_Start+0x1b2>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a23      	ldr	r2, [pc, #140]	; (8005bec <HAL_TIM_PWM_Start+0x21c>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d00e      	beq.n	8005b82 <HAL_TIM_PWM_Start+0x1b2>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a19      	ldr	r2, [pc, #100]	; (8005bd0 <HAL_TIM_PWM_Start+0x200>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d009      	beq.n	8005b82 <HAL_TIM_PWM_Start+0x1b2>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a18      	ldr	r2, [pc, #96]	; (8005bd4 <HAL_TIM_PWM_Start+0x204>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d004      	beq.n	8005b82 <HAL_TIM_PWM_Start+0x1b2>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a18      	ldr	r2, [pc, #96]	; (8005be0 <HAL_TIM_PWM_Start+0x210>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d115      	bne.n	8005bae <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	689a      	ldr	r2, [r3, #8]
 8005b88:	4b19      	ldr	r3, [pc, #100]	; (8005bf0 <HAL_TIM_PWM_Start+0x220>)
 8005b8a:	4013      	ands	r3, r2
 8005b8c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	2b06      	cmp	r3, #6
 8005b92:	d015      	beq.n	8005bc0 <HAL_TIM_PWM_Start+0x1f0>
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b9a:	d011      	beq.n	8005bc0 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	681a      	ldr	r2, [r3, #0]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f042 0201 	orr.w	r2, r2, #1
 8005baa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bac:	e008      	b.n	8005bc0 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	681a      	ldr	r2, [r3, #0]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f042 0201 	orr.w	r2, r2, #1
 8005bbc:	601a      	str	r2, [r3, #0]
 8005bbe:	e000      	b.n	8005bc2 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bc0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005bc2:	2300      	movs	r3, #0
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	3710      	adds	r7, #16
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bd80      	pop	{r7, pc}
 8005bcc:	40012c00 	.word	0x40012c00
 8005bd0:	40013400 	.word	0x40013400
 8005bd4:	40014000 	.word	0x40014000
 8005bd8:	40014400 	.word	0x40014400
 8005bdc:	40014800 	.word	0x40014800
 8005be0:	40015000 	.word	0x40015000
 8005be4:	40000400 	.word	0x40000400
 8005be8:	40000800 	.word	0x40000800
 8005bec:	40000c00 	.word	0x40000c00
 8005bf0:	00010007 	.word	0x00010007

08005bf4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b086      	sub	sp, #24
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
 8005bfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d101      	bne.n	8005c08 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005c04:	2301      	movs	r3, #1
 8005c06:	e097      	b.n	8005d38 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c0e:	b2db      	uxtb	r3, r3
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d106      	bne.n	8005c22 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2200      	movs	r2, #0
 8005c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	f7fb ff17 	bl	8001a50 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2202      	movs	r2, #2
 8005c26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	689b      	ldr	r3, [r3, #8]
 8005c30:	687a      	ldr	r2, [r7, #4]
 8005c32:	6812      	ldr	r2, [r2, #0]
 8005c34:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8005c38:	f023 0307 	bic.w	r3, r3, #7
 8005c3c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681a      	ldr	r2, [r3, #0]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	3304      	adds	r3, #4
 8005c46:	4619      	mov	r1, r3
 8005c48:	4610      	mov	r0, r2
 8005c4a:	f000 fca9 	bl	80065a0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	689b      	ldr	r3, [r3, #8]
 8005c54:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	699b      	ldr	r3, [r3, #24]
 8005c5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	6a1b      	ldr	r3, [r3, #32]
 8005c64:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	697a      	ldr	r2, [r7, #20]
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005c70:	693b      	ldr	r3, [r7, #16]
 8005c72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c76:	f023 0303 	bic.w	r3, r3, #3
 8005c7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	689a      	ldr	r2, [r3, #8]
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	699b      	ldr	r3, [r3, #24]
 8005c84:	021b      	lsls	r3, r3, #8
 8005c86:	4313      	orrs	r3, r2
 8005c88:	693a      	ldr	r2, [r7, #16]
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005c94:	f023 030c 	bic.w	r3, r3, #12
 8005c98:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005ca0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ca4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	68da      	ldr	r2, [r3, #12]
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	69db      	ldr	r3, [r3, #28]
 8005cae:	021b      	lsls	r3, r3, #8
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	693a      	ldr	r2, [r7, #16]
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	691b      	ldr	r3, [r3, #16]
 8005cbc:	011a      	lsls	r2, r3, #4
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	6a1b      	ldr	r3, [r3, #32]
 8005cc2:	031b      	lsls	r3, r3, #12
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	693a      	ldr	r2, [r7, #16]
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005cd2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005cda:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	685a      	ldr	r2, [r3, #4]
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	695b      	ldr	r3, [r3, #20]
 8005ce4:	011b      	lsls	r3, r3, #4
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	68fa      	ldr	r2, [r7, #12]
 8005cea:	4313      	orrs	r3, r2
 8005cec:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	697a      	ldr	r2, [r7, #20]
 8005cf4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	693a      	ldr	r2, [r7, #16]
 8005cfc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	68fa      	ldr	r2, [r7, #12]
 8005d04:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2201      	movs	r2, #1
 8005d0a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2201      	movs	r2, #1
 8005d12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2201      	movs	r2, #1
 8005d1a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2201      	movs	r2, #1
 8005d22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2201      	movs	r2, #1
 8005d2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2201      	movs	r2, #1
 8005d32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d36:	2300      	movs	r3, #0
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	3718      	adds	r7, #24
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bd80      	pop	{r7, pc}

08005d40 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b084      	sub	sp, #16
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
 8005d48:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d50:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005d58:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d60:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d68:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d110      	bne.n	8005d92 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005d70:	7bfb      	ldrb	r3, [r7, #15]
 8005d72:	2b01      	cmp	r3, #1
 8005d74:	d102      	bne.n	8005d7c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005d76:	7b7b      	ldrb	r3, [r7, #13]
 8005d78:	2b01      	cmp	r3, #1
 8005d7a:	d001      	beq.n	8005d80 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	e069      	b.n	8005e54 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2202      	movs	r2, #2
 8005d84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2202      	movs	r2, #2
 8005d8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d90:	e031      	b.n	8005df6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	2b04      	cmp	r3, #4
 8005d96:	d110      	bne.n	8005dba <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005d98:	7bbb      	ldrb	r3, [r7, #14]
 8005d9a:	2b01      	cmp	r3, #1
 8005d9c:	d102      	bne.n	8005da4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005d9e:	7b3b      	ldrb	r3, [r7, #12]
 8005da0:	2b01      	cmp	r3, #1
 8005da2:	d001      	beq.n	8005da8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005da4:	2301      	movs	r3, #1
 8005da6:	e055      	b.n	8005e54 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2202      	movs	r2, #2
 8005dac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2202      	movs	r2, #2
 8005db4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005db8:	e01d      	b.n	8005df6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005dba:	7bfb      	ldrb	r3, [r7, #15]
 8005dbc:	2b01      	cmp	r3, #1
 8005dbe:	d108      	bne.n	8005dd2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005dc0:	7bbb      	ldrb	r3, [r7, #14]
 8005dc2:	2b01      	cmp	r3, #1
 8005dc4:	d105      	bne.n	8005dd2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005dc6:	7b7b      	ldrb	r3, [r7, #13]
 8005dc8:	2b01      	cmp	r3, #1
 8005dca:	d102      	bne.n	8005dd2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005dcc:	7b3b      	ldrb	r3, [r7, #12]
 8005dce:	2b01      	cmp	r3, #1
 8005dd0:	d001      	beq.n	8005dd6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	e03e      	b.n	8005e54 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2202      	movs	r2, #2
 8005dda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2202      	movs	r2, #2
 8005de2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2202      	movs	r2, #2
 8005dea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2202      	movs	r2, #2
 8005df2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d003      	beq.n	8005e04 <HAL_TIM_Encoder_Start+0xc4>
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	2b04      	cmp	r3, #4
 8005e00:	d008      	beq.n	8005e14 <HAL_TIM_Encoder_Start+0xd4>
 8005e02:	e00f      	b.n	8005e24 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	2201      	movs	r2, #1
 8005e0a:	2100      	movs	r1, #0
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	f001 f841 	bl	8006e94 <TIM_CCxChannelCmd>
      break;
 8005e12:	e016      	b.n	8005e42 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	2201      	movs	r2, #1
 8005e1a:	2104      	movs	r1, #4
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	f001 f839 	bl	8006e94 <TIM_CCxChannelCmd>
      break;
 8005e22:	e00e      	b.n	8005e42 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	2201      	movs	r2, #1
 8005e2a:	2100      	movs	r1, #0
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	f001 f831 	bl	8006e94 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	2201      	movs	r2, #1
 8005e38:	2104      	movs	r1, #4
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	f001 f82a 	bl	8006e94 <TIM_CCxChannelCmd>
      break;
 8005e40:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	681a      	ldr	r2, [r3, #0]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f042 0201 	orr.w	r2, r2, #1
 8005e50:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005e52:	2300      	movs	r3, #0
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	3710      	adds	r7, #16
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bd80      	pop	{r7, pc}

08005e5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b084      	sub	sp, #16
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	68db      	ldr	r3, [r3, #12]
 8005e6a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	691b      	ldr	r3, [r3, #16]
 8005e72:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	f003 0302 	and.w	r3, r3, #2
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d020      	beq.n	8005ec0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	f003 0302 	and.w	r3, r3, #2
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d01b      	beq.n	8005ec0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f06f 0202 	mvn.w	r2, #2
 8005e90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2201      	movs	r2, #1
 8005e96:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	699b      	ldr	r3, [r3, #24]
 8005e9e:	f003 0303 	and.w	r3, r3, #3
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d003      	beq.n	8005eae <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f000 fb5c 	bl	8006564 <HAL_TIM_IC_CaptureCallback>
 8005eac:	e005      	b.n	8005eba <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f000 fb4e 	bl	8006550 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005eb4:	6878      	ldr	r0, [r7, #4]
 8005eb6:	f000 fb5f 	bl	8006578 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	f003 0304 	and.w	r3, r3, #4
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d020      	beq.n	8005f0c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	f003 0304 	and.w	r3, r3, #4
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d01b      	beq.n	8005f0c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f06f 0204 	mvn.w	r2, #4
 8005edc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2202      	movs	r2, #2
 8005ee2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	699b      	ldr	r3, [r3, #24]
 8005eea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d003      	beq.n	8005efa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f000 fb36 	bl	8006564 <HAL_TIM_IC_CaptureCallback>
 8005ef8:	e005      	b.n	8005f06 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f000 fb28 	bl	8006550 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f00:	6878      	ldr	r0, [r7, #4]
 8005f02:	f000 fb39 	bl	8006578 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	f003 0308 	and.w	r3, r3, #8
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d020      	beq.n	8005f58 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	f003 0308 	and.w	r3, r3, #8
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d01b      	beq.n	8005f58 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f06f 0208 	mvn.w	r2, #8
 8005f28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2204      	movs	r2, #4
 8005f2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	69db      	ldr	r3, [r3, #28]
 8005f36:	f003 0303 	and.w	r3, r3, #3
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d003      	beq.n	8005f46 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f000 fb10 	bl	8006564 <HAL_TIM_IC_CaptureCallback>
 8005f44:	e005      	b.n	8005f52 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f000 fb02 	bl	8006550 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	f000 fb13 	bl	8006578 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2200      	movs	r2, #0
 8005f56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	f003 0310 	and.w	r3, r3, #16
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d020      	beq.n	8005fa4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	f003 0310 	and.w	r3, r3, #16
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d01b      	beq.n	8005fa4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f06f 0210 	mvn.w	r2, #16
 8005f74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2208      	movs	r2, #8
 8005f7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	69db      	ldr	r3, [r3, #28]
 8005f82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d003      	beq.n	8005f92 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f000 faea 	bl	8006564 <HAL_TIM_IC_CaptureCallback>
 8005f90:	e005      	b.n	8005f9e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f000 fadc 	bl	8006550 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f98:	6878      	ldr	r0, [r7, #4]
 8005f9a:	f000 faed 	bl	8006578 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	f003 0301 	and.w	r3, r3, #1
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d00c      	beq.n	8005fc8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	f003 0301 	and.w	r3, r3, #1
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d007      	beq.n	8005fc8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f06f 0201 	mvn.w	r2, #1
 8005fc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f7fa ffa6 	bl	8000f14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d104      	bne.n	8005fdc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d00c      	beq.n	8005ff6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d007      	beq.n	8005ff6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8005fee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	f001 f8a9 	bl	8007148 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d00c      	beq.n	800601a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006006:	2b00      	cmp	r3, #0
 8006008:	d007      	beq.n	800601a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006012:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f001 f8a1 	bl	800715c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006020:	2b00      	cmp	r3, #0
 8006022:	d00c      	beq.n	800603e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800602a:	2b00      	cmp	r3, #0
 800602c:	d007      	beq.n	800603e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006036:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	f000 faa7 	bl	800658c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	f003 0320 	and.w	r3, r3, #32
 8006044:	2b00      	cmp	r3, #0
 8006046:	d00c      	beq.n	8006062 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	f003 0320 	and.w	r3, r3, #32
 800604e:	2b00      	cmp	r3, #0
 8006050:	d007      	beq.n	8006062 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f06f 0220 	mvn.w	r2, #32
 800605a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	f001 f869 	bl	8007134 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006068:	2b00      	cmp	r3, #0
 800606a:	d00c      	beq.n	8006086 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006072:	2b00      	cmp	r3, #0
 8006074:	d007      	beq.n	8006086 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800607e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	f001 f875 	bl	8007170 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800608c:	2b00      	cmp	r3, #0
 800608e:	d00c      	beq.n	80060aa <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006096:	2b00      	cmp	r3, #0
 8006098:	d007      	beq.n	80060aa <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80060a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	f001 f86d 	bl	8007184 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d00c      	beq.n	80060ce <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d007      	beq.n	80060ce <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80060c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	f001 f865 	bl	8007198 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d00c      	beq.n	80060f2 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d007      	beq.n	80060f2 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80060ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	f001 f85d 	bl	80071ac <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80060f2:	bf00      	nop
 80060f4:	3710      	adds	r7, #16
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}
	...

080060fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b086      	sub	sp, #24
 8006100:	af00      	add	r7, sp, #0
 8006102:	60f8      	str	r0, [r7, #12]
 8006104:	60b9      	str	r1, [r7, #8]
 8006106:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006108:	2300      	movs	r3, #0
 800610a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006112:	2b01      	cmp	r3, #1
 8006114:	d101      	bne.n	800611a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006116:	2302      	movs	r3, #2
 8006118:	e0ff      	b.n	800631a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	2201      	movs	r2, #1
 800611e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2b14      	cmp	r3, #20
 8006126:	f200 80f0 	bhi.w	800630a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800612a:	a201      	add	r2, pc, #4	; (adr r2, 8006130 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800612c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006130:	08006185 	.word	0x08006185
 8006134:	0800630b 	.word	0x0800630b
 8006138:	0800630b 	.word	0x0800630b
 800613c:	0800630b 	.word	0x0800630b
 8006140:	080061c5 	.word	0x080061c5
 8006144:	0800630b 	.word	0x0800630b
 8006148:	0800630b 	.word	0x0800630b
 800614c:	0800630b 	.word	0x0800630b
 8006150:	08006207 	.word	0x08006207
 8006154:	0800630b 	.word	0x0800630b
 8006158:	0800630b 	.word	0x0800630b
 800615c:	0800630b 	.word	0x0800630b
 8006160:	08006247 	.word	0x08006247
 8006164:	0800630b 	.word	0x0800630b
 8006168:	0800630b 	.word	0x0800630b
 800616c:	0800630b 	.word	0x0800630b
 8006170:	08006289 	.word	0x08006289
 8006174:	0800630b 	.word	0x0800630b
 8006178:	0800630b 	.word	0x0800630b
 800617c:	0800630b 	.word	0x0800630b
 8006180:	080062c9 	.word	0x080062c9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	68b9      	ldr	r1, [r7, #8]
 800618a:	4618      	mov	r0, r3
 800618c:	f000 fabc 	bl	8006708 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	699a      	ldr	r2, [r3, #24]
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f042 0208 	orr.w	r2, r2, #8
 800619e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	699a      	ldr	r2, [r3, #24]
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f022 0204 	bic.w	r2, r2, #4
 80061ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	6999      	ldr	r1, [r3, #24]
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	691a      	ldr	r2, [r3, #16]
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	430a      	orrs	r2, r1
 80061c0:	619a      	str	r2, [r3, #24]
      break;
 80061c2:	e0a5      	b.n	8006310 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	68b9      	ldr	r1, [r7, #8]
 80061ca:	4618      	mov	r0, r3
 80061cc:	f000 fb36 	bl	800683c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	699a      	ldr	r2, [r3, #24]
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80061de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	699a      	ldr	r2, [r3, #24]
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	6999      	ldr	r1, [r3, #24]
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	691b      	ldr	r3, [r3, #16]
 80061fa:	021a      	lsls	r2, r3, #8
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	430a      	orrs	r2, r1
 8006202:	619a      	str	r2, [r3, #24]
      break;
 8006204:	e084      	b.n	8006310 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	68b9      	ldr	r1, [r7, #8]
 800620c:	4618      	mov	r0, r3
 800620e:	f000 fba9 	bl	8006964 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	69da      	ldr	r2, [r3, #28]
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f042 0208 	orr.w	r2, r2, #8
 8006220:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	69da      	ldr	r2, [r3, #28]
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f022 0204 	bic.w	r2, r2, #4
 8006230:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	69d9      	ldr	r1, [r3, #28]
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	691a      	ldr	r2, [r3, #16]
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	430a      	orrs	r2, r1
 8006242:	61da      	str	r2, [r3, #28]
      break;
 8006244:	e064      	b.n	8006310 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	68b9      	ldr	r1, [r7, #8]
 800624c:	4618      	mov	r0, r3
 800624e:	f000 fc1b 	bl	8006a88 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	69da      	ldr	r2, [r3, #28]
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006260:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	69da      	ldr	r2, [r3, #28]
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006270:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	69d9      	ldr	r1, [r3, #28]
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	691b      	ldr	r3, [r3, #16]
 800627c:	021a      	lsls	r2, r3, #8
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	430a      	orrs	r2, r1
 8006284:	61da      	str	r2, [r3, #28]
      break;
 8006286:	e043      	b.n	8006310 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	68b9      	ldr	r1, [r7, #8]
 800628e:	4618      	mov	r0, r3
 8006290:	f000 fc8e 	bl	8006bb0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f042 0208 	orr.w	r2, r2, #8
 80062a2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f022 0204 	bic.w	r2, r2, #4
 80062b2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	691a      	ldr	r2, [r3, #16]
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	430a      	orrs	r2, r1
 80062c4:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80062c6:	e023      	b.n	8006310 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	68b9      	ldr	r1, [r7, #8]
 80062ce:	4618      	mov	r0, r3
 80062d0:	f000 fcd8 	bl	8006c84 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80062e2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062f2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	691b      	ldr	r3, [r3, #16]
 80062fe:	021a      	lsls	r2, r3, #8
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	430a      	orrs	r2, r1
 8006306:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006308:	e002      	b.n	8006310 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800630a:	2301      	movs	r3, #1
 800630c:	75fb      	strb	r3, [r7, #23]
      break;
 800630e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2200      	movs	r2, #0
 8006314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006318:	7dfb      	ldrb	r3, [r7, #23]
}
 800631a:	4618      	mov	r0, r3
 800631c:	3718      	adds	r7, #24
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}
 8006322:	bf00      	nop

08006324 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b084      	sub	sp, #16
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
 800632c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800632e:	2300      	movs	r3, #0
 8006330:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006338:	2b01      	cmp	r3, #1
 800633a:	d101      	bne.n	8006340 <HAL_TIM_ConfigClockSource+0x1c>
 800633c:	2302      	movs	r3, #2
 800633e:	e0f6      	b.n	800652e <HAL_TIM_ConfigClockSource+0x20a>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2201      	movs	r2, #1
 8006344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2202      	movs	r2, #2
 800634c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	689b      	ldr	r3, [r3, #8]
 8006356:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800635e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006362:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800636a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	68ba      	ldr	r2, [r7, #8]
 8006372:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a6f      	ldr	r2, [pc, #444]	; (8006538 <HAL_TIM_ConfigClockSource+0x214>)
 800637a:	4293      	cmp	r3, r2
 800637c:	f000 80c1 	beq.w	8006502 <HAL_TIM_ConfigClockSource+0x1de>
 8006380:	4a6d      	ldr	r2, [pc, #436]	; (8006538 <HAL_TIM_ConfigClockSource+0x214>)
 8006382:	4293      	cmp	r3, r2
 8006384:	f200 80c6 	bhi.w	8006514 <HAL_TIM_ConfigClockSource+0x1f0>
 8006388:	4a6c      	ldr	r2, [pc, #432]	; (800653c <HAL_TIM_ConfigClockSource+0x218>)
 800638a:	4293      	cmp	r3, r2
 800638c:	f000 80b9 	beq.w	8006502 <HAL_TIM_ConfigClockSource+0x1de>
 8006390:	4a6a      	ldr	r2, [pc, #424]	; (800653c <HAL_TIM_ConfigClockSource+0x218>)
 8006392:	4293      	cmp	r3, r2
 8006394:	f200 80be 	bhi.w	8006514 <HAL_TIM_ConfigClockSource+0x1f0>
 8006398:	4a69      	ldr	r2, [pc, #420]	; (8006540 <HAL_TIM_ConfigClockSource+0x21c>)
 800639a:	4293      	cmp	r3, r2
 800639c:	f000 80b1 	beq.w	8006502 <HAL_TIM_ConfigClockSource+0x1de>
 80063a0:	4a67      	ldr	r2, [pc, #412]	; (8006540 <HAL_TIM_ConfigClockSource+0x21c>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	f200 80b6 	bhi.w	8006514 <HAL_TIM_ConfigClockSource+0x1f0>
 80063a8:	4a66      	ldr	r2, [pc, #408]	; (8006544 <HAL_TIM_ConfigClockSource+0x220>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	f000 80a9 	beq.w	8006502 <HAL_TIM_ConfigClockSource+0x1de>
 80063b0:	4a64      	ldr	r2, [pc, #400]	; (8006544 <HAL_TIM_ConfigClockSource+0x220>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	f200 80ae 	bhi.w	8006514 <HAL_TIM_ConfigClockSource+0x1f0>
 80063b8:	4a63      	ldr	r2, [pc, #396]	; (8006548 <HAL_TIM_ConfigClockSource+0x224>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	f000 80a1 	beq.w	8006502 <HAL_TIM_ConfigClockSource+0x1de>
 80063c0:	4a61      	ldr	r2, [pc, #388]	; (8006548 <HAL_TIM_ConfigClockSource+0x224>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	f200 80a6 	bhi.w	8006514 <HAL_TIM_ConfigClockSource+0x1f0>
 80063c8:	4a60      	ldr	r2, [pc, #384]	; (800654c <HAL_TIM_ConfigClockSource+0x228>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	f000 8099 	beq.w	8006502 <HAL_TIM_ConfigClockSource+0x1de>
 80063d0:	4a5e      	ldr	r2, [pc, #376]	; (800654c <HAL_TIM_ConfigClockSource+0x228>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	f200 809e 	bhi.w	8006514 <HAL_TIM_ConfigClockSource+0x1f0>
 80063d8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80063dc:	f000 8091 	beq.w	8006502 <HAL_TIM_ConfigClockSource+0x1de>
 80063e0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80063e4:	f200 8096 	bhi.w	8006514 <HAL_TIM_ConfigClockSource+0x1f0>
 80063e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80063ec:	f000 8089 	beq.w	8006502 <HAL_TIM_ConfigClockSource+0x1de>
 80063f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80063f4:	f200 808e 	bhi.w	8006514 <HAL_TIM_ConfigClockSource+0x1f0>
 80063f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063fc:	d03e      	beq.n	800647c <HAL_TIM_ConfigClockSource+0x158>
 80063fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006402:	f200 8087 	bhi.w	8006514 <HAL_TIM_ConfigClockSource+0x1f0>
 8006406:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800640a:	f000 8086 	beq.w	800651a <HAL_TIM_ConfigClockSource+0x1f6>
 800640e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006412:	d87f      	bhi.n	8006514 <HAL_TIM_ConfigClockSource+0x1f0>
 8006414:	2b70      	cmp	r3, #112	; 0x70
 8006416:	d01a      	beq.n	800644e <HAL_TIM_ConfigClockSource+0x12a>
 8006418:	2b70      	cmp	r3, #112	; 0x70
 800641a:	d87b      	bhi.n	8006514 <HAL_TIM_ConfigClockSource+0x1f0>
 800641c:	2b60      	cmp	r3, #96	; 0x60
 800641e:	d050      	beq.n	80064c2 <HAL_TIM_ConfigClockSource+0x19e>
 8006420:	2b60      	cmp	r3, #96	; 0x60
 8006422:	d877      	bhi.n	8006514 <HAL_TIM_ConfigClockSource+0x1f0>
 8006424:	2b50      	cmp	r3, #80	; 0x50
 8006426:	d03c      	beq.n	80064a2 <HAL_TIM_ConfigClockSource+0x17e>
 8006428:	2b50      	cmp	r3, #80	; 0x50
 800642a:	d873      	bhi.n	8006514 <HAL_TIM_ConfigClockSource+0x1f0>
 800642c:	2b40      	cmp	r3, #64	; 0x40
 800642e:	d058      	beq.n	80064e2 <HAL_TIM_ConfigClockSource+0x1be>
 8006430:	2b40      	cmp	r3, #64	; 0x40
 8006432:	d86f      	bhi.n	8006514 <HAL_TIM_ConfigClockSource+0x1f0>
 8006434:	2b30      	cmp	r3, #48	; 0x30
 8006436:	d064      	beq.n	8006502 <HAL_TIM_ConfigClockSource+0x1de>
 8006438:	2b30      	cmp	r3, #48	; 0x30
 800643a:	d86b      	bhi.n	8006514 <HAL_TIM_ConfigClockSource+0x1f0>
 800643c:	2b20      	cmp	r3, #32
 800643e:	d060      	beq.n	8006502 <HAL_TIM_ConfigClockSource+0x1de>
 8006440:	2b20      	cmp	r3, #32
 8006442:	d867      	bhi.n	8006514 <HAL_TIM_ConfigClockSource+0x1f0>
 8006444:	2b00      	cmp	r3, #0
 8006446:	d05c      	beq.n	8006502 <HAL_TIM_ConfigClockSource+0x1de>
 8006448:	2b10      	cmp	r3, #16
 800644a:	d05a      	beq.n	8006502 <HAL_TIM_ConfigClockSource+0x1de>
 800644c:	e062      	b.n	8006514 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800645e:	f000 fcf9 	bl	8006e54 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	689b      	ldr	r3, [r3, #8]
 8006468:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006470:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	68ba      	ldr	r2, [r7, #8]
 8006478:	609a      	str	r2, [r3, #8]
      break;
 800647a:	e04f      	b.n	800651c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800648c:	f000 fce2 	bl	8006e54 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	689a      	ldr	r2, [r3, #8]
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800649e:	609a      	str	r2, [r3, #8]
      break;
 80064a0:	e03c      	b.n	800651c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80064ae:	461a      	mov	r2, r3
 80064b0:	f000 fc54 	bl	8006d5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	2150      	movs	r1, #80	; 0x50
 80064ba:	4618      	mov	r0, r3
 80064bc:	f000 fcad 	bl	8006e1a <TIM_ITRx_SetConfig>
      break;
 80064c0:	e02c      	b.n	800651c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80064ce:	461a      	mov	r2, r3
 80064d0:	f000 fc73 	bl	8006dba <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	2160      	movs	r1, #96	; 0x60
 80064da:	4618      	mov	r0, r3
 80064dc:	f000 fc9d 	bl	8006e1a <TIM_ITRx_SetConfig>
      break;
 80064e0:	e01c      	b.n	800651c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80064ee:	461a      	mov	r2, r3
 80064f0:	f000 fc34 	bl	8006d5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	2140      	movs	r1, #64	; 0x40
 80064fa:	4618      	mov	r0, r3
 80064fc:	f000 fc8d 	bl	8006e1a <TIM_ITRx_SetConfig>
      break;
 8006500:	e00c      	b.n	800651c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681a      	ldr	r2, [r3, #0]
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4619      	mov	r1, r3
 800650c:	4610      	mov	r0, r2
 800650e:	f000 fc84 	bl	8006e1a <TIM_ITRx_SetConfig>
      break;
 8006512:	e003      	b.n	800651c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8006514:	2301      	movs	r3, #1
 8006516:	73fb      	strb	r3, [r7, #15]
      break;
 8006518:	e000      	b.n	800651c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800651a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2201      	movs	r2, #1
 8006520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2200      	movs	r2, #0
 8006528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800652c:	7bfb      	ldrb	r3, [r7, #15]
}
 800652e:	4618      	mov	r0, r3
 8006530:	3710      	adds	r7, #16
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}
 8006536:	bf00      	nop
 8006538:	00100070 	.word	0x00100070
 800653c:	00100060 	.word	0x00100060
 8006540:	00100050 	.word	0x00100050
 8006544:	00100040 	.word	0x00100040
 8006548:	00100030 	.word	0x00100030
 800654c:	00100020 	.word	0x00100020

08006550 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006550:	b480      	push	{r7}
 8006552:	b083      	sub	sp, #12
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006558:	bf00      	nop
 800655a:	370c      	adds	r7, #12
 800655c:	46bd      	mov	sp, r7
 800655e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006562:	4770      	bx	lr

08006564 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006564:	b480      	push	{r7}
 8006566:	b083      	sub	sp, #12
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800656c:	bf00      	nop
 800656e:	370c      	adds	r7, #12
 8006570:	46bd      	mov	sp, r7
 8006572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006576:	4770      	bx	lr

08006578 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006578:	b480      	push	{r7}
 800657a:	b083      	sub	sp, #12
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006580:	bf00      	nop
 8006582:	370c      	adds	r7, #12
 8006584:	46bd      	mov	sp, r7
 8006586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658a:	4770      	bx	lr

0800658c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800658c:	b480      	push	{r7}
 800658e:	b083      	sub	sp, #12
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006594:	bf00      	nop
 8006596:	370c      	adds	r7, #12
 8006598:	46bd      	mov	sp, r7
 800659a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659e:	4770      	bx	lr

080065a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b085      	sub	sp, #20
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
 80065a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	4a4c      	ldr	r2, [pc, #304]	; (80066e4 <TIM_Base_SetConfig+0x144>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d017      	beq.n	80065e8 <TIM_Base_SetConfig+0x48>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065be:	d013      	beq.n	80065e8 <TIM_Base_SetConfig+0x48>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	4a49      	ldr	r2, [pc, #292]	; (80066e8 <TIM_Base_SetConfig+0x148>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d00f      	beq.n	80065e8 <TIM_Base_SetConfig+0x48>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	4a48      	ldr	r2, [pc, #288]	; (80066ec <TIM_Base_SetConfig+0x14c>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d00b      	beq.n	80065e8 <TIM_Base_SetConfig+0x48>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	4a47      	ldr	r2, [pc, #284]	; (80066f0 <TIM_Base_SetConfig+0x150>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d007      	beq.n	80065e8 <TIM_Base_SetConfig+0x48>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	4a46      	ldr	r2, [pc, #280]	; (80066f4 <TIM_Base_SetConfig+0x154>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d003      	beq.n	80065e8 <TIM_Base_SetConfig+0x48>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	4a45      	ldr	r2, [pc, #276]	; (80066f8 <TIM_Base_SetConfig+0x158>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d108      	bne.n	80065fa <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	685b      	ldr	r3, [r3, #4]
 80065f4:	68fa      	ldr	r2, [r7, #12]
 80065f6:	4313      	orrs	r3, r2
 80065f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	4a39      	ldr	r2, [pc, #228]	; (80066e4 <TIM_Base_SetConfig+0x144>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d023      	beq.n	800664a <TIM_Base_SetConfig+0xaa>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006608:	d01f      	beq.n	800664a <TIM_Base_SetConfig+0xaa>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	4a36      	ldr	r2, [pc, #216]	; (80066e8 <TIM_Base_SetConfig+0x148>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d01b      	beq.n	800664a <TIM_Base_SetConfig+0xaa>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	4a35      	ldr	r2, [pc, #212]	; (80066ec <TIM_Base_SetConfig+0x14c>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d017      	beq.n	800664a <TIM_Base_SetConfig+0xaa>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	4a34      	ldr	r2, [pc, #208]	; (80066f0 <TIM_Base_SetConfig+0x150>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d013      	beq.n	800664a <TIM_Base_SetConfig+0xaa>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	4a33      	ldr	r2, [pc, #204]	; (80066f4 <TIM_Base_SetConfig+0x154>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d00f      	beq.n	800664a <TIM_Base_SetConfig+0xaa>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	4a33      	ldr	r2, [pc, #204]	; (80066fc <TIM_Base_SetConfig+0x15c>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d00b      	beq.n	800664a <TIM_Base_SetConfig+0xaa>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	4a32      	ldr	r2, [pc, #200]	; (8006700 <TIM_Base_SetConfig+0x160>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d007      	beq.n	800664a <TIM_Base_SetConfig+0xaa>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	4a31      	ldr	r2, [pc, #196]	; (8006704 <TIM_Base_SetConfig+0x164>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d003      	beq.n	800664a <TIM_Base_SetConfig+0xaa>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	4a2c      	ldr	r2, [pc, #176]	; (80066f8 <TIM_Base_SetConfig+0x158>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d108      	bne.n	800665c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006650:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	68db      	ldr	r3, [r3, #12]
 8006656:	68fa      	ldr	r2, [r7, #12]
 8006658:	4313      	orrs	r3, r2
 800665a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	695b      	ldr	r3, [r3, #20]
 8006666:	4313      	orrs	r3, r2
 8006668:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	68fa      	ldr	r2, [r7, #12]
 800666e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	689a      	ldr	r2, [r3, #8]
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	681a      	ldr	r2, [r3, #0]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	4a18      	ldr	r2, [pc, #96]	; (80066e4 <TIM_Base_SetConfig+0x144>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d013      	beq.n	80066b0 <TIM_Base_SetConfig+0x110>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	4a1a      	ldr	r2, [pc, #104]	; (80066f4 <TIM_Base_SetConfig+0x154>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d00f      	beq.n	80066b0 <TIM_Base_SetConfig+0x110>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	4a1a      	ldr	r2, [pc, #104]	; (80066fc <TIM_Base_SetConfig+0x15c>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d00b      	beq.n	80066b0 <TIM_Base_SetConfig+0x110>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	4a19      	ldr	r2, [pc, #100]	; (8006700 <TIM_Base_SetConfig+0x160>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d007      	beq.n	80066b0 <TIM_Base_SetConfig+0x110>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	4a18      	ldr	r2, [pc, #96]	; (8006704 <TIM_Base_SetConfig+0x164>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d003      	beq.n	80066b0 <TIM_Base_SetConfig+0x110>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	4a13      	ldr	r2, [pc, #76]	; (80066f8 <TIM_Base_SetConfig+0x158>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d103      	bne.n	80066b8 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	691a      	ldr	r2, [r3, #16]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2201      	movs	r2, #1
 80066bc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	691b      	ldr	r3, [r3, #16]
 80066c2:	f003 0301 	and.w	r3, r3, #1
 80066c6:	2b01      	cmp	r3, #1
 80066c8:	d105      	bne.n	80066d6 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	691b      	ldr	r3, [r3, #16]
 80066ce:	f023 0201 	bic.w	r2, r3, #1
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	611a      	str	r2, [r3, #16]
  }
}
 80066d6:	bf00      	nop
 80066d8:	3714      	adds	r7, #20
 80066da:	46bd      	mov	sp, r7
 80066dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e0:	4770      	bx	lr
 80066e2:	bf00      	nop
 80066e4:	40012c00 	.word	0x40012c00
 80066e8:	40000400 	.word	0x40000400
 80066ec:	40000800 	.word	0x40000800
 80066f0:	40000c00 	.word	0x40000c00
 80066f4:	40013400 	.word	0x40013400
 80066f8:	40015000 	.word	0x40015000
 80066fc:	40014000 	.word	0x40014000
 8006700:	40014400 	.word	0x40014400
 8006704:	40014800 	.word	0x40014800

08006708 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006708:	b480      	push	{r7}
 800670a:	b087      	sub	sp, #28
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
 8006710:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6a1b      	ldr	r3, [r3, #32]
 8006716:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6a1b      	ldr	r3, [r3, #32]
 800671c:	f023 0201 	bic.w	r2, r3, #1
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	685b      	ldr	r3, [r3, #4]
 8006728:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	699b      	ldr	r3, [r3, #24]
 800672e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006736:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800673a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	f023 0303 	bic.w	r3, r3, #3
 8006742:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	68fa      	ldr	r2, [r7, #12]
 800674a:	4313      	orrs	r3, r2
 800674c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800674e:	697b      	ldr	r3, [r7, #20]
 8006750:	f023 0302 	bic.w	r3, r3, #2
 8006754:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	689b      	ldr	r3, [r3, #8]
 800675a:	697a      	ldr	r2, [r7, #20]
 800675c:	4313      	orrs	r3, r2
 800675e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	4a30      	ldr	r2, [pc, #192]	; (8006824 <TIM_OC1_SetConfig+0x11c>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d013      	beq.n	8006790 <TIM_OC1_SetConfig+0x88>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	4a2f      	ldr	r2, [pc, #188]	; (8006828 <TIM_OC1_SetConfig+0x120>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d00f      	beq.n	8006790 <TIM_OC1_SetConfig+0x88>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	4a2e      	ldr	r2, [pc, #184]	; (800682c <TIM_OC1_SetConfig+0x124>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d00b      	beq.n	8006790 <TIM_OC1_SetConfig+0x88>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	4a2d      	ldr	r2, [pc, #180]	; (8006830 <TIM_OC1_SetConfig+0x128>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d007      	beq.n	8006790 <TIM_OC1_SetConfig+0x88>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	4a2c      	ldr	r2, [pc, #176]	; (8006834 <TIM_OC1_SetConfig+0x12c>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d003      	beq.n	8006790 <TIM_OC1_SetConfig+0x88>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	4a2b      	ldr	r2, [pc, #172]	; (8006838 <TIM_OC1_SetConfig+0x130>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d10c      	bne.n	80067aa <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	f023 0308 	bic.w	r3, r3, #8
 8006796:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	68db      	ldr	r3, [r3, #12]
 800679c:	697a      	ldr	r2, [r7, #20]
 800679e:	4313      	orrs	r3, r2
 80067a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80067a2:	697b      	ldr	r3, [r7, #20]
 80067a4:	f023 0304 	bic.w	r3, r3, #4
 80067a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	4a1d      	ldr	r2, [pc, #116]	; (8006824 <TIM_OC1_SetConfig+0x11c>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d013      	beq.n	80067da <TIM_OC1_SetConfig+0xd2>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	4a1c      	ldr	r2, [pc, #112]	; (8006828 <TIM_OC1_SetConfig+0x120>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d00f      	beq.n	80067da <TIM_OC1_SetConfig+0xd2>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	4a1b      	ldr	r2, [pc, #108]	; (800682c <TIM_OC1_SetConfig+0x124>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d00b      	beq.n	80067da <TIM_OC1_SetConfig+0xd2>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	4a1a      	ldr	r2, [pc, #104]	; (8006830 <TIM_OC1_SetConfig+0x128>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d007      	beq.n	80067da <TIM_OC1_SetConfig+0xd2>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	4a19      	ldr	r2, [pc, #100]	; (8006834 <TIM_OC1_SetConfig+0x12c>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d003      	beq.n	80067da <TIM_OC1_SetConfig+0xd2>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	4a18      	ldr	r2, [pc, #96]	; (8006838 <TIM_OC1_SetConfig+0x130>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d111      	bne.n	80067fe <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80067e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80067e2:	693b      	ldr	r3, [r7, #16]
 80067e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80067e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	695b      	ldr	r3, [r3, #20]
 80067ee:	693a      	ldr	r2, [r7, #16]
 80067f0:	4313      	orrs	r3, r2
 80067f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	699b      	ldr	r3, [r3, #24]
 80067f8:	693a      	ldr	r2, [r7, #16]
 80067fa:	4313      	orrs	r3, r2
 80067fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	693a      	ldr	r2, [r7, #16]
 8006802:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	68fa      	ldr	r2, [r7, #12]
 8006808:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	685a      	ldr	r2, [r3, #4]
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	697a      	ldr	r2, [r7, #20]
 8006816:	621a      	str	r2, [r3, #32]
}
 8006818:	bf00      	nop
 800681a:	371c      	adds	r7, #28
 800681c:	46bd      	mov	sp, r7
 800681e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006822:	4770      	bx	lr
 8006824:	40012c00 	.word	0x40012c00
 8006828:	40013400 	.word	0x40013400
 800682c:	40014000 	.word	0x40014000
 8006830:	40014400 	.word	0x40014400
 8006834:	40014800 	.word	0x40014800
 8006838:	40015000 	.word	0x40015000

0800683c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800683c:	b480      	push	{r7}
 800683e:	b087      	sub	sp, #28
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
 8006844:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6a1b      	ldr	r3, [r3, #32]
 800684a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6a1b      	ldr	r3, [r3, #32]
 8006850:	f023 0210 	bic.w	r2, r3, #16
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	699b      	ldr	r3, [r3, #24]
 8006862:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800686a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800686e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006876:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	021b      	lsls	r3, r3, #8
 800687e:	68fa      	ldr	r2, [r7, #12]
 8006880:	4313      	orrs	r3, r2
 8006882:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006884:	697b      	ldr	r3, [r7, #20]
 8006886:	f023 0320 	bic.w	r3, r3, #32
 800688a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	689b      	ldr	r3, [r3, #8]
 8006890:	011b      	lsls	r3, r3, #4
 8006892:	697a      	ldr	r2, [r7, #20]
 8006894:	4313      	orrs	r3, r2
 8006896:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	4a2c      	ldr	r2, [pc, #176]	; (800694c <TIM_OC2_SetConfig+0x110>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d007      	beq.n	80068b0 <TIM_OC2_SetConfig+0x74>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	4a2b      	ldr	r2, [pc, #172]	; (8006950 <TIM_OC2_SetConfig+0x114>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d003      	beq.n	80068b0 <TIM_OC2_SetConfig+0x74>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	4a2a      	ldr	r2, [pc, #168]	; (8006954 <TIM_OC2_SetConfig+0x118>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d10d      	bne.n	80068cc <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80068b0:	697b      	ldr	r3, [r7, #20]
 80068b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80068b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	68db      	ldr	r3, [r3, #12]
 80068bc:	011b      	lsls	r3, r3, #4
 80068be:	697a      	ldr	r2, [r7, #20]
 80068c0:	4313      	orrs	r3, r2
 80068c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068ca:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	4a1f      	ldr	r2, [pc, #124]	; (800694c <TIM_OC2_SetConfig+0x110>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d013      	beq.n	80068fc <TIM_OC2_SetConfig+0xc0>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	4a1e      	ldr	r2, [pc, #120]	; (8006950 <TIM_OC2_SetConfig+0x114>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d00f      	beq.n	80068fc <TIM_OC2_SetConfig+0xc0>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	4a1e      	ldr	r2, [pc, #120]	; (8006958 <TIM_OC2_SetConfig+0x11c>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d00b      	beq.n	80068fc <TIM_OC2_SetConfig+0xc0>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	4a1d      	ldr	r2, [pc, #116]	; (800695c <TIM_OC2_SetConfig+0x120>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d007      	beq.n	80068fc <TIM_OC2_SetConfig+0xc0>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	4a1c      	ldr	r2, [pc, #112]	; (8006960 <TIM_OC2_SetConfig+0x124>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d003      	beq.n	80068fc <TIM_OC2_SetConfig+0xc0>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	4a17      	ldr	r2, [pc, #92]	; (8006954 <TIM_OC2_SetConfig+0x118>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d113      	bne.n	8006924 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006902:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006904:	693b      	ldr	r3, [r7, #16]
 8006906:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800690a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	695b      	ldr	r3, [r3, #20]
 8006910:	009b      	lsls	r3, r3, #2
 8006912:	693a      	ldr	r2, [r7, #16]
 8006914:	4313      	orrs	r3, r2
 8006916:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	699b      	ldr	r3, [r3, #24]
 800691c:	009b      	lsls	r3, r3, #2
 800691e:	693a      	ldr	r2, [r7, #16]
 8006920:	4313      	orrs	r3, r2
 8006922:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	693a      	ldr	r2, [r7, #16]
 8006928:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	68fa      	ldr	r2, [r7, #12]
 800692e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	685a      	ldr	r2, [r3, #4]
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	697a      	ldr	r2, [r7, #20]
 800693c:	621a      	str	r2, [r3, #32]
}
 800693e:	bf00      	nop
 8006940:	371c      	adds	r7, #28
 8006942:	46bd      	mov	sp, r7
 8006944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006948:	4770      	bx	lr
 800694a:	bf00      	nop
 800694c:	40012c00 	.word	0x40012c00
 8006950:	40013400 	.word	0x40013400
 8006954:	40015000 	.word	0x40015000
 8006958:	40014000 	.word	0x40014000
 800695c:	40014400 	.word	0x40014400
 8006960:	40014800 	.word	0x40014800

08006964 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006964:	b480      	push	{r7}
 8006966:	b087      	sub	sp, #28
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
 800696c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6a1b      	ldr	r3, [r3, #32]
 8006972:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6a1b      	ldr	r3, [r3, #32]
 8006978:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	685b      	ldr	r3, [r3, #4]
 8006984:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	69db      	ldr	r3, [r3, #28]
 800698a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006992:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006996:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	f023 0303 	bic.w	r3, r3, #3
 800699e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	68fa      	ldr	r2, [r7, #12]
 80069a6:	4313      	orrs	r3, r2
 80069a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80069b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	689b      	ldr	r3, [r3, #8]
 80069b6:	021b      	lsls	r3, r3, #8
 80069b8:	697a      	ldr	r2, [r7, #20]
 80069ba:	4313      	orrs	r3, r2
 80069bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	4a2b      	ldr	r2, [pc, #172]	; (8006a70 <TIM_OC3_SetConfig+0x10c>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d007      	beq.n	80069d6 <TIM_OC3_SetConfig+0x72>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	4a2a      	ldr	r2, [pc, #168]	; (8006a74 <TIM_OC3_SetConfig+0x110>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d003      	beq.n	80069d6 <TIM_OC3_SetConfig+0x72>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	4a29      	ldr	r2, [pc, #164]	; (8006a78 <TIM_OC3_SetConfig+0x114>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d10d      	bne.n	80069f2 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80069dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	68db      	ldr	r3, [r3, #12]
 80069e2:	021b      	lsls	r3, r3, #8
 80069e4:	697a      	ldr	r2, [r7, #20]
 80069e6:	4313      	orrs	r3, r2
 80069e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80069ea:	697b      	ldr	r3, [r7, #20]
 80069ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80069f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	4a1e      	ldr	r2, [pc, #120]	; (8006a70 <TIM_OC3_SetConfig+0x10c>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d013      	beq.n	8006a22 <TIM_OC3_SetConfig+0xbe>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	4a1d      	ldr	r2, [pc, #116]	; (8006a74 <TIM_OC3_SetConfig+0x110>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d00f      	beq.n	8006a22 <TIM_OC3_SetConfig+0xbe>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	4a1d      	ldr	r2, [pc, #116]	; (8006a7c <TIM_OC3_SetConfig+0x118>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d00b      	beq.n	8006a22 <TIM_OC3_SetConfig+0xbe>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	4a1c      	ldr	r2, [pc, #112]	; (8006a80 <TIM_OC3_SetConfig+0x11c>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d007      	beq.n	8006a22 <TIM_OC3_SetConfig+0xbe>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	4a1b      	ldr	r2, [pc, #108]	; (8006a84 <TIM_OC3_SetConfig+0x120>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d003      	beq.n	8006a22 <TIM_OC3_SetConfig+0xbe>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	4a16      	ldr	r2, [pc, #88]	; (8006a78 <TIM_OC3_SetConfig+0x114>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d113      	bne.n	8006a4a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006a28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006a2a:	693b      	ldr	r3, [r7, #16]
 8006a2c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006a30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	695b      	ldr	r3, [r3, #20]
 8006a36:	011b      	lsls	r3, r3, #4
 8006a38:	693a      	ldr	r2, [r7, #16]
 8006a3a:	4313      	orrs	r3, r2
 8006a3c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	699b      	ldr	r3, [r3, #24]
 8006a42:	011b      	lsls	r3, r3, #4
 8006a44:	693a      	ldr	r2, [r7, #16]
 8006a46:	4313      	orrs	r3, r2
 8006a48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	693a      	ldr	r2, [r7, #16]
 8006a4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	68fa      	ldr	r2, [r7, #12]
 8006a54:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	685a      	ldr	r2, [r3, #4]
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	697a      	ldr	r2, [r7, #20]
 8006a62:	621a      	str	r2, [r3, #32]
}
 8006a64:	bf00      	nop
 8006a66:	371c      	adds	r7, #28
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6e:	4770      	bx	lr
 8006a70:	40012c00 	.word	0x40012c00
 8006a74:	40013400 	.word	0x40013400
 8006a78:	40015000 	.word	0x40015000
 8006a7c:	40014000 	.word	0x40014000
 8006a80:	40014400 	.word	0x40014400
 8006a84:	40014800 	.word	0x40014800

08006a88 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a88:	b480      	push	{r7}
 8006a8a:	b087      	sub	sp, #28
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
 8006a90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6a1b      	ldr	r3, [r3, #32]
 8006a96:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6a1b      	ldr	r3, [r3, #32]
 8006a9c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	69db      	ldr	r3, [r3, #28]
 8006aae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006ab6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006aba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ac2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	021b      	lsls	r3, r3, #8
 8006aca:	68fa      	ldr	r2, [r7, #12]
 8006acc:	4313      	orrs	r3, r2
 8006ace:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006ad0:	697b      	ldr	r3, [r7, #20]
 8006ad2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006ad6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	689b      	ldr	r3, [r3, #8]
 8006adc:	031b      	lsls	r3, r3, #12
 8006ade:	697a      	ldr	r2, [r7, #20]
 8006ae0:	4313      	orrs	r3, r2
 8006ae2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	4a2c      	ldr	r2, [pc, #176]	; (8006b98 <TIM_OC4_SetConfig+0x110>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d007      	beq.n	8006afc <TIM_OC4_SetConfig+0x74>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	4a2b      	ldr	r2, [pc, #172]	; (8006b9c <TIM_OC4_SetConfig+0x114>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d003      	beq.n	8006afc <TIM_OC4_SetConfig+0x74>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	4a2a      	ldr	r2, [pc, #168]	; (8006ba0 <TIM_OC4_SetConfig+0x118>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d10d      	bne.n	8006b18 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006afc:	697b      	ldr	r3, [r7, #20]
 8006afe:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006b02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	68db      	ldr	r3, [r3, #12]
 8006b08:	031b      	lsls	r3, r3, #12
 8006b0a:	697a      	ldr	r2, [r7, #20]
 8006b0c:	4313      	orrs	r3, r2
 8006b0e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006b10:	697b      	ldr	r3, [r7, #20]
 8006b12:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b16:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	4a1f      	ldr	r2, [pc, #124]	; (8006b98 <TIM_OC4_SetConfig+0x110>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d013      	beq.n	8006b48 <TIM_OC4_SetConfig+0xc0>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	4a1e      	ldr	r2, [pc, #120]	; (8006b9c <TIM_OC4_SetConfig+0x114>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d00f      	beq.n	8006b48 <TIM_OC4_SetConfig+0xc0>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	4a1e      	ldr	r2, [pc, #120]	; (8006ba4 <TIM_OC4_SetConfig+0x11c>)
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d00b      	beq.n	8006b48 <TIM_OC4_SetConfig+0xc0>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	4a1d      	ldr	r2, [pc, #116]	; (8006ba8 <TIM_OC4_SetConfig+0x120>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d007      	beq.n	8006b48 <TIM_OC4_SetConfig+0xc0>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	4a1c      	ldr	r2, [pc, #112]	; (8006bac <TIM_OC4_SetConfig+0x124>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d003      	beq.n	8006b48 <TIM_OC4_SetConfig+0xc0>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	4a17      	ldr	r2, [pc, #92]	; (8006ba0 <TIM_OC4_SetConfig+0x118>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d113      	bne.n	8006b70 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006b48:	693b      	ldr	r3, [r7, #16]
 8006b4a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b4e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006b50:	693b      	ldr	r3, [r7, #16]
 8006b52:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006b56:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	695b      	ldr	r3, [r3, #20]
 8006b5c:	019b      	lsls	r3, r3, #6
 8006b5e:	693a      	ldr	r2, [r7, #16]
 8006b60:	4313      	orrs	r3, r2
 8006b62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	699b      	ldr	r3, [r3, #24]
 8006b68:	019b      	lsls	r3, r3, #6
 8006b6a:	693a      	ldr	r2, [r7, #16]
 8006b6c:	4313      	orrs	r3, r2
 8006b6e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	693a      	ldr	r2, [r7, #16]
 8006b74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	68fa      	ldr	r2, [r7, #12]
 8006b7a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	685a      	ldr	r2, [r3, #4]
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	697a      	ldr	r2, [r7, #20]
 8006b88:	621a      	str	r2, [r3, #32]
}
 8006b8a:	bf00      	nop
 8006b8c:	371c      	adds	r7, #28
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b94:	4770      	bx	lr
 8006b96:	bf00      	nop
 8006b98:	40012c00 	.word	0x40012c00
 8006b9c:	40013400 	.word	0x40013400
 8006ba0:	40015000 	.word	0x40015000
 8006ba4:	40014000 	.word	0x40014000
 8006ba8:	40014400 	.word	0x40014400
 8006bac:	40014800 	.word	0x40014800

08006bb0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b087      	sub	sp, #28
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
 8006bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6a1b      	ldr	r3, [r3, #32]
 8006bbe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6a1b      	ldr	r3, [r3, #32]
 8006bc4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	685b      	ldr	r3, [r3, #4]
 8006bd0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006bde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006be2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	68fa      	ldr	r2, [r7, #12]
 8006bea:	4313      	orrs	r3, r2
 8006bec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006bee:	693b      	ldr	r3, [r7, #16]
 8006bf0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006bf4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	689b      	ldr	r3, [r3, #8]
 8006bfa:	041b      	lsls	r3, r3, #16
 8006bfc:	693a      	ldr	r2, [r7, #16]
 8006bfe:	4313      	orrs	r3, r2
 8006c00:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	4a19      	ldr	r2, [pc, #100]	; (8006c6c <TIM_OC5_SetConfig+0xbc>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d013      	beq.n	8006c32 <TIM_OC5_SetConfig+0x82>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	4a18      	ldr	r2, [pc, #96]	; (8006c70 <TIM_OC5_SetConfig+0xc0>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d00f      	beq.n	8006c32 <TIM_OC5_SetConfig+0x82>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	4a17      	ldr	r2, [pc, #92]	; (8006c74 <TIM_OC5_SetConfig+0xc4>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d00b      	beq.n	8006c32 <TIM_OC5_SetConfig+0x82>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	4a16      	ldr	r2, [pc, #88]	; (8006c78 <TIM_OC5_SetConfig+0xc8>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d007      	beq.n	8006c32 <TIM_OC5_SetConfig+0x82>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	4a15      	ldr	r2, [pc, #84]	; (8006c7c <TIM_OC5_SetConfig+0xcc>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d003      	beq.n	8006c32 <TIM_OC5_SetConfig+0x82>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	4a14      	ldr	r2, [pc, #80]	; (8006c80 <TIM_OC5_SetConfig+0xd0>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d109      	bne.n	8006c46 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006c32:	697b      	ldr	r3, [r7, #20]
 8006c34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c38:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	695b      	ldr	r3, [r3, #20]
 8006c3e:	021b      	lsls	r3, r3, #8
 8006c40:	697a      	ldr	r2, [r7, #20]
 8006c42:	4313      	orrs	r3, r2
 8006c44:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	697a      	ldr	r2, [r7, #20]
 8006c4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	68fa      	ldr	r2, [r7, #12]
 8006c50:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	685a      	ldr	r2, [r3, #4]
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	693a      	ldr	r2, [r7, #16]
 8006c5e:	621a      	str	r2, [r3, #32]
}
 8006c60:	bf00      	nop
 8006c62:	371c      	adds	r7, #28
 8006c64:	46bd      	mov	sp, r7
 8006c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6a:	4770      	bx	lr
 8006c6c:	40012c00 	.word	0x40012c00
 8006c70:	40013400 	.word	0x40013400
 8006c74:	40014000 	.word	0x40014000
 8006c78:	40014400 	.word	0x40014400
 8006c7c:	40014800 	.word	0x40014800
 8006c80:	40015000 	.word	0x40015000

08006c84 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006c84:	b480      	push	{r7}
 8006c86:	b087      	sub	sp, #28
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
 8006c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6a1b      	ldr	r3, [r3, #32]
 8006c92:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6a1b      	ldr	r3, [r3, #32]
 8006c98:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	685b      	ldr	r3, [r3, #4]
 8006ca4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006caa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006cb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	021b      	lsls	r3, r3, #8
 8006cbe:	68fa      	ldr	r2, [r7, #12]
 8006cc0:	4313      	orrs	r3, r2
 8006cc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006cc4:	693b      	ldr	r3, [r7, #16]
 8006cc6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006cca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	689b      	ldr	r3, [r3, #8]
 8006cd0:	051b      	lsls	r3, r3, #20
 8006cd2:	693a      	ldr	r2, [r7, #16]
 8006cd4:	4313      	orrs	r3, r2
 8006cd6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	4a1a      	ldr	r2, [pc, #104]	; (8006d44 <TIM_OC6_SetConfig+0xc0>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d013      	beq.n	8006d08 <TIM_OC6_SetConfig+0x84>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	4a19      	ldr	r2, [pc, #100]	; (8006d48 <TIM_OC6_SetConfig+0xc4>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d00f      	beq.n	8006d08 <TIM_OC6_SetConfig+0x84>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	4a18      	ldr	r2, [pc, #96]	; (8006d4c <TIM_OC6_SetConfig+0xc8>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d00b      	beq.n	8006d08 <TIM_OC6_SetConfig+0x84>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	4a17      	ldr	r2, [pc, #92]	; (8006d50 <TIM_OC6_SetConfig+0xcc>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d007      	beq.n	8006d08 <TIM_OC6_SetConfig+0x84>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	4a16      	ldr	r2, [pc, #88]	; (8006d54 <TIM_OC6_SetConfig+0xd0>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d003      	beq.n	8006d08 <TIM_OC6_SetConfig+0x84>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	4a15      	ldr	r2, [pc, #84]	; (8006d58 <TIM_OC6_SetConfig+0xd4>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d109      	bne.n	8006d1c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006d08:	697b      	ldr	r3, [r7, #20]
 8006d0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006d0e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	695b      	ldr	r3, [r3, #20]
 8006d14:	029b      	lsls	r3, r3, #10
 8006d16:	697a      	ldr	r2, [r7, #20]
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	697a      	ldr	r2, [r7, #20]
 8006d20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	68fa      	ldr	r2, [r7, #12]
 8006d26:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	685a      	ldr	r2, [r3, #4]
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	693a      	ldr	r2, [r7, #16]
 8006d34:	621a      	str	r2, [r3, #32]
}
 8006d36:	bf00      	nop
 8006d38:	371c      	adds	r7, #28
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d40:	4770      	bx	lr
 8006d42:	bf00      	nop
 8006d44:	40012c00 	.word	0x40012c00
 8006d48:	40013400 	.word	0x40013400
 8006d4c:	40014000 	.word	0x40014000
 8006d50:	40014400 	.word	0x40014400
 8006d54:	40014800 	.word	0x40014800
 8006d58:	40015000 	.word	0x40015000

08006d5c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b087      	sub	sp, #28
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	60f8      	str	r0, [r7, #12]
 8006d64:	60b9      	str	r1, [r7, #8]
 8006d66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	6a1b      	ldr	r3, [r3, #32]
 8006d6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	6a1b      	ldr	r3, [r3, #32]
 8006d72:	f023 0201 	bic.w	r2, r3, #1
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	699b      	ldr	r3, [r3, #24]
 8006d7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006d80:	693b      	ldr	r3, [r7, #16]
 8006d82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006d86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	011b      	lsls	r3, r3, #4
 8006d8c:	693a      	ldr	r2, [r7, #16]
 8006d8e:	4313      	orrs	r3, r2
 8006d90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006d92:	697b      	ldr	r3, [r7, #20]
 8006d94:	f023 030a 	bic.w	r3, r3, #10
 8006d98:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006d9a:	697a      	ldr	r2, [r7, #20]
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	4313      	orrs	r3, r2
 8006da0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	693a      	ldr	r2, [r7, #16]
 8006da6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	697a      	ldr	r2, [r7, #20]
 8006dac:	621a      	str	r2, [r3, #32]
}
 8006dae:	bf00      	nop
 8006db0:	371c      	adds	r7, #28
 8006db2:	46bd      	mov	sp, r7
 8006db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db8:	4770      	bx	lr

08006dba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006dba:	b480      	push	{r7}
 8006dbc:	b087      	sub	sp, #28
 8006dbe:	af00      	add	r7, sp, #0
 8006dc0:	60f8      	str	r0, [r7, #12]
 8006dc2:	60b9      	str	r1, [r7, #8]
 8006dc4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	6a1b      	ldr	r3, [r3, #32]
 8006dca:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	6a1b      	ldr	r3, [r3, #32]
 8006dd0:	f023 0210 	bic.w	r2, r3, #16
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	699b      	ldr	r3, [r3, #24]
 8006ddc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006dde:	693b      	ldr	r3, [r7, #16]
 8006de0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006de4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	031b      	lsls	r3, r3, #12
 8006dea:	693a      	ldr	r2, [r7, #16]
 8006dec:	4313      	orrs	r3, r2
 8006dee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006df0:	697b      	ldr	r3, [r7, #20]
 8006df2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006df6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	011b      	lsls	r3, r3, #4
 8006dfc:	697a      	ldr	r2, [r7, #20]
 8006dfe:	4313      	orrs	r3, r2
 8006e00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	693a      	ldr	r2, [r7, #16]
 8006e06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	697a      	ldr	r2, [r7, #20]
 8006e0c:	621a      	str	r2, [r3, #32]
}
 8006e0e:	bf00      	nop
 8006e10:	371c      	adds	r7, #28
 8006e12:	46bd      	mov	sp, r7
 8006e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e18:	4770      	bx	lr

08006e1a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006e1a:	b480      	push	{r7}
 8006e1c:	b085      	sub	sp, #20
 8006e1e:	af00      	add	r7, sp, #0
 8006e20:	6078      	str	r0, [r7, #4]
 8006e22:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	689b      	ldr	r3, [r3, #8]
 8006e28:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006e30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e34:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006e36:	683a      	ldr	r2, [r7, #0]
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	4313      	orrs	r3, r2
 8006e3c:	f043 0307 	orr.w	r3, r3, #7
 8006e40:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	68fa      	ldr	r2, [r7, #12]
 8006e46:	609a      	str	r2, [r3, #8]
}
 8006e48:	bf00      	nop
 8006e4a:	3714      	adds	r7, #20
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e52:	4770      	bx	lr

08006e54 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006e54:	b480      	push	{r7}
 8006e56:	b087      	sub	sp, #28
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	60f8      	str	r0, [r7, #12]
 8006e5c:	60b9      	str	r1, [r7, #8]
 8006e5e:	607a      	str	r2, [r7, #4]
 8006e60:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	689b      	ldr	r3, [r3, #8]
 8006e66:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e68:	697b      	ldr	r3, [r7, #20]
 8006e6a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006e6e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	021a      	lsls	r2, r3, #8
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	431a      	orrs	r2, r3
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	4313      	orrs	r3, r2
 8006e7c:	697a      	ldr	r2, [r7, #20]
 8006e7e:	4313      	orrs	r3, r2
 8006e80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	697a      	ldr	r2, [r7, #20]
 8006e86:	609a      	str	r2, [r3, #8]
}
 8006e88:	bf00      	nop
 8006e8a:	371c      	adds	r7, #28
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e92:	4770      	bx	lr

08006e94 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006e94:	b480      	push	{r7}
 8006e96:	b087      	sub	sp, #28
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	60f8      	str	r0, [r7, #12]
 8006e9c:	60b9      	str	r1, [r7, #8]
 8006e9e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	f003 031f 	and.w	r3, r3, #31
 8006ea6:	2201      	movs	r2, #1
 8006ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8006eac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	6a1a      	ldr	r2, [r3, #32]
 8006eb2:	697b      	ldr	r3, [r7, #20]
 8006eb4:	43db      	mvns	r3, r3
 8006eb6:	401a      	ands	r2, r3
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	6a1a      	ldr	r2, [r3, #32]
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	f003 031f 	and.w	r3, r3, #31
 8006ec6:	6879      	ldr	r1, [r7, #4]
 8006ec8:	fa01 f303 	lsl.w	r3, r1, r3
 8006ecc:	431a      	orrs	r2, r3
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	621a      	str	r2, [r3, #32]
}
 8006ed2:	bf00      	nop
 8006ed4:	371c      	adds	r7, #28
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006edc:	4770      	bx	lr
	...

08006ee0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006ee0:	b480      	push	{r7}
 8006ee2:	b085      	sub	sp, #20
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
 8006ee8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ef0:	2b01      	cmp	r3, #1
 8006ef2:	d101      	bne.n	8006ef8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006ef4:	2302      	movs	r3, #2
 8006ef6:	e074      	b.n	8006fe2 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2201      	movs	r2, #1
 8006efc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2202      	movs	r2, #2
 8006f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	685b      	ldr	r3, [r3, #4]
 8006f0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	689b      	ldr	r3, [r3, #8]
 8006f16:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	4a34      	ldr	r2, [pc, #208]	; (8006ff0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d009      	beq.n	8006f36 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4a33      	ldr	r2, [pc, #204]	; (8006ff4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d004      	beq.n	8006f36 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a31      	ldr	r2, [pc, #196]	; (8006ff8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d108      	bne.n	8006f48 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006f3c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	685b      	ldr	r3, [r3, #4]
 8006f42:	68fa      	ldr	r2, [r7, #12]
 8006f44:	4313      	orrs	r3, r2
 8006f46:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006f4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f52:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	68fa      	ldr	r2, [r7, #12]
 8006f5a:	4313      	orrs	r3, r2
 8006f5c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	68fa      	ldr	r2, [r7, #12]
 8006f64:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4a21      	ldr	r2, [pc, #132]	; (8006ff0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d022      	beq.n	8006fb6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f78:	d01d      	beq.n	8006fb6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	4a1f      	ldr	r2, [pc, #124]	; (8006ffc <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d018      	beq.n	8006fb6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	4a1d      	ldr	r2, [pc, #116]	; (8007000 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d013      	beq.n	8006fb6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	4a1c      	ldr	r2, [pc, #112]	; (8007004 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d00e      	beq.n	8006fb6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4a15      	ldr	r2, [pc, #84]	; (8006ff4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d009      	beq.n	8006fb6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	4a18      	ldr	r2, [pc, #96]	; (8007008 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d004      	beq.n	8006fb6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	4a11      	ldr	r2, [pc, #68]	; (8006ff8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d10c      	bne.n	8006fd0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006fbc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	689b      	ldr	r3, [r3, #8]
 8006fc2:	68ba      	ldr	r2, [r7, #8]
 8006fc4:	4313      	orrs	r3, r2
 8006fc6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	68ba      	ldr	r2, [r7, #8]
 8006fce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2201      	movs	r2, #1
 8006fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006fe0:	2300      	movs	r3, #0
}
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	3714      	adds	r7, #20
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fec:	4770      	bx	lr
 8006fee:	bf00      	nop
 8006ff0:	40012c00 	.word	0x40012c00
 8006ff4:	40013400 	.word	0x40013400
 8006ff8:	40015000 	.word	0x40015000
 8006ffc:	40000400 	.word	0x40000400
 8007000:	40000800 	.word	0x40000800
 8007004:	40000c00 	.word	0x40000c00
 8007008:	40014000 	.word	0x40014000

0800700c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800700c:	b480      	push	{r7}
 800700e:	b085      	sub	sp, #20
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
 8007014:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007016:	2300      	movs	r3, #0
 8007018:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007020:	2b01      	cmp	r3, #1
 8007022:	d101      	bne.n	8007028 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007024:	2302      	movs	r3, #2
 8007026:	e078      	b.n	800711a <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2201      	movs	r2, #1
 800702c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	68db      	ldr	r3, [r3, #12]
 800703a:	4313      	orrs	r3, r2
 800703c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	689b      	ldr	r3, [r3, #8]
 8007048:	4313      	orrs	r3, r2
 800704a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	685b      	ldr	r3, [r3, #4]
 8007056:	4313      	orrs	r3, r2
 8007058:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4313      	orrs	r3, r2
 8007066:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	691b      	ldr	r3, [r3, #16]
 8007072:	4313      	orrs	r3, r2
 8007074:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	695b      	ldr	r3, [r3, #20]
 8007080:	4313      	orrs	r3, r2
 8007082:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800708e:	4313      	orrs	r3, r2
 8007090:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	699b      	ldr	r3, [r3, #24]
 800709c:	041b      	lsls	r3, r3, #16
 800709e:	4313      	orrs	r3, r2
 80070a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	69db      	ldr	r3, [r3, #28]
 80070ac:	4313      	orrs	r3, r2
 80070ae:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	4a1c      	ldr	r2, [pc, #112]	; (8007128 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d009      	beq.n	80070ce <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4a1b      	ldr	r2, [pc, #108]	; (800712c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d004      	beq.n	80070ce <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4a19      	ldr	r2, [pc, #100]	; (8007130 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d11c      	bne.n	8007108 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070d8:	051b      	lsls	r3, r3, #20
 80070da:	4313      	orrs	r3, r2
 80070dc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	6a1b      	ldr	r3, [r3, #32]
 80070e8:	4313      	orrs	r3, r2
 80070ea:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070f6:	4313      	orrs	r3, r2
 80070f8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007104:	4313      	orrs	r3, r2
 8007106:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	68fa      	ldr	r2, [r7, #12]
 800710e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2200      	movs	r2, #0
 8007114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007118:	2300      	movs	r3, #0
}
 800711a:	4618      	mov	r0, r3
 800711c:	3714      	adds	r7, #20
 800711e:	46bd      	mov	sp, r7
 8007120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007124:	4770      	bx	lr
 8007126:	bf00      	nop
 8007128:	40012c00 	.word	0x40012c00
 800712c:	40013400 	.word	0x40013400
 8007130:	40015000 	.word	0x40015000

08007134 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007134:	b480      	push	{r7}
 8007136:	b083      	sub	sp, #12
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800713c:	bf00      	nop
 800713e:	370c      	adds	r7, #12
 8007140:	46bd      	mov	sp, r7
 8007142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007146:	4770      	bx	lr

08007148 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007148:	b480      	push	{r7}
 800714a:	b083      	sub	sp, #12
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007150:	bf00      	nop
 8007152:	370c      	adds	r7, #12
 8007154:	46bd      	mov	sp, r7
 8007156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715a:	4770      	bx	lr

0800715c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800715c:	b480      	push	{r7}
 800715e:	b083      	sub	sp, #12
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007164:	bf00      	nop
 8007166:	370c      	adds	r7, #12
 8007168:	46bd      	mov	sp, r7
 800716a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716e:	4770      	bx	lr

08007170 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007170:	b480      	push	{r7}
 8007172:	b083      	sub	sp, #12
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007178:	bf00      	nop
 800717a:	370c      	adds	r7, #12
 800717c:	46bd      	mov	sp, r7
 800717e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007182:	4770      	bx	lr

08007184 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007184:	b480      	push	{r7}
 8007186:	b083      	sub	sp, #12
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800718c:	bf00      	nop
 800718e:	370c      	adds	r7, #12
 8007190:	46bd      	mov	sp, r7
 8007192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007196:	4770      	bx	lr

08007198 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007198:	b480      	push	{r7}
 800719a:	b083      	sub	sp, #12
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80071a0:	bf00      	nop
 80071a2:	370c      	adds	r7, #12
 80071a4:	46bd      	mov	sp, r7
 80071a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071aa:	4770      	bx	lr

080071ac <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80071ac:	b480      	push	{r7}
 80071ae:	b083      	sub	sp, #12
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80071b4:	bf00      	nop
 80071b6:	370c      	adds	r7, #12
 80071b8:	46bd      	mov	sp, r7
 80071ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071be:	4770      	bx	lr

080071c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b082      	sub	sp, #8
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d101      	bne.n	80071d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80071ce:	2301      	movs	r3, #1
 80071d0:	e042      	b.n	8007258 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d106      	bne.n	80071ea <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2200      	movs	r2, #0
 80071e0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80071e4:	6878      	ldr	r0, [r7, #4]
 80071e6:	f7fa fae9 	bl	80017bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2224      	movs	r2, #36	; 0x24
 80071ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	681a      	ldr	r2, [r3, #0]
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f022 0201 	bic.w	r2, r2, #1
 8007200:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007206:	2b00      	cmp	r3, #0
 8007208:	d002      	beq.n	8007210 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f000 ff48 	bl	80080a0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	f000 fc49 	bl	8007aa8 <UART_SetConfig>
 8007216:	4603      	mov	r3, r0
 8007218:	2b01      	cmp	r3, #1
 800721a:	d101      	bne.n	8007220 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800721c:	2301      	movs	r3, #1
 800721e:	e01b      	b.n	8007258 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	685a      	ldr	r2, [r3, #4]
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800722e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	689a      	ldr	r2, [r3, #8]
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800723e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	681a      	ldr	r2, [r3, #0]
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f042 0201 	orr.w	r2, r2, #1
 800724e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007250:	6878      	ldr	r0, [r7, #4]
 8007252:	f000 ffc7 	bl	80081e4 <UART_CheckIdleState>
 8007256:	4603      	mov	r3, r0
}
 8007258:	4618      	mov	r0, r3
 800725a:	3708      	adds	r7, #8
 800725c:	46bd      	mov	sp, r7
 800725e:	bd80      	pop	{r7, pc}

08007260 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b08a      	sub	sp, #40	; 0x28
 8007264:	af00      	add	r7, sp, #0
 8007266:	60f8      	str	r0, [r7, #12]
 8007268:	60b9      	str	r1, [r7, #8]
 800726a:	4613      	mov	r3, r2
 800726c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007274:	2b20      	cmp	r3, #32
 8007276:	d167      	bne.n	8007348 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d002      	beq.n	8007284 <HAL_UART_Transmit_DMA+0x24>
 800727e:	88fb      	ldrh	r3, [r7, #6]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d101      	bne.n	8007288 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8007284:	2301      	movs	r3, #1
 8007286:	e060      	b.n	800734a <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	68ba      	ldr	r2, [r7, #8]
 800728c:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	88fa      	ldrh	r2, [r7, #6]
 8007292:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	88fa      	ldrh	r2, [r7, #6]
 800729a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	2200      	movs	r2, #0
 80072a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	2221      	movs	r2, #33	; 0x21
 80072aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d028      	beq.n	8007308 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80072ba:	4a26      	ldr	r2, [pc, #152]	; (8007354 <HAL_UART_Transmit_DMA+0xf4>)
 80072bc:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80072c2:	4a25      	ldr	r2, [pc, #148]	; (8007358 <HAL_UART_Transmit_DMA+0xf8>)
 80072c4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80072ca:	4a24      	ldr	r2, [pc, #144]	; (800735c <HAL_UART_Transmit_DMA+0xfc>)
 80072cc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80072d2:	2200      	movs	r2, #0
 80072d4:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072de:	4619      	mov	r1, r3
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	3328      	adds	r3, #40	; 0x28
 80072e6:	461a      	mov	r2, r3
 80072e8:	88fb      	ldrh	r3, [r7, #6]
 80072ea:	f7fc fd53 	bl	8003d94 <HAL_DMA_Start_IT>
 80072ee:	4603      	mov	r3, r0
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d009      	beq.n	8007308 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	2210      	movs	r2, #16
 80072f8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	2220      	movs	r2, #32
 8007300:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 8007304:	2301      	movs	r3, #1
 8007306:	e020      	b.n	800734a <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	2240      	movs	r2, #64	; 0x40
 800730e:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	3308      	adds	r3, #8
 8007316:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007318:	697b      	ldr	r3, [r7, #20]
 800731a:	e853 3f00 	ldrex	r3, [r3]
 800731e:	613b      	str	r3, [r7, #16]
   return(result);
 8007320:	693b      	ldr	r3, [r7, #16]
 8007322:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007326:	627b      	str	r3, [r7, #36]	; 0x24
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	3308      	adds	r3, #8
 800732e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007330:	623a      	str	r2, [r7, #32]
 8007332:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007334:	69f9      	ldr	r1, [r7, #28]
 8007336:	6a3a      	ldr	r2, [r7, #32]
 8007338:	e841 2300 	strex	r3, r2, [r1]
 800733c:	61bb      	str	r3, [r7, #24]
   return(result);
 800733e:	69bb      	ldr	r3, [r7, #24]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d1e5      	bne.n	8007310 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8007344:	2300      	movs	r3, #0
 8007346:	e000      	b.n	800734a <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8007348:	2302      	movs	r3, #2
  }
}
 800734a:	4618      	mov	r0, r3
 800734c:	3728      	adds	r7, #40	; 0x28
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}
 8007352:	bf00      	nop
 8007354:	080086af 	.word	0x080086af
 8007358:	08008749 	.word	0x08008749
 800735c:	080088cf 	.word	0x080088cf

08007360 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b08a      	sub	sp, #40	; 0x28
 8007364:	af00      	add	r7, sp, #0
 8007366:	60f8      	str	r0, [r7, #12]
 8007368:	60b9      	str	r1, [r7, #8]
 800736a:	4613      	mov	r3, r2
 800736c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007374:	2b20      	cmp	r3, #32
 8007376:	d137      	bne.n	80073e8 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d002      	beq.n	8007384 <HAL_UART_Receive_DMA+0x24>
 800737e:	88fb      	ldrh	r3, [r7, #6]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d101      	bne.n	8007388 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8007384:	2301      	movs	r3, #1
 8007386:	e030      	b.n	80073ea <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	2200      	movs	r2, #0
 800738c:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	4a18      	ldr	r2, [pc, #96]	; (80073f4 <HAL_UART_Receive_DMA+0x94>)
 8007394:	4293      	cmp	r3, r2
 8007396:	d01f      	beq.n	80073d8 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	685b      	ldr	r3, [r3, #4]
 800739e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d018      	beq.n	80073d8 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ac:	697b      	ldr	r3, [r7, #20]
 80073ae:	e853 3f00 	ldrex	r3, [r3]
 80073b2:	613b      	str	r3, [r7, #16]
   return(result);
 80073b4:	693b      	ldr	r3, [r7, #16]
 80073b6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80073ba:	627b      	str	r3, [r7, #36]	; 0x24
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	461a      	mov	r2, r3
 80073c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073c4:	623b      	str	r3, [r7, #32]
 80073c6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073c8:	69f9      	ldr	r1, [r7, #28]
 80073ca:	6a3a      	ldr	r2, [r7, #32]
 80073cc:	e841 2300 	strex	r3, r2, [r1]
 80073d0:	61bb      	str	r3, [r7, #24]
   return(result);
 80073d2:	69bb      	ldr	r3, [r7, #24]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d1e6      	bne.n	80073a6 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80073d8:	88fb      	ldrh	r3, [r7, #6]
 80073da:	461a      	mov	r2, r3
 80073dc:	68b9      	ldr	r1, [r7, #8]
 80073de:	68f8      	ldr	r0, [r7, #12]
 80073e0:	f001 f818 	bl	8008414 <UART_Start_Receive_DMA>
 80073e4:	4603      	mov	r3, r0
 80073e6:	e000      	b.n	80073ea <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80073e8:	2302      	movs	r3, #2
  }
}
 80073ea:	4618      	mov	r0, r3
 80073ec:	3728      	adds	r7, #40	; 0x28
 80073ee:	46bd      	mov	sp, r7
 80073f0:	bd80      	pop	{r7, pc}
 80073f2:	bf00      	nop
 80073f4:	40008000 	.word	0x40008000

080073f8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b0ba      	sub	sp, #232	; 0xe8
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	69db      	ldr	r3, [r3, #28]
 8007406:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	689b      	ldr	r3, [r3, #8]
 800741a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800741e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007422:	f640 030f 	movw	r3, #2063	; 0x80f
 8007426:	4013      	ands	r3, r2
 8007428:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800742c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007430:	2b00      	cmp	r3, #0
 8007432:	d11b      	bne.n	800746c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007434:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007438:	f003 0320 	and.w	r3, r3, #32
 800743c:	2b00      	cmp	r3, #0
 800743e:	d015      	beq.n	800746c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007440:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007444:	f003 0320 	and.w	r3, r3, #32
 8007448:	2b00      	cmp	r3, #0
 800744a:	d105      	bne.n	8007458 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800744c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007450:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007454:	2b00      	cmp	r3, #0
 8007456:	d009      	beq.n	800746c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800745c:	2b00      	cmp	r3, #0
 800745e:	f000 82e3 	beq.w	8007a28 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	4798      	blx	r3
      }
      return;
 800746a:	e2dd      	b.n	8007a28 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800746c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007470:	2b00      	cmp	r3, #0
 8007472:	f000 8123 	beq.w	80076bc <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007476:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800747a:	4b8d      	ldr	r3, [pc, #564]	; (80076b0 <HAL_UART_IRQHandler+0x2b8>)
 800747c:	4013      	ands	r3, r2
 800747e:	2b00      	cmp	r3, #0
 8007480:	d106      	bne.n	8007490 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007482:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007486:	4b8b      	ldr	r3, [pc, #556]	; (80076b4 <HAL_UART_IRQHandler+0x2bc>)
 8007488:	4013      	ands	r3, r2
 800748a:	2b00      	cmp	r3, #0
 800748c:	f000 8116 	beq.w	80076bc <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007490:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007494:	f003 0301 	and.w	r3, r3, #1
 8007498:	2b00      	cmp	r3, #0
 800749a:	d011      	beq.n	80074c0 <HAL_UART_IRQHandler+0xc8>
 800749c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d00b      	beq.n	80074c0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	2201      	movs	r2, #1
 80074ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074b6:	f043 0201 	orr.w	r2, r3, #1
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80074c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074c4:	f003 0302 	and.w	r3, r3, #2
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d011      	beq.n	80074f0 <HAL_UART_IRQHandler+0xf8>
 80074cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80074d0:	f003 0301 	and.w	r3, r3, #1
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d00b      	beq.n	80074f0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	2202      	movs	r2, #2
 80074de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074e6:	f043 0204 	orr.w	r2, r3, #4
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80074f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074f4:	f003 0304 	and.w	r3, r3, #4
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d011      	beq.n	8007520 <HAL_UART_IRQHandler+0x128>
 80074fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007500:	f003 0301 	and.w	r3, r3, #1
 8007504:	2b00      	cmp	r3, #0
 8007506:	d00b      	beq.n	8007520 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	2204      	movs	r2, #4
 800750e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007516:	f043 0202 	orr.w	r2, r3, #2
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007520:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007524:	f003 0308 	and.w	r3, r3, #8
 8007528:	2b00      	cmp	r3, #0
 800752a:	d017      	beq.n	800755c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800752c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007530:	f003 0320 	and.w	r3, r3, #32
 8007534:	2b00      	cmp	r3, #0
 8007536:	d105      	bne.n	8007544 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007538:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800753c:	4b5c      	ldr	r3, [pc, #368]	; (80076b0 <HAL_UART_IRQHandler+0x2b8>)
 800753e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007540:	2b00      	cmp	r3, #0
 8007542:	d00b      	beq.n	800755c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	2208      	movs	r2, #8
 800754a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007552:	f043 0208 	orr.w	r2, r3, #8
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800755c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007560:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007564:	2b00      	cmp	r3, #0
 8007566:	d012      	beq.n	800758e <HAL_UART_IRQHandler+0x196>
 8007568:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800756c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007570:	2b00      	cmp	r3, #0
 8007572:	d00c      	beq.n	800758e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800757c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007584:	f043 0220 	orr.w	r2, r3, #32
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007594:	2b00      	cmp	r3, #0
 8007596:	f000 8249 	beq.w	8007a2c <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800759a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800759e:	f003 0320 	and.w	r3, r3, #32
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d013      	beq.n	80075ce <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80075a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075aa:	f003 0320 	and.w	r3, r3, #32
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d105      	bne.n	80075be <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80075b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d007      	beq.n	80075ce <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d003      	beq.n	80075ce <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075d4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	689b      	ldr	r3, [r3, #8]
 80075de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075e2:	2b40      	cmp	r3, #64	; 0x40
 80075e4:	d005      	beq.n	80075f2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80075e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80075ea:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d054      	beq.n	800769c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f000 fff5 	bl	80085e2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	689b      	ldr	r3, [r3, #8]
 80075fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007602:	2b40      	cmp	r3, #64	; 0x40
 8007604:	d146      	bne.n	8007694 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	3308      	adds	r3, #8
 800760c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007610:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007614:	e853 3f00 	ldrex	r3, [r3]
 8007618:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800761c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007620:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007624:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	3308      	adds	r3, #8
 800762e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007632:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007636:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800763a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800763e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007642:	e841 2300 	strex	r3, r2, [r1]
 8007646:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800764a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800764e:	2b00      	cmp	r3, #0
 8007650:	d1d9      	bne.n	8007606 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007658:	2b00      	cmp	r3, #0
 800765a:	d017      	beq.n	800768c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007662:	4a15      	ldr	r2, [pc, #84]	; (80076b8 <HAL_UART_IRQHandler+0x2c0>)
 8007664:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800766c:	4618      	mov	r0, r3
 800766e:	f7fc fc65 	bl	8003f3c <HAL_DMA_Abort_IT>
 8007672:	4603      	mov	r3, r0
 8007674:	2b00      	cmp	r3, #0
 8007676:	d019      	beq.n	80076ac <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800767e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007680:	687a      	ldr	r2, [r7, #4]
 8007682:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8007686:	4610      	mov	r0, r2
 8007688:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800768a:	e00f      	b.n	80076ac <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	f000 f9f5 	bl	8007a7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007692:	e00b      	b.n	80076ac <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	f000 f9f1 	bl	8007a7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800769a:	e007      	b.n	80076ac <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	f000 f9ed 	bl	8007a7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2200      	movs	r2, #0
 80076a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80076aa:	e1bf      	b.n	8007a2c <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076ac:	bf00      	nop
    return;
 80076ae:	e1bd      	b.n	8007a2c <HAL_UART_IRQHandler+0x634>
 80076b0:	10000001 	.word	0x10000001
 80076b4:	04000120 	.word	0x04000120
 80076b8:	0800894f 	.word	0x0800894f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076c0:	2b01      	cmp	r3, #1
 80076c2:	f040 8153 	bne.w	800796c <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80076c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076ca:	f003 0310 	and.w	r3, r3, #16
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	f000 814c 	beq.w	800796c <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80076d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076d8:	f003 0310 	and.w	r3, r3, #16
 80076dc:	2b00      	cmp	r3, #0
 80076de:	f000 8145 	beq.w	800796c <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	2210      	movs	r2, #16
 80076e8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	689b      	ldr	r3, [r3, #8]
 80076f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076f4:	2b40      	cmp	r3, #64	; 0x40
 80076f6:	f040 80bb 	bne.w	8007870 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	685b      	ldr	r3, [r3, #4]
 8007704:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007708:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800770c:	2b00      	cmp	r3, #0
 800770e:	f000 818f 	beq.w	8007a30 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007718:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800771c:	429a      	cmp	r2, r3
 800771e:	f080 8187 	bcs.w	8007a30 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007728:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f003 0320 	and.w	r3, r3, #32
 800773a:	2b00      	cmp	r3, #0
 800773c:	f040 8087 	bne.w	800784e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007748:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800774c:	e853 3f00 	ldrex	r3, [r3]
 8007750:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007754:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007758:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800775c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	461a      	mov	r2, r3
 8007766:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800776a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800776e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007772:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007776:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800777a:	e841 2300 	strex	r3, r2, [r1]
 800777e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007782:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007786:	2b00      	cmp	r3, #0
 8007788:	d1da      	bne.n	8007740 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	3308      	adds	r3, #8
 8007790:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007792:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007794:	e853 3f00 	ldrex	r3, [r3]
 8007798:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800779a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800779c:	f023 0301 	bic.w	r3, r3, #1
 80077a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	3308      	adds	r3, #8
 80077aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80077ae:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80077b2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077b4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80077b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80077ba:	e841 2300 	strex	r3, r2, [r1]
 80077be:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80077c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d1e1      	bne.n	800778a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	3308      	adds	r3, #8
 80077cc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80077d0:	e853 3f00 	ldrex	r3, [r3]
 80077d4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80077d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80077d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	3308      	adds	r3, #8
 80077e6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80077ea:	66fa      	str	r2, [r7, #108]	; 0x6c
 80077ec:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ee:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80077f0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80077f2:	e841 2300 	strex	r3, r2, [r1]
 80077f6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80077f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d1e3      	bne.n	80077c6 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2220      	movs	r2, #32
 8007802:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2200      	movs	r2, #0
 800780a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007812:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007814:	e853 3f00 	ldrex	r3, [r3]
 8007818:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800781a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800781c:	f023 0310 	bic.w	r3, r3, #16
 8007820:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	461a      	mov	r2, r3
 800782a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800782e:	65bb      	str	r3, [r7, #88]	; 0x58
 8007830:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007832:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007834:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007836:	e841 2300 	strex	r3, r2, [r1]
 800783a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800783c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800783e:	2b00      	cmp	r3, #0
 8007840:	d1e4      	bne.n	800780c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007848:	4618      	mov	r0, r3
 800784a:	f7fc fb1e 	bl	8003e8a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2202      	movs	r2, #2
 8007852:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007860:	b29b      	uxth	r3, r3
 8007862:	1ad3      	subs	r3, r2, r3
 8007864:	b29b      	uxth	r3, r3
 8007866:	4619      	mov	r1, r3
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f000 f911 	bl	8007a90 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800786e:	e0df      	b.n	8007a30 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800787c:	b29b      	uxth	r3, r3
 800787e:	1ad3      	subs	r3, r2, r3
 8007880:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800788a:	b29b      	uxth	r3, r3
 800788c:	2b00      	cmp	r3, #0
 800788e:	f000 80d1 	beq.w	8007a34 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8007892:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007896:	2b00      	cmp	r3, #0
 8007898:	f000 80cc 	beq.w	8007a34 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078a4:	e853 3f00 	ldrex	r3, [r3]
 80078a8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80078aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80078b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	461a      	mov	r2, r3
 80078ba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80078be:	647b      	str	r3, [r7, #68]	; 0x44
 80078c0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078c2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80078c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80078c6:	e841 2300 	strex	r3, r2, [r1]
 80078ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80078cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d1e4      	bne.n	800789c <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	3308      	adds	r3, #8
 80078d8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078dc:	e853 3f00 	ldrex	r3, [r3]
 80078e0:	623b      	str	r3, [r7, #32]
   return(result);
 80078e2:	6a3b      	ldr	r3, [r7, #32]
 80078e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80078e8:	f023 0301 	bic.w	r3, r3, #1
 80078ec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	3308      	adds	r3, #8
 80078f6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80078fa:	633a      	str	r2, [r7, #48]	; 0x30
 80078fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007900:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007902:	e841 2300 	strex	r3, r2, [r1]
 8007906:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800790a:	2b00      	cmp	r3, #0
 800790c:	d1e1      	bne.n	80078d2 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2220      	movs	r2, #32
 8007912:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2200      	movs	r2, #0
 800791a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2200      	movs	r2, #0
 8007920:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007928:	693b      	ldr	r3, [r7, #16]
 800792a:	e853 3f00 	ldrex	r3, [r3]
 800792e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	f023 0310 	bic.w	r3, r3, #16
 8007936:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	461a      	mov	r2, r3
 8007940:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007944:	61fb      	str	r3, [r7, #28]
 8007946:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007948:	69b9      	ldr	r1, [r7, #24]
 800794a:	69fa      	ldr	r2, [r7, #28]
 800794c:	e841 2300 	strex	r3, r2, [r1]
 8007950:	617b      	str	r3, [r7, #20]
   return(result);
 8007952:	697b      	ldr	r3, [r7, #20]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d1e4      	bne.n	8007922 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2202      	movs	r2, #2
 800795c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800795e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007962:	4619      	mov	r1, r3
 8007964:	6878      	ldr	r0, [r7, #4]
 8007966:	f000 f893 	bl	8007a90 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800796a:	e063      	b.n	8007a34 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800796c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007970:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007974:	2b00      	cmp	r3, #0
 8007976:	d00e      	beq.n	8007996 <HAL_UART_IRQHandler+0x59e>
 8007978:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800797c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007980:	2b00      	cmp	r3, #0
 8007982:	d008      	beq.n	8007996 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800798c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	f001 f81e 	bl	80089d0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007994:	e051      	b.n	8007a3a <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007996:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800799a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d014      	beq.n	80079cc <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80079a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d105      	bne.n	80079ba <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80079ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80079b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d008      	beq.n	80079cc <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d03a      	beq.n	8007a38 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80079c6:	6878      	ldr	r0, [r7, #4]
 80079c8:	4798      	blx	r3
    }
    return;
 80079ca:	e035      	b.n	8007a38 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80079cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d009      	beq.n	80079ec <HAL_UART_IRQHandler+0x5f4>
 80079d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d003      	beq.n	80079ec <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 80079e4:	6878      	ldr	r0, [r7, #4]
 80079e6:	f000 ffc8 	bl	800897a <UART_EndTransmit_IT>
    return;
 80079ea:	e026      	b.n	8007a3a <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80079ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d009      	beq.n	8007a0c <HAL_UART_IRQHandler+0x614>
 80079f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079fc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d003      	beq.n	8007a0c <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007a04:	6878      	ldr	r0, [r7, #4]
 8007a06:	f000 fff7 	bl	80089f8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007a0a:	e016      	b.n	8007a3a <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007a0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d010      	beq.n	8007a3a <HAL_UART_IRQHandler+0x642>
 8007a18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	da0c      	bge.n	8007a3a <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	f000 ffdf 	bl	80089e4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007a26:	e008      	b.n	8007a3a <HAL_UART_IRQHandler+0x642>
      return;
 8007a28:	bf00      	nop
 8007a2a:	e006      	b.n	8007a3a <HAL_UART_IRQHandler+0x642>
    return;
 8007a2c:	bf00      	nop
 8007a2e:	e004      	b.n	8007a3a <HAL_UART_IRQHandler+0x642>
      return;
 8007a30:	bf00      	nop
 8007a32:	e002      	b.n	8007a3a <HAL_UART_IRQHandler+0x642>
      return;
 8007a34:	bf00      	nop
 8007a36:	e000      	b.n	8007a3a <HAL_UART_IRQHandler+0x642>
    return;
 8007a38:	bf00      	nop
  }
}
 8007a3a:	37e8      	adds	r7, #232	; 0xe8
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}

08007a40 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007a40:	b480      	push	{r7}
 8007a42:	b083      	sub	sp, #12
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007a48:	bf00      	nop
 8007a4a:	370c      	adds	r7, #12
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a52:	4770      	bx	lr

08007a54 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007a54:	b480      	push	{r7}
 8007a56:	b083      	sub	sp, #12
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8007a5c:	bf00      	nop
 8007a5e:	370c      	adds	r7, #12
 8007a60:	46bd      	mov	sp, r7
 8007a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a66:	4770      	bx	lr

08007a68 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007a68:	b480      	push	{r7}
 8007a6a:	b083      	sub	sp, #12
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8007a70:	bf00      	nop
 8007a72:	370c      	adds	r7, #12
 8007a74:	46bd      	mov	sp, r7
 8007a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7a:	4770      	bx	lr

08007a7c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007a7c:	b480      	push	{r7}
 8007a7e:	b083      	sub	sp, #12
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007a84:	bf00      	nop
 8007a86:	370c      	adds	r7, #12
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8e:	4770      	bx	lr

08007a90 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007a90:	b480      	push	{r7}
 8007a92:	b083      	sub	sp, #12
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
 8007a98:	460b      	mov	r3, r1
 8007a9a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007a9c:	bf00      	nop
 8007a9e:	370c      	adds	r7, #12
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa6:	4770      	bx	lr

08007aa8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007aa8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007aac:	b08c      	sub	sp, #48	; 0x30
 8007aae:	af00      	add	r7, sp, #0
 8007ab0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007ab8:	697b      	ldr	r3, [r7, #20]
 8007aba:	689a      	ldr	r2, [r3, #8]
 8007abc:	697b      	ldr	r3, [r7, #20]
 8007abe:	691b      	ldr	r3, [r3, #16]
 8007ac0:	431a      	orrs	r2, r3
 8007ac2:	697b      	ldr	r3, [r7, #20]
 8007ac4:	695b      	ldr	r3, [r3, #20]
 8007ac6:	431a      	orrs	r2, r3
 8007ac8:	697b      	ldr	r3, [r7, #20]
 8007aca:	69db      	ldr	r3, [r3, #28]
 8007acc:	4313      	orrs	r3, r2
 8007ace:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007ad0:	697b      	ldr	r3, [r7, #20]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	681a      	ldr	r2, [r3, #0]
 8007ad6:	4baa      	ldr	r3, [pc, #680]	; (8007d80 <UART_SetConfig+0x2d8>)
 8007ad8:	4013      	ands	r3, r2
 8007ada:	697a      	ldr	r2, [r7, #20]
 8007adc:	6812      	ldr	r2, [r2, #0]
 8007ade:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007ae0:	430b      	orrs	r3, r1
 8007ae2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ae4:	697b      	ldr	r3, [r7, #20]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	685b      	ldr	r3, [r3, #4]
 8007aea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007aee:	697b      	ldr	r3, [r7, #20]
 8007af0:	68da      	ldr	r2, [r3, #12]
 8007af2:	697b      	ldr	r3, [r7, #20]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	430a      	orrs	r2, r1
 8007af8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007afa:	697b      	ldr	r3, [r7, #20]
 8007afc:	699b      	ldr	r3, [r3, #24]
 8007afe:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007b00:	697b      	ldr	r3, [r7, #20]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	4a9f      	ldr	r2, [pc, #636]	; (8007d84 <UART_SetConfig+0x2dc>)
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d004      	beq.n	8007b14 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007b0a:	697b      	ldr	r3, [r7, #20]
 8007b0c:	6a1b      	ldr	r3, [r3, #32]
 8007b0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b10:	4313      	orrs	r3, r2
 8007b12:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007b14:	697b      	ldr	r3, [r7, #20]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	689b      	ldr	r3, [r3, #8]
 8007b1a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007b1e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007b22:	697a      	ldr	r2, [r7, #20]
 8007b24:	6812      	ldr	r2, [r2, #0]
 8007b26:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007b28:	430b      	orrs	r3, r1
 8007b2a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007b2c:	697b      	ldr	r3, [r7, #20]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b32:	f023 010f 	bic.w	r1, r3, #15
 8007b36:	697b      	ldr	r3, [r7, #20]
 8007b38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007b3a:	697b      	ldr	r3, [r7, #20]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	430a      	orrs	r2, r1
 8007b40:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007b42:	697b      	ldr	r3, [r7, #20]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	4a90      	ldr	r2, [pc, #576]	; (8007d88 <UART_SetConfig+0x2e0>)
 8007b48:	4293      	cmp	r3, r2
 8007b4a:	d125      	bne.n	8007b98 <UART_SetConfig+0xf0>
 8007b4c:	4b8f      	ldr	r3, [pc, #572]	; (8007d8c <UART_SetConfig+0x2e4>)
 8007b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b52:	f003 0303 	and.w	r3, r3, #3
 8007b56:	2b03      	cmp	r3, #3
 8007b58:	d81a      	bhi.n	8007b90 <UART_SetConfig+0xe8>
 8007b5a:	a201      	add	r2, pc, #4	; (adr r2, 8007b60 <UART_SetConfig+0xb8>)
 8007b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b60:	08007b71 	.word	0x08007b71
 8007b64:	08007b81 	.word	0x08007b81
 8007b68:	08007b79 	.word	0x08007b79
 8007b6c:	08007b89 	.word	0x08007b89
 8007b70:	2301      	movs	r3, #1
 8007b72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b76:	e116      	b.n	8007da6 <UART_SetConfig+0x2fe>
 8007b78:	2302      	movs	r3, #2
 8007b7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b7e:	e112      	b.n	8007da6 <UART_SetConfig+0x2fe>
 8007b80:	2304      	movs	r3, #4
 8007b82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b86:	e10e      	b.n	8007da6 <UART_SetConfig+0x2fe>
 8007b88:	2308      	movs	r3, #8
 8007b8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b8e:	e10a      	b.n	8007da6 <UART_SetConfig+0x2fe>
 8007b90:	2310      	movs	r3, #16
 8007b92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b96:	e106      	b.n	8007da6 <UART_SetConfig+0x2fe>
 8007b98:	697b      	ldr	r3, [r7, #20]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	4a7c      	ldr	r2, [pc, #496]	; (8007d90 <UART_SetConfig+0x2e8>)
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	d138      	bne.n	8007c14 <UART_SetConfig+0x16c>
 8007ba2:	4b7a      	ldr	r3, [pc, #488]	; (8007d8c <UART_SetConfig+0x2e4>)
 8007ba4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ba8:	f003 030c 	and.w	r3, r3, #12
 8007bac:	2b0c      	cmp	r3, #12
 8007bae:	d82d      	bhi.n	8007c0c <UART_SetConfig+0x164>
 8007bb0:	a201      	add	r2, pc, #4	; (adr r2, 8007bb8 <UART_SetConfig+0x110>)
 8007bb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bb6:	bf00      	nop
 8007bb8:	08007bed 	.word	0x08007bed
 8007bbc:	08007c0d 	.word	0x08007c0d
 8007bc0:	08007c0d 	.word	0x08007c0d
 8007bc4:	08007c0d 	.word	0x08007c0d
 8007bc8:	08007bfd 	.word	0x08007bfd
 8007bcc:	08007c0d 	.word	0x08007c0d
 8007bd0:	08007c0d 	.word	0x08007c0d
 8007bd4:	08007c0d 	.word	0x08007c0d
 8007bd8:	08007bf5 	.word	0x08007bf5
 8007bdc:	08007c0d 	.word	0x08007c0d
 8007be0:	08007c0d 	.word	0x08007c0d
 8007be4:	08007c0d 	.word	0x08007c0d
 8007be8:	08007c05 	.word	0x08007c05
 8007bec:	2300      	movs	r3, #0
 8007bee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007bf2:	e0d8      	b.n	8007da6 <UART_SetConfig+0x2fe>
 8007bf4:	2302      	movs	r3, #2
 8007bf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007bfa:	e0d4      	b.n	8007da6 <UART_SetConfig+0x2fe>
 8007bfc:	2304      	movs	r3, #4
 8007bfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c02:	e0d0      	b.n	8007da6 <UART_SetConfig+0x2fe>
 8007c04:	2308      	movs	r3, #8
 8007c06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c0a:	e0cc      	b.n	8007da6 <UART_SetConfig+0x2fe>
 8007c0c:	2310      	movs	r3, #16
 8007c0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c12:	e0c8      	b.n	8007da6 <UART_SetConfig+0x2fe>
 8007c14:	697b      	ldr	r3, [r7, #20]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	4a5e      	ldr	r2, [pc, #376]	; (8007d94 <UART_SetConfig+0x2ec>)
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	d125      	bne.n	8007c6a <UART_SetConfig+0x1c2>
 8007c1e:	4b5b      	ldr	r3, [pc, #364]	; (8007d8c <UART_SetConfig+0x2e4>)
 8007c20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c24:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007c28:	2b30      	cmp	r3, #48	; 0x30
 8007c2a:	d016      	beq.n	8007c5a <UART_SetConfig+0x1b2>
 8007c2c:	2b30      	cmp	r3, #48	; 0x30
 8007c2e:	d818      	bhi.n	8007c62 <UART_SetConfig+0x1ba>
 8007c30:	2b20      	cmp	r3, #32
 8007c32:	d00a      	beq.n	8007c4a <UART_SetConfig+0x1a2>
 8007c34:	2b20      	cmp	r3, #32
 8007c36:	d814      	bhi.n	8007c62 <UART_SetConfig+0x1ba>
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d002      	beq.n	8007c42 <UART_SetConfig+0x19a>
 8007c3c:	2b10      	cmp	r3, #16
 8007c3e:	d008      	beq.n	8007c52 <UART_SetConfig+0x1aa>
 8007c40:	e00f      	b.n	8007c62 <UART_SetConfig+0x1ba>
 8007c42:	2300      	movs	r3, #0
 8007c44:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c48:	e0ad      	b.n	8007da6 <UART_SetConfig+0x2fe>
 8007c4a:	2302      	movs	r3, #2
 8007c4c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c50:	e0a9      	b.n	8007da6 <UART_SetConfig+0x2fe>
 8007c52:	2304      	movs	r3, #4
 8007c54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c58:	e0a5      	b.n	8007da6 <UART_SetConfig+0x2fe>
 8007c5a:	2308      	movs	r3, #8
 8007c5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c60:	e0a1      	b.n	8007da6 <UART_SetConfig+0x2fe>
 8007c62:	2310      	movs	r3, #16
 8007c64:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c68:	e09d      	b.n	8007da6 <UART_SetConfig+0x2fe>
 8007c6a:	697b      	ldr	r3, [r7, #20]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	4a4a      	ldr	r2, [pc, #296]	; (8007d98 <UART_SetConfig+0x2f0>)
 8007c70:	4293      	cmp	r3, r2
 8007c72:	d125      	bne.n	8007cc0 <UART_SetConfig+0x218>
 8007c74:	4b45      	ldr	r3, [pc, #276]	; (8007d8c <UART_SetConfig+0x2e4>)
 8007c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c7a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007c7e:	2bc0      	cmp	r3, #192	; 0xc0
 8007c80:	d016      	beq.n	8007cb0 <UART_SetConfig+0x208>
 8007c82:	2bc0      	cmp	r3, #192	; 0xc0
 8007c84:	d818      	bhi.n	8007cb8 <UART_SetConfig+0x210>
 8007c86:	2b80      	cmp	r3, #128	; 0x80
 8007c88:	d00a      	beq.n	8007ca0 <UART_SetConfig+0x1f8>
 8007c8a:	2b80      	cmp	r3, #128	; 0x80
 8007c8c:	d814      	bhi.n	8007cb8 <UART_SetConfig+0x210>
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d002      	beq.n	8007c98 <UART_SetConfig+0x1f0>
 8007c92:	2b40      	cmp	r3, #64	; 0x40
 8007c94:	d008      	beq.n	8007ca8 <UART_SetConfig+0x200>
 8007c96:	e00f      	b.n	8007cb8 <UART_SetConfig+0x210>
 8007c98:	2300      	movs	r3, #0
 8007c9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c9e:	e082      	b.n	8007da6 <UART_SetConfig+0x2fe>
 8007ca0:	2302      	movs	r3, #2
 8007ca2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007ca6:	e07e      	b.n	8007da6 <UART_SetConfig+0x2fe>
 8007ca8:	2304      	movs	r3, #4
 8007caa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007cae:	e07a      	b.n	8007da6 <UART_SetConfig+0x2fe>
 8007cb0:	2308      	movs	r3, #8
 8007cb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007cb6:	e076      	b.n	8007da6 <UART_SetConfig+0x2fe>
 8007cb8:	2310      	movs	r3, #16
 8007cba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007cbe:	e072      	b.n	8007da6 <UART_SetConfig+0x2fe>
 8007cc0:	697b      	ldr	r3, [r7, #20]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	4a35      	ldr	r2, [pc, #212]	; (8007d9c <UART_SetConfig+0x2f4>)
 8007cc6:	4293      	cmp	r3, r2
 8007cc8:	d12a      	bne.n	8007d20 <UART_SetConfig+0x278>
 8007cca:	4b30      	ldr	r3, [pc, #192]	; (8007d8c <UART_SetConfig+0x2e4>)
 8007ccc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cd0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007cd4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007cd8:	d01a      	beq.n	8007d10 <UART_SetConfig+0x268>
 8007cda:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007cde:	d81b      	bhi.n	8007d18 <UART_SetConfig+0x270>
 8007ce0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ce4:	d00c      	beq.n	8007d00 <UART_SetConfig+0x258>
 8007ce6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007cea:	d815      	bhi.n	8007d18 <UART_SetConfig+0x270>
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d003      	beq.n	8007cf8 <UART_SetConfig+0x250>
 8007cf0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007cf4:	d008      	beq.n	8007d08 <UART_SetConfig+0x260>
 8007cf6:	e00f      	b.n	8007d18 <UART_SetConfig+0x270>
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007cfe:	e052      	b.n	8007da6 <UART_SetConfig+0x2fe>
 8007d00:	2302      	movs	r3, #2
 8007d02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d06:	e04e      	b.n	8007da6 <UART_SetConfig+0x2fe>
 8007d08:	2304      	movs	r3, #4
 8007d0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d0e:	e04a      	b.n	8007da6 <UART_SetConfig+0x2fe>
 8007d10:	2308      	movs	r3, #8
 8007d12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d16:	e046      	b.n	8007da6 <UART_SetConfig+0x2fe>
 8007d18:	2310      	movs	r3, #16
 8007d1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d1e:	e042      	b.n	8007da6 <UART_SetConfig+0x2fe>
 8007d20:	697b      	ldr	r3, [r7, #20]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	4a17      	ldr	r2, [pc, #92]	; (8007d84 <UART_SetConfig+0x2dc>)
 8007d26:	4293      	cmp	r3, r2
 8007d28:	d13a      	bne.n	8007da0 <UART_SetConfig+0x2f8>
 8007d2a:	4b18      	ldr	r3, [pc, #96]	; (8007d8c <UART_SetConfig+0x2e4>)
 8007d2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d30:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007d34:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007d38:	d01a      	beq.n	8007d70 <UART_SetConfig+0x2c8>
 8007d3a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007d3e:	d81b      	bhi.n	8007d78 <UART_SetConfig+0x2d0>
 8007d40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d44:	d00c      	beq.n	8007d60 <UART_SetConfig+0x2b8>
 8007d46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d4a:	d815      	bhi.n	8007d78 <UART_SetConfig+0x2d0>
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d003      	beq.n	8007d58 <UART_SetConfig+0x2b0>
 8007d50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d54:	d008      	beq.n	8007d68 <UART_SetConfig+0x2c0>
 8007d56:	e00f      	b.n	8007d78 <UART_SetConfig+0x2d0>
 8007d58:	2300      	movs	r3, #0
 8007d5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d5e:	e022      	b.n	8007da6 <UART_SetConfig+0x2fe>
 8007d60:	2302      	movs	r3, #2
 8007d62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d66:	e01e      	b.n	8007da6 <UART_SetConfig+0x2fe>
 8007d68:	2304      	movs	r3, #4
 8007d6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d6e:	e01a      	b.n	8007da6 <UART_SetConfig+0x2fe>
 8007d70:	2308      	movs	r3, #8
 8007d72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d76:	e016      	b.n	8007da6 <UART_SetConfig+0x2fe>
 8007d78:	2310      	movs	r3, #16
 8007d7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d7e:	e012      	b.n	8007da6 <UART_SetConfig+0x2fe>
 8007d80:	cfff69f3 	.word	0xcfff69f3
 8007d84:	40008000 	.word	0x40008000
 8007d88:	40013800 	.word	0x40013800
 8007d8c:	40021000 	.word	0x40021000
 8007d90:	40004400 	.word	0x40004400
 8007d94:	40004800 	.word	0x40004800
 8007d98:	40004c00 	.word	0x40004c00
 8007d9c:	40005000 	.word	0x40005000
 8007da0:	2310      	movs	r3, #16
 8007da2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007da6:	697b      	ldr	r3, [r7, #20]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	4aae      	ldr	r2, [pc, #696]	; (8008064 <UART_SetConfig+0x5bc>)
 8007dac:	4293      	cmp	r3, r2
 8007dae:	f040 8097 	bne.w	8007ee0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007db2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007db6:	2b08      	cmp	r3, #8
 8007db8:	d823      	bhi.n	8007e02 <UART_SetConfig+0x35a>
 8007dba:	a201      	add	r2, pc, #4	; (adr r2, 8007dc0 <UART_SetConfig+0x318>)
 8007dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dc0:	08007de5 	.word	0x08007de5
 8007dc4:	08007e03 	.word	0x08007e03
 8007dc8:	08007ded 	.word	0x08007ded
 8007dcc:	08007e03 	.word	0x08007e03
 8007dd0:	08007df3 	.word	0x08007df3
 8007dd4:	08007e03 	.word	0x08007e03
 8007dd8:	08007e03 	.word	0x08007e03
 8007ddc:	08007e03 	.word	0x08007e03
 8007de0:	08007dfb 	.word	0x08007dfb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007de4:	f7fd f99c 	bl	8005120 <HAL_RCC_GetPCLK1Freq>
 8007de8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007dea:	e010      	b.n	8007e0e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007dec:	4b9e      	ldr	r3, [pc, #632]	; (8008068 <UART_SetConfig+0x5c0>)
 8007dee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007df0:	e00d      	b.n	8007e0e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007df2:	f7fd f927 	bl	8005044 <HAL_RCC_GetSysClockFreq>
 8007df6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007df8:	e009      	b.n	8007e0e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007dfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007dfe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007e00:	e005      	b.n	8007e0e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8007e02:	2300      	movs	r3, #0
 8007e04:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007e06:	2301      	movs	r3, #1
 8007e08:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007e0c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	f000 8130 	beq.w	8008076 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007e16:	697b      	ldr	r3, [r7, #20]
 8007e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e1a:	4a94      	ldr	r2, [pc, #592]	; (800806c <UART_SetConfig+0x5c4>)
 8007e1c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e20:	461a      	mov	r2, r3
 8007e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e24:	fbb3 f3f2 	udiv	r3, r3, r2
 8007e28:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007e2a:	697b      	ldr	r3, [r7, #20]
 8007e2c:	685a      	ldr	r2, [r3, #4]
 8007e2e:	4613      	mov	r3, r2
 8007e30:	005b      	lsls	r3, r3, #1
 8007e32:	4413      	add	r3, r2
 8007e34:	69ba      	ldr	r2, [r7, #24]
 8007e36:	429a      	cmp	r2, r3
 8007e38:	d305      	bcc.n	8007e46 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007e3a:	697b      	ldr	r3, [r7, #20]
 8007e3c:	685b      	ldr	r3, [r3, #4]
 8007e3e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007e40:	69ba      	ldr	r2, [r7, #24]
 8007e42:	429a      	cmp	r2, r3
 8007e44:	d903      	bls.n	8007e4e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8007e46:	2301      	movs	r3, #1
 8007e48:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007e4c:	e113      	b.n	8008076 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e50:	2200      	movs	r2, #0
 8007e52:	60bb      	str	r3, [r7, #8]
 8007e54:	60fa      	str	r2, [r7, #12]
 8007e56:	697b      	ldr	r3, [r7, #20]
 8007e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e5a:	4a84      	ldr	r2, [pc, #528]	; (800806c <UART_SetConfig+0x5c4>)
 8007e5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e60:	b29b      	uxth	r3, r3
 8007e62:	2200      	movs	r2, #0
 8007e64:	603b      	str	r3, [r7, #0]
 8007e66:	607a      	str	r2, [r7, #4]
 8007e68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e6c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007e70:	f7f8 f9d2 	bl	8000218 <__aeabi_uldivmod>
 8007e74:	4602      	mov	r2, r0
 8007e76:	460b      	mov	r3, r1
 8007e78:	4610      	mov	r0, r2
 8007e7a:	4619      	mov	r1, r3
 8007e7c:	f04f 0200 	mov.w	r2, #0
 8007e80:	f04f 0300 	mov.w	r3, #0
 8007e84:	020b      	lsls	r3, r1, #8
 8007e86:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007e8a:	0202      	lsls	r2, r0, #8
 8007e8c:	6979      	ldr	r1, [r7, #20]
 8007e8e:	6849      	ldr	r1, [r1, #4]
 8007e90:	0849      	lsrs	r1, r1, #1
 8007e92:	2000      	movs	r0, #0
 8007e94:	460c      	mov	r4, r1
 8007e96:	4605      	mov	r5, r0
 8007e98:	eb12 0804 	adds.w	r8, r2, r4
 8007e9c:	eb43 0905 	adc.w	r9, r3, r5
 8007ea0:	697b      	ldr	r3, [r7, #20]
 8007ea2:	685b      	ldr	r3, [r3, #4]
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	469a      	mov	sl, r3
 8007ea8:	4693      	mov	fp, r2
 8007eaa:	4652      	mov	r2, sl
 8007eac:	465b      	mov	r3, fp
 8007eae:	4640      	mov	r0, r8
 8007eb0:	4649      	mov	r1, r9
 8007eb2:	f7f8 f9b1 	bl	8000218 <__aeabi_uldivmod>
 8007eb6:	4602      	mov	r2, r0
 8007eb8:	460b      	mov	r3, r1
 8007eba:	4613      	mov	r3, r2
 8007ebc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007ebe:	6a3b      	ldr	r3, [r7, #32]
 8007ec0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ec4:	d308      	bcc.n	8007ed8 <UART_SetConfig+0x430>
 8007ec6:	6a3b      	ldr	r3, [r7, #32]
 8007ec8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007ecc:	d204      	bcs.n	8007ed8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8007ece:	697b      	ldr	r3, [r7, #20]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	6a3a      	ldr	r2, [r7, #32]
 8007ed4:	60da      	str	r2, [r3, #12]
 8007ed6:	e0ce      	b.n	8008076 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007ed8:	2301      	movs	r3, #1
 8007eda:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007ede:	e0ca      	b.n	8008076 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007ee0:	697b      	ldr	r3, [r7, #20]
 8007ee2:	69db      	ldr	r3, [r3, #28]
 8007ee4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ee8:	d166      	bne.n	8007fb8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8007eea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007eee:	2b08      	cmp	r3, #8
 8007ef0:	d827      	bhi.n	8007f42 <UART_SetConfig+0x49a>
 8007ef2:	a201      	add	r2, pc, #4	; (adr r2, 8007ef8 <UART_SetConfig+0x450>)
 8007ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ef8:	08007f1d 	.word	0x08007f1d
 8007efc:	08007f25 	.word	0x08007f25
 8007f00:	08007f2d 	.word	0x08007f2d
 8007f04:	08007f43 	.word	0x08007f43
 8007f08:	08007f33 	.word	0x08007f33
 8007f0c:	08007f43 	.word	0x08007f43
 8007f10:	08007f43 	.word	0x08007f43
 8007f14:	08007f43 	.word	0x08007f43
 8007f18:	08007f3b 	.word	0x08007f3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007f1c:	f7fd f900 	bl	8005120 <HAL_RCC_GetPCLK1Freq>
 8007f20:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007f22:	e014      	b.n	8007f4e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007f24:	f7fd f912 	bl	800514c <HAL_RCC_GetPCLK2Freq>
 8007f28:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007f2a:	e010      	b.n	8007f4e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007f2c:	4b4e      	ldr	r3, [pc, #312]	; (8008068 <UART_SetConfig+0x5c0>)
 8007f2e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007f30:	e00d      	b.n	8007f4e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007f32:	f7fd f887 	bl	8005044 <HAL_RCC_GetSysClockFreq>
 8007f36:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007f38:	e009      	b.n	8007f4e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f3e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007f40:	e005      	b.n	8007f4e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8007f42:	2300      	movs	r3, #0
 8007f44:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007f46:	2301      	movs	r3, #1
 8007f48:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007f4c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	f000 8090 	beq.w	8008076 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007f56:	697b      	ldr	r3, [r7, #20]
 8007f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f5a:	4a44      	ldr	r2, [pc, #272]	; (800806c <UART_SetConfig+0x5c4>)
 8007f5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f60:	461a      	mov	r2, r3
 8007f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f64:	fbb3 f3f2 	udiv	r3, r3, r2
 8007f68:	005a      	lsls	r2, r3, #1
 8007f6a:	697b      	ldr	r3, [r7, #20]
 8007f6c:	685b      	ldr	r3, [r3, #4]
 8007f6e:	085b      	lsrs	r3, r3, #1
 8007f70:	441a      	add	r2, r3
 8007f72:	697b      	ldr	r3, [r7, #20]
 8007f74:	685b      	ldr	r3, [r3, #4]
 8007f76:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f7a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007f7c:	6a3b      	ldr	r3, [r7, #32]
 8007f7e:	2b0f      	cmp	r3, #15
 8007f80:	d916      	bls.n	8007fb0 <UART_SetConfig+0x508>
 8007f82:	6a3b      	ldr	r3, [r7, #32]
 8007f84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f88:	d212      	bcs.n	8007fb0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007f8a:	6a3b      	ldr	r3, [r7, #32]
 8007f8c:	b29b      	uxth	r3, r3
 8007f8e:	f023 030f 	bic.w	r3, r3, #15
 8007f92:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007f94:	6a3b      	ldr	r3, [r7, #32]
 8007f96:	085b      	lsrs	r3, r3, #1
 8007f98:	b29b      	uxth	r3, r3
 8007f9a:	f003 0307 	and.w	r3, r3, #7
 8007f9e:	b29a      	uxth	r2, r3
 8007fa0:	8bfb      	ldrh	r3, [r7, #30]
 8007fa2:	4313      	orrs	r3, r2
 8007fa4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007fa6:	697b      	ldr	r3, [r7, #20]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	8bfa      	ldrh	r2, [r7, #30]
 8007fac:	60da      	str	r2, [r3, #12]
 8007fae:	e062      	b.n	8008076 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007fb0:	2301      	movs	r3, #1
 8007fb2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007fb6:	e05e      	b.n	8008076 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007fb8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007fbc:	2b08      	cmp	r3, #8
 8007fbe:	d828      	bhi.n	8008012 <UART_SetConfig+0x56a>
 8007fc0:	a201      	add	r2, pc, #4	; (adr r2, 8007fc8 <UART_SetConfig+0x520>)
 8007fc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fc6:	bf00      	nop
 8007fc8:	08007fed 	.word	0x08007fed
 8007fcc:	08007ff5 	.word	0x08007ff5
 8007fd0:	08007ffd 	.word	0x08007ffd
 8007fd4:	08008013 	.word	0x08008013
 8007fd8:	08008003 	.word	0x08008003
 8007fdc:	08008013 	.word	0x08008013
 8007fe0:	08008013 	.word	0x08008013
 8007fe4:	08008013 	.word	0x08008013
 8007fe8:	0800800b 	.word	0x0800800b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007fec:	f7fd f898 	bl	8005120 <HAL_RCC_GetPCLK1Freq>
 8007ff0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007ff2:	e014      	b.n	800801e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007ff4:	f7fd f8aa 	bl	800514c <HAL_RCC_GetPCLK2Freq>
 8007ff8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007ffa:	e010      	b.n	800801e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007ffc:	4b1a      	ldr	r3, [pc, #104]	; (8008068 <UART_SetConfig+0x5c0>)
 8007ffe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008000:	e00d      	b.n	800801e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008002:	f7fd f81f 	bl	8005044 <HAL_RCC_GetSysClockFreq>
 8008006:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008008:	e009      	b.n	800801e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800800a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800800e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008010:	e005      	b.n	800801e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8008012:	2300      	movs	r3, #0
 8008014:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008016:	2301      	movs	r3, #1
 8008018:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800801c:	bf00      	nop
    }

    if (pclk != 0U)
 800801e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008020:	2b00      	cmp	r3, #0
 8008022:	d028      	beq.n	8008076 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008024:	697b      	ldr	r3, [r7, #20]
 8008026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008028:	4a10      	ldr	r2, [pc, #64]	; (800806c <UART_SetConfig+0x5c4>)
 800802a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800802e:	461a      	mov	r2, r3
 8008030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008032:	fbb3 f2f2 	udiv	r2, r3, r2
 8008036:	697b      	ldr	r3, [r7, #20]
 8008038:	685b      	ldr	r3, [r3, #4]
 800803a:	085b      	lsrs	r3, r3, #1
 800803c:	441a      	add	r2, r3
 800803e:	697b      	ldr	r3, [r7, #20]
 8008040:	685b      	ldr	r3, [r3, #4]
 8008042:	fbb2 f3f3 	udiv	r3, r2, r3
 8008046:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008048:	6a3b      	ldr	r3, [r7, #32]
 800804a:	2b0f      	cmp	r3, #15
 800804c:	d910      	bls.n	8008070 <UART_SetConfig+0x5c8>
 800804e:	6a3b      	ldr	r3, [r7, #32]
 8008050:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008054:	d20c      	bcs.n	8008070 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008056:	6a3b      	ldr	r3, [r7, #32]
 8008058:	b29a      	uxth	r2, r3
 800805a:	697b      	ldr	r3, [r7, #20]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	60da      	str	r2, [r3, #12]
 8008060:	e009      	b.n	8008076 <UART_SetConfig+0x5ce>
 8008062:	bf00      	nop
 8008064:	40008000 	.word	0x40008000
 8008068:	00f42400 	.word	0x00f42400
 800806c:	08008c9c 	.word	0x08008c9c
      }
      else
      {
        ret = HAL_ERROR;
 8008070:	2301      	movs	r3, #1
 8008072:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008076:	697b      	ldr	r3, [r7, #20]
 8008078:	2201      	movs	r2, #1
 800807a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800807e:	697b      	ldr	r3, [r7, #20]
 8008080:	2201      	movs	r2, #1
 8008082:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008086:	697b      	ldr	r3, [r7, #20]
 8008088:	2200      	movs	r2, #0
 800808a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800808c:	697b      	ldr	r3, [r7, #20]
 800808e:	2200      	movs	r2, #0
 8008090:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8008092:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8008096:	4618      	mov	r0, r3
 8008098:	3730      	adds	r7, #48	; 0x30
 800809a:	46bd      	mov	sp, r7
 800809c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080080a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80080a0:	b480      	push	{r7}
 80080a2:	b083      	sub	sp, #12
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080ac:	f003 0308 	and.w	r3, r3, #8
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d00a      	beq.n	80080ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	685b      	ldr	r3, [r3, #4]
 80080ba:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	430a      	orrs	r2, r1
 80080c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080ce:	f003 0301 	and.w	r3, r3, #1
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d00a      	beq.n	80080ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	685b      	ldr	r3, [r3, #4]
 80080dc:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	430a      	orrs	r2, r1
 80080ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080f0:	f003 0302 	and.w	r3, r3, #2
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d00a      	beq.n	800810e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	685b      	ldr	r3, [r3, #4]
 80080fe:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	430a      	orrs	r2, r1
 800810c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008112:	f003 0304 	and.w	r3, r3, #4
 8008116:	2b00      	cmp	r3, #0
 8008118:	d00a      	beq.n	8008130 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	685b      	ldr	r3, [r3, #4]
 8008120:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	430a      	orrs	r2, r1
 800812e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008134:	f003 0310 	and.w	r3, r3, #16
 8008138:	2b00      	cmp	r3, #0
 800813a:	d00a      	beq.n	8008152 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	689b      	ldr	r3, [r3, #8]
 8008142:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	430a      	orrs	r2, r1
 8008150:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008156:	f003 0320 	and.w	r3, r3, #32
 800815a:	2b00      	cmp	r3, #0
 800815c:	d00a      	beq.n	8008174 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	689b      	ldr	r3, [r3, #8]
 8008164:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	430a      	orrs	r2, r1
 8008172:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008178:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800817c:	2b00      	cmp	r3, #0
 800817e:	d01a      	beq.n	80081b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	685b      	ldr	r3, [r3, #4]
 8008186:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	430a      	orrs	r2, r1
 8008194:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800819a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800819e:	d10a      	bne.n	80081b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	685b      	ldr	r3, [r3, #4]
 80081a6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	430a      	orrs	r2, r1
 80081b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d00a      	beq.n	80081d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	685b      	ldr	r3, [r3, #4]
 80081c8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	430a      	orrs	r2, r1
 80081d6:	605a      	str	r2, [r3, #4]
  }
}
 80081d8:	bf00      	nop
 80081da:	370c      	adds	r7, #12
 80081dc:	46bd      	mov	sp, r7
 80081de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e2:	4770      	bx	lr

080081e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b098      	sub	sp, #96	; 0x60
 80081e8:	af02      	add	r7, sp, #8
 80081ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2200      	movs	r2, #0
 80081f0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80081f4:	f7f9 fde8 	bl	8001dc8 <HAL_GetTick>
 80081f8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	f003 0308 	and.w	r3, r3, #8
 8008204:	2b08      	cmp	r3, #8
 8008206:	d12f      	bne.n	8008268 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008208:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800820c:	9300      	str	r3, [sp, #0]
 800820e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008210:	2200      	movs	r2, #0
 8008212:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	f000 f88e 	bl	8008338 <UART_WaitOnFlagUntilTimeout>
 800821c:	4603      	mov	r3, r0
 800821e:	2b00      	cmp	r3, #0
 8008220:	d022      	beq.n	8008268 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800822a:	e853 3f00 	ldrex	r3, [r3]
 800822e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008230:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008232:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008236:	653b      	str	r3, [r7, #80]	; 0x50
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	461a      	mov	r2, r3
 800823e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008240:	647b      	str	r3, [r7, #68]	; 0x44
 8008242:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008244:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008246:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008248:	e841 2300 	strex	r3, r2, [r1]
 800824c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800824e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008250:	2b00      	cmp	r3, #0
 8008252:	d1e6      	bne.n	8008222 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2220      	movs	r2, #32
 8008258:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2200      	movs	r2, #0
 8008260:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008264:	2303      	movs	r3, #3
 8008266:	e063      	b.n	8008330 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	f003 0304 	and.w	r3, r3, #4
 8008272:	2b04      	cmp	r3, #4
 8008274:	d149      	bne.n	800830a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008276:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800827a:	9300      	str	r3, [sp, #0]
 800827c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800827e:	2200      	movs	r2, #0
 8008280:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008284:	6878      	ldr	r0, [r7, #4]
 8008286:	f000 f857 	bl	8008338 <UART_WaitOnFlagUntilTimeout>
 800828a:	4603      	mov	r3, r0
 800828c:	2b00      	cmp	r3, #0
 800828e:	d03c      	beq.n	800830a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008298:	e853 3f00 	ldrex	r3, [r3]
 800829c:	623b      	str	r3, [r7, #32]
   return(result);
 800829e:	6a3b      	ldr	r3, [r7, #32]
 80082a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80082a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	461a      	mov	r2, r3
 80082ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082ae:	633b      	str	r3, [r7, #48]	; 0x30
 80082b0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80082b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80082b6:	e841 2300 	strex	r3, r2, [r1]
 80082ba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80082bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d1e6      	bne.n	8008290 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	3308      	adds	r3, #8
 80082c8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082ca:	693b      	ldr	r3, [r7, #16]
 80082cc:	e853 3f00 	ldrex	r3, [r3]
 80082d0:	60fb      	str	r3, [r7, #12]
   return(result);
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	f023 0301 	bic.w	r3, r3, #1
 80082d8:	64bb      	str	r3, [r7, #72]	; 0x48
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	3308      	adds	r3, #8
 80082e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80082e2:	61fa      	str	r2, [r7, #28]
 80082e4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082e6:	69b9      	ldr	r1, [r7, #24]
 80082e8:	69fa      	ldr	r2, [r7, #28]
 80082ea:	e841 2300 	strex	r3, r2, [r1]
 80082ee:	617b      	str	r3, [r7, #20]
   return(result);
 80082f0:	697b      	ldr	r3, [r7, #20]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d1e5      	bne.n	80082c2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2220      	movs	r2, #32
 80082fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2200      	movs	r2, #0
 8008302:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008306:	2303      	movs	r3, #3
 8008308:	e012      	b.n	8008330 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2220      	movs	r2, #32
 800830e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	2220      	movs	r2, #32
 8008316:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	2200      	movs	r2, #0
 800831e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2200      	movs	r2, #0
 8008324:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2200      	movs	r2, #0
 800832a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800832e:	2300      	movs	r3, #0
}
 8008330:	4618      	mov	r0, r3
 8008332:	3758      	adds	r7, #88	; 0x58
 8008334:	46bd      	mov	sp, r7
 8008336:	bd80      	pop	{r7, pc}

08008338 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b084      	sub	sp, #16
 800833c:	af00      	add	r7, sp, #0
 800833e:	60f8      	str	r0, [r7, #12]
 8008340:	60b9      	str	r1, [r7, #8]
 8008342:	603b      	str	r3, [r7, #0]
 8008344:	4613      	mov	r3, r2
 8008346:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008348:	e04f      	b.n	80083ea <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800834a:	69bb      	ldr	r3, [r7, #24]
 800834c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008350:	d04b      	beq.n	80083ea <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008352:	f7f9 fd39 	bl	8001dc8 <HAL_GetTick>
 8008356:	4602      	mov	r2, r0
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	1ad3      	subs	r3, r2, r3
 800835c:	69ba      	ldr	r2, [r7, #24]
 800835e:	429a      	cmp	r2, r3
 8008360:	d302      	bcc.n	8008368 <UART_WaitOnFlagUntilTimeout+0x30>
 8008362:	69bb      	ldr	r3, [r7, #24]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d101      	bne.n	800836c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008368:	2303      	movs	r3, #3
 800836a:	e04e      	b.n	800840a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	f003 0304 	and.w	r3, r3, #4
 8008376:	2b00      	cmp	r3, #0
 8008378:	d037      	beq.n	80083ea <UART_WaitOnFlagUntilTimeout+0xb2>
 800837a:	68bb      	ldr	r3, [r7, #8]
 800837c:	2b80      	cmp	r3, #128	; 0x80
 800837e:	d034      	beq.n	80083ea <UART_WaitOnFlagUntilTimeout+0xb2>
 8008380:	68bb      	ldr	r3, [r7, #8]
 8008382:	2b40      	cmp	r3, #64	; 0x40
 8008384:	d031      	beq.n	80083ea <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	69db      	ldr	r3, [r3, #28]
 800838c:	f003 0308 	and.w	r3, r3, #8
 8008390:	2b08      	cmp	r3, #8
 8008392:	d110      	bne.n	80083b6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	2208      	movs	r2, #8
 800839a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800839c:	68f8      	ldr	r0, [r7, #12]
 800839e:	f000 f920 	bl	80085e2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	2208      	movs	r2, #8
 80083a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	2200      	movs	r2, #0
 80083ae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80083b2:	2301      	movs	r3, #1
 80083b4:	e029      	b.n	800840a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	69db      	ldr	r3, [r3, #28]
 80083bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80083c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80083c4:	d111      	bne.n	80083ea <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80083ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80083d0:	68f8      	ldr	r0, [r7, #12]
 80083d2:	f000 f906 	bl	80085e2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	2220      	movs	r2, #32
 80083da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	2200      	movs	r2, #0
 80083e2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80083e6:	2303      	movs	r3, #3
 80083e8:	e00f      	b.n	800840a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	69da      	ldr	r2, [r3, #28]
 80083f0:	68bb      	ldr	r3, [r7, #8]
 80083f2:	4013      	ands	r3, r2
 80083f4:	68ba      	ldr	r2, [r7, #8]
 80083f6:	429a      	cmp	r2, r3
 80083f8:	bf0c      	ite	eq
 80083fa:	2301      	moveq	r3, #1
 80083fc:	2300      	movne	r3, #0
 80083fe:	b2db      	uxtb	r3, r3
 8008400:	461a      	mov	r2, r3
 8008402:	79fb      	ldrb	r3, [r7, #7]
 8008404:	429a      	cmp	r2, r3
 8008406:	d0a0      	beq.n	800834a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008408:	2300      	movs	r3, #0
}
 800840a:	4618      	mov	r0, r3
 800840c:	3710      	adds	r7, #16
 800840e:	46bd      	mov	sp, r7
 8008410:	bd80      	pop	{r7, pc}
	...

08008414 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b096      	sub	sp, #88	; 0x58
 8008418:	af00      	add	r7, sp, #0
 800841a:	60f8      	str	r0, [r7, #12]
 800841c:	60b9      	str	r1, [r7, #8]
 800841e:	4613      	mov	r3, r2
 8008420:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	68ba      	ldr	r2, [r7, #8]
 8008426:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	88fa      	ldrh	r2, [r7, #6]
 800842c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	2200      	movs	r2, #0
 8008434:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	2222      	movs	r2, #34	; 0x22
 800843c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008446:	2b00      	cmp	r3, #0
 8008448:	d02d      	beq.n	80084a6 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008450:	4a40      	ldr	r2, [pc, #256]	; (8008554 <UART_Start_Receive_DMA+0x140>)
 8008452:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800845a:	4a3f      	ldr	r2, [pc, #252]	; (8008558 <UART_Start_Receive_DMA+0x144>)
 800845c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008464:	4a3d      	ldr	r2, [pc, #244]	; (800855c <UART_Start_Receive_DMA+0x148>)
 8008466:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800846e:	2200      	movs	r2, #0
 8008470:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	3324      	adds	r3, #36	; 0x24
 800847e:	4619      	mov	r1, r3
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008484:	461a      	mov	r2, r3
 8008486:	88fb      	ldrh	r3, [r7, #6]
 8008488:	f7fb fc84 	bl	8003d94 <HAL_DMA_Start_IT>
 800848c:	4603      	mov	r3, r0
 800848e:	2b00      	cmp	r3, #0
 8008490:	d009      	beq.n	80084a6 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	2210      	movs	r2, #16
 8008496:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	2220      	movs	r2, #32
 800849e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 80084a2:	2301      	movs	r3, #1
 80084a4:	e051      	b.n	800854a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	691b      	ldr	r3, [r3, #16]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d018      	beq.n	80084e0 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084b6:	e853 3f00 	ldrex	r3, [r3]
 80084ba:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80084bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80084c2:	657b      	str	r3, [r7, #84]	; 0x54
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	461a      	mov	r2, r3
 80084ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80084cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80084ce:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084d0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80084d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80084d4:	e841 2300 	strex	r3, r2, [r1]
 80084d8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80084da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d1e6      	bne.n	80084ae <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	3308      	adds	r3, #8
 80084e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084ea:	e853 3f00 	ldrex	r3, [r3]
 80084ee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80084f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084f2:	f043 0301 	orr.w	r3, r3, #1
 80084f6:	653b      	str	r3, [r7, #80]	; 0x50
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	3308      	adds	r3, #8
 80084fe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008500:	637a      	str	r2, [r7, #52]	; 0x34
 8008502:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008504:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008506:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008508:	e841 2300 	strex	r3, r2, [r1]
 800850c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800850e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008510:	2b00      	cmp	r3, #0
 8008512:	d1e5      	bne.n	80084e0 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	3308      	adds	r3, #8
 800851a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800851c:	697b      	ldr	r3, [r7, #20]
 800851e:	e853 3f00 	ldrex	r3, [r3]
 8008522:	613b      	str	r3, [r7, #16]
   return(result);
 8008524:	693b      	ldr	r3, [r7, #16]
 8008526:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800852a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	3308      	adds	r3, #8
 8008532:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008534:	623a      	str	r2, [r7, #32]
 8008536:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008538:	69f9      	ldr	r1, [r7, #28]
 800853a:	6a3a      	ldr	r2, [r7, #32]
 800853c:	e841 2300 	strex	r3, r2, [r1]
 8008540:	61bb      	str	r3, [r7, #24]
   return(result);
 8008542:	69bb      	ldr	r3, [r7, #24]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d1e5      	bne.n	8008514 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8008548:	2300      	movs	r3, #0
}
 800854a:	4618      	mov	r0, r3
 800854c:	3758      	adds	r7, #88	; 0x58
 800854e:	46bd      	mov	sp, r7
 8008550:	bd80      	pop	{r7, pc}
 8008552:	bf00      	nop
 8008554:	08008765 	.word	0x08008765
 8008558:	08008891 	.word	0x08008891
 800855c:	080088cf 	.word	0x080088cf

08008560 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008560:	b480      	push	{r7}
 8008562:	b08f      	sub	sp, #60	; 0x3c
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800856e:	6a3b      	ldr	r3, [r7, #32]
 8008570:	e853 3f00 	ldrex	r3, [r3]
 8008574:	61fb      	str	r3, [r7, #28]
   return(result);
 8008576:	69fb      	ldr	r3, [r7, #28]
 8008578:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800857c:	637b      	str	r3, [r7, #52]	; 0x34
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	461a      	mov	r2, r3
 8008584:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008586:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008588:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800858a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800858c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800858e:	e841 2300 	strex	r3, r2, [r1]
 8008592:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008596:	2b00      	cmp	r3, #0
 8008598:	d1e6      	bne.n	8008568 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	3308      	adds	r3, #8
 80085a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	e853 3f00 	ldrex	r3, [r3]
 80085a8:	60bb      	str	r3, [r7, #8]
   return(result);
 80085aa:	68bb      	ldr	r3, [r7, #8]
 80085ac:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80085b0:	633b      	str	r3, [r7, #48]	; 0x30
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	3308      	adds	r3, #8
 80085b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085ba:	61ba      	str	r2, [r7, #24]
 80085bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085be:	6979      	ldr	r1, [r7, #20]
 80085c0:	69ba      	ldr	r2, [r7, #24]
 80085c2:	e841 2300 	strex	r3, r2, [r1]
 80085c6:	613b      	str	r3, [r7, #16]
   return(result);
 80085c8:	693b      	ldr	r3, [r7, #16]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d1e5      	bne.n	800859a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	2220      	movs	r2, #32
 80085d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 80085d6:	bf00      	nop
 80085d8:	373c      	adds	r7, #60	; 0x3c
 80085da:	46bd      	mov	sp, r7
 80085dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e0:	4770      	bx	lr

080085e2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80085e2:	b480      	push	{r7}
 80085e4:	b095      	sub	sp, #84	; 0x54
 80085e6:	af00      	add	r7, sp, #0
 80085e8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085f2:	e853 3f00 	ldrex	r3, [r3]
 80085f6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80085f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085fa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80085fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	461a      	mov	r2, r3
 8008606:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008608:	643b      	str	r3, [r7, #64]	; 0x40
 800860a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800860c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800860e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008610:	e841 2300 	strex	r3, r2, [r1]
 8008614:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008618:	2b00      	cmp	r3, #0
 800861a:	d1e6      	bne.n	80085ea <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	3308      	adds	r3, #8
 8008622:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008624:	6a3b      	ldr	r3, [r7, #32]
 8008626:	e853 3f00 	ldrex	r3, [r3]
 800862a:	61fb      	str	r3, [r7, #28]
   return(result);
 800862c:	69fb      	ldr	r3, [r7, #28]
 800862e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008632:	f023 0301 	bic.w	r3, r3, #1
 8008636:	64bb      	str	r3, [r7, #72]	; 0x48
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	3308      	adds	r3, #8
 800863e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008640:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008642:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008644:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008646:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008648:	e841 2300 	strex	r3, r2, [r1]
 800864c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800864e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008650:	2b00      	cmp	r3, #0
 8008652:	d1e3      	bne.n	800861c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008658:	2b01      	cmp	r3, #1
 800865a:	d118      	bne.n	800868e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	e853 3f00 	ldrex	r3, [r3]
 8008668:	60bb      	str	r3, [r7, #8]
   return(result);
 800866a:	68bb      	ldr	r3, [r7, #8]
 800866c:	f023 0310 	bic.w	r3, r3, #16
 8008670:	647b      	str	r3, [r7, #68]	; 0x44
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	461a      	mov	r2, r3
 8008678:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800867a:	61bb      	str	r3, [r7, #24]
 800867c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800867e:	6979      	ldr	r1, [r7, #20]
 8008680:	69ba      	ldr	r2, [r7, #24]
 8008682:	e841 2300 	strex	r3, r2, [r1]
 8008686:	613b      	str	r3, [r7, #16]
   return(result);
 8008688:	693b      	ldr	r3, [r7, #16]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d1e6      	bne.n	800865c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	2220      	movs	r2, #32
 8008692:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2200      	movs	r2, #0
 800869a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2200      	movs	r2, #0
 80086a0:	675a      	str	r2, [r3, #116]	; 0x74
}
 80086a2:	bf00      	nop
 80086a4:	3754      	adds	r7, #84	; 0x54
 80086a6:	46bd      	mov	sp, r7
 80086a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ac:	4770      	bx	lr

080086ae <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80086ae:	b580      	push	{r7, lr}
 80086b0:	b090      	sub	sp, #64	; 0x40
 80086b2:	af00      	add	r7, sp, #0
 80086b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086ba:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	f003 0320 	and.w	r3, r3, #32
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d137      	bne.n	800873a <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 80086ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086cc:	2200      	movs	r2, #0
 80086ce:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80086d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	3308      	adds	r3, #8
 80086d8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086dc:	e853 3f00 	ldrex	r3, [r3]
 80086e0:	623b      	str	r3, [r7, #32]
   return(result);
 80086e2:	6a3b      	ldr	r3, [r7, #32]
 80086e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80086e8:	63bb      	str	r3, [r7, #56]	; 0x38
 80086ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	3308      	adds	r3, #8
 80086f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80086f2:	633a      	str	r2, [r7, #48]	; 0x30
 80086f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80086f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086fa:	e841 2300 	strex	r3, r2, [r1]
 80086fe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008702:	2b00      	cmp	r3, #0
 8008704:	d1e5      	bne.n	80086d2 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008706:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800870c:	693b      	ldr	r3, [r7, #16]
 800870e:	e853 3f00 	ldrex	r3, [r3]
 8008712:	60fb      	str	r3, [r7, #12]
   return(result);
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800871a:	637b      	str	r3, [r7, #52]	; 0x34
 800871c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	461a      	mov	r2, r3
 8008722:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008724:	61fb      	str	r3, [r7, #28]
 8008726:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008728:	69b9      	ldr	r1, [r7, #24]
 800872a:	69fa      	ldr	r2, [r7, #28]
 800872c:	e841 2300 	strex	r3, r2, [r1]
 8008730:	617b      	str	r3, [r7, #20]
   return(result);
 8008732:	697b      	ldr	r3, [r7, #20]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d1e6      	bne.n	8008706 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008738:	e002      	b.n	8008740 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800873a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800873c:	f7ff f980 	bl	8007a40 <HAL_UART_TxCpltCallback>
}
 8008740:	bf00      	nop
 8008742:	3740      	adds	r7, #64	; 0x40
 8008744:	46bd      	mov	sp, r7
 8008746:	bd80      	pop	{r7, pc}

08008748 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008748:	b580      	push	{r7, lr}
 800874a:	b084      	sub	sp, #16
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008754:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008756:	68f8      	ldr	r0, [r7, #12]
 8008758:	f7ff f97c 	bl	8007a54 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800875c:	bf00      	nop
 800875e:	3710      	adds	r7, #16
 8008760:	46bd      	mov	sp, r7
 8008762:	bd80      	pop	{r7, pc}

08008764 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b09c      	sub	sp, #112	; 0x70
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008770:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	f003 0320 	and.w	r3, r3, #32
 800877c:	2b00      	cmp	r3, #0
 800877e:	d171      	bne.n	8008864 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8008780:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008782:	2200      	movs	r2, #0
 8008784:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008788:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800878e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008790:	e853 3f00 	ldrex	r3, [r3]
 8008794:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008796:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008798:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800879c:	66bb      	str	r3, [r7, #104]	; 0x68
 800879e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	461a      	mov	r2, r3
 80087a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80087a6:	65bb      	str	r3, [r7, #88]	; 0x58
 80087a8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087aa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80087ac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80087ae:	e841 2300 	strex	r3, r2, [r1]
 80087b2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80087b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d1e6      	bne.n	8008788 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	3308      	adds	r3, #8
 80087c0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087c4:	e853 3f00 	ldrex	r3, [r3]
 80087c8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80087ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087cc:	f023 0301 	bic.w	r3, r3, #1
 80087d0:	667b      	str	r3, [r7, #100]	; 0x64
 80087d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	3308      	adds	r3, #8
 80087d8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80087da:	647a      	str	r2, [r7, #68]	; 0x44
 80087dc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087de:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80087e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80087e2:	e841 2300 	strex	r3, r2, [r1]
 80087e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80087e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d1e5      	bne.n	80087ba <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80087ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	3308      	adds	r3, #8
 80087f4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087f8:	e853 3f00 	ldrex	r3, [r3]
 80087fc:	623b      	str	r3, [r7, #32]
   return(result);
 80087fe:	6a3b      	ldr	r3, [r7, #32]
 8008800:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008804:	663b      	str	r3, [r7, #96]	; 0x60
 8008806:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	3308      	adds	r3, #8
 800880c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800880e:	633a      	str	r2, [r7, #48]	; 0x30
 8008810:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008812:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008814:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008816:	e841 2300 	strex	r3, r2, [r1]
 800881a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800881c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800881e:	2b00      	cmp	r3, #0
 8008820:	d1e5      	bne.n	80087ee <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008822:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008824:	2220      	movs	r2, #32
 8008826:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800882a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800882c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800882e:	2b01      	cmp	r3, #1
 8008830:	d118      	bne.n	8008864 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008832:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008838:	693b      	ldr	r3, [r7, #16]
 800883a:	e853 3f00 	ldrex	r3, [r3]
 800883e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	f023 0310 	bic.w	r3, r3, #16
 8008846:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008848:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	461a      	mov	r2, r3
 800884e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008850:	61fb      	str	r3, [r7, #28]
 8008852:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008854:	69b9      	ldr	r1, [r7, #24]
 8008856:	69fa      	ldr	r2, [r7, #28]
 8008858:	e841 2300 	strex	r3, r2, [r1]
 800885c:	617b      	str	r3, [r7, #20]
   return(result);
 800885e:	697b      	ldr	r3, [r7, #20]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d1e6      	bne.n	8008832 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008864:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008866:	2200      	movs	r2, #0
 8008868:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800886a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800886c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800886e:	2b01      	cmp	r3, #1
 8008870:	d107      	bne.n	8008882 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008872:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008874:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008878:	4619      	mov	r1, r3
 800887a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800887c:	f7ff f908 	bl	8007a90 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008880:	e002      	b.n	8008888 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8008882:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008884:	f7f8 fd86 	bl	8001394 <HAL_UART_RxCpltCallback>
}
 8008888:	bf00      	nop
 800888a:	3770      	adds	r7, #112	; 0x70
 800888c:	46bd      	mov	sp, r7
 800888e:	bd80      	pop	{r7, pc}

08008890 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b084      	sub	sp, #16
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800889c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	2201      	movs	r2, #1
 80088a2:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80088a8:	2b01      	cmp	r3, #1
 80088aa:	d109      	bne.n	80088c0 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80088b2:	085b      	lsrs	r3, r3, #1
 80088b4:	b29b      	uxth	r3, r3
 80088b6:	4619      	mov	r1, r3
 80088b8:	68f8      	ldr	r0, [r7, #12]
 80088ba:	f7ff f8e9 	bl	8007a90 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80088be:	e002      	b.n	80088c6 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 80088c0:	68f8      	ldr	r0, [r7, #12]
 80088c2:	f7ff f8d1 	bl	8007a68 <HAL_UART_RxHalfCpltCallback>
}
 80088c6:	bf00      	nop
 80088c8:	3710      	adds	r7, #16
 80088ca:	46bd      	mov	sp, r7
 80088cc:	bd80      	pop	{r7, pc}

080088ce <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80088ce:	b580      	push	{r7, lr}
 80088d0:	b086      	sub	sp, #24
 80088d2:	af00      	add	r7, sp, #0
 80088d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088da:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80088dc:	697b      	ldr	r3, [r7, #20]
 80088de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088e2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80088e4:	697b      	ldr	r3, [r7, #20]
 80088e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80088ea:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80088ec:	697b      	ldr	r3, [r7, #20]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	689b      	ldr	r3, [r3, #8]
 80088f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088f6:	2b80      	cmp	r3, #128	; 0x80
 80088f8:	d109      	bne.n	800890e <UART_DMAError+0x40>
 80088fa:	693b      	ldr	r3, [r7, #16]
 80088fc:	2b21      	cmp	r3, #33	; 0x21
 80088fe:	d106      	bne.n	800890e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008900:	697b      	ldr	r3, [r7, #20]
 8008902:	2200      	movs	r2, #0
 8008904:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8008908:	6978      	ldr	r0, [r7, #20]
 800890a:	f7ff fe29 	bl	8008560 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800890e:	697b      	ldr	r3, [r7, #20]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	689b      	ldr	r3, [r3, #8]
 8008914:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008918:	2b40      	cmp	r3, #64	; 0x40
 800891a:	d109      	bne.n	8008930 <UART_DMAError+0x62>
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	2b22      	cmp	r3, #34	; 0x22
 8008920:	d106      	bne.n	8008930 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008922:	697b      	ldr	r3, [r7, #20]
 8008924:	2200      	movs	r2, #0
 8008926:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800892a:	6978      	ldr	r0, [r7, #20]
 800892c:	f7ff fe59 	bl	80085e2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008930:	697b      	ldr	r3, [r7, #20]
 8008932:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008936:	f043 0210 	orr.w	r2, r3, #16
 800893a:	697b      	ldr	r3, [r7, #20]
 800893c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008940:	6978      	ldr	r0, [r7, #20]
 8008942:	f7ff f89b 	bl	8007a7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008946:	bf00      	nop
 8008948:	3718      	adds	r7, #24
 800894a:	46bd      	mov	sp, r7
 800894c:	bd80      	pop	{r7, pc}

0800894e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800894e:	b580      	push	{r7, lr}
 8008950:	b084      	sub	sp, #16
 8008952:	af00      	add	r7, sp, #0
 8008954:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800895a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	2200      	movs	r2, #0
 8008960:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	2200      	movs	r2, #0
 8008968:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800896c:	68f8      	ldr	r0, [r7, #12]
 800896e:	f7ff f885 	bl	8007a7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008972:	bf00      	nop
 8008974:	3710      	adds	r7, #16
 8008976:	46bd      	mov	sp, r7
 8008978:	bd80      	pop	{r7, pc}

0800897a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800897a:	b580      	push	{r7, lr}
 800897c:	b088      	sub	sp, #32
 800897e:	af00      	add	r7, sp, #0
 8008980:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	e853 3f00 	ldrex	r3, [r3]
 800898e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008990:	68bb      	ldr	r3, [r7, #8]
 8008992:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008996:	61fb      	str	r3, [r7, #28]
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	461a      	mov	r2, r3
 800899e:	69fb      	ldr	r3, [r7, #28]
 80089a0:	61bb      	str	r3, [r7, #24]
 80089a2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089a4:	6979      	ldr	r1, [r7, #20]
 80089a6:	69ba      	ldr	r2, [r7, #24]
 80089a8:	e841 2300 	strex	r3, r2, [r1]
 80089ac:	613b      	str	r3, [r7, #16]
   return(result);
 80089ae:	693b      	ldr	r3, [r7, #16]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d1e6      	bne.n	8008982 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2220      	movs	r2, #32
 80089b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2200      	movs	r2, #0
 80089c0:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80089c2:	6878      	ldr	r0, [r7, #4]
 80089c4:	f7ff f83c 	bl	8007a40 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80089c8:	bf00      	nop
 80089ca:	3720      	adds	r7, #32
 80089cc:	46bd      	mov	sp, r7
 80089ce:	bd80      	pop	{r7, pc}

080089d0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80089d0:	b480      	push	{r7}
 80089d2:	b083      	sub	sp, #12
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80089d8:	bf00      	nop
 80089da:	370c      	adds	r7, #12
 80089dc:	46bd      	mov	sp, r7
 80089de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e2:	4770      	bx	lr

080089e4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80089e4:	b480      	push	{r7}
 80089e6:	b083      	sub	sp, #12
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80089ec:	bf00      	nop
 80089ee:	370c      	adds	r7, #12
 80089f0:	46bd      	mov	sp, r7
 80089f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f6:	4770      	bx	lr

080089f8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80089f8:	b480      	push	{r7}
 80089fa:	b083      	sub	sp, #12
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008a00:	bf00      	nop
 8008a02:	370c      	adds	r7, #12
 8008a04:	46bd      	mov	sp, r7
 8008a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0a:	4770      	bx	lr

08008a0c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008a0c:	b480      	push	{r7}
 8008a0e:	b085      	sub	sp, #20
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008a1a:	2b01      	cmp	r3, #1
 8008a1c:	d101      	bne.n	8008a22 <HAL_UARTEx_DisableFifoMode+0x16>
 8008a1e:	2302      	movs	r3, #2
 8008a20:	e027      	b.n	8008a72 <HAL_UARTEx_DisableFifoMode+0x66>
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	2201      	movs	r2, #1
 8008a26:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	2224      	movs	r2, #36	; 0x24
 8008a2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	681a      	ldr	r2, [r3, #0]
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	f022 0201 	bic.w	r2, r2, #1
 8008a48:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008a50:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	2200      	movs	r2, #0
 8008a56:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	68fa      	ldr	r2, [r7, #12]
 8008a5e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2220      	movs	r2, #32
 8008a64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008a70:	2300      	movs	r3, #0
}
 8008a72:	4618      	mov	r0, r3
 8008a74:	3714      	adds	r7, #20
 8008a76:	46bd      	mov	sp, r7
 8008a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7c:	4770      	bx	lr

08008a7e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008a7e:	b580      	push	{r7, lr}
 8008a80:	b084      	sub	sp, #16
 8008a82:	af00      	add	r7, sp, #0
 8008a84:	6078      	str	r0, [r7, #4]
 8008a86:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008a8e:	2b01      	cmp	r3, #1
 8008a90:	d101      	bne.n	8008a96 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008a92:	2302      	movs	r3, #2
 8008a94:	e02d      	b.n	8008af2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2201      	movs	r2, #1
 8008a9a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	2224      	movs	r2, #36	; 0x24
 8008aa2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	681a      	ldr	r2, [r3, #0]
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	f022 0201 	bic.w	r2, r2, #1
 8008abc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	689b      	ldr	r3, [r3, #8]
 8008ac4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	683a      	ldr	r2, [r7, #0]
 8008ace:	430a      	orrs	r2, r1
 8008ad0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008ad2:	6878      	ldr	r0, [r7, #4]
 8008ad4:	f000 f850 	bl	8008b78 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	68fa      	ldr	r2, [r7, #12]
 8008ade:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2220      	movs	r2, #32
 8008ae4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	2200      	movs	r2, #0
 8008aec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008af0:	2300      	movs	r3, #0
}
 8008af2:	4618      	mov	r0, r3
 8008af4:	3710      	adds	r7, #16
 8008af6:	46bd      	mov	sp, r7
 8008af8:	bd80      	pop	{r7, pc}

08008afa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008afa:	b580      	push	{r7, lr}
 8008afc:	b084      	sub	sp, #16
 8008afe:	af00      	add	r7, sp, #0
 8008b00:	6078      	str	r0, [r7, #4]
 8008b02:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008b0a:	2b01      	cmp	r3, #1
 8008b0c:	d101      	bne.n	8008b12 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008b0e:	2302      	movs	r3, #2
 8008b10:	e02d      	b.n	8008b6e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	2201      	movs	r2, #1
 8008b16:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	2224      	movs	r2, #36	; 0x24
 8008b1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	681a      	ldr	r2, [r3, #0]
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	f022 0201 	bic.w	r2, r2, #1
 8008b38:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	689b      	ldr	r3, [r3, #8]
 8008b40:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	683a      	ldr	r2, [r7, #0]
 8008b4a:	430a      	orrs	r2, r1
 8008b4c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008b4e:	6878      	ldr	r0, [r7, #4]
 8008b50:	f000 f812 	bl	8008b78 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	68fa      	ldr	r2, [r7, #12]
 8008b5a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2220      	movs	r2, #32
 8008b60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2200      	movs	r2, #0
 8008b68:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008b6c:	2300      	movs	r3, #0
}
 8008b6e:	4618      	mov	r0, r3
 8008b70:	3710      	adds	r7, #16
 8008b72:	46bd      	mov	sp, r7
 8008b74:	bd80      	pop	{r7, pc}
	...

08008b78 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008b78:	b480      	push	{r7}
 8008b7a:	b085      	sub	sp, #20
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d108      	bne.n	8008b9a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2201      	movs	r2, #1
 8008b8c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2201      	movs	r2, #1
 8008b94:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008b98:	e031      	b.n	8008bfe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008b9a:	2308      	movs	r3, #8
 8008b9c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008b9e:	2308      	movs	r3, #8
 8008ba0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	689b      	ldr	r3, [r3, #8]
 8008ba8:	0e5b      	lsrs	r3, r3, #25
 8008baa:	b2db      	uxtb	r3, r3
 8008bac:	f003 0307 	and.w	r3, r3, #7
 8008bb0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	689b      	ldr	r3, [r3, #8]
 8008bb8:	0f5b      	lsrs	r3, r3, #29
 8008bba:	b2db      	uxtb	r3, r3
 8008bbc:	f003 0307 	and.w	r3, r3, #7
 8008bc0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008bc2:	7bbb      	ldrb	r3, [r7, #14]
 8008bc4:	7b3a      	ldrb	r2, [r7, #12]
 8008bc6:	4911      	ldr	r1, [pc, #68]	; (8008c0c <UARTEx_SetNbDataToProcess+0x94>)
 8008bc8:	5c8a      	ldrb	r2, [r1, r2]
 8008bca:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008bce:	7b3a      	ldrb	r2, [r7, #12]
 8008bd0:	490f      	ldr	r1, [pc, #60]	; (8008c10 <UARTEx_SetNbDataToProcess+0x98>)
 8008bd2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008bd4:	fb93 f3f2 	sdiv	r3, r3, r2
 8008bd8:	b29a      	uxth	r2, r3
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008be0:	7bfb      	ldrb	r3, [r7, #15]
 8008be2:	7b7a      	ldrb	r2, [r7, #13]
 8008be4:	4909      	ldr	r1, [pc, #36]	; (8008c0c <UARTEx_SetNbDataToProcess+0x94>)
 8008be6:	5c8a      	ldrb	r2, [r1, r2]
 8008be8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008bec:	7b7a      	ldrb	r2, [r7, #13]
 8008bee:	4908      	ldr	r1, [pc, #32]	; (8008c10 <UARTEx_SetNbDataToProcess+0x98>)
 8008bf0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008bf2:	fb93 f3f2 	sdiv	r3, r3, r2
 8008bf6:	b29a      	uxth	r2, r3
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008bfe:	bf00      	nop
 8008c00:	3714      	adds	r7, #20
 8008c02:	46bd      	mov	sp, r7
 8008c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c08:	4770      	bx	lr
 8008c0a:	bf00      	nop
 8008c0c:	08008cb4 	.word	0x08008cb4
 8008c10:	08008cbc 	.word	0x08008cbc

08008c14 <memset>:
 8008c14:	4402      	add	r2, r0
 8008c16:	4603      	mov	r3, r0
 8008c18:	4293      	cmp	r3, r2
 8008c1a:	d100      	bne.n	8008c1e <memset+0xa>
 8008c1c:	4770      	bx	lr
 8008c1e:	f803 1b01 	strb.w	r1, [r3], #1
 8008c22:	e7f9      	b.n	8008c18 <memset+0x4>

08008c24 <__libc_init_array>:
 8008c24:	b570      	push	{r4, r5, r6, lr}
 8008c26:	4d0d      	ldr	r5, [pc, #52]	; (8008c5c <__libc_init_array+0x38>)
 8008c28:	4c0d      	ldr	r4, [pc, #52]	; (8008c60 <__libc_init_array+0x3c>)
 8008c2a:	1b64      	subs	r4, r4, r5
 8008c2c:	10a4      	asrs	r4, r4, #2
 8008c2e:	2600      	movs	r6, #0
 8008c30:	42a6      	cmp	r6, r4
 8008c32:	d109      	bne.n	8008c48 <__libc_init_array+0x24>
 8008c34:	4d0b      	ldr	r5, [pc, #44]	; (8008c64 <__libc_init_array+0x40>)
 8008c36:	4c0c      	ldr	r4, [pc, #48]	; (8008c68 <__libc_init_array+0x44>)
 8008c38:	f000 f818 	bl	8008c6c <_init>
 8008c3c:	1b64      	subs	r4, r4, r5
 8008c3e:	10a4      	asrs	r4, r4, #2
 8008c40:	2600      	movs	r6, #0
 8008c42:	42a6      	cmp	r6, r4
 8008c44:	d105      	bne.n	8008c52 <__libc_init_array+0x2e>
 8008c46:	bd70      	pop	{r4, r5, r6, pc}
 8008c48:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c4c:	4798      	blx	r3
 8008c4e:	3601      	adds	r6, #1
 8008c50:	e7ee      	b.n	8008c30 <__libc_init_array+0xc>
 8008c52:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c56:	4798      	blx	r3
 8008c58:	3601      	adds	r6, #1
 8008c5a:	e7f2      	b.n	8008c42 <__libc_init_array+0x1e>
 8008c5c:	08008ccc 	.word	0x08008ccc
 8008c60:	08008ccc 	.word	0x08008ccc
 8008c64:	08008ccc 	.word	0x08008ccc
 8008c68:	08008cd0 	.word	0x08008cd0

08008c6c <_init>:
 8008c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c6e:	bf00      	nop
 8008c70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c72:	bc08      	pop	{r3}
 8008c74:	469e      	mov	lr, r3
 8008c76:	4770      	bx	lr

08008c78 <_fini>:
 8008c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c7a:	bf00      	nop
 8008c7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c7e:	bc08      	pop	{r3}
 8008c80:	469e      	mov	lr, r3
 8008c82:	4770      	bx	lr
