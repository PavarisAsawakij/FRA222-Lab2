
Motor PID Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a88  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08008c60  08008c60  00018c60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ca0  08008ca0  00020024  2**0
                  CONTENTS
  4 .ARM          00000008  08008ca0  08008ca0  00018ca0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008ca8  08008ca8  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ca8  08008ca8  00018ca8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008cac  08008cac  00018cac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08008cb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000acc  20000028  08008cd4  00020028  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000af4  08008cd4  00020af4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018509  00000000  00000000  00020097  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002afd  00000000  00000000  000385a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001530  00000000  00000000  0003b0a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010a5  00000000  00000000  0003c5d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028d3c  00000000  00000000  0003d675  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017f8f  00000000  00000000  000663b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001140cd  00000000  00000000  0007e340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005c04  00000000  00000000  00192410  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007e  00000000  00000000  00198014  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000028 	.word	0x20000028
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08008c48 	.word	0x08008c48

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000002c 	.word	0x2000002c
 8000214:	08008c48 	.word	0x08008c48

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000518:	f001 fbdf 	bl	8001cda <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051c:	f000 f8d4 	bl	80006c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000520:	f000 fc76 	bl	8000e10 <MX_GPIO_Init>
  MX_DMA_Init();
 8000524:	f000 fc2e 	bl	8000d84 <MX_DMA_Init>
  MX_TIM3_Init();
 8000528:	f000 fadc 	bl	8000ae4 <MX_TIM3_Init>
  MX_ADC1_Init();
 800052c:	f000 f918 	bl	8000760 <MX_ADC1_Init>
  MX_TIM15_Init();
 8000530:	f000 fbd6 	bl	8000ce0 <MX_TIM15_Init>
  MX_TIM5_Init();
 8000534:	f000 fb86 	bl	8000c44 <MX_TIM5_Init>
  MX_TIM4_Init();
 8000538:	f000 fb2a 	bl	8000b90 <MX_TIM4_Init>
  MX_LPUART1_UART_Init();
 800053c:	f000 f99a 	bl	8000874 <MX_LPUART1_UART_Init>
  MX_TIM1_Init();
 8000540:	f000 f9e2 	bl	8000908 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000544:	f000 fa80 	bl	8000a48 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	//-------------------------------Part1&3:Motor PID-------------------------------//
	UARTDMAconfig();
 8000548:	f000 ff04 	bl	8001354 <UARTDMAconfig>

//	HAL_UART_Receive_DMA(&hlpuart1, RxBuffer, 4);
	HAL_ADC_Start_DMA(&hadc1, InputRead, 400); // DMA Read
 800054c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000550:	4948      	ldr	r1, [pc, #288]	; (8000674 <main+0x160>)
 8000552:	4849      	ldr	r0, [pc, #292]	; (8000678 <main+0x164>)
 8000554:	f002 f82e 	bl	80025b4 <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start_IT(&htim15);
 8000558:	4848      	ldr	r0, [pc, #288]	; (800067c <main+0x168>)
 800055a:	f005 f957 	bl	800580c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(&htim5); // system time clock
 800055e:	4848      	ldr	r0, [pc, #288]	; (8000680 <main+0x16c>)
 8000560:	f005 f8e4 	bl	800572c <HAL_TIM_Base_Start>

	HAL_TIM_Base_Start(&htim4);  //motor A2
 8000564:	4847      	ldr	r0, [pc, #284]	; (8000684 <main+0x170>)
 8000566:	f005 f8e1 	bl	800572c <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800056a:	2100      	movs	r1, #0
 800056c:	4845      	ldr	r0, [pc, #276]	; (8000684 <main+0x170>)
 800056e:	f005 fa1d 	bl	80059ac <HAL_TIM_PWM_Start>

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0); //for Check Timer
 8000572:	4b44      	ldr	r3, [pc, #272]	; (8000684 <main+0x170>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	2200      	movs	r2, #0
 8000578:	635a      	str	r2, [r3, #52]	; 0x34

	A0 = Kp + Ki + Kd;
 800057a:	4b43      	ldr	r3, [pc, #268]	; (8000688 <main+0x174>)
 800057c:	ed93 7a00 	vldr	s14, [r3]
 8000580:	4b42      	ldr	r3, [pc, #264]	; (800068c <main+0x178>)
 8000582:	edd3 7a00 	vldr	s15, [r3]
 8000586:	ee37 7a27 	vadd.f32	s14, s14, s15
 800058a:	4b41      	ldr	r3, [pc, #260]	; (8000690 <main+0x17c>)
 800058c:	edd3 7a00 	vldr	s15, [r3]
 8000590:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000594:	4b3f      	ldr	r3, [pc, #252]	; (8000694 <main+0x180>)
 8000596:	edc3 7a00 	vstr	s15, [r3]
	A1 = -Kp - (2 * Kd);
 800059a:	4b3b      	ldr	r3, [pc, #236]	; (8000688 <main+0x174>)
 800059c:	edd3 7a00 	vldr	s15, [r3]
 80005a0:	eeb1 7a67 	vneg.f32	s14, s15
 80005a4:	4b3a      	ldr	r3, [pc, #232]	; (8000690 <main+0x17c>)
 80005a6:	edd3 7a00 	vldr	s15, [r3]
 80005aa:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80005ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80005b2:	4b39      	ldr	r3, [pc, #228]	; (8000698 <main+0x184>)
 80005b4:	edc3 7a00 	vstr	s15, [r3]
	A2 = Kd;
 80005b8:	4b35      	ldr	r3, [pc, #212]	; (8000690 <main+0x17c>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4a37      	ldr	r2, [pc, #220]	; (800069c <main+0x188>)
 80005be:	6013      	str	r3, [r2, #0]

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, SET);
 80005c0:	2201      	movs	r2, #1
 80005c2:	2101      	movs	r1, #1
 80005c4:	4836      	ldr	r0, [pc, #216]	; (80006a0 <main+0x18c>)
 80005c6:	f003 ffdf 	bl	8004588 <HAL_GPIO_WritePin>
	//-------------------------------------------------------------------------------//
	//----------------------------------Part2:QEI------------------------------------//
	HAL_TIM_Base_Start(&htim3);
 80005ca:	4836      	ldr	r0, [pc, #216]	; (80006a4 <main+0x190>)
 80005cc:	f005 f8ae 	bl	800572c <HAL_TIM_Base_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80005d0:	213c      	movs	r1, #60	; 0x3c
 80005d2:	4834      	ldr	r0, [pc, #208]	; (80006a4 <main+0x190>)
 80005d4:	f005 fba2 	bl	8005d1c <HAL_TIM_Encoder_Start>

	HAL_TIM_Base_Start_IT(&htim2);
 80005d8:	4833      	ldr	r0, [pc, #204]	; (80006a8 <main+0x194>)
 80005da:	f005 f917 	bl	800580c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(&htim2);
 80005de:	4832      	ldr	r0, [pc, #200]	; (80006a8 <main+0x194>)
 80005e0:	f005 f8a4 	bl	800572c <HAL_TIM_Base_Start>

	HAL_TIM_Base_Start(&htim1);
 80005e4:	4831      	ldr	r0, [pc, #196]	; (80006ac <main+0x198>)
 80005e6:	f005 f8a1 	bl	800572c <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80005ea:	2100      	movs	r1, #0
 80005ec:	482f      	ldr	r0, [pc, #188]	; (80006ac <main+0x198>)
 80005ee:	f005 f9dd 	bl	80059ac <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80005f2:	2104      	movs	r1, #4
 80005f4:	482d      	ldr	r0, [pc, #180]	; (80006ac <main+0x198>)
 80005f6:	f005 f9d9 	bl	80059ac <HAL_TIM_PWM_Start>

	HAL_ADC_Start_DMA(&hadc1, ADC, 400);
 80005fa:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80005fe:	492c      	ldr	r1, [pc, #176]	; (80006b0 <main+0x19c>)
 8000600:	481d      	ldr	r0, [pc, #116]	; (8000678 <main+0x164>)
 8000602:	f001 ffd7 	bl	80025b4 <HAL_ADC_Start_DMA>
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//	  test = __HAL_TIM_GET_COUNTER(&htim5);
		Mode_LD2();
 8000606:	f000 ffc3 	bl	8001590 <Mode_LD2>
		Communication();
 800060a:	f000 fdc5 	bl	8001198 <Communication>
		//QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim3);
		if (mode_status == 1) {
 800060e:	4b29      	ldr	r3, [pc, #164]	; (80006b4 <main+0x1a0>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	2b01      	cmp	r3, #1
 8000614:	d103      	bne.n	800061e <main+0x10a>
//			PWM = 0;

			duty = 0;
 8000616:	4b28      	ldr	r3, [pc, #160]	; (80006b8 <main+0x1a4>)
 8000618:	2200      	movs	r2, #0
 800061a:	801a      	strh	r2, [r3, #0]
 800061c:	e025      	b.n	800066a <main+0x156>
		} else if (mode_status == 2) {
 800061e:	4b25      	ldr	r3, [pc, #148]	; (80006b4 <main+0x1a0>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	2b02      	cmp	r3, #2
 8000624:	d105      	bne.n	8000632 <main+0x11e>
			PWM = 0;
 8000626:	4b25      	ldr	r3, [pc, #148]	; (80006bc <main+0x1a8>)
 8000628:	2200      	movs	r2, #0
 800062a:	801a      	strh	r2, [r3, #0]
			PID_QEI();
 800062c:	f000 ff0c 	bl	8001448 <PID_QEI>
 8000630:	e01b      	b.n	800066a <main+0x156>


		} else if (mode_status == 3) {
 8000632:	4b20      	ldr	r3, [pc, #128]	; (80006b4 <main+0x1a0>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	2b03      	cmp	r3, #3
 8000638:	d117      	bne.n	800066a <main+0x156>
			PWM = abs(RxInt);
 800063a:	4b21      	ldr	r3, [pc, #132]	; (80006c0 <main+0x1ac>)
 800063c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000640:	2b00      	cmp	r3, #0
 8000642:	bfb8      	it	lt
 8000644:	425b      	neglt	r3, r3
 8000646:	b29a      	uxth	r2, r3
 8000648:	4b1c      	ldr	r3, [pc, #112]	; (80006bc <main+0x1a8>)
 800064a:	801a      	strh	r2, [r3, #0]
			duty = 0;
 800064c:	4b1a      	ldr	r3, [pc, #104]	; (80006b8 <main+0x1a4>)
 800064e:	2200      	movs	r2, #0
 8000650:	801a      	strh	r2, [r3, #0]
			if (RxInt >= 0)
 8000652:	4b1b      	ldr	r3, [pc, #108]	; (80006c0 <main+0x1ac>)
 8000654:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000658:	2b00      	cmp	r3, #0
 800065a:	db03      	blt.n	8000664 <main+0x150>
				direction = 1;
 800065c:	4b19      	ldr	r3, [pc, #100]	; (80006c4 <main+0x1b0>)
 800065e:	2201      	movs	r2, #1
 8000660:	701a      	strb	r2, [r3, #0]
 8000662:	e002      	b.n	800066a <main+0x156>
			else
				direction = 0;
 8000664:	4b17      	ldr	r3, [pc, #92]	; (80006c4 <main+0x1b0>)
 8000666:	2200      	movs	r2, #0
 8000668:	701a      	strb	r2, [r3, #0]
		}
		motorControl();
 800066a:	f000 fd6b 	bl	8001144 <motorControl>
		motor();
 800066e:	f000 fe89 	bl	8001384 <motor>
		Mode_LD2();
 8000672:	e7c8      	b.n	8000606 <main+0xf2>
 8000674:	20000438 	.word	0x20000438
 8000678:	20000044 	.word	0x20000044
 800067c:	200003e0 	.word	0x200003e0
 8000680:	20000394 	.word	0x20000394
 8000684:	20000348 	.word	0x20000348
 8000688:	20000004 	.word	0x20000004
 800068c:	20000008 	.word	0x20000008
 8000690:	2000000c 	.word	0x2000000c
 8000694:	20000788 	.word	0x20000788
 8000698:	2000078c 	.word	0x2000078c
 800069c:	20000790 	.word	0x20000790
 80006a0:	48000800 	.word	0x48000800
 80006a4:	200002fc 	.word	0x200002fc
 80006a8:	200002b0 	.word	0x200002b0
 80006ac:	20000264 	.word	0x20000264
 80006b0:	200007a4 	.word	0x200007a4
 80006b4:	20000000 	.word	0x20000000
 80006b8:	20000acc 	.word	0x20000acc
 80006bc:	20000780 	.word	0x20000780
 80006c0:	2000076e 	.word	0x2000076e
 80006c4:	20000782 	.word	0x20000782

080006c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b094      	sub	sp, #80	; 0x50
 80006cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ce:	f107 0318 	add.w	r3, r7, #24
 80006d2:	2238      	movs	r2, #56	; 0x38
 80006d4:	2100      	movs	r1, #0
 80006d6:	4618      	mov	r0, r3
 80006d8:	f008 fa8a 	bl	8008bf0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006dc:	1d3b      	adds	r3, r7, #4
 80006de:	2200      	movs	r2, #0
 80006e0:	601a      	str	r2, [r3, #0]
 80006e2:	605a      	str	r2, [r3, #4]
 80006e4:	609a      	str	r2, [r3, #8]
 80006e6:	60da      	str	r2, [r3, #12]
 80006e8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80006ea:	2000      	movs	r0, #0
 80006ec:	f003 ff96 	bl	800461c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006f0:	2302      	movs	r3, #2
 80006f2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006f8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006fa:	2340      	movs	r3, #64	; 0x40
 80006fc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006fe:	2302      	movs	r3, #2
 8000700:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000702:	2302      	movs	r3, #2
 8000704:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000706:	2304      	movs	r3, #4
 8000708:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800070a:	2355      	movs	r3, #85	; 0x55
 800070c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800070e:	2302      	movs	r3, #2
 8000710:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000712:	2302      	movs	r3, #2
 8000714:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000716:	2302      	movs	r3, #2
 8000718:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800071a:	f107 0318 	add.w	r3, r7, #24
 800071e:	4618      	mov	r0, r3
 8000720:	f004 f830 	bl	8004784 <HAL_RCC_OscConfig>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800072a:	f000 ff67 	bl	80015fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800072e:	230f      	movs	r3, #15
 8000730:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000732:	2303      	movs	r3, #3
 8000734:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000736:	2300      	movs	r3, #0
 8000738:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800073a:	2300      	movs	r3, #0
 800073c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800073e:	2300      	movs	r3, #0
 8000740:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000742:	1d3b      	adds	r3, r7, #4
 8000744:	2104      	movs	r1, #4
 8000746:	4618      	mov	r0, r3
 8000748:	f004 fb2e 	bl	8004da8 <HAL_RCC_ClockConfig>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000752:	f000 ff53 	bl	80015fc <Error_Handler>
  }
}
 8000756:	bf00      	nop
 8000758:	3750      	adds	r7, #80	; 0x50
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
	...

08000760 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b08c      	sub	sp, #48	; 0x30
 8000764:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000766:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
 800076e:	605a      	str	r2, [r3, #4]
 8000770:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000772:	1d3b      	adds	r3, r7, #4
 8000774:	2220      	movs	r2, #32
 8000776:	2100      	movs	r1, #0
 8000778:	4618      	mov	r0, r3
 800077a:	f008 fa39 	bl	8008bf0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800077e:	4b3a      	ldr	r3, [pc, #232]	; (8000868 <MX_ADC1_Init+0x108>)
 8000780:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000784:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000786:	4b38      	ldr	r3, [pc, #224]	; (8000868 <MX_ADC1_Init+0x108>)
 8000788:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800078c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800078e:	4b36      	ldr	r3, [pc, #216]	; (8000868 <MX_ADC1_Init+0x108>)
 8000790:	2200      	movs	r2, #0
 8000792:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000794:	4b34      	ldr	r3, [pc, #208]	; (8000868 <MX_ADC1_Init+0x108>)
 8000796:	2200      	movs	r2, #0
 8000798:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800079a:	4b33      	ldr	r3, [pc, #204]	; (8000868 <MX_ADC1_Init+0x108>)
 800079c:	2200      	movs	r2, #0
 800079e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80007a0:	4b31      	ldr	r3, [pc, #196]	; (8000868 <MX_ADC1_Init+0x108>)
 80007a2:	2201      	movs	r2, #1
 80007a4:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007a6:	4b30      	ldr	r3, [pc, #192]	; (8000868 <MX_ADC1_Init+0x108>)
 80007a8:	2204      	movs	r2, #4
 80007aa:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007ac:	4b2e      	ldr	r3, [pc, #184]	; (8000868 <MX_ADC1_Init+0x108>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80007b2:	4b2d      	ldr	r3, [pc, #180]	; (8000868 <MX_ADC1_Init+0x108>)
 80007b4:	2201      	movs	r2, #1
 80007b6:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 80007b8:	4b2b      	ldr	r3, [pc, #172]	; (8000868 <MX_ADC1_Init+0x108>)
 80007ba:	2202      	movs	r2, #2
 80007bc:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007be:	4b2a      	ldr	r3, [pc, #168]	; (8000868 <MX_ADC1_Init+0x108>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T15_TRGO;
 80007c6:	4b28      	ldr	r3, [pc, #160]	; (8000868 <MX_ADC1_Init+0x108>)
 80007c8:	f44f 62b8 	mov.w	r2, #1472	; 0x5c0
 80007cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80007ce:	4b26      	ldr	r3, [pc, #152]	; (8000868 <MX_ADC1_Init+0x108>)
 80007d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007d4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80007d6:	4b24      	ldr	r3, [pc, #144]	; (8000868 <MX_ADC1_Init+0x108>)
 80007d8:	2201      	movs	r2, #1
 80007da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007de:	4b22      	ldr	r3, [pc, #136]	; (8000868 <MX_ADC1_Init+0x108>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80007e4:	4b20      	ldr	r3, [pc, #128]	; (8000868 <MX_ADC1_Init+0x108>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007ec:	481e      	ldr	r0, [pc, #120]	; (8000868 <MX_ADC1_Init+0x108>)
 80007ee:	f001 fd25 	bl	800223c <HAL_ADC_Init>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 80007f8:	f000 ff00 	bl	80015fc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80007fc:	2300      	movs	r3, #0
 80007fe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000800:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000804:	4619      	mov	r1, r3
 8000806:	4818      	ldr	r0, [pc, #96]	; (8000868 <MX_ADC1_Init+0x108>)
 8000808:	f002 fff2 	bl	80037f0 <HAL_ADCEx_MultiModeConfigChannel>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8000812:	f000 fef3 	bl	80015fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000816:	4b15      	ldr	r3, [pc, #84]	; (800086c <MX_ADC1_Init+0x10c>)
 8000818:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800081a:	2306      	movs	r3, #6
 800081c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800081e:	2307      	movs	r3, #7
 8000820:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000822:	237f      	movs	r3, #127	; 0x7f
 8000824:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000826:	2304      	movs	r3, #4
 8000828:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800082a:	2300      	movs	r3, #0
 800082c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800082e:	1d3b      	adds	r3, r7, #4
 8000830:	4619      	mov	r1, r3
 8000832:	480d      	ldr	r0, [pc, #52]	; (8000868 <MX_ADC1_Init+0x108>)
 8000834:	f002 fa1a 	bl	8002c6c <HAL_ADC_ConfigChannel>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 800083e:	f000 fedd 	bl	80015fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000842:	4b0b      	ldr	r3, [pc, #44]	; (8000870 <MX_ADC1_Init+0x110>)
 8000844:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000846:	230c      	movs	r3, #12
 8000848:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800084a:	1d3b      	adds	r3, r7, #4
 800084c:	4619      	mov	r1, r3
 800084e:	4806      	ldr	r0, [pc, #24]	; (8000868 <MX_ADC1_Init+0x108>)
 8000850:	f002 fa0c 	bl	8002c6c <HAL_ADC_ConfigChannel>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 800085a:	f000 fecf 	bl	80015fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800085e:	bf00      	nop
 8000860:	3730      	adds	r7, #48	; 0x30
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	20000044 	.word	0x20000044
 800086c:	04300002 	.word	0x04300002
 8000870:	08600004 	.word	0x08600004

08000874 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000878:	4b21      	ldr	r3, [pc, #132]	; (8000900 <MX_LPUART1_UART_Init+0x8c>)
 800087a:	4a22      	ldr	r2, [pc, #136]	; (8000904 <MX_LPUART1_UART_Init+0x90>)
 800087c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800087e:	4b20      	ldr	r3, [pc, #128]	; (8000900 <MX_LPUART1_UART_Init+0x8c>)
 8000880:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000884:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000886:	4b1e      	ldr	r3, [pc, #120]	; (8000900 <MX_LPUART1_UART_Init+0x8c>)
 8000888:	2200      	movs	r2, #0
 800088a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800088c:	4b1c      	ldr	r3, [pc, #112]	; (8000900 <MX_LPUART1_UART_Init+0x8c>)
 800088e:	2200      	movs	r2, #0
 8000890:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000892:	4b1b      	ldr	r3, [pc, #108]	; (8000900 <MX_LPUART1_UART_Init+0x8c>)
 8000894:	2200      	movs	r2, #0
 8000896:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000898:	4b19      	ldr	r3, [pc, #100]	; (8000900 <MX_LPUART1_UART_Init+0x8c>)
 800089a:	220c      	movs	r2, #12
 800089c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800089e:	4b18      	ldr	r3, [pc, #96]	; (8000900 <MX_LPUART1_UART_Init+0x8c>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008a4:	4b16      	ldr	r3, [pc, #88]	; (8000900 <MX_LPUART1_UART_Init+0x8c>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008aa:	4b15      	ldr	r3, [pc, #84]	; (8000900 <MX_LPUART1_UART_Init+0x8c>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008b0:	4b13      	ldr	r3, [pc, #76]	; (8000900 <MX_LPUART1_UART_Init+0x8c>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80008b6:	4812      	ldr	r0, [pc, #72]	; (8000900 <MX_LPUART1_UART_Init+0x8c>)
 80008b8:	f006 fc70 	bl	800719c <HAL_UART_Init>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80008c2:	f000 fe9b 	bl	80015fc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008c6:	2100      	movs	r1, #0
 80008c8:	480d      	ldr	r0, [pc, #52]	; (8000900 <MX_LPUART1_UART_Init+0x8c>)
 80008ca:	f008 f8c6 	bl	8008a5a <HAL_UARTEx_SetTxFifoThreshold>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80008d4:	f000 fe92 	bl	80015fc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008d8:	2100      	movs	r1, #0
 80008da:	4809      	ldr	r0, [pc, #36]	; (8000900 <MX_LPUART1_UART_Init+0x8c>)
 80008dc:	f008 f8fb 	bl	8008ad6 <HAL_UARTEx_SetRxFifoThreshold>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80008e6:	f000 fe89 	bl	80015fc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80008ea:	4805      	ldr	r0, [pc, #20]	; (8000900 <MX_LPUART1_UART_Init+0x8c>)
 80008ec:	f008 f87c 	bl	80089e8 <HAL_UARTEx_DisableFifoMode>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80008f6:	f000 fe81 	bl	80015fc <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80008fa:	bf00      	nop
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	20000110 	.word	0x20000110
 8000904:	40008000 	.word	0x40008000

08000908 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b098      	sub	sp, #96	; 0x60
 800090c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800090e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000912:	2200      	movs	r2, #0
 8000914:	601a      	str	r2, [r3, #0]
 8000916:	605a      	str	r2, [r3, #4]
 8000918:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800091a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800091e:	2200      	movs	r2, #0
 8000920:	601a      	str	r2, [r3, #0]
 8000922:	605a      	str	r2, [r3, #4]
 8000924:	609a      	str	r2, [r3, #8]
 8000926:	60da      	str	r2, [r3, #12]
 8000928:	611a      	str	r2, [r3, #16]
 800092a:	615a      	str	r2, [r3, #20]
 800092c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800092e:	1d3b      	adds	r3, r7, #4
 8000930:	2234      	movs	r2, #52	; 0x34
 8000932:	2100      	movs	r1, #0
 8000934:	4618      	mov	r0, r3
 8000936:	f008 f95b 	bl	8008bf0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800093a:	4b41      	ldr	r3, [pc, #260]	; (8000a40 <MX_TIM1_Init+0x138>)
 800093c:	4a41      	ldr	r2, [pc, #260]	; (8000a44 <MX_TIM1_Init+0x13c>)
 800093e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 169;
 8000940:	4b3f      	ldr	r3, [pc, #252]	; (8000a40 <MX_TIM1_Init+0x138>)
 8000942:	22a9      	movs	r2, #169	; 0xa9
 8000944:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000946:	4b3e      	ldr	r3, [pc, #248]	; (8000a40 <MX_TIM1_Init+0x138>)
 8000948:	2200      	movs	r2, #0
 800094a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 800094c:	4b3c      	ldr	r3, [pc, #240]	; (8000a40 <MX_TIM1_Init+0x138>)
 800094e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000952:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000954:	4b3a      	ldr	r3, [pc, #232]	; (8000a40 <MX_TIM1_Init+0x138>)
 8000956:	2200      	movs	r2, #0
 8000958:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800095a:	4b39      	ldr	r3, [pc, #228]	; (8000a40 <MX_TIM1_Init+0x138>)
 800095c:	2200      	movs	r2, #0
 800095e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000960:	4b37      	ldr	r3, [pc, #220]	; (8000a40 <MX_TIM1_Init+0x138>)
 8000962:	2200      	movs	r2, #0
 8000964:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000966:	4836      	ldr	r0, [pc, #216]	; (8000a40 <MX_TIM1_Init+0x138>)
 8000968:	f004 ffc8 	bl	80058fc <HAL_TIM_PWM_Init>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000972:	f000 fe43 	bl	80015fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000976:	2300      	movs	r3, #0
 8000978:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800097a:	2300      	movs	r3, #0
 800097c:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800097e:	2300      	movs	r3, #0
 8000980:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000982:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000986:	4619      	mov	r1, r3
 8000988:	482d      	ldr	r0, [pc, #180]	; (8000a40 <MX_TIM1_Init+0x138>)
 800098a:	f006 fa97 	bl	8006ebc <HAL_TIMEx_MasterConfigSynchronization>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000994:	f000 fe32 	bl	80015fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000998:	2360      	movs	r3, #96	; 0x60
 800099a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 800099c:	2300      	movs	r3, #0
 800099e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009a0:	2300      	movs	r3, #0
 80009a2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80009a4:	2300      	movs	r3, #0
 80009a6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009a8:	2300      	movs	r3, #0
 80009aa:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80009ac:	2300      	movs	r3, #0
 80009ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80009b0:	2300      	movs	r3, #0
 80009b2:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009b4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80009b8:	2200      	movs	r2, #0
 80009ba:	4619      	mov	r1, r3
 80009bc:	4820      	ldr	r0, [pc, #128]	; (8000a40 <MX_TIM1_Init+0x138>)
 80009be:	f005 fb8b 	bl	80060d8 <HAL_TIM_PWM_ConfigChannel>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80009c8:	f000 fe18 	bl	80015fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80009cc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80009d0:	2204      	movs	r2, #4
 80009d2:	4619      	mov	r1, r3
 80009d4:	481a      	ldr	r0, [pc, #104]	; (8000a40 <MX_TIM1_Init+0x138>)
 80009d6:	f005 fb7f 	bl	80060d8 <HAL_TIM_PWM_ConfigChannel>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 80009e0:	f000 fe0c 	bl	80015fc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80009e4:	2300      	movs	r3, #0
 80009e6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80009e8:	2300      	movs	r3, #0
 80009ea:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80009ec:	2300      	movs	r3, #0
 80009ee:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80009f0:	2300      	movs	r3, #0
 80009f2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80009f4:	2300      	movs	r3, #0
 80009f6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80009f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009fc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80009fe:	2300      	movs	r3, #0
 8000a00:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000a02:	2300      	movs	r3, #0
 8000a04:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000a06:	2300      	movs	r3, #0
 8000a08:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000a0a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000a0e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000a10:	2300      	movs	r3, #0
 8000a12:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000a14:	2300      	movs	r3, #0
 8000a16:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a1c:	1d3b      	adds	r3, r7, #4
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4807      	ldr	r0, [pc, #28]	; (8000a40 <MX_TIM1_Init+0x138>)
 8000a22:	f006 fae1 	bl	8006fe8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000a2c:	f000 fde6 	bl	80015fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000a30:	4803      	ldr	r0, [pc, #12]	; (8000a40 <MX_TIM1_Init+0x138>)
 8000a32:	f001 f83d 	bl	8001ab0 <HAL_TIM_MspPostInit>

}
 8000a36:	bf00      	nop
 8000a38:	3760      	adds	r7, #96	; 0x60
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	20000264 	.word	0x20000264
 8000a44:	40012c00 	.word	0x40012c00

08000a48 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b088      	sub	sp, #32
 8000a4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a4e:	f107 0310 	add.w	r3, r7, #16
 8000a52:	2200      	movs	r2, #0
 8000a54:	601a      	str	r2, [r3, #0]
 8000a56:	605a      	str	r2, [r3, #4]
 8000a58:	609a      	str	r2, [r3, #8]
 8000a5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a5c:	1d3b      	adds	r3, r7, #4
 8000a5e:	2200      	movs	r2, #0
 8000a60:	601a      	str	r2, [r3, #0]
 8000a62:	605a      	str	r2, [r3, #4]
 8000a64:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a66:	4b1e      	ldr	r3, [pc, #120]	; (8000ae0 <MX_TIM2_Init+0x98>)
 8000a68:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a6c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 8000a6e:	4b1c      	ldr	r3, [pc, #112]	; (8000ae0 <MX_TIM2_Init+0x98>)
 8000a70:	22a9      	movs	r2, #169	; 0xa9
 8000a72:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a74:	4b1a      	ldr	r3, [pc, #104]	; (8000ae0 <MX_TIM2_Init+0x98>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000a7a:	4b19      	ldr	r3, [pc, #100]	; (8000ae0 <MX_TIM2_Init+0x98>)
 8000a7c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a80:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a82:	4b17      	ldr	r3, [pc, #92]	; (8000ae0 <MX_TIM2_Init+0x98>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a88:	4b15      	ldr	r3, [pc, #84]	; (8000ae0 <MX_TIM2_Init+0x98>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a8e:	4814      	ldr	r0, [pc, #80]	; (8000ae0 <MX_TIM2_Init+0x98>)
 8000a90:	f004 fdf4 	bl	800567c <HAL_TIM_Base_Init>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000a9a:	f000 fdaf 	bl	80015fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aa2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000aa4:	f107 0310 	add.w	r3, r7, #16
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	480d      	ldr	r0, [pc, #52]	; (8000ae0 <MX_TIM2_Init+0x98>)
 8000aac:	f005 fc28 	bl	8006300 <HAL_TIM_ConfigClockSource>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000ab6:	f000 fda1 	bl	80015fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aba:	2300      	movs	r3, #0
 8000abc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ac2:	1d3b      	adds	r3, r7, #4
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4806      	ldr	r0, [pc, #24]	; (8000ae0 <MX_TIM2_Init+0x98>)
 8000ac8:	f006 f9f8 	bl	8006ebc <HAL_TIMEx_MasterConfigSynchronization>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000ad2:	f000 fd93 	bl	80015fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ad6:	bf00      	nop
 8000ad8:	3720      	adds	r7, #32
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	200002b0 	.word	0x200002b0

08000ae4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b08c      	sub	sp, #48	; 0x30
 8000ae8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000aea:	f107 030c 	add.w	r3, r7, #12
 8000aee:	2224      	movs	r2, #36	; 0x24
 8000af0:	2100      	movs	r1, #0
 8000af2:	4618      	mov	r0, r3
 8000af4:	f008 f87c 	bl	8008bf0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000af8:	463b      	mov	r3, r7
 8000afa:	2200      	movs	r2, #0
 8000afc:	601a      	str	r2, [r3, #0]
 8000afe:	605a      	str	r2, [r3, #4]
 8000b00:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b02:	4b21      	ldr	r3, [pc, #132]	; (8000b88 <MX_TIM3_Init+0xa4>)
 8000b04:	4a21      	ldr	r2, [pc, #132]	; (8000b8c <MX_TIM3_Init+0xa8>)
 8000b06:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000b08:	4b1f      	ldr	r3, [pc, #124]	; (8000b88 <MX_TIM3_Init+0xa4>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b0e:	4b1e      	ldr	r3, [pc, #120]	; (8000b88 <MX_TIM3_Init+0xa4>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3071;
 8000b14:	4b1c      	ldr	r3, [pc, #112]	; (8000b88 <MX_TIM3_Init+0xa4>)
 8000b16:	f640 32ff 	movw	r2, #3071	; 0xbff
 8000b1a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b1c:	4b1a      	ldr	r3, [pc, #104]	; (8000b88 <MX_TIM3_Init+0xa4>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b22:	4b19      	ldr	r3, [pc, #100]	; (8000b88 <MX_TIM3_Init+0xa4>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000b28:	2303      	movs	r3, #3
 8000b2a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000b30:	2301      	movs	r3, #1
 8000b32:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000b34:	2300      	movs	r3, #0
 8000b36:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000b40:	2301      	movs	r3, #1
 8000b42:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000b44:	2300      	movs	r3, #0
 8000b46:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000b4c:	f107 030c 	add.w	r3, r7, #12
 8000b50:	4619      	mov	r1, r3
 8000b52:	480d      	ldr	r0, [pc, #52]	; (8000b88 <MX_TIM3_Init+0xa4>)
 8000b54:	f005 f83c 	bl	8005bd0 <HAL_TIM_Encoder_Init>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000b5e:	f000 fd4d 	bl	80015fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b62:	2300      	movs	r3, #0
 8000b64:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b66:	2300      	movs	r3, #0
 8000b68:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b6a:	463b      	mov	r3, r7
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	4806      	ldr	r0, [pc, #24]	; (8000b88 <MX_TIM3_Init+0xa4>)
 8000b70:	f006 f9a4 	bl	8006ebc <HAL_TIMEx_MasterConfigSynchronization>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000b7a:	f000 fd3f 	bl	80015fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000b7e:	bf00      	nop
 8000b80:	3730      	adds	r7, #48	; 0x30
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	200002fc 	.word	0x200002fc
 8000b8c:	40000400 	.word	0x40000400

08000b90 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b08a      	sub	sp, #40	; 0x28
 8000b94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b96:	f107 031c 	add.w	r3, r7, #28
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	601a      	str	r2, [r3, #0]
 8000b9e:	605a      	str	r2, [r3, #4]
 8000ba0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ba2:	463b      	mov	r3, r7
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	601a      	str	r2, [r3, #0]
 8000ba8:	605a      	str	r2, [r3, #4]
 8000baa:	609a      	str	r2, [r3, #8]
 8000bac:	60da      	str	r2, [r3, #12]
 8000bae:	611a      	str	r2, [r3, #16]
 8000bb0:	615a      	str	r2, [r3, #20]
 8000bb2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000bb4:	4b21      	ldr	r3, [pc, #132]	; (8000c3c <MX_TIM4_Init+0xac>)
 8000bb6:	4a22      	ldr	r2, [pc, #136]	; (8000c40 <MX_TIM4_Init+0xb0>)
 8000bb8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 169;
 8000bba:	4b20      	ldr	r3, [pc, #128]	; (8000c3c <MX_TIM4_Init+0xac>)
 8000bbc:	22a9      	movs	r2, #169	; 0xa9
 8000bbe:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bc0:	4b1e      	ldr	r3, [pc, #120]	; (8000c3c <MX_TIM4_Init+0xac>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8000bc6:	4b1d      	ldr	r3, [pc, #116]	; (8000c3c <MX_TIM4_Init+0xac>)
 8000bc8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bcc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bce:	4b1b      	ldr	r3, [pc, #108]	; (8000c3c <MX_TIM4_Init+0xac>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bd4:	4b19      	ldr	r3, [pc, #100]	; (8000c3c <MX_TIM4_Init+0xac>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000bda:	4818      	ldr	r0, [pc, #96]	; (8000c3c <MX_TIM4_Init+0xac>)
 8000bdc:	f004 fe8e 	bl	80058fc <HAL_TIM_PWM_Init>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8000be6:	f000 fd09 	bl	80015fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bea:	2300      	movs	r3, #0
 8000bec:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000bf2:	f107 031c 	add.w	r3, r7, #28
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	4810      	ldr	r0, [pc, #64]	; (8000c3c <MX_TIM4_Init+0xac>)
 8000bfa:	f006 f95f 	bl	8006ebc <HAL_TIMEx_MasterConfigSynchronization>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8000c04:	f000 fcfa 	bl	80015fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c08:	2360      	movs	r3, #96	; 0x60
 8000c0a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c10:	2300      	movs	r3, #0
 8000c12:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c14:	2300      	movs	r3, #0
 8000c16:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c18:	463b      	mov	r3, r7
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	4807      	ldr	r0, [pc, #28]	; (8000c3c <MX_TIM4_Init+0xac>)
 8000c20:	f005 fa5a 	bl	80060d8 <HAL_TIM_PWM_ConfigChannel>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8000c2a:	f000 fce7 	bl	80015fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000c2e:	4803      	ldr	r0, [pc, #12]	; (8000c3c <MX_TIM4_Init+0xac>)
 8000c30:	f000 ff3e 	bl	8001ab0 <HAL_TIM_MspPostInit>

}
 8000c34:	bf00      	nop
 8000c36:	3728      	adds	r7, #40	; 0x28
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	20000348 	.word	0x20000348
 8000c40:	40000800 	.word	0x40000800

08000c44 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b088      	sub	sp, #32
 8000c48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c4a:	f107 0310 	add.w	r3, r7, #16
 8000c4e:	2200      	movs	r2, #0
 8000c50:	601a      	str	r2, [r3, #0]
 8000c52:	605a      	str	r2, [r3, #4]
 8000c54:	609a      	str	r2, [r3, #8]
 8000c56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c58:	1d3b      	adds	r3, r7, #4
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	601a      	str	r2, [r3, #0]
 8000c5e:	605a      	str	r2, [r3, #4]
 8000c60:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000c62:	4b1d      	ldr	r3, [pc, #116]	; (8000cd8 <MX_TIM5_Init+0x94>)
 8000c64:	4a1d      	ldr	r2, [pc, #116]	; (8000cdc <MX_TIM5_Init+0x98>)
 8000c66:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 169;
 8000c68:	4b1b      	ldr	r3, [pc, #108]	; (8000cd8 <MX_TIM5_Init+0x94>)
 8000c6a:	22a9      	movs	r2, #169	; 0xa9
 8000c6c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c6e:	4b1a      	ldr	r3, [pc, #104]	; (8000cd8 <MX_TIM5_Init+0x94>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4.294967295E9;
 8000c74:	4b18      	ldr	r3, [pc, #96]	; (8000cd8 <MX_TIM5_Init+0x94>)
 8000c76:	f04f 32ff 	mov.w	r2, #4294967295
 8000c7a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c7c:	4b16      	ldr	r3, [pc, #88]	; (8000cd8 <MX_TIM5_Init+0x94>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c82:	4b15      	ldr	r3, [pc, #84]	; (8000cd8 <MX_TIM5_Init+0x94>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000c88:	4813      	ldr	r0, [pc, #76]	; (8000cd8 <MX_TIM5_Init+0x94>)
 8000c8a:	f004 fcf7 	bl	800567c <HAL_TIM_Base_Init>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8000c94:	f000 fcb2 	bl	80015fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c9c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000c9e:	f107 0310 	add.w	r3, r7, #16
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	480c      	ldr	r0, [pc, #48]	; (8000cd8 <MX_TIM5_Init+0x94>)
 8000ca6:	f005 fb2b 	bl	8006300 <HAL_TIM_ConfigClockSource>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8000cb0:	f000 fca4 	bl	80015fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000cbc:	1d3b      	adds	r3, r7, #4
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	4805      	ldr	r0, [pc, #20]	; (8000cd8 <MX_TIM5_Init+0x94>)
 8000cc2:	f006 f8fb 	bl	8006ebc <HAL_TIMEx_MasterConfigSynchronization>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8000ccc:	f000 fc96 	bl	80015fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000cd0:	bf00      	nop
 8000cd2:	3720      	adds	r7, #32
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	20000394 	.word	0x20000394
 8000cdc:	40000c00 	.word	0x40000c00

08000ce0 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b088      	sub	sp, #32
 8000ce4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ce6:	f107 0310 	add.w	r3, r7, #16
 8000cea:	2200      	movs	r2, #0
 8000cec:	601a      	str	r2, [r3, #0]
 8000cee:	605a      	str	r2, [r3, #4]
 8000cf0:	609a      	str	r2, [r3, #8]
 8000cf2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cf4:	1d3b      	adds	r3, r7, #4
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	601a      	str	r2, [r3, #0]
 8000cfa:	605a      	str	r2, [r3, #4]
 8000cfc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000cfe:	4b1f      	ldr	r3, [pc, #124]	; (8000d7c <MX_TIM15_Init+0x9c>)
 8000d00:	4a1f      	ldr	r2, [pc, #124]	; (8000d80 <MX_TIM15_Init+0xa0>)
 8000d02:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 169;
 8000d04:	4b1d      	ldr	r3, [pc, #116]	; (8000d7c <MX_TIM15_Init+0x9c>)
 8000d06:	22a9      	movs	r2, #169	; 0xa9
 8000d08:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d0a:	4b1c      	ldr	r3, [pc, #112]	; (8000d7c <MX_TIM15_Init+0x9c>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 999;
 8000d10:	4b1a      	ldr	r3, [pc, #104]	; (8000d7c <MX_TIM15_Init+0x9c>)
 8000d12:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d16:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d18:	4b18      	ldr	r3, [pc, #96]	; (8000d7c <MX_TIM15_Init+0x9c>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000d1e:	4b17      	ldr	r3, [pc, #92]	; (8000d7c <MX_TIM15_Init+0x9c>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d24:	4b15      	ldr	r3, [pc, #84]	; (8000d7c <MX_TIM15_Init+0x9c>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8000d2a:	4814      	ldr	r0, [pc, #80]	; (8000d7c <MX_TIM15_Init+0x9c>)
 8000d2c:	f004 fca6 	bl	800567c <HAL_TIM_Base_Init>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 8000d36:	f000 fc61 	bl	80015fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d3e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8000d40:	f107 0310 	add.w	r3, r7, #16
 8000d44:	4619      	mov	r1, r3
 8000d46:	480d      	ldr	r0, [pc, #52]	; (8000d7c <MX_TIM15_Init+0x9c>)
 8000d48:	f005 fada 	bl	8006300 <HAL_TIM_ConfigClockSource>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 8000d52:	f000 fc53 	bl	80015fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000d56:	2320      	movs	r3, #32
 8000d58:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000d5e:	1d3b      	adds	r3, r7, #4
 8000d60:	4619      	mov	r1, r3
 8000d62:	4806      	ldr	r0, [pc, #24]	; (8000d7c <MX_TIM15_Init+0x9c>)
 8000d64:	f006 f8aa 	bl	8006ebc <HAL_TIMEx_MasterConfigSynchronization>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 8000d6e:	f000 fc45 	bl	80015fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8000d72:	bf00      	nop
 8000d74:	3720      	adds	r7, #32
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	200003e0 	.word	0x200003e0
 8000d80:	40014000 	.word	0x40014000

08000d84 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b084      	sub	sp, #16
 8000d88:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000d8a:	4b20      	ldr	r3, [pc, #128]	; (8000e0c <MX_DMA_Init+0x88>)
 8000d8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d8e:	4a1f      	ldr	r2, [pc, #124]	; (8000e0c <MX_DMA_Init+0x88>)
 8000d90:	f043 0304 	orr.w	r3, r3, #4
 8000d94:	6493      	str	r3, [r2, #72]	; 0x48
 8000d96:	4b1d      	ldr	r3, [pc, #116]	; (8000e0c <MX_DMA_Init+0x88>)
 8000d98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d9a:	f003 0304 	and.w	r3, r3, #4
 8000d9e:	60fb      	str	r3, [r7, #12]
 8000da0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000da2:	4b1a      	ldr	r3, [pc, #104]	; (8000e0c <MX_DMA_Init+0x88>)
 8000da4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000da6:	4a19      	ldr	r2, [pc, #100]	; (8000e0c <MX_DMA_Init+0x88>)
 8000da8:	f043 0302 	orr.w	r3, r3, #2
 8000dac:	6493      	str	r3, [r2, #72]	; 0x48
 8000dae:	4b17      	ldr	r3, [pc, #92]	; (8000e0c <MX_DMA_Init+0x88>)
 8000db0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000db2:	f003 0302 	and.w	r3, r3, #2
 8000db6:	60bb      	str	r3, [r7, #8]
 8000db8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000dba:	4b14      	ldr	r3, [pc, #80]	; (8000e0c <MX_DMA_Init+0x88>)
 8000dbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000dbe:	4a13      	ldr	r2, [pc, #76]	; (8000e0c <MX_DMA_Init+0x88>)
 8000dc0:	f043 0301 	orr.w	r3, r3, #1
 8000dc4:	6493      	str	r3, [r2, #72]	; 0x48
 8000dc6:	4b11      	ldr	r3, [pc, #68]	; (8000e0c <MX_DMA_Init+0x88>)
 8000dc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000dca:	f003 0301 	and.w	r3, r3, #1
 8000dce:	607b      	str	r3, [r7, #4]
 8000dd0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	200b      	movs	r0, #11
 8000dd8:	f002 feed 	bl	8003bb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000ddc:	200b      	movs	r0, #11
 8000dde:	f002 ff04 	bl	8003bea <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000de2:	2200      	movs	r2, #0
 8000de4:	2100      	movs	r1, #0
 8000de6:	200c      	movs	r0, #12
 8000de8:	f002 fee5 	bl	8003bb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000dec:	200c      	movs	r0, #12
 8000dee:	f002 fefc 	bl	8003bea <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 8000df2:	2200      	movs	r2, #0
 8000df4:	2100      	movs	r1, #0
 8000df6:	2038      	movs	r0, #56	; 0x38
 8000df8:	f002 fedd 	bl	8003bb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8000dfc:	2038      	movs	r0, #56	; 0x38
 8000dfe:	f002 fef4 	bl	8003bea <HAL_NVIC_EnableIRQ>

}
 8000e02:	bf00      	nop
 8000e04:	3710      	adds	r7, #16
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	40021000 	.word	0x40021000

08000e10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b08a      	sub	sp, #40	; 0x28
 8000e14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e16:	f107 0314 	add.w	r3, r7, #20
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	601a      	str	r2, [r3, #0]
 8000e1e:	605a      	str	r2, [r3, #4]
 8000e20:	609a      	str	r2, [r3, #8]
 8000e22:	60da      	str	r2, [r3, #12]
 8000e24:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e26:	4b39      	ldr	r3, [pc, #228]	; (8000f0c <MX_GPIO_Init+0xfc>)
 8000e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e2a:	4a38      	ldr	r2, [pc, #224]	; (8000f0c <MX_GPIO_Init+0xfc>)
 8000e2c:	f043 0304 	orr.w	r3, r3, #4
 8000e30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e32:	4b36      	ldr	r3, [pc, #216]	; (8000f0c <MX_GPIO_Init+0xfc>)
 8000e34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e36:	f003 0304 	and.w	r3, r3, #4
 8000e3a:	613b      	str	r3, [r7, #16]
 8000e3c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e3e:	4b33      	ldr	r3, [pc, #204]	; (8000f0c <MX_GPIO_Init+0xfc>)
 8000e40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e42:	4a32      	ldr	r2, [pc, #200]	; (8000f0c <MX_GPIO_Init+0xfc>)
 8000e44:	f043 0320 	orr.w	r3, r3, #32
 8000e48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e4a:	4b30      	ldr	r3, [pc, #192]	; (8000f0c <MX_GPIO_Init+0xfc>)
 8000e4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e4e:	f003 0320 	and.w	r3, r3, #32
 8000e52:	60fb      	str	r3, [r7, #12]
 8000e54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e56:	4b2d      	ldr	r3, [pc, #180]	; (8000f0c <MX_GPIO_Init+0xfc>)
 8000e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e5a:	4a2c      	ldr	r2, [pc, #176]	; (8000f0c <MX_GPIO_Init+0xfc>)
 8000e5c:	f043 0301 	orr.w	r3, r3, #1
 8000e60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e62:	4b2a      	ldr	r3, [pc, #168]	; (8000f0c <MX_GPIO_Init+0xfc>)
 8000e64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e66:	f003 0301 	and.w	r3, r3, #1
 8000e6a:	60bb      	str	r3, [r7, #8]
 8000e6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e6e:	4b27      	ldr	r3, [pc, #156]	; (8000f0c <MX_GPIO_Init+0xfc>)
 8000e70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e72:	4a26      	ldr	r2, [pc, #152]	; (8000f0c <MX_GPIO_Init+0xfc>)
 8000e74:	f043 0302 	orr.w	r3, r3, #2
 8000e78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e7a:	4b24      	ldr	r3, [pc, #144]	; (8000f0c <MX_GPIO_Init+0xfc>)
 8000e7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e7e:	f003 0302 	and.w	r3, r3, #2
 8000e82:	607b      	str	r3, [r7, #4]
 8000e84:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8000e86:	2200      	movs	r2, #0
 8000e88:	2101      	movs	r1, #1
 8000e8a:	4821      	ldr	r0, [pc, #132]	; (8000f10 <MX_GPIO_Init+0x100>)
 8000e8c:	f003 fb7c 	bl	8004588 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000e90:	2200      	movs	r2, #0
 8000e92:	2120      	movs	r1, #32
 8000e94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e98:	f003 fb76 	bl	8004588 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ea0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ea2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ea6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000eac:	f107 0314 	add.w	r3, r7, #20
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	4817      	ldr	r0, [pc, #92]	; (8000f10 <MX_GPIO_Init+0x100>)
 8000eb4:	f003 f9e6 	bl	8004284 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000eb8:	2301      	movs	r3, #1
 8000eba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ec8:	f107 0314 	add.w	r3, r7, #20
 8000ecc:	4619      	mov	r1, r3
 8000ece:	4810      	ldr	r0, [pc, #64]	; (8000f10 <MX_GPIO_Init+0x100>)
 8000ed0:	f003 f9d8 	bl	8004284 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000ed4:	2320      	movs	r3, #32
 8000ed6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000edc:	2300      	movs	r3, #0
 8000ede:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ee4:	f107 0314 	add.w	r3, r7, #20
 8000ee8:	4619      	mov	r1, r3
 8000eea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eee:	f003 f9c9 	bl	8004284 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	2028      	movs	r0, #40	; 0x28
 8000ef8:	f002 fe5d 	bl	8003bb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000efc:	2028      	movs	r0, #40	; 0x28
 8000efe:	f002 fe74 	bl	8003bea <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f02:	bf00      	nop
 8000f04:	3728      	adds	r7, #40	; 0x28
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	40021000 	.word	0x40021000
 8000f10:	48000800 	.word	0x48000800

08000f14 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
//------------------------------Part1&3:Motor PID----------------------------------//


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000f14:	b5b0      	push	{r4, r5, r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
	if (htim == &htim5) {
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	4a0d      	ldr	r2, [pc, #52]	; (8000f54 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d108      	bne.n	8000f36 <HAL_TIM_PeriodElapsedCallback+0x22>
		_micros += UINT32_MAX;
 8000f24:	4b0c      	ldr	r3, [pc, #48]	; (8000f58 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f2a:	1e54      	subs	r4, r2, #1
 8000f2c:	f143 0500 	adc.w	r5, r3, #0
 8000f30:	4b09      	ldr	r3, [pc, #36]	; (8000f58 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000f32:	e9c3 4500 	strd	r4, r5, [r3]
	}
	if (htim == &htim2) {
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	4a08      	ldr	r2, [pc, #32]	; (8000f5c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d106      	bne.n	8000f4c <HAL_TIM_PeriodElapsedCallback+0x38>
			updateInput();
 8000f3e:	f000 f82d 	bl	8000f9c <updateInput>
			QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim3);
 8000f42:	4b07      	ldr	r3, [pc, #28]	; (8000f60 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f48:	4a06      	ldr	r2, [pc, #24]	; (8000f64 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000f4a:	6013      	str	r3, [r2, #0]
		}
}
 8000f4c:	bf00      	nop
 8000f4e:	3708      	adds	r7, #8
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bdb0      	pop	{r4, r5, r7, pc}
 8000f54:	20000394 	.word	0x20000394
 8000f58:	20000430 	.word	0x20000430
 8000f5c:	200002b0 	.word	0x200002b0
 8000f60:	200002fc 	.word	0x200002fc
 8000f64:	200007a0 	.word	0x200007a0

08000f68 <micros>:

uint64_t micros() {
 8000f68:	b4b0      	push	{r4, r5, r7}
 8000f6a:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim5) + _micros;
 8000f6c:	4b09      	ldr	r3, [pc, #36]	; (8000f94 <micros+0x2c>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f72:	2200      	movs	r2, #0
 8000f74:	4618      	mov	r0, r3
 8000f76:	4611      	mov	r1, r2
 8000f78:	4b07      	ldr	r3, [pc, #28]	; (8000f98 <micros+0x30>)
 8000f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f7e:	1884      	adds	r4, r0, r2
 8000f80:	eb41 0503 	adc.w	r5, r1, r3
 8000f84:	4622      	mov	r2, r4
 8000f86:	462b      	mov	r3, r5
}
 8000f88:	4610      	mov	r0, r2
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bcb0      	pop	{r4, r5, r7}
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	20000394 	.word	0x20000394
 8000f98:	20000430 	.word	0x20000430

08000f9c <updateInput>:

void updateInput() {
 8000f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000fa0:	b083      	sub	sp, #12
 8000fa2:	af00      	add	r7, sp, #0
	sumEncode = 0;
 8000fa4:	4e5c      	ldr	r6, [pc, #368]	; (8001118 <updateInput+0x17c>)
 8000fa6:	f04f 0200 	mov.w	r2, #0
 8000faa:	f04f 0300 	mov.w	r3, #0
 8000fae:	e9c6 2300 	strd	r2, r3, [r6]
	sumTrimpot = 0;
 8000fb2:	4e5a      	ldr	r6, [pc, #360]	; (800111c <updateInput+0x180>)
 8000fb4:	f04f 0200 	mov.w	r2, #0
 8000fb8:	f04f 0300 	mov.w	r3, #0
 8000fbc:	e9c6 2300 	strd	r2, r3, [r6]
	for (int i = 0; i < 200; i++) {
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	607b      	str	r3, [r7, #4]
 8000fc4:	e029      	b.n	800101a <updateInput+0x7e>
		sumEncode += InputRead[2 * i];
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	005b      	lsls	r3, r3, #1
 8000fca:	4a55      	ldr	r2, [pc, #340]	; (8001120 <updateInput+0x184>)
 8000fcc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000fd0:	b29b      	uxth	r3, r3
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	4611      	mov	r1, r2
 8000fd8:	4b4f      	ldr	r3, [pc, #316]	; (8001118 <updateInput+0x17c>)
 8000fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fde:	eb10 0802 	adds.w	r8, r0, r2
 8000fe2:	eb41 0903 	adc.w	r9, r1, r3
 8000fe6:	4b4c      	ldr	r3, [pc, #304]	; (8001118 <updateInput+0x17c>)
 8000fe8:	e9c3 8900 	strd	r8, r9, [r3]
		sumTrimpot += InputRead[1 + (2 * i)];
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	005b      	lsls	r3, r3, #1
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	4a4b      	ldr	r2, [pc, #300]	; (8001120 <updateInput+0x184>)
 8000ff4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ff8:	b29b      	uxth	r3, r3
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	461c      	mov	r4, r3
 8000ffe:	4615      	mov	r5, r2
 8001000:	4b46      	ldr	r3, [pc, #280]	; (800111c <updateInput+0x180>)
 8001002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001006:	eb14 0a02 	adds.w	sl, r4, r2
 800100a:	eb45 0b03 	adc.w	fp, r5, r3
 800100e:	4b43      	ldr	r3, [pc, #268]	; (800111c <updateInput+0x180>)
 8001010:	e9c3 ab00 	strd	sl, fp, [r3]
	for (int i = 0; i < 200; i++) {
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	3301      	adds	r3, #1
 8001018:	607b      	str	r3, [r7, #4]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2bc7      	cmp	r3, #199	; 0xc7
 800101e:	ddd2      	ble.n	8000fc6 <updateInput+0x2a>
	}


	avgEncode = sumEncode / 200;
 8001020:	4b3d      	ldr	r3, [pc, #244]	; (8001118 <updateInput+0x17c>)
 8001022:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001026:	f04f 02c8 	mov.w	r2, #200	; 0xc8
 800102a:	f04f 0300 	mov.w	r3, #0
 800102e:	f7ff f8f3 	bl	8000218 <__aeabi_uldivmod>
 8001032:	4602      	mov	r2, r0
 8001034:	460b      	mov	r3, r1
 8001036:	4b3b      	ldr	r3, [pc, #236]	; (8001124 <updateInput+0x188>)
 8001038:	601a      	str	r2, [r3, #0]
	avgTrimpot = sumTrimpot / 200;
 800103a:	4b38      	ldr	r3, [pc, #224]	; (800111c <updateInput+0x180>)
 800103c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001040:	f04f 02c8 	mov.w	r2, #200	; 0xc8
 8001044:	f04f 0300 	mov.w	r3, #0
 8001048:	f7ff f8e6 	bl	8000218 <__aeabi_uldivmod>
 800104c:	4602      	mov	r2, r0
 800104e:	460b      	mov	r3, r1
 8001050:	b292      	uxth	r2, r2
 8001052:	4b35      	ldr	r3, [pc, #212]	; (8001128 <updateInput+0x18c>)
 8001054:	801a      	strh	r2, [r3, #0]
		/*if (mode_status == 2)
		{
			avgTrimpot = 2048;
		}*/

	directError = avgTrimpot - avgEncode;
 8001056:	4b34      	ldr	r3, [pc, #208]	; (8001128 <updateInput+0x18c>)
 8001058:	881a      	ldrh	r2, [r3, #0]
 800105a:	4b32      	ldr	r3, [pc, #200]	; (8001124 <updateInput+0x188>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	b29b      	uxth	r3, r3
 8001060:	1ad3      	subs	r3, r2, r3
 8001062:	b29b      	uxth	r3, r3
 8001064:	b21a      	sxth	r2, r3
 8001066:	4b31      	ldr	r3, [pc, #196]	; (800112c <updateInput+0x190>)
 8001068:	801a      	strh	r2, [r3, #0]



	if (directError > 0) {
 800106a:	4b30      	ldr	r3, [pc, #192]	; (800112c <updateInput+0x190>)
 800106c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001070:	2b00      	cmp	r3, #0
 8001072:	dd0a      	ble.n	800108a <updateInput+0xee>
		wrappedError = directError - 4096; // Moving backward with wrap-around
 8001074:	4b2d      	ldr	r3, [pc, #180]	; (800112c <updateInput+0x190>)
 8001076:	f9b3 3000 	ldrsh.w	r3, [r3]
 800107a:	b29b      	uxth	r3, r3
 800107c:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 8001080:	b29b      	uxth	r3, r3
 8001082:	b21a      	sxth	r2, r3
 8001084:	4b2a      	ldr	r3, [pc, #168]	; (8001130 <updateInput+0x194>)
 8001086:	801a      	strh	r2, [r3, #0]
 8001088:	e009      	b.n	800109e <updateInput+0x102>
	} else {
		wrappedError = directError + 4096; // Moving forward with wrap-around
 800108a:	4b28      	ldr	r3, [pc, #160]	; (800112c <updateInput+0x190>)
 800108c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001090:	b29b      	uxth	r3, r3
 8001092:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001096:	b29b      	uxth	r3, r3
 8001098:	b21a      	sxth	r2, r3
 800109a:	4b25      	ldr	r3, [pc, #148]	; (8001130 <updateInput+0x194>)
 800109c:	801a      	strh	r2, [r3, #0]
	}

	if (abs(directError) < abs(wrappedError)) {
 800109e:	4b23      	ldr	r3, [pc, #140]	; (800112c <updateInput+0x190>)
 80010a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	bfb8      	it	lt
 80010a8:	425b      	neglt	r3, r3
 80010aa:	b29a      	uxth	r2, r3
 80010ac:	4b20      	ldr	r3, [pc, #128]	; (8001130 <updateInput+0x194>)
 80010ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	bfb8      	it	lt
 80010b6:	425b      	neglt	r3, r3
 80010b8:	b29b      	uxth	r3, r3
 80010ba:	429a      	cmp	r2, r3
 80010bc:	d205      	bcs.n	80010ca <updateInput+0x12e>
		Error = directError;
 80010be:	4b1b      	ldr	r3, [pc, #108]	; (800112c <updateInput+0x190>)
 80010c0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80010c4:	4b1b      	ldr	r3, [pc, #108]	; (8001134 <updateInput+0x198>)
 80010c6:	801a      	strh	r2, [r3, #0]
 80010c8:	e004      	b.n	80010d4 <updateInput+0x138>
	} else {
		Error = wrappedError;
 80010ca:	4b19      	ldr	r3, [pc, #100]	; (8001130 <updateInput+0x194>)
 80010cc:	f9b3 2000 	ldrsh.w	r2, [r3]
 80010d0:	4b18      	ldr	r3, [pc, #96]	; (8001134 <updateInput+0x198>)
 80010d2:	801a      	strh	r2, [r3, #0]
	}

	if (Error < 0) {
 80010d4:	4b17      	ldr	r3, [pc, #92]	; (8001134 <updateInput+0x198>)
 80010d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	da03      	bge.n	80010e6 <updateInput+0x14a>
		direction = 0; // Counter-clockwise / backward
 80010de:	4b16      	ldr	r3, [pc, #88]	; (8001138 <updateInput+0x19c>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	701a      	strb	r2, [r3, #0]
 80010e4:	e002      	b.n	80010ec <updateInput+0x150>
	} else {
		direction = 1; // Clockwise / forward
 80010e6:	4b14      	ldr	r3, [pc, #80]	; (8001138 <updateInput+0x19c>)
 80010e8:	2201      	movs	r2, #1
 80010ea:	701a      	strb	r2, [r3, #0]
	}


	PIDcalculate();
 80010ec:	f000 f89c 	bl	8001228 <PIDcalculate>
	RxInt = (((int16_t)RxBuffer[2] << 8)) + ((int8_t)(RxBuffer[1]));
 80010f0:	4b12      	ldr	r3, [pc, #72]	; (800113c <updateInput+0x1a0>)
 80010f2:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80010f6:	b29b      	uxth	r3, r3
 80010f8:	021b      	lsls	r3, r3, #8
 80010fa:	b29a      	uxth	r2, r3
 80010fc:	4b0f      	ldr	r3, [pc, #60]	; (800113c <updateInput+0x1a0>)
 80010fe:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001102:	b29b      	uxth	r3, r3
 8001104:	4413      	add	r3, r2
 8001106:	b29b      	uxth	r3, r3
 8001108:	b21a      	sxth	r2, r3
 800110a:	4b0d      	ldr	r3, [pc, #52]	; (8001140 <updateInput+0x1a4>)
 800110c:	801a      	strh	r2, [r3, #0]


//	PWM = arm_pid_f32(&PID, Error);
}
 800110e:	bf00      	nop
 8001110:	370c      	adds	r7, #12
 8001112:	46bd      	mov	sp, r7
 8001114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001118:	20000758 	.word	0x20000758
 800111c:	20000760 	.word	0x20000760
 8001120:	20000438 	.word	0x20000438
 8001124:	20000768 	.word	0x20000768
 8001128:	2000076c 	.word	0x2000076c
 800112c:	2000077e 	.word	0x2000077e
 8001130:	20000784 	.word	0x20000784
 8001134:	20000778 	.word	0x20000778
 8001138:	20000782 	.word	0x20000782
 800113c:	20000798 	.word	0x20000798
 8001140:	2000076e 	.word	0x2000076e

08001144 <motorControl>:

void motorControl() {
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
		if (direction == 0) // ทว�?เ�?�?ม
 8001148:	4b0f      	ldr	r3, [pc, #60]	; (8001188 <motorControl+0x44>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d10a      	bne.n	8001166 <motorControl+0x22>
				{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, RESET);
 8001150:	2200      	movs	r2, #0
 8001152:	2101      	movs	r1, #1
 8001154:	480d      	ldr	r0, [pc, #52]	; (800118c <motorControl+0x48>)
 8001156:	f003 fa17 	bl	8004588 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, PWM);
 800115a:	4b0d      	ldr	r3, [pc, #52]	; (8001190 <motorControl+0x4c>)
 800115c:	881a      	ldrh	r2, [r3, #0]
 800115e:	4b0d      	ldr	r3, [pc, #52]	; (8001194 <motorControl+0x50>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	635a      	str	r2, [r3, #52]	; 0x34
		} else if (direction == 1) // ตามเ�?�?ม
				{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, SET);
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, PWM);
		}
}
 8001164:	e00d      	b.n	8001182 <motorControl+0x3e>
		} else if (direction == 1) // ตามเ�?�?ม
 8001166:	4b08      	ldr	r3, [pc, #32]	; (8001188 <motorControl+0x44>)
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	2b01      	cmp	r3, #1
 800116c:	d109      	bne.n	8001182 <motorControl+0x3e>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, SET);
 800116e:	2201      	movs	r2, #1
 8001170:	2101      	movs	r1, #1
 8001172:	4806      	ldr	r0, [pc, #24]	; (800118c <motorControl+0x48>)
 8001174:	f003 fa08 	bl	8004588 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, PWM);
 8001178:	4b05      	ldr	r3, [pc, #20]	; (8001190 <motorControl+0x4c>)
 800117a:	881a      	ldrh	r2, [r3, #0]
 800117c:	4b05      	ldr	r3, [pc, #20]	; (8001194 <motorControl+0x50>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001182:	bf00      	nop
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	20000782 	.word	0x20000782
 800118c:	48000800 	.word	0x48000800
 8001190:	20000780 	.word	0x20000780
 8001194:	20000348 	.word	0x20000348

08001198 <Communication>:

void Communication() {
 8001198:	b5b0      	push	{r4, r5, r7, lr}
 800119a:	af00      	add	r7, sp, #0
	static uint16_t CommTime = 0;
	if (CommTime < micros()) {
 800119c:	4b1c      	ldr	r3, [pc, #112]	; (8001210 <Communication+0x78>)
 800119e:	881b      	ldrh	r3, [r3, #0]
 80011a0:	b29b      	uxth	r3, r3
 80011a2:	2200      	movs	r2, #0
 80011a4:	461c      	mov	r4, r3
 80011a6:	4615      	mov	r5, r2
 80011a8:	f7ff fede 	bl	8000f68 <micros>
 80011ac:	4602      	mov	r2, r0
 80011ae:	460b      	mov	r3, r1
 80011b0:	4294      	cmp	r4, r2
 80011b2:	eb75 0303 	sbcs.w	r3, r5, r3
 80011b6:	d228      	bcs.n	800120a <Communication+0x72>
		CommTime = micros() + 5000;
 80011b8:	f7ff fed6 	bl	8000f68 <micros>
 80011bc:	4602      	mov	r2, r0
 80011be:	460b      	mov	r3, r1
 80011c0:	b293      	uxth	r3, r2
 80011c2:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80011c6:	3308      	adds	r3, #8
 80011c8:	b29a      	uxth	r2, r3
 80011ca:	4b11      	ldr	r3, [pc, #68]	; (8001210 <Communication+0x78>)
 80011cc:	801a      	strh	r2, [r3, #0]
		HigherPos = (uint8_t) (avgEncode >> 8);
 80011ce:	4b11      	ldr	r3, [pc, #68]	; (8001214 <Communication+0x7c>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	0a1b      	lsrs	r3, r3, #8
 80011d4:	b2da      	uxtb	r2, r3
 80011d6:	4b10      	ldr	r3, [pc, #64]	; (8001218 <Communication+0x80>)
 80011d8:	701a      	strb	r2, [r3, #0]
		LowerPos = (uint8_t) avgEncode;
 80011da:	4b0e      	ldr	r3, [pc, #56]	; (8001214 <Communication+0x7c>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	b2da      	uxtb	r2, r3
 80011e0:	4b0e      	ldr	r3, [pc, #56]	; (800121c <Communication+0x84>)
 80011e2:	701a      	strb	r2, [r3, #0]
		TxBuffer[0] = 69;
 80011e4:	4b0e      	ldr	r3, [pc, #56]	; (8001220 <Communication+0x88>)
 80011e6:	2245      	movs	r2, #69	; 0x45
 80011e8:	701a      	strb	r2, [r3, #0]
		TxBuffer[1] = HigherPos;
 80011ea:	4b0b      	ldr	r3, [pc, #44]	; (8001218 <Communication+0x80>)
 80011ec:	781a      	ldrb	r2, [r3, #0]
 80011ee:	4b0c      	ldr	r3, [pc, #48]	; (8001220 <Communication+0x88>)
 80011f0:	705a      	strb	r2, [r3, #1]
		TxBuffer[2] = LowerPos;
 80011f2:	4b0a      	ldr	r3, [pc, #40]	; (800121c <Communication+0x84>)
 80011f4:	781a      	ldrb	r2, [r3, #0]
 80011f6:	4b0a      	ldr	r3, [pc, #40]	; (8001220 <Communication+0x88>)
 80011f8:	709a      	strb	r2, [r3, #2]
		TxBuffer[3] = 10;
 80011fa:	4b09      	ldr	r3, [pc, #36]	; (8001220 <Communication+0x88>)
 80011fc:	220a      	movs	r2, #10
 80011fe:	70da      	strb	r2, [r3, #3]
		HAL_UART_Transmit_DMA(&hlpuart1, TxBuffer, 4);
 8001200:	2204      	movs	r2, #4
 8001202:	4907      	ldr	r1, [pc, #28]	; (8001220 <Communication+0x88>)
 8001204:	4807      	ldr	r0, [pc, #28]	; (8001224 <Communication+0x8c>)
 8001206:	f006 f819 	bl	800723c <HAL_UART_Transmit_DMA>
	}
}
 800120a:	bf00      	nop
 800120c:	bdb0      	pop	{r4, r5, r7, pc}
 800120e:	bf00      	nop
 8001210:	20000ae8 	.word	0x20000ae8
 8001214:	20000768 	.word	0x20000768
 8001218:	2000079c 	.word	0x2000079c
 800121c:	2000079d 	.word	0x2000079d
 8001220:	20000794 	.word	0x20000794
 8001224:	20000110 	.word	0x20000110

08001228 <PIDcalculate>:

void PIDcalculate() {
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
	/* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
	cmd = cmd_1 + A0 * Error + A1 * Error_1 + A2 * Error_2;
 800122c:	4b3b      	ldr	r3, [pc, #236]	; (800131c <PIDcalculate+0xf4>)
 800122e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001232:	ee07 3a90 	vmov	s15, r3
 8001236:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800123a:	4b39      	ldr	r3, [pc, #228]	; (8001320 <PIDcalculate+0xf8>)
 800123c:	edd3 7a00 	vldr	s15, [r3]
 8001240:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001244:	4b37      	ldr	r3, [pc, #220]	; (8001324 <PIDcalculate+0xfc>)
 8001246:	edd3 7a00 	vldr	s15, [r3]
 800124a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800124e:	4b36      	ldr	r3, [pc, #216]	; (8001328 <PIDcalculate+0x100>)
 8001250:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001254:	ee07 3a90 	vmov	s15, r3
 8001258:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800125c:	4b33      	ldr	r3, [pc, #204]	; (800132c <PIDcalculate+0x104>)
 800125e:	edd3 7a00 	vldr	s15, [r3]
 8001262:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001266:	ee37 7a27 	vadd.f32	s14, s14, s15
 800126a:	4b31      	ldr	r3, [pc, #196]	; (8001330 <PIDcalculate+0x108>)
 800126c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001270:	ee07 3a90 	vmov	s15, r3
 8001274:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001278:	4b2e      	ldr	r3, [pc, #184]	; (8001334 <PIDcalculate+0x10c>)
 800127a:	edd3 7a00 	vldr	s15, [r3]
 800127e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001282:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001286:	4b2c      	ldr	r3, [pc, #176]	; (8001338 <PIDcalculate+0x110>)
 8001288:	edc3 7a00 	vstr	s15, [r3]
	if (cmd > 1000 && direction == 1) // ตามเ�?�?ม Anti windup
 800128c:	4b2a      	ldr	r3, [pc, #168]	; (8001338 <PIDcalculate+0x110>)
 800128e:	edd3 7a00 	vldr	s15, [r3]
 8001292:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800133c <PIDcalculate+0x114>
 8001296:	eef4 7ac7 	vcmpe.f32	s15, s14
 800129a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800129e:	dd0a      	ble.n	80012b6 <PIDcalculate+0x8e>
 80012a0:	4b27      	ldr	r3, [pc, #156]	; (8001340 <PIDcalculate+0x118>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	d106      	bne.n	80012b6 <PIDcalculate+0x8e>
			{
		cmd = 1000;
 80012a8:	4b23      	ldr	r3, [pc, #140]	; (8001338 <PIDcalculate+0x110>)
 80012aa:	4a26      	ldr	r2, [pc, #152]	; (8001344 <PIDcalculate+0x11c>)
 80012ac:	601a      	str	r2, [r3, #0]
		direction = 1;
 80012ae:	4b24      	ldr	r3, [pc, #144]	; (8001340 <PIDcalculate+0x118>)
 80012b0:	2201      	movs	r2, #1
 80012b2:	701a      	strb	r2, [r3, #0]
 80012b4:	e013      	b.n	80012de <PIDcalculate+0xb6>
	} else if (cmd < -1000 && direction == 0) // ทว�?เ�?�?ม
 80012b6:	4b20      	ldr	r3, [pc, #128]	; (8001338 <PIDcalculate+0x110>)
 80012b8:	edd3 7a00 	vldr	s15, [r3]
 80012bc:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8001348 <PIDcalculate+0x120>
 80012c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012c8:	d509      	bpl.n	80012de <PIDcalculate+0xb6>
 80012ca:	4b1d      	ldr	r3, [pc, #116]	; (8001340 <PIDcalculate+0x118>)
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d105      	bne.n	80012de <PIDcalculate+0xb6>
			{
		cmd = -1000;
 80012d2:	4b19      	ldr	r3, [pc, #100]	; (8001338 <PIDcalculate+0x110>)
 80012d4:	4a1d      	ldr	r2, [pc, #116]	; (800134c <PIDcalculate+0x124>)
 80012d6:	601a      	str	r2, [r3, #0]
		direction = 0;
 80012d8:	4b19      	ldr	r3, [pc, #100]	; (8001340 <PIDcalculate+0x118>)
 80012da:	2200      	movs	r2, #0
 80012dc:	701a      	strb	r2, [r3, #0]
	}
	cmd_1 = cmd;
 80012de:	4b16      	ldr	r3, [pc, #88]	; (8001338 <PIDcalculate+0x110>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a10      	ldr	r2, [pc, #64]	; (8001324 <PIDcalculate+0xfc>)
 80012e4:	6013      	str	r3, [r2, #0]
	Error_2 = Error_1;
 80012e6:	4b10      	ldr	r3, [pc, #64]	; (8001328 <PIDcalculate+0x100>)
 80012e8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80012ec:	4b10      	ldr	r3, [pc, #64]	; (8001330 <PIDcalculate+0x108>)
 80012ee:	801a      	strh	r2, [r3, #0]
	Error_1 = Error;
 80012f0:	4b0a      	ldr	r3, [pc, #40]	; (800131c <PIDcalculate+0xf4>)
 80012f2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80012f6:	4b0c      	ldr	r3, [pc, #48]	; (8001328 <PIDcalculate+0x100>)
 80012f8:	801a      	strh	r2, [r3, #0]

	PWM = fabs(cmd);
 80012fa:	4b0f      	ldr	r3, [pc, #60]	; (8001338 <PIDcalculate+0x110>)
 80012fc:	edd3 7a00 	vldr	s15, [r3]
 8001300:	eef0 7ae7 	vabs.f32	s15, s15
 8001304:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001308:	ee17 3a90 	vmov	r3, s15
 800130c:	b29a      	uxth	r2, r3
 800130e:	4b10      	ldr	r3, [pc, #64]	; (8001350 <PIDcalculate+0x128>)
 8001310:	801a      	strh	r2, [r3, #0]
}
 8001312:	bf00      	nop
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr
 800131c:	20000778 	.word	0x20000778
 8001320:	20000788 	.word	0x20000788
 8001324:	20000774 	.word	0x20000774
 8001328:	2000077a 	.word	0x2000077a
 800132c:	2000078c 	.word	0x2000078c
 8001330:	2000077c 	.word	0x2000077c
 8001334:	20000790 	.word	0x20000790
 8001338:	20000770 	.word	0x20000770
 800133c:	447a0000 	.word	0x447a0000
 8001340:	20000782 	.word	0x20000782
 8001344:	447a0000 	.word	0x447a0000
 8001348:	c47a0000 	.word	0xc47a0000
 800134c:	c47a0000 	.word	0xc47a0000
 8001350:	20000780 	.word	0x20000780

08001354 <UARTDMAconfig>:

void UARTDMAconfig() {
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(&hlpuart1, RxBuffer, 4);
 8001358:	2204      	movs	r2, #4
 800135a:	4903      	ldr	r1, [pc, #12]	; (8001368 <UARTDMAconfig+0x14>)
 800135c:	4803      	ldr	r0, [pc, #12]	; (800136c <UARTDMAconfig+0x18>)
 800135e:	f005 ffed 	bl	800733c <HAL_UART_Receive_DMA>
}
 8001362:	bf00      	nop
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	20000798 	.word	0x20000798
 800136c:	20000110 	.word	0x20000110

08001370 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *uart) {
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]

}
 8001378:	bf00      	nop
 800137a:	370c      	adds	r7, #12
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr

08001384 <motor>:
//------------------------------------------------------------------------------//
//----------------------------------Part2:QEI-----------------------------------//
void motor() {
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
	x = (period / 100) * duty;
 8001388:	4b28      	ldr	r3, [pc, #160]	; (800142c <motor+0xa8>)
 800138a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800138e:	4a28      	ldr	r2, [pc, #160]	; (8001430 <motor+0xac>)
 8001390:	fb82 1203 	smull	r1, r2, r2, r3
 8001394:	1152      	asrs	r2, r2, #5
 8001396:	17db      	asrs	r3, r3, #31
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	b21b      	sxth	r3, r3
 800139c:	b29a      	uxth	r2, r3
 800139e:	4b25      	ldr	r3, [pc, #148]	; (8001434 <motor+0xb0>)
 80013a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013a4:	b29b      	uxth	r3, r3
 80013a6:	fb12 f303 	smulbb	r3, r2, r3
 80013aa:	b29b      	uxth	r3, r3
 80013ac:	b21a      	sxth	r2, r3
 80013ae:	4b22      	ldr	r3, [pc, #136]	; (8001438 <motor+0xb4>)
 80013b0:	801a      	strh	r2, [r3, #0]

	if (duty > 0) {
 80013b2:	4b20      	ldr	r3, [pc, #128]	; (8001434 <motor+0xb0>)
 80013b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	dd09      	ble.n	80013d0 <motor+0x4c>
		InA = x;
 80013bc:	4b1e      	ldr	r3, [pc, #120]	; (8001438 <motor+0xb4>)
 80013be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013c2:	461a      	mov	r2, r3
 80013c4:	4b1d      	ldr	r3, [pc, #116]	; (800143c <motor+0xb8>)
 80013c6:	601a      	str	r2, [r3, #0]
		InB = 0;
 80013c8:	4b1d      	ldr	r3, [pc, #116]	; (8001440 <motor+0xbc>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	601a      	str	r2, [r3, #0]
 80013ce:	e01d      	b.n	800140c <motor+0x88>
	}

	else if (duty < 0) {
 80013d0:	4b18      	ldr	r3, [pc, #96]	; (8001434 <motor+0xb0>)
 80013d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	da0d      	bge.n	80013f6 <motor+0x72>
		InA = 0;
 80013da:	4b18      	ldr	r3, [pc, #96]	; (800143c <motor+0xb8>)
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
		InB = abs(x);
 80013e0:	4b15      	ldr	r3, [pc, #84]	; (8001438 <motor+0xb4>)
 80013e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	bfb8      	it	lt
 80013ea:	425b      	neglt	r3, r3
 80013ec:	b29b      	uxth	r3, r3
 80013ee:	461a      	mov	r2, r3
 80013f0:	4b13      	ldr	r3, [pc, #76]	; (8001440 <motor+0xbc>)
 80013f2:	601a      	str	r2, [r3, #0]
 80013f4:	e00a      	b.n	800140c <motor+0x88>
	}

	else if (duty == 0) {
 80013f6:	4b0f      	ldr	r3, [pc, #60]	; (8001434 <motor+0xb0>)
 80013f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d105      	bne.n	800140c <motor+0x88>
		InA = 0;
 8001400:	4b0e      	ldr	r3, [pc, #56]	; (800143c <motor+0xb8>)
 8001402:	2200      	movs	r2, #0
 8001404:	601a      	str	r2, [r3, #0]
		InB = 0;
 8001406:	4b0e      	ldr	r3, [pc, #56]	; (8001440 <motor+0xbc>)
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
	}

	//__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, InA);
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, InA);
 800140c:	4b0b      	ldr	r3, [pc, #44]	; (800143c <motor+0xb8>)
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	4b0c      	ldr	r3, [pc, #48]	; (8001444 <motor+0xc0>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, InB);
 8001416:	4b0a      	ldr	r3, [pc, #40]	; (8001440 <motor+0xbc>)
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	4b0a      	ldr	r3, [pc, #40]	; (8001444 <motor+0xc0>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001420:	bf00      	nop
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	20000010 	.word	0x20000010
 8001430:	51eb851f 	.word	0x51eb851f
 8001434:	20000acc 	.word	0x20000acc
 8001438:	20000ace 	.word	0x20000ace
 800143c:	20000ac4 	.word	0x20000ac4
 8001440:	20000ac8 	.word	0x20000ac8
 8001444:	20000264 	.word	0x20000264

08001448 <PID_QEI>:

void PID_QEI() {
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
//			error = directError;
//		} else {
//			error = wrappedError;
//		}

	error = avgTrimpot - (QEIReadRaw*4096)/3072;
 800144c:	4b31      	ldr	r3, [pc, #196]	; (8001514 <PID_QEI+0xcc>)
 800144e:	881a      	ldrh	r2, [r3, #0]
 8001450:	4b31      	ldr	r3, [pc, #196]	; (8001518 <PID_QEI+0xd0>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	031b      	lsls	r3, r3, #12
 8001456:	4931      	ldr	r1, [pc, #196]	; (800151c <PID_QEI+0xd4>)
 8001458:	fba1 1303 	umull	r1, r3, r1, r3
 800145c:	0adb      	lsrs	r3, r3, #11
 800145e:	b29b      	uxth	r3, r3
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	b29b      	uxth	r3, r3
 8001464:	b21a      	sxth	r2, r3
 8001466:	4b2e      	ldr	r3, [pc, #184]	; (8001520 <PID_QEI+0xd8>)
 8001468:	801a      	strh	r2, [r3, #0]
	sum_e = sum_e + error;
 800146a:	4b2d      	ldr	r3, [pc, #180]	; (8001520 <PID_QEI+0xd8>)
 800146c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001470:	ee07 3a90 	vmov	s15, r3
 8001474:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001478:	4b2a      	ldr	r3, [pc, #168]	; (8001524 <PID_QEI+0xdc>)
 800147a:	edd3 7a00 	vldr	s15, [r3]
 800147e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001482:	4b28      	ldr	r3, [pc, #160]	; (8001524 <PID_QEI+0xdc>)
 8001484:	edc3 7a00 	vstr	s15, [r3]
	u = (Kp_QEI * error) + (Ki_QEI * sum_e) + (Kd_QEI * (error - error_p));
 8001488:	4b25      	ldr	r3, [pc, #148]	; (8001520 <PID_QEI+0xd8>)
 800148a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800148e:	ee07 3a90 	vmov	s15, r3
 8001492:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001496:	4b24      	ldr	r3, [pc, #144]	; (8001528 <PID_QEI+0xe0>)
 8001498:	edd3 7a00 	vldr	s15, [r3]
 800149c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014a0:	4b22      	ldr	r3, [pc, #136]	; (800152c <PID_QEI+0xe4>)
 80014a2:	edd3 6a00 	vldr	s13, [r3]
 80014a6:	4b1f      	ldr	r3, [pc, #124]	; (8001524 <PID_QEI+0xdc>)
 80014a8:	edd3 7a00 	vldr	s15, [r3]
 80014ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014b4:	4b1a      	ldr	r3, [pc, #104]	; (8001520 <PID_QEI+0xd8>)
 80014b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014ba:	ee07 3a90 	vmov	s15, r3
 80014be:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80014c2:	4b1b      	ldr	r3, [pc, #108]	; (8001530 <PID_QEI+0xe8>)
 80014c4:	edd3 7a00 	vldr	s15, [r3]
 80014c8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80014cc:	4b19      	ldr	r3, [pc, #100]	; (8001534 <PID_QEI+0xec>)
 80014ce:	edd3 7a00 	vldr	s15, [r3]
 80014d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014da:	4b17      	ldr	r3, [pc, #92]	; (8001538 <PID_QEI+0xf0>)
 80014dc:	edc3 7a00 	vstr	s15, [r3]
	duty = u;
 80014e0:	4b15      	ldr	r3, [pc, #84]	; (8001538 <PID_QEI+0xf0>)
 80014e2:	edd3 7a00 	vldr	s15, [r3]
 80014e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014ea:	ee17 3a90 	vmov	r3, s15
 80014ee:	b21a      	sxth	r2, r3
 80014f0:	4b12      	ldr	r3, [pc, #72]	; (800153c <PID_QEI+0xf4>)
 80014f2:	801a      	strh	r2, [r3, #0]
	error_p = error;
 80014f4:	4b0a      	ldr	r3, [pc, #40]	; (8001520 <PID_QEI+0xd8>)
 80014f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014fa:	ee07 3a90 	vmov	s15, r3
 80014fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001502:	4b0b      	ldr	r3, [pc, #44]	; (8001530 <PID_QEI+0xe8>)
 8001504:	edc3 7a00 	vstr	s15, [r3]
}
 8001508:	bf00      	nop
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	2000076c 	.word	0x2000076c
 8001518:	200007a0 	.word	0x200007a0
 800151c:	aaaaaaab 	.word	0xaaaaaaab
 8001520:	20000ad0 	.word	0x20000ad0
 8001524:	20000ad4 	.word	0x20000ad4
 8001528:	20000014 	.word	0x20000014
 800152c:	20000ad8 	.word	0x20000ad8
 8001530:	20000ae0 	.word	0x20000ae0
 8001534:	20000adc 	.word	0x20000adc
 8001538:	20000ae4 	.word	0x20000ae4
 800153c:	20000acc 	.word	0x20000acc

08001540 <HAL_GPIO_EXTI_Callback>:
//-------------------------------------------------------------------------------//
//-------------------------------------Mode--------------------------------------//
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001540:	b480      	push	{r7}
 8001542:	b085      	sub	sp, #20
 8001544:	af00      	add	r7, sp, #0
 8001546:	4603      	mov	r3, r0
 8001548:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_13) {
 800154a:	88fb      	ldrh	r3, [r7, #6]
 800154c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001550:	d116      	bne.n	8001580 <HAL_GPIO_EXTI_Callback+0x40>
		int pre_mode_status = mode_status;
 8001552:	4b0e      	ldr	r3, [pc, #56]	; (800158c <HAL_GPIO_EXTI_Callback+0x4c>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	60fb      	str	r3, [r7, #12]
		if (pre_mode_status == 3) {
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	2b03      	cmp	r3, #3
 800155c:	d103      	bne.n	8001566 <HAL_GPIO_EXTI_Callback+0x26>
			mode_status = 1;
 800155e:	4b0b      	ldr	r3, [pc, #44]	; (800158c <HAL_GPIO_EXTI_Callback+0x4c>)
 8001560:	2201      	movs	r2, #1
 8001562:	601a      	str	r2, [r3, #0]
			mode_status = 2;
		} else if (pre_mode_status == 2) {
			mode_status = 3;
		}
	}
}
 8001564:	e00c      	b.n	8001580 <HAL_GPIO_EXTI_Callback+0x40>
		} else if (pre_mode_status == 1) {
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	2b01      	cmp	r3, #1
 800156a:	d103      	bne.n	8001574 <HAL_GPIO_EXTI_Callback+0x34>
			mode_status = 2;
 800156c:	4b07      	ldr	r3, [pc, #28]	; (800158c <HAL_GPIO_EXTI_Callback+0x4c>)
 800156e:	2202      	movs	r2, #2
 8001570:	601a      	str	r2, [r3, #0]
}
 8001572:	e005      	b.n	8001580 <HAL_GPIO_EXTI_Callback+0x40>
		} else if (pre_mode_status == 2) {
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	2b02      	cmp	r3, #2
 8001578:	d102      	bne.n	8001580 <HAL_GPIO_EXTI_Callback+0x40>
			mode_status = 3;
 800157a:	4b04      	ldr	r3, [pc, #16]	; (800158c <HAL_GPIO_EXTI_Callback+0x4c>)
 800157c:	2203      	movs	r2, #3
 800157e:	601a      	str	r2, [r3, #0]
}
 8001580:	bf00      	nop
 8001582:	3714      	adds	r7, #20
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr
 800158c:	20000000 	.word	0x20000000

08001590 <Mode_LD2>:
void Mode_LD2() {
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
	if (mode_status == 1) {
 8001594:	4b17      	ldr	r3, [pc, #92]	; (80015f4 <Mode_LD2+0x64>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	2b01      	cmp	r3, #1
 800159a:	d106      	bne.n	80015aa <Mode_LD2+0x1a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET); //เปิดไฟ
 800159c:	2201      	movs	r2, #1
 800159e:	2120      	movs	r1, #32
 80015a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015a4:	f002 fff0 	bl	8004588 <HAL_GPIO_WritePin>
		if (timestamp <= HAL_GetTick()) {
			timestamp = HAL_GetTick() + 1000;
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5); // สลับสถานะของ LED
		}
	}
}
 80015a8:	e021      	b.n	80015ee <Mode_LD2+0x5e>
	} else if (mode_status == 2) {
 80015aa:	4b12      	ldr	r3, [pc, #72]	; (80015f4 <Mode_LD2+0x64>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	2b02      	cmp	r3, #2
 80015b0:	d106      	bne.n	80015c0 <Mode_LD2+0x30>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET); //เปิดไฟ
 80015b2:	2200      	movs	r2, #0
 80015b4:	2120      	movs	r1, #32
 80015b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015ba:	f002 ffe5 	bl	8004588 <HAL_GPIO_WritePin>
}
 80015be:	e016      	b.n	80015ee <Mode_LD2+0x5e>
	} else if (mode_status == 3) {
 80015c0:	4b0c      	ldr	r3, [pc, #48]	; (80015f4 <Mode_LD2+0x64>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	2b03      	cmp	r3, #3
 80015c6:	d112      	bne.n	80015ee <Mode_LD2+0x5e>
		if (timestamp <= HAL_GetTick()) {
 80015c8:	f000 fbec 	bl	8001da4 <HAL_GetTick>
 80015cc:	4602      	mov	r2, r0
 80015ce:	4b0a      	ldr	r3, [pc, #40]	; (80015f8 <Mode_LD2+0x68>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	429a      	cmp	r2, r3
 80015d4:	d30b      	bcc.n	80015ee <Mode_LD2+0x5e>
			timestamp = HAL_GetTick() + 1000;
 80015d6:	f000 fbe5 	bl	8001da4 <HAL_GetTick>
 80015da:	4603      	mov	r3, r0
 80015dc:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80015e0:	4a05      	ldr	r2, [pc, #20]	; (80015f8 <Mode_LD2+0x68>)
 80015e2:	6013      	str	r3, [r2, #0]
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5); // สลับสถานะของ LED
 80015e4:	2120      	movs	r1, #32
 80015e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015ea:	f002 ffe5 	bl	80045b8 <HAL_GPIO_TogglePin>
}
 80015ee:	bf00      	nop
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	20000000 	.word	0x20000000
 80015f8:	20000aec 	.word	0x20000aec

080015fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001600:	b672      	cpsid	i
}
 8001602:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001604:	e7fe      	b.n	8001604 <Error_Handler+0x8>
	...

08001608 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800160e:	4b0f      	ldr	r3, [pc, #60]	; (800164c <HAL_MspInit+0x44>)
 8001610:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001612:	4a0e      	ldr	r2, [pc, #56]	; (800164c <HAL_MspInit+0x44>)
 8001614:	f043 0301 	orr.w	r3, r3, #1
 8001618:	6613      	str	r3, [r2, #96]	; 0x60
 800161a:	4b0c      	ldr	r3, [pc, #48]	; (800164c <HAL_MspInit+0x44>)
 800161c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800161e:	f003 0301 	and.w	r3, r3, #1
 8001622:	607b      	str	r3, [r7, #4]
 8001624:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001626:	4b09      	ldr	r3, [pc, #36]	; (800164c <HAL_MspInit+0x44>)
 8001628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800162a:	4a08      	ldr	r2, [pc, #32]	; (800164c <HAL_MspInit+0x44>)
 800162c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001630:	6593      	str	r3, [r2, #88]	; 0x58
 8001632:	4b06      	ldr	r3, [pc, #24]	; (800164c <HAL_MspInit+0x44>)
 8001634:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001636:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800163a:	603b      	str	r3, [r7, #0]
 800163c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800163e:	f003 f891 	bl	8004764 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001642:	bf00      	nop
 8001644:	3708      	adds	r7, #8
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	40021000 	.word	0x40021000

08001650 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b0a0      	sub	sp, #128	; 0x80
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001658:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800165c:	2200      	movs	r2, #0
 800165e:	601a      	str	r2, [r3, #0]
 8001660:	605a      	str	r2, [r3, #4]
 8001662:	609a      	str	r2, [r3, #8]
 8001664:	60da      	str	r2, [r3, #12]
 8001666:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001668:	f107 0318 	add.w	r3, r7, #24
 800166c:	2254      	movs	r2, #84	; 0x54
 800166e:	2100      	movs	r1, #0
 8001670:	4618      	mov	r0, r3
 8001672:	f007 fabd 	bl	8008bf0 <memset>
  if(hadc->Instance==ADC1)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800167e:	d17f      	bne.n	8001780 <HAL_ADC_MspInit+0x130>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001680:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001684:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001686:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800168a:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800168c:	f107 0318 	add.w	r3, r7, #24
 8001690:	4618      	mov	r0, r3
 8001692:	f003 fda5 	bl	80051e0 <HAL_RCCEx_PeriphCLKConfig>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 800169c:	f7ff ffae 	bl	80015fc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80016a0:	4b39      	ldr	r3, [pc, #228]	; (8001788 <HAL_ADC_MspInit+0x138>)
 80016a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016a4:	4a38      	ldr	r2, [pc, #224]	; (8001788 <HAL_ADC_MspInit+0x138>)
 80016a6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80016aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016ac:	4b36      	ldr	r3, [pc, #216]	; (8001788 <HAL_ADC_MspInit+0x138>)
 80016ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016b4:	617b      	str	r3, [r7, #20]
 80016b6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016b8:	4b33      	ldr	r3, [pc, #204]	; (8001788 <HAL_ADC_MspInit+0x138>)
 80016ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016bc:	4a32      	ldr	r2, [pc, #200]	; (8001788 <HAL_ADC_MspInit+0x138>)
 80016be:	f043 0304 	orr.w	r3, r3, #4
 80016c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016c4:	4b30      	ldr	r3, [pc, #192]	; (8001788 <HAL_ADC_MspInit+0x138>)
 80016c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016c8:	f003 0304 	and.w	r3, r3, #4
 80016cc:	613b      	str	r3, [r7, #16]
 80016ce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016d0:	4b2d      	ldr	r3, [pc, #180]	; (8001788 <HAL_ADC_MspInit+0x138>)
 80016d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016d4:	4a2c      	ldr	r2, [pc, #176]	; (8001788 <HAL_ADC_MspInit+0x138>)
 80016d6:	f043 0301 	orr.w	r3, r3, #1
 80016da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016dc:	4b2a      	ldr	r3, [pc, #168]	; (8001788 <HAL_ADC_MspInit+0x138>)
 80016de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016e0:	f003 0301 	and.w	r3, r3, #1
 80016e4:	60fb      	str	r3, [r7, #12]
 80016e6:	68fb      	ldr	r3, [r7, #12]
    PC1     ------> ADC1_IN7
    PC2     ------> ADC1_IN8
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80016e8:	2306      	movs	r3, #6
 80016ea:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016ec:	2303      	movs	r3, #3
 80016ee:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f0:	2300      	movs	r3, #0
 80016f2:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016f4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80016f8:	4619      	mov	r1, r3
 80016fa:	4824      	ldr	r0, [pc, #144]	; (800178c <HAL_ADC_MspInit+0x13c>)
 80016fc:	f002 fdc2 	bl	8004284 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001700:	2303      	movs	r3, #3
 8001702:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001704:	2303      	movs	r3, #3
 8001706:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001708:	2300      	movs	r3, #0
 800170a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800170c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001710:	4619      	mov	r1, r3
 8001712:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001716:	f002 fdb5 	bl	8004284 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Channel1;
 800171a:	4b1d      	ldr	r3, [pc, #116]	; (8001790 <HAL_ADC_MspInit+0x140>)
 800171c:	4a1d      	ldr	r2, [pc, #116]	; (8001794 <HAL_ADC_MspInit+0x144>)
 800171e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001720:	4b1b      	ldr	r3, [pc, #108]	; (8001790 <HAL_ADC_MspInit+0x140>)
 8001722:	2205      	movs	r2, #5
 8001724:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001726:	4b1a      	ldr	r3, [pc, #104]	; (8001790 <HAL_ADC_MspInit+0x140>)
 8001728:	2200      	movs	r2, #0
 800172a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800172c:	4b18      	ldr	r3, [pc, #96]	; (8001790 <HAL_ADC_MspInit+0x140>)
 800172e:	2200      	movs	r2, #0
 8001730:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001732:	4b17      	ldr	r3, [pc, #92]	; (8001790 <HAL_ADC_MspInit+0x140>)
 8001734:	2280      	movs	r2, #128	; 0x80
 8001736:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001738:	4b15      	ldr	r3, [pc, #84]	; (8001790 <HAL_ADC_MspInit+0x140>)
 800173a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800173e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001740:	4b13      	ldr	r3, [pc, #76]	; (8001790 <HAL_ADC_MspInit+0x140>)
 8001742:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001746:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001748:	4b11      	ldr	r3, [pc, #68]	; (8001790 <HAL_ADC_MspInit+0x140>)
 800174a:	2220      	movs	r2, #32
 800174c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800174e:	4b10      	ldr	r3, [pc, #64]	; (8001790 <HAL_ADC_MspInit+0x140>)
 8001750:	2200      	movs	r2, #0
 8001752:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001754:	480e      	ldr	r0, [pc, #56]	; (8001790 <HAL_ADC_MspInit+0x140>)
 8001756:	f002 fa63 	bl	8003c20 <HAL_DMA_Init>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <HAL_ADC_MspInit+0x114>
    {
      Error_Handler();
 8001760:	f7ff ff4c 	bl	80015fc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	4a0a      	ldr	r2, [pc, #40]	; (8001790 <HAL_ADC_MspInit+0x140>)
 8001768:	655a      	str	r2, [r3, #84]	; 0x54
 800176a:	4a09      	ldr	r2, [pc, #36]	; (8001790 <HAL_ADC_MspInit+0x140>)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001770:	2200      	movs	r2, #0
 8001772:	2100      	movs	r1, #0
 8001774:	2012      	movs	r0, #18
 8001776:	f002 fa1e 	bl	8003bb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800177a:	2012      	movs	r0, #18
 800177c:	f002 fa35 	bl	8003bea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001780:	bf00      	nop
 8001782:	3780      	adds	r7, #128	; 0x80
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	40021000 	.word	0x40021000
 800178c:	48000800 	.word	0x48000800
 8001790:	200000b0 	.word	0x200000b0
 8001794:	40020408 	.word	0x40020408

08001798 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b09e      	sub	sp, #120	; 0x78
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]
 80017a8:	605a      	str	r2, [r3, #4]
 80017aa:	609a      	str	r2, [r3, #8]
 80017ac:	60da      	str	r2, [r3, #12]
 80017ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017b0:	f107 0310 	add.w	r3, r7, #16
 80017b4:	2254      	movs	r2, #84	; 0x54
 80017b6:	2100      	movs	r1, #0
 80017b8:	4618      	mov	r0, r3
 80017ba:	f007 fa19 	bl	8008bf0 <memset>
  if(huart->Instance==LPUART1)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a4d      	ldr	r2, [pc, #308]	; (80018f8 <HAL_UART_MspInit+0x160>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	f040 8092 	bne.w	80018ee <HAL_UART_MspInit+0x156>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80017ca:	2320      	movs	r3, #32
 80017cc:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80017ce:	2300      	movs	r3, #0
 80017d0:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017d2:	f107 0310 	add.w	r3, r7, #16
 80017d6:	4618      	mov	r0, r3
 80017d8:	f003 fd02 	bl	80051e0 <HAL_RCCEx_PeriphCLKConfig>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80017e2:	f7ff ff0b 	bl	80015fc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80017e6:	4b45      	ldr	r3, [pc, #276]	; (80018fc <HAL_UART_MspInit+0x164>)
 80017e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017ea:	4a44      	ldr	r2, [pc, #272]	; (80018fc <HAL_UART_MspInit+0x164>)
 80017ec:	f043 0301 	orr.w	r3, r3, #1
 80017f0:	65d3      	str	r3, [r2, #92]	; 0x5c
 80017f2:	4b42      	ldr	r3, [pc, #264]	; (80018fc <HAL_UART_MspInit+0x164>)
 80017f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017f6:	f003 0301 	and.w	r3, r3, #1
 80017fa:	60fb      	str	r3, [r7, #12]
 80017fc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017fe:	4b3f      	ldr	r3, [pc, #252]	; (80018fc <HAL_UART_MspInit+0x164>)
 8001800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001802:	4a3e      	ldr	r2, [pc, #248]	; (80018fc <HAL_UART_MspInit+0x164>)
 8001804:	f043 0301 	orr.w	r3, r3, #1
 8001808:	64d3      	str	r3, [r2, #76]	; 0x4c
 800180a:	4b3c      	ldr	r3, [pc, #240]	; (80018fc <HAL_UART_MspInit+0x164>)
 800180c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800180e:	f003 0301 	and.w	r3, r3, #1
 8001812:	60bb      	str	r3, [r7, #8]
 8001814:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|LPUART1_RX_Pin;
 8001816:	230c      	movs	r3, #12
 8001818:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800181a:	2302      	movs	r3, #2
 800181c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181e:	2300      	movs	r3, #0
 8001820:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001822:	2300      	movs	r3, #0
 8001824:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001826:	230c      	movs	r3, #12
 8001828:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800182a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800182e:	4619      	mov	r1, r3
 8001830:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001834:	f002 fd26 	bl	8004284 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel1;
 8001838:	4b31      	ldr	r3, [pc, #196]	; (8001900 <HAL_UART_MspInit+0x168>)
 800183a:	4a32      	ldr	r2, [pc, #200]	; (8001904 <HAL_UART_MspInit+0x16c>)
 800183c:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 800183e:	4b30      	ldr	r3, [pc, #192]	; (8001900 <HAL_UART_MspInit+0x168>)
 8001840:	2222      	movs	r2, #34	; 0x22
 8001842:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001844:	4b2e      	ldr	r3, [pc, #184]	; (8001900 <HAL_UART_MspInit+0x168>)
 8001846:	2200      	movs	r2, #0
 8001848:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800184a:	4b2d      	ldr	r3, [pc, #180]	; (8001900 <HAL_UART_MspInit+0x168>)
 800184c:	2200      	movs	r2, #0
 800184e:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001850:	4b2b      	ldr	r3, [pc, #172]	; (8001900 <HAL_UART_MspInit+0x168>)
 8001852:	2280      	movs	r2, #128	; 0x80
 8001854:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001856:	4b2a      	ldr	r3, [pc, #168]	; (8001900 <HAL_UART_MspInit+0x168>)
 8001858:	2200      	movs	r2, #0
 800185a:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800185c:	4b28      	ldr	r3, [pc, #160]	; (8001900 <HAL_UART_MspInit+0x168>)
 800185e:	2200      	movs	r2, #0
 8001860:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 8001862:	4b27      	ldr	r3, [pc, #156]	; (8001900 <HAL_UART_MspInit+0x168>)
 8001864:	2220      	movs	r2, #32
 8001866:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001868:	4b25      	ldr	r3, [pc, #148]	; (8001900 <HAL_UART_MspInit+0x168>)
 800186a:	2200      	movs	r2, #0
 800186c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 800186e:	4824      	ldr	r0, [pc, #144]	; (8001900 <HAL_UART_MspInit+0x168>)
 8001870:	f002 f9d6 	bl	8003c20 <HAL_DMA_Init>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 800187a:	f7ff febf 	bl	80015fc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_lpuart1_rx);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	4a1f      	ldr	r2, [pc, #124]	; (8001900 <HAL_UART_MspInit+0x168>)
 8001882:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001886:	4a1e      	ldr	r2, [pc, #120]	; (8001900 <HAL_UART_MspInit+0x168>)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel2;
 800188c:	4b1e      	ldr	r3, [pc, #120]	; (8001908 <HAL_UART_MspInit+0x170>)
 800188e:	4a1f      	ldr	r2, [pc, #124]	; (800190c <HAL_UART_MspInit+0x174>)
 8001890:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8001892:	4b1d      	ldr	r3, [pc, #116]	; (8001908 <HAL_UART_MspInit+0x170>)
 8001894:	2223      	movs	r2, #35	; 0x23
 8001896:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001898:	4b1b      	ldr	r3, [pc, #108]	; (8001908 <HAL_UART_MspInit+0x170>)
 800189a:	2210      	movs	r2, #16
 800189c:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800189e:	4b1a      	ldr	r3, [pc, #104]	; (8001908 <HAL_UART_MspInit+0x170>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80018a4:	4b18      	ldr	r3, [pc, #96]	; (8001908 <HAL_UART_MspInit+0x170>)
 80018a6:	2280      	movs	r2, #128	; 0x80
 80018a8:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018aa:	4b17      	ldr	r3, [pc, #92]	; (8001908 <HAL_UART_MspInit+0x170>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018b0:	4b15      	ldr	r3, [pc, #84]	; (8001908 <HAL_UART_MspInit+0x170>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 80018b6:	4b14      	ldr	r3, [pc, #80]	; (8001908 <HAL_UART_MspInit+0x170>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80018bc:	4b12      	ldr	r3, [pc, #72]	; (8001908 <HAL_UART_MspInit+0x170>)
 80018be:	2200      	movs	r2, #0
 80018c0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 80018c2:	4811      	ldr	r0, [pc, #68]	; (8001908 <HAL_UART_MspInit+0x170>)
 80018c4:	f002 f9ac 	bl	8003c20 <HAL_DMA_Init>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 80018ce:	f7ff fe95 	bl	80015fc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4a0c      	ldr	r2, [pc, #48]	; (8001908 <HAL_UART_MspInit+0x170>)
 80018d6:	67da      	str	r2, [r3, #124]	; 0x7c
 80018d8:	4a0b      	ldr	r2, [pc, #44]	; (8001908 <HAL_UART_MspInit+0x170>)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 80018de:	2200      	movs	r2, #0
 80018e0:	2100      	movs	r1, #0
 80018e2:	205b      	movs	r0, #91	; 0x5b
 80018e4:	f002 f967 	bl	8003bb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80018e8:	205b      	movs	r0, #91	; 0x5b
 80018ea:	f002 f97e 	bl	8003bea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80018ee:	bf00      	nop
 80018f0:	3778      	adds	r7, #120	; 0x78
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	40008000 	.word	0x40008000
 80018fc:	40021000 	.word	0x40021000
 8001900:	200001a4 	.word	0x200001a4
 8001904:	40020008 	.word	0x40020008
 8001908:	20000204 	.word	0x20000204
 800190c:	4002001c 	.word	0x4002001c

08001910 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b084      	sub	sp, #16
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a16      	ldr	r2, [pc, #88]	; (8001978 <HAL_TIM_PWM_MspInit+0x68>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d114      	bne.n	800194c <HAL_TIM_PWM_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001922:	4b16      	ldr	r3, [pc, #88]	; (800197c <HAL_TIM_PWM_MspInit+0x6c>)
 8001924:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001926:	4a15      	ldr	r2, [pc, #84]	; (800197c <HAL_TIM_PWM_MspInit+0x6c>)
 8001928:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800192c:	6613      	str	r3, [r2, #96]	; 0x60
 800192e:	4b13      	ldr	r3, [pc, #76]	; (800197c <HAL_TIM_PWM_MspInit+0x6c>)
 8001930:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001932:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001936:	60fb      	str	r3, [r7, #12]
 8001938:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 800193a:	2200      	movs	r2, #0
 800193c:	2100      	movs	r1, #0
 800193e:	2018      	movs	r0, #24
 8001940:	f002 f939 	bl	8003bb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001944:	2018      	movs	r0, #24
 8001946:	f002 f950 	bl	8003bea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800194a:	e010      	b.n	800196e <HAL_TIM_PWM_MspInit+0x5e>
  else if(htim_pwm->Instance==TIM4)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a0b      	ldr	r2, [pc, #44]	; (8001980 <HAL_TIM_PWM_MspInit+0x70>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d10b      	bne.n	800196e <HAL_TIM_PWM_MspInit+0x5e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001956:	4b09      	ldr	r3, [pc, #36]	; (800197c <HAL_TIM_PWM_MspInit+0x6c>)
 8001958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800195a:	4a08      	ldr	r2, [pc, #32]	; (800197c <HAL_TIM_PWM_MspInit+0x6c>)
 800195c:	f043 0304 	orr.w	r3, r3, #4
 8001960:	6593      	str	r3, [r2, #88]	; 0x58
 8001962:	4b06      	ldr	r3, [pc, #24]	; (800197c <HAL_TIM_PWM_MspInit+0x6c>)
 8001964:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001966:	f003 0304 	and.w	r3, r3, #4
 800196a:	60bb      	str	r3, [r7, #8]
 800196c:	68bb      	ldr	r3, [r7, #8]
}
 800196e:	bf00      	nop
 8001970:	3710      	adds	r7, #16
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	40012c00 	.word	0x40012c00
 800197c:	40021000 	.word	0x40021000
 8001980:	40000800 	.word	0x40000800

08001984 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b086      	sub	sp, #24
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001994:	d114      	bne.n	80019c0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001996:	4b22      	ldr	r3, [pc, #136]	; (8001a20 <HAL_TIM_Base_MspInit+0x9c>)
 8001998:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800199a:	4a21      	ldr	r2, [pc, #132]	; (8001a20 <HAL_TIM_Base_MspInit+0x9c>)
 800199c:	f043 0301 	orr.w	r3, r3, #1
 80019a0:	6593      	str	r3, [r2, #88]	; 0x58
 80019a2:	4b1f      	ldr	r3, [pc, #124]	; (8001a20 <HAL_TIM_Base_MspInit+0x9c>)
 80019a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019a6:	f003 0301 	and.w	r3, r3, #1
 80019aa:	617b      	str	r3, [r7, #20]
 80019ac:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80019ae:	2200      	movs	r2, #0
 80019b0:	2100      	movs	r1, #0
 80019b2:	201c      	movs	r0, #28
 80019b4:	f002 f8ff 	bl	8003bb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80019b8:	201c      	movs	r0, #28
 80019ba:	f002 f916 	bl	8003bea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80019be:	e02a      	b.n	8001a16 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM5)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a17      	ldr	r2, [pc, #92]	; (8001a24 <HAL_TIM_Base_MspInit+0xa0>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d10c      	bne.n	80019e4 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80019ca:	4b15      	ldr	r3, [pc, #84]	; (8001a20 <HAL_TIM_Base_MspInit+0x9c>)
 80019cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ce:	4a14      	ldr	r2, [pc, #80]	; (8001a20 <HAL_TIM_Base_MspInit+0x9c>)
 80019d0:	f043 0308 	orr.w	r3, r3, #8
 80019d4:	6593      	str	r3, [r2, #88]	; 0x58
 80019d6:	4b12      	ldr	r3, [pc, #72]	; (8001a20 <HAL_TIM_Base_MspInit+0x9c>)
 80019d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019da:	f003 0308 	and.w	r3, r3, #8
 80019de:	613b      	str	r3, [r7, #16]
 80019e0:	693b      	ldr	r3, [r7, #16]
}
 80019e2:	e018      	b.n	8001a16 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM15)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a0f      	ldr	r2, [pc, #60]	; (8001a28 <HAL_TIM_Base_MspInit+0xa4>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d113      	bne.n	8001a16 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80019ee:	4b0c      	ldr	r3, [pc, #48]	; (8001a20 <HAL_TIM_Base_MspInit+0x9c>)
 80019f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019f2:	4a0b      	ldr	r2, [pc, #44]	; (8001a20 <HAL_TIM_Base_MspInit+0x9c>)
 80019f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019f8:	6613      	str	r3, [r2, #96]	; 0x60
 80019fa:	4b09      	ldr	r3, [pc, #36]	; (8001a20 <HAL_TIM_Base_MspInit+0x9c>)
 80019fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a02:	60fb      	str	r3, [r7, #12]
 8001a04:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8001a06:	2200      	movs	r2, #0
 8001a08:	2100      	movs	r1, #0
 8001a0a:	2018      	movs	r0, #24
 8001a0c:	f002 f8d3 	bl	8003bb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001a10:	2018      	movs	r0, #24
 8001a12:	f002 f8ea 	bl	8003bea <HAL_NVIC_EnableIRQ>
}
 8001a16:	bf00      	nop
 8001a18:	3718      	adds	r7, #24
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	40021000 	.word	0x40021000
 8001a24:	40000c00 	.word	0x40000c00
 8001a28:	40014000 	.word	0x40014000

08001a2c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b08a      	sub	sp, #40	; 0x28
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a34:	f107 0314 	add.w	r3, r7, #20
 8001a38:	2200      	movs	r2, #0
 8001a3a:	601a      	str	r2, [r3, #0]
 8001a3c:	605a      	str	r2, [r3, #4]
 8001a3e:	609a      	str	r2, [r3, #8]
 8001a40:	60da      	str	r2, [r3, #12]
 8001a42:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a17      	ldr	r2, [pc, #92]	; (8001aa8 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d128      	bne.n	8001aa0 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a4e:	4b17      	ldr	r3, [pc, #92]	; (8001aac <HAL_TIM_Encoder_MspInit+0x80>)
 8001a50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a52:	4a16      	ldr	r2, [pc, #88]	; (8001aac <HAL_TIM_Encoder_MspInit+0x80>)
 8001a54:	f043 0302 	orr.w	r3, r3, #2
 8001a58:	6593      	str	r3, [r2, #88]	; 0x58
 8001a5a:	4b14      	ldr	r3, [pc, #80]	; (8001aac <HAL_TIM_Encoder_MspInit+0x80>)
 8001a5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a5e:	f003 0302 	and.w	r3, r3, #2
 8001a62:	613b      	str	r3, [r7, #16]
 8001a64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a66:	4b11      	ldr	r3, [pc, #68]	; (8001aac <HAL_TIM_Encoder_MspInit+0x80>)
 8001a68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a6a:	4a10      	ldr	r2, [pc, #64]	; (8001aac <HAL_TIM_Encoder_MspInit+0x80>)
 8001a6c:	f043 0301 	orr.w	r3, r3, #1
 8001a70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a72:	4b0e      	ldr	r3, [pc, #56]	; (8001aac <HAL_TIM_Encoder_MspInit+0x80>)
 8001a74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a76:	f003 0301 	and.w	r3, r3, #1
 8001a7a:	60fb      	str	r3, [r7, #12]
 8001a7c:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a7e:	23c0      	movs	r3, #192	; 0xc0
 8001a80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a82:	2302      	movs	r3, #2
 8001a84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a86:	2300      	movs	r3, #0
 8001a88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001a8e:	2302      	movs	r3, #2
 8001a90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a92:	f107 0314 	add.w	r3, r7, #20
 8001a96:	4619      	mov	r1, r3
 8001a98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a9c:	f002 fbf2 	bl	8004284 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001aa0:	bf00      	nop
 8001aa2:	3728      	adds	r7, #40	; 0x28
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	40000400 	.word	0x40000400
 8001aac:	40021000 	.word	0x40021000

08001ab0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b08a      	sub	sp, #40	; 0x28
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab8:	f107 0314 	add.w	r3, r7, #20
 8001abc:	2200      	movs	r2, #0
 8001abe:	601a      	str	r2, [r3, #0]
 8001ac0:	605a      	str	r2, [r3, #4]
 8001ac2:	609a      	str	r2, [r3, #8]
 8001ac4:	60da      	str	r2, [r3, #12]
 8001ac6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a23      	ldr	r2, [pc, #140]	; (8001b5c <HAL_TIM_MspPostInit+0xac>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d11e      	bne.n	8001b10 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ad2:	4b23      	ldr	r3, [pc, #140]	; (8001b60 <HAL_TIM_MspPostInit+0xb0>)
 8001ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ad6:	4a22      	ldr	r2, [pc, #136]	; (8001b60 <HAL_TIM_MspPostInit+0xb0>)
 8001ad8:	f043 0301 	orr.w	r3, r3, #1
 8001adc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ade:	4b20      	ldr	r3, [pc, #128]	; (8001b60 <HAL_TIM_MspPostInit+0xb0>)
 8001ae0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ae2:	f003 0301 	and.w	r3, r3, #1
 8001ae6:	613b      	str	r3, [r7, #16]
 8001ae8:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001aea:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001aee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af0:	2302      	movs	r3, #2
 8001af2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af4:	2300      	movs	r3, #0
 8001af6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af8:	2300      	movs	r3, #0
 8001afa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001afc:	2306      	movs	r3, #6
 8001afe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b00:	f107 0314 	add.w	r3, r7, #20
 8001b04:	4619      	mov	r1, r3
 8001b06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b0a:	f002 fbbb 	bl	8004284 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001b0e:	e020      	b.n	8001b52 <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM4)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a13      	ldr	r2, [pc, #76]	; (8001b64 <HAL_TIM_MspPostInit+0xb4>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d11b      	bne.n	8001b52 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b1a:	4b11      	ldr	r3, [pc, #68]	; (8001b60 <HAL_TIM_MspPostInit+0xb0>)
 8001b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b1e:	4a10      	ldr	r2, [pc, #64]	; (8001b60 <HAL_TIM_MspPostInit+0xb0>)
 8001b20:	f043 0302 	orr.w	r3, r3, #2
 8001b24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b26:	4b0e      	ldr	r3, [pc, #56]	; (8001b60 <HAL_TIM_MspPostInit+0xb0>)
 8001b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b2a:	f003 0302 	and.w	r3, r3, #2
 8001b2e:	60fb      	str	r3, [r7, #12]
 8001b30:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001b32:	2340      	movs	r3, #64	; 0x40
 8001b34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b36:	2302      	movs	r3, #2
 8001b38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001b42:	2302      	movs	r3, #2
 8001b44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b46:	f107 0314 	add.w	r3, r7, #20
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	4806      	ldr	r0, [pc, #24]	; (8001b68 <HAL_TIM_MspPostInit+0xb8>)
 8001b4e:	f002 fb99 	bl	8004284 <HAL_GPIO_Init>
}
 8001b52:	bf00      	nop
 8001b54:	3728      	adds	r7, #40	; 0x28
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	40012c00 	.word	0x40012c00
 8001b60:	40021000 	.word	0x40021000
 8001b64:	40000800 	.word	0x40000800
 8001b68:	48000400 	.word	0x48000400

08001b6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b70:	e7fe      	b.n	8001b70 <NMI_Handler+0x4>

08001b72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b72:	b480      	push	{r7}
 8001b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b76:	e7fe      	b.n	8001b76 <HardFault_Handler+0x4>

08001b78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b7c:	e7fe      	b.n	8001b7c <MemManage_Handler+0x4>

08001b7e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b7e:	b480      	push	{r7}
 8001b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b82:	e7fe      	b.n	8001b82 <BusFault_Handler+0x4>

08001b84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b88:	e7fe      	b.n	8001b88 <UsageFault_Handler+0x4>

08001b8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b8a:	b480      	push	{r7}
 8001b8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b8e:	bf00      	nop
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr

08001b98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b9c:	bf00      	nop
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr

08001ba6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ba6:	b480      	push	{r7}
 8001ba8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001baa:	bf00      	nop
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr

08001bb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bb8:	f000 f8e2 	bl	8001d80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bbc:	bf00      	nop
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8001bc4:	4802      	ldr	r0, [pc, #8]	; (8001bd0 <DMA1_Channel1_IRQHandler+0x10>)
 8001bc6:	f002 fa0e 	bl	8003fe6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001bca:	bf00      	nop
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	200001a4 	.word	0x200001a4

08001bd4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8001bd8:	4802      	ldr	r0, [pc, #8]	; (8001be4 <DMA1_Channel2_IRQHandler+0x10>)
 8001bda:	f002 fa04 	bl	8003fe6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001bde:	bf00      	nop
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	20000204 	.word	0x20000204

08001be8 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001bec:	4802      	ldr	r0, [pc, #8]	; (8001bf8 <ADC1_2_IRQHandler+0x10>)
 8001bee:	f000 fdb5 	bl	800275c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001bf2:	bf00      	nop
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	20000044 	.word	0x20000044

08001bfc <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c00:	4803      	ldr	r0, [pc, #12]	; (8001c10 <TIM1_BRK_TIM15_IRQHandler+0x14>)
 8001c02:	f004 f919 	bl	8005e38 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 8001c06:	4803      	ldr	r0, [pc, #12]	; (8001c14 <TIM1_BRK_TIM15_IRQHandler+0x18>)
 8001c08:	f004 f916 	bl	8005e38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8001c0c:	bf00      	nop
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	20000264 	.word	0x20000264
 8001c14:	200003e0 	.word	0x200003e0

08001c18 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001c1c:	4802      	ldr	r0, [pc, #8]	; (8001c28 <TIM2_IRQHandler+0x10>)
 8001c1e:	f004 f90b 	bl	8005e38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001c22:	bf00      	nop
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	200002b0 	.word	0x200002b0

08001c2c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001c30:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001c34:	f002 fcda 	bl	80045ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001c38:	bf00      	nop
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001c40:	4802      	ldr	r0, [pc, #8]	; (8001c4c <DMA2_Channel1_IRQHandler+0x10>)
 8001c42:	f002 f9d0 	bl	8003fe6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8001c46:	bf00      	nop
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	200000b0 	.word	0x200000b0

08001c50 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8001c54:	4802      	ldr	r0, [pc, #8]	; (8001c60 <LPUART1_IRQHandler+0x10>)
 8001c56:	f005 fbbd 	bl	80073d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8001c5a:	bf00      	nop
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	20000110 	.word	0x20000110

08001c64 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001c68:	4b06      	ldr	r3, [pc, #24]	; (8001c84 <SystemInit+0x20>)
 8001c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c6e:	4a05      	ldr	r2, [pc, #20]	; (8001c84 <SystemInit+0x20>)
 8001c70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c78:	bf00      	nop
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	e000ed00 	.word	0xe000ed00

08001c88 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
ldr   r0, =_estack
 8001c88:	480d      	ldr	r0, [pc, #52]	; (8001cc0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001c8a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c8c:	f7ff ffea 	bl	8001c64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c90:	480c      	ldr	r0, [pc, #48]	; (8001cc4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001c92:	490d      	ldr	r1, [pc, #52]	; (8001cc8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c94:	4a0d      	ldr	r2, [pc, #52]	; (8001ccc <LoopForever+0xe>)
  movs r3, #0
 8001c96:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001c98:	e002      	b.n	8001ca0 <LoopCopyDataInit>

08001c9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c9e:	3304      	adds	r3, #4

08001ca0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ca0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ca2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ca4:	d3f9      	bcc.n	8001c9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ca6:	4a0a      	ldr	r2, [pc, #40]	; (8001cd0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ca8:	4c0a      	ldr	r4, [pc, #40]	; (8001cd4 <LoopForever+0x16>)
  movs r3, #0
 8001caa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cac:	e001      	b.n	8001cb2 <LoopFillZerobss>

08001cae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cb0:	3204      	adds	r2, #4

08001cb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cb4:	d3fb      	bcc.n	8001cae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001cb6:	f006 ffa3 	bl	8008c00 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001cba:	f7fe fc2b 	bl	8000514 <main>

08001cbe <LoopForever>:

LoopForever:
    b LoopForever
 8001cbe:	e7fe      	b.n	8001cbe <LoopForever>
ldr   r0, =_estack
 8001cc0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001cc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cc8:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8001ccc:	08008cb0 	.word	0x08008cb0
  ldr r2, =_sbss
 8001cd0:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8001cd4:	20000af4 	.word	0x20000af4

08001cd8 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001cd8:	e7fe      	b.n	8001cd8 <ADC3_IRQHandler>

08001cda <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cda:	b580      	push	{r7, lr}
 8001cdc:	b082      	sub	sp, #8
 8001cde:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ce4:	2003      	movs	r0, #3
 8001ce6:	f001 ff5b 	bl	8003ba0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001cea:	2000      	movs	r0, #0
 8001cec:	f000 f80e 	bl	8001d0c <HAL_InitTick>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d002      	beq.n	8001cfc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	71fb      	strb	r3, [r7, #7]
 8001cfa:	e001      	b.n	8001d00 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001cfc:	f7ff fc84 	bl	8001608 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d00:	79fb      	ldrb	r3, [r7, #7]

}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3708      	adds	r7, #8
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
	...

08001d0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b084      	sub	sp, #16
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d14:	2300      	movs	r3, #0
 8001d16:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001d18:	4b16      	ldr	r3, [pc, #88]	; (8001d74 <HAL_InitTick+0x68>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d022      	beq.n	8001d66 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001d20:	4b15      	ldr	r3, [pc, #84]	; (8001d78 <HAL_InitTick+0x6c>)
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	4b13      	ldr	r3, [pc, #76]	; (8001d74 <HAL_InitTick+0x68>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001d2c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d30:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d34:	4618      	mov	r0, r3
 8001d36:	f001 ff66 	bl	8003c06 <HAL_SYSTICK_Config>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d10f      	bne.n	8001d60 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2b0f      	cmp	r3, #15
 8001d44:	d809      	bhi.n	8001d5a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d46:	2200      	movs	r2, #0
 8001d48:	6879      	ldr	r1, [r7, #4]
 8001d4a:	f04f 30ff 	mov.w	r0, #4294967295
 8001d4e:	f001 ff32 	bl	8003bb6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d52:	4a0a      	ldr	r2, [pc, #40]	; (8001d7c <HAL_InitTick+0x70>)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6013      	str	r3, [r2, #0]
 8001d58:	e007      	b.n	8001d6a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	73fb      	strb	r3, [r7, #15]
 8001d5e:	e004      	b.n	8001d6a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	73fb      	strb	r3, [r7, #15]
 8001d64:	e001      	b.n	8001d6a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001d6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3710      	adds	r7, #16
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	20000020 	.word	0x20000020
 8001d78:	20000018 	.word	0x20000018
 8001d7c:	2000001c 	.word	0x2000001c

08001d80 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d84:	4b05      	ldr	r3, [pc, #20]	; (8001d9c <HAL_IncTick+0x1c>)
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	4b05      	ldr	r3, [pc, #20]	; (8001da0 <HAL_IncTick+0x20>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4413      	add	r3, r2
 8001d8e:	4a03      	ldr	r2, [pc, #12]	; (8001d9c <HAL_IncTick+0x1c>)
 8001d90:	6013      	str	r3, [r2, #0]
}
 8001d92:	bf00      	nop
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr
 8001d9c:	20000af0 	.word	0x20000af0
 8001da0:	20000020 	.word	0x20000020

08001da4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0
  return uwTick;
 8001da8:	4b03      	ldr	r3, [pc, #12]	; (8001db8 <HAL_GetTick+0x14>)
 8001daa:	681b      	ldr	r3, [r3, #0]
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	20000af0 	.word	0x20000af0

08001dbc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	431a      	orrs	r2, r3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	609a      	str	r2, [r3, #8]
}
 8001dd6:	bf00      	nop
 8001dd8:	370c      	adds	r7, #12
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr

08001de2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001de2:	b480      	push	{r7}
 8001de4:	b083      	sub	sp, #12
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	6078      	str	r0, [r7, #4]
 8001dea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	431a      	orrs	r2, r3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	609a      	str	r2, [r3, #8]
}
 8001dfc:	bf00      	nop
 8001dfe:	370c      	adds	r7, #12
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr

08001e08 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	370c      	adds	r7, #12
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr

08001e24 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b087      	sub	sp, #28
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	60f8      	str	r0, [r7, #12]
 8001e2c:	60b9      	str	r1, [r7, #8]
 8001e2e:	607a      	str	r2, [r7, #4]
 8001e30:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	3360      	adds	r3, #96	; 0x60
 8001e36:	461a      	mov	r2, r3
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	4413      	add	r3, r2
 8001e3e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	4b08      	ldr	r3, [pc, #32]	; (8001e68 <LL_ADC_SetOffset+0x44>)
 8001e46:	4013      	ands	r3, r2
 8001e48:	687a      	ldr	r2, [r7, #4]
 8001e4a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001e4e:	683a      	ldr	r2, [r7, #0]
 8001e50:	430a      	orrs	r2, r1
 8001e52:	4313      	orrs	r3, r2
 8001e54:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001e5c:	bf00      	nop
 8001e5e:	371c      	adds	r7, #28
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr
 8001e68:	03fff000 	.word	0x03fff000

08001e6c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b085      	sub	sp, #20
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	3360      	adds	r3, #96	; 0x60
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	4413      	add	r3, r2
 8001e82:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3714      	adds	r7, #20
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr

08001e98 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b087      	sub	sp, #28
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	60f8      	str	r0, [r7, #12]
 8001ea0:	60b9      	str	r1, [r7, #8]
 8001ea2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	3360      	adds	r3, #96	; 0x60
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	4413      	add	r3, r2
 8001eb0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	431a      	orrs	r2, r3
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001ec2:	bf00      	nop
 8001ec4:	371c      	adds	r7, #28
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr

08001ece <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001ece:	b480      	push	{r7}
 8001ed0:	b087      	sub	sp, #28
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	60f8      	str	r0, [r7, #12]
 8001ed6:	60b9      	str	r1, [r7, #8]
 8001ed8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	3360      	adds	r3, #96	; 0x60
 8001ede:	461a      	mov	r2, r3
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	4413      	add	r3, r2
 8001ee6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	431a      	orrs	r2, r3
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001ef8:	bf00      	nop
 8001efa:	371c      	adds	r7, #28
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr

08001f04 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b087      	sub	sp, #28
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	60f8      	str	r0, [r7, #12]
 8001f0c:	60b9      	str	r1, [r7, #8]
 8001f0e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	3360      	adds	r3, #96	; 0x60
 8001f14:	461a      	mov	r2, r3
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	4413      	add	r3, r2
 8001f1c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	431a      	orrs	r2, r3
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001f2e:	bf00      	nop
 8001f30:	371c      	adds	r7, #28
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr

08001f3a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001f3a:	b480      	push	{r7}
 8001f3c:	b083      	sub	sp, #12
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	6078      	str	r0, [r7, #4]
 8001f42:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	695b      	ldr	r3, [r3, #20]
 8001f48:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	431a      	orrs	r2, r3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	615a      	str	r2, [r3, #20]
}
 8001f54:	bf00      	nop
 8001f56:	370c      	adds	r7, #12
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d101      	bne.n	8001f78 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001f74:	2301      	movs	r3, #1
 8001f76:	e000      	b.n	8001f7a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001f78:	2300      	movs	r3, #0
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	370c      	adds	r7, #12
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr

08001f86 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001f86:	b480      	push	{r7}
 8001f88:	b087      	sub	sp, #28
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	60f8      	str	r0, [r7, #12]
 8001f8e:	60b9      	str	r1, [r7, #8]
 8001f90:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	3330      	adds	r3, #48	; 0x30
 8001f96:	461a      	mov	r2, r3
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	0a1b      	lsrs	r3, r3, #8
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	f003 030c 	and.w	r3, r3, #12
 8001fa2:	4413      	add	r3, r2
 8001fa4:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	f003 031f 	and.w	r3, r3, #31
 8001fb0:	211f      	movs	r1, #31
 8001fb2:	fa01 f303 	lsl.w	r3, r1, r3
 8001fb6:	43db      	mvns	r3, r3
 8001fb8:	401a      	ands	r2, r3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	0e9b      	lsrs	r3, r3, #26
 8001fbe:	f003 011f 	and.w	r1, r3, #31
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	f003 031f 	and.w	r3, r3, #31
 8001fc8:	fa01 f303 	lsl.w	r3, r1, r3
 8001fcc:	431a      	orrs	r2, r3
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001fd2:	bf00      	nop
 8001fd4:	371c      	adds	r7, #28
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr

08001fde <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001fde:	b480      	push	{r7}
 8001fe0:	b083      	sub	sp, #12
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fea:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d101      	bne.n	8001ff6 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e000      	b.n	8001ff8 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001ff6:	2300      	movs	r3, #0
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	370c      	adds	r7, #12
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr

08002004 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002004:	b480      	push	{r7}
 8002006:	b087      	sub	sp, #28
 8002008:	af00      	add	r7, sp, #0
 800200a:	60f8      	str	r0, [r7, #12]
 800200c:	60b9      	str	r1, [r7, #8]
 800200e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	3314      	adds	r3, #20
 8002014:	461a      	mov	r2, r3
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	0e5b      	lsrs	r3, r3, #25
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	f003 0304 	and.w	r3, r3, #4
 8002020:	4413      	add	r3, r2
 8002022:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	0d1b      	lsrs	r3, r3, #20
 800202c:	f003 031f 	and.w	r3, r3, #31
 8002030:	2107      	movs	r1, #7
 8002032:	fa01 f303 	lsl.w	r3, r1, r3
 8002036:	43db      	mvns	r3, r3
 8002038:	401a      	ands	r2, r3
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	0d1b      	lsrs	r3, r3, #20
 800203e:	f003 031f 	and.w	r3, r3, #31
 8002042:	6879      	ldr	r1, [r7, #4]
 8002044:	fa01 f303 	lsl.w	r3, r1, r3
 8002048:	431a      	orrs	r2, r3
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800204e:	bf00      	nop
 8002050:	371c      	adds	r7, #28
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
	...

0800205c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800205c:	b480      	push	{r7}
 800205e:	b085      	sub	sp, #20
 8002060:	af00      	add	r7, sp, #0
 8002062:	60f8      	str	r0, [r7, #12]
 8002064:	60b9      	str	r1, [r7, #8]
 8002066:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002074:	43db      	mvns	r3, r3
 8002076:	401a      	ands	r2, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f003 0318 	and.w	r3, r3, #24
 800207e:	4908      	ldr	r1, [pc, #32]	; (80020a0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002080:	40d9      	lsrs	r1, r3
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	400b      	ands	r3, r1
 8002086:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800208a:	431a      	orrs	r2, r3
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002092:	bf00      	nop
 8002094:	3714      	adds	r7, #20
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr
 800209e:	bf00      	nop
 80020a0:	0007ffff 	.word	0x0007ffff

080020a4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	f003 031f 	and.w	r3, r3, #31
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	370c      	adds	r7, #12
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr

080020c0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr

080020dc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80020ec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80020f0:	687a      	ldr	r2, [r7, #4]
 80020f2:	6093      	str	r3, [r2, #8]
}
 80020f4:	bf00      	nop
 80020f6:	370c      	adds	r7, #12
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr

08002100 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002110:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002114:	d101      	bne.n	800211a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002116:	2301      	movs	r3, #1
 8002118:	e000      	b.n	800211c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800211a:	2300      	movs	r3, #0
}
 800211c:	4618      	mov	r0, r3
 800211e:	370c      	adds	r7, #12
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr

08002128 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002138:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800213c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002144:	bf00      	nop
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002160:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002164:	d101      	bne.n	800216a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002166:	2301      	movs	r3, #1
 8002168:	e000      	b.n	800216c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800216a:	2300      	movs	r3, #0
}
 800216c:	4618      	mov	r0, r3
 800216e:	370c      	adds	r7, #12
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr

08002178 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002188:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800218c:	f043 0201 	orr.w	r2, r3, #1
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002194:	bf00      	nop
 8002196:	370c      	adds	r7, #12
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr

080021a0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	f003 0301 	and.w	r3, r3, #1
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d101      	bne.n	80021b8 <LL_ADC_IsEnabled+0x18>
 80021b4:	2301      	movs	r3, #1
 80021b6:	e000      	b.n	80021ba <LL_ADC_IsEnabled+0x1a>
 80021b8:	2300      	movs	r3, #0
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	370c      	adds	r7, #12
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr

080021c6 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80021c6:	b480      	push	{r7}
 80021c8:	b083      	sub	sp, #12
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80021d6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80021da:	f043 0204 	orr.w	r2, r3, #4
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80021e2:	bf00      	nop
 80021e4:	370c      	adds	r7, #12
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr

080021ee <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80021ee:	b480      	push	{r7}
 80021f0:	b083      	sub	sp, #12
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	f003 0304 	and.w	r3, r3, #4
 80021fe:	2b04      	cmp	r3, #4
 8002200:	d101      	bne.n	8002206 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002202:	2301      	movs	r3, #1
 8002204:	e000      	b.n	8002208 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002206:	2300      	movs	r3, #0
}
 8002208:	4618      	mov	r0, r3
 800220a:	370c      	adds	r7, #12
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr

08002214 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002214:	b480      	push	{r7}
 8002216:	b083      	sub	sp, #12
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	f003 0308 	and.w	r3, r3, #8
 8002224:	2b08      	cmp	r3, #8
 8002226:	d101      	bne.n	800222c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002228:	2301      	movs	r3, #1
 800222a:	e000      	b.n	800222e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800222c:	2300      	movs	r3, #0
}
 800222e:	4618      	mov	r0, r3
 8002230:	370c      	adds	r7, #12
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
	...

0800223c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800223c:	b590      	push	{r4, r7, lr}
 800223e:	b089      	sub	sp, #36	; 0x24
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002244:	2300      	movs	r3, #0
 8002246:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002248:	2300      	movs	r3, #0
 800224a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d101      	bne.n	8002256 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e1a9      	b.n	80025aa <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	695b      	ldr	r3, [r3, #20]
 800225a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002260:	2b00      	cmp	r3, #0
 8002262:	d109      	bne.n	8002278 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002264:	6878      	ldr	r0, [r7, #4]
 8002266:	f7ff f9f3 	bl	8001650 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2200      	movs	r2, #0
 800226e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2200      	movs	r2, #0
 8002274:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4618      	mov	r0, r3
 800227e:	f7ff ff3f 	bl	8002100 <LL_ADC_IsDeepPowerDownEnabled>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d004      	beq.n	8002292 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4618      	mov	r0, r3
 800228e:	f7ff ff25 	bl	80020dc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4618      	mov	r0, r3
 8002298:	f7ff ff5a 	bl	8002150 <LL_ADC_IsInternalRegulatorEnabled>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d115      	bne.n	80022ce <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4618      	mov	r0, r3
 80022a8:	f7ff ff3e 	bl	8002128 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80022ac:	4b9c      	ldr	r3, [pc, #624]	; (8002520 <HAL_ADC_Init+0x2e4>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	099b      	lsrs	r3, r3, #6
 80022b2:	4a9c      	ldr	r2, [pc, #624]	; (8002524 <HAL_ADC_Init+0x2e8>)
 80022b4:	fba2 2303 	umull	r2, r3, r2, r3
 80022b8:	099b      	lsrs	r3, r3, #6
 80022ba:	3301      	adds	r3, #1
 80022bc:	005b      	lsls	r3, r3, #1
 80022be:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80022c0:	e002      	b.n	80022c8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	3b01      	subs	r3, #1
 80022c6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d1f9      	bne.n	80022c2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4618      	mov	r0, r3
 80022d4:	f7ff ff3c 	bl	8002150 <LL_ADC_IsInternalRegulatorEnabled>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d10d      	bne.n	80022fa <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022e2:	f043 0210 	orr.w	r2, r3, #16
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022ee:	f043 0201 	orr.w	r2, r3, #1
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4618      	mov	r0, r3
 8002300:	f7ff ff75 	bl	80021ee <LL_ADC_REG_IsConversionOngoing>
 8002304:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800230a:	f003 0310 	and.w	r3, r3, #16
 800230e:	2b00      	cmp	r3, #0
 8002310:	f040 8142 	bne.w	8002598 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	2b00      	cmp	r3, #0
 8002318:	f040 813e 	bne.w	8002598 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002320:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002324:	f043 0202 	orr.w	r2, r3, #2
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4618      	mov	r0, r3
 8002332:	f7ff ff35 	bl	80021a0 <LL_ADC_IsEnabled>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d141      	bne.n	80023c0 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002344:	d004      	beq.n	8002350 <HAL_ADC_Init+0x114>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a77      	ldr	r2, [pc, #476]	; (8002528 <HAL_ADC_Init+0x2ec>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d10f      	bne.n	8002370 <HAL_ADC_Init+0x134>
 8002350:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002354:	f7ff ff24 	bl	80021a0 <LL_ADC_IsEnabled>
 8002358:	4604      	mov	r4, r0
 800235a:	4873      	ldr	r0, [pc, #460]	; (8002528 <HAL_ADC_Init+0x2ec>)
 800235c:	f7ff ff20 	bl	80021a0 <LL_ADC_IsEnabled>
 8002360:	4603      	mov	r3, r0
 8002362:	4323      	orrs	r3, r4
 8002364:	2b00      	cmp	r3, #0
 8002366:	bf0c      	ite	eq
 8002368:	2301      	moveq	r3, #1
 800236a:	2300      	movne	r3, #0
 800236c:	b2db      	uxtb	r3, r3
 800236e:	e012      	b.n	8002396 <HAL_ADC_Init+0x15a>
 8002370:	486e      	ldr	r0, [pc, #440]	; (800252c <HAL_ADC_Init+0x2f0>)
 8002372:	f7ff ff15 	bl	80021a0 <LL_ADC_IsEnabled>
 8002376:	4604      	mov	r4, r0
 8002378:	486d      	ldr	r0, [pc, #436]	; (8002530 <HAL_ADC_Init+0x2f4>)
 800237a:	f7ff ff11 	bl	80021a0 <LL_ADC_IsEnabled>
 800237e:	4603      	mov	r3, r0
 8002380:	431c      	orrs	r4, r3
 8002382:	486c      	ldr	r0, [pc, #432]	; (8002534 <HAL_ADC_Init+0x2f8>)
 8002384:	f7ff ff0c 	bl	80021a0 <LL_ADC_IsEnabled>
 8002388:	4603      	mov	r3, r0
 800238a:	4323      	orrs	r3, r4
 800238c:	2b00      	cmp	r3, #0
 800238e:	bf0c      	ite	eq
 8002390:	2301      	moveq	r3, #1
 8002392:	2300      	movne	r3, #0
 8002394:	b2db      	uxtb	r3, r3
 8002396:	2b00      	cmp	r3, #0
 8002398:	d012      	beq.n	80023c0 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80023a2:	d004      	beq.n	80023ae <HAL_ADC_Init+0x172>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a5f      	ldr	r2, [pc, #380]	; (8002528 <HAL_ADC_Init+0x2ec>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d101      	bne.n	80023b2 <HAL_ADC_Init+0x176>
 80023ae:	4a62      	ldr	r2, [pc, #392]	; (8002538 <HAL_ADC_Init+0x2fc>)
 80023b0:	e000      	b.n	80023b4 <HAL_ADC_Init+0x178>
 80023b2:	4a62      	ldr	r2, [pc, #392]	; (800253c <HAL_ADC_Init+0x300>)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	4619      	mov	r1, r3
 80023ba:	4610      	mov	r0, r2
 80023bc:	f7ff fcfe 	bl	8001dbc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	7f5b      	ldrb	r3, [r3, #29]
 80023c4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80023ca:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80023d0:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80023d6:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80023de:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80023e0:	4313      	orrs	r3, r2
 80023e2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d106      	bne.n	80023fc <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023f2:	3b01      	subs	r3, #1
 80023f4:	045b      	lsls	r3, r3, #17
 80023f6:	69ba      	ldr	r2, [r7, #24]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002400:	2b00      	cmp	r3, #0
 8002402:	d009      	beq.n	8002418 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002408:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002410:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002412:	69ba      	ldr	r2, [r7, #24]
 8002414:	4313      	orrs	r3, r2
 8002416:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	68da      	ldr	r2, [r3, #12]
 800241e:	4b48      	ldr	r3, [pc, #288]	; (8002540 <HAL_ADC_Init+0x304>)
 8002420:	4013      	ands	r3, r2
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	6812      	ldr	r2, [r2, #0]
 8002426:	69b9      	ldr	r1, [r7, #24]
 8002428:	430b      	orrs	r3, r1
 800242a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	691b      	ldr	r3, [r3, #16]
 8002432:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	430a      	orrs	r2, r1
 8002440:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4618      	mov	r0, r3
 8002448:	f7ff fee4 	bl	8002214 <LL_ADC_INJ_IsConversionOngoing>
 800244c:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d17f      	bne.n	8002554 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d17c      	bne.n	8002554 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800245e:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002466:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002468:	4313      	orrs	r3, r2
 800246a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	68db      	ldr	r3, [r3, #12]
 8002472:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002476:	f023 0302 	bic.w	r3, r3, #2
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	6812      	ldr	r2, [r2, #0]
 800247e:	69b9      	ldr	r1, [r7, #24]
 8002480:	430b      	orrs	r3, r1
 8002482:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	691b      	ldr	r3, [r3, #16]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d017      	beq.n	80024bc <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	691a      	ldr	r2, [r3, #16]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800249a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80024a4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80024a8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	6911      	ldr	r1, [r2, #16]
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	6812      	ldr	r2, [r2, #0]
 80024b4:	430b      	orrs	r3, r1
 80024b6:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80024ba:	e013      	b.n	80024e4 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	691a      	ldr	r2, [r3, #16]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80024ca:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80024d4:	687a      	ldr	r2, [r7, #4]
 80024d6:	6812      	ldr	r2, [r2, #0]
 80024d8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80024dc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80024e0:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d12a      	bne.n	8002544 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	691b      	ldr	r3, [r3, #16]
 80024f4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80024f8:	f023 0304 	bic.w	r3, r3, #4
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002500:	687a      	ldr	r2, [r7, #4]
 8002502:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002504:	4311      	orrs	r1, r2
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800250a:	4311      	orrs	r1, r2
 800250c:	687a      	ldr	r2, [r7, #4]
 800250e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002510:	430a      	orrs	r2, r1
 8002512:	431a      	orrs	r2, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f042 0201 	orr.w	r2, r2, #1
 800251c:	611a      	str	r2, [r3, #16]
 800251e:	e019      	b.n	8002554 <HAL_ADC_Init+0x318>
 8002520:	20000018 	.word	0x20000018
 8002524:	053e2d63 	.word	0x053e2d63
 8002528:	50000100 	.word	0x50000100
 800252c:	50000400 	.word	0x50000400
 8002530:	50000500 	.word	0x50000500
 8002534:	50000600 	.word	0x50000600
 8002538:	50000300 	.word	0x50000300
 800253c:	50000700 	.word	0x50000700
 8002540:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	691a      	ldr	r2, [r3, #16]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f022 0201 	bic.w	r2, r2, #1
 8002552:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	695b      	ldr	r3, [r3, #20]
 8002558:	2b01      	cmp	r3, #1
 800255a:	d10c      	bne.n	8002576 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002562:	f023 010f 	bic.w	r1, r3, #15
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6a1b      	ldr	r3, [r3, #32]
 800256a:	1e5a      	subs	r2, r3, #1
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	430a      	orrs	r2, r1
 8002572:	631a      	str	r2, [r3, #48]	; 0x30
 8002574:	e007      	b.n	8002586 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f022 020f 	bic.w	r2, r2, #15
 8002584:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800258a:	f023 0303 	bic.w	r3, r3, #3
 800258e:	f043 0201 	orr.w	r2, r3, #1
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	65da      	str	r2, [r3, #92]	; 0x5c
 8002596:	e007      	b.n	80025a8 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800259c:	f043 0210 	orr.w	r2, r3, #16
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80025a8:	7ffb      	ldrb	r3, [r7, #31]
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3724      	adds	r7, #36	; 0x24
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd90      	pop	{r4, r7, pc}
 80025b2:	bf00      	nop

080025b4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b086      	sub	sp, #24
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	60f8      	str	r0, [r7, #12]
 80025bc:	60b9      	str	r1, [r7, #8]
 80025be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80025c8:	d004      	beq.n	80025d4 <HAL_ADC_Start_DMA+0x20>
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a5a      	ldr	r2, [pc, #360]	; (8002738 <HAL_ADC_Start_DMA+0x184>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d101      	bne.n	80025d8 <HAL_ADC_Start_DMA+0x24>
 80025d4:	4b59      	ldr	r3, [pc, #356]	; (800273c <HAL_ADC_Start_DMA+0x188>)
 80025d6:	e000      	b.n	80025da <HAL_ADC_Start_DMA+0x26>
 80025d8:	4b59      	ldr	r3, [pc, #356]	; (8002740 <HAL_ADC_Start_DMA+0x18c>)
 80025da:	4618      	mov	r0, r3
 80025dc:	f7ff fd62 	bl	80020a4 <LL_ADC_GetMultimode>
 80025e0:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4618      	mov	r0, r3
 80025e8:	f7ff fe01 	bl	80021ee <LL_ADC_REG_IsConversionOngoing>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	f040 809b 	bne.w	800272a <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d101      	bne.n	8002602 <HAL_ADC_Start_DMA+0x4e>
 80025fe:	2302      	movs	r3, #2
 8002600:	e096      	b.n	8002730 <HAL_ADC_Start_DMA+0x17c>
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2201      	movs	r2, #1
 8002606:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a4d      	ldr	r2, [pc, #308]	; (8002744 <HAL_ADC_Start_DMA+0x190>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d008      	beq.n	8002626 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d005      	beq.n	8002626 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	2b05      	cmp	r3, #5
 800261e:	d002      	beq.n	8002626 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	2b09      	cmp	r3, #9
 8002624:	d17a      	bne.n	800271c <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002626:	68f8      	ldr	r0, [r7, #12]
 8002628:	f000 ff60 	bl	80034ec <ADC_Enable>
 800262c:	4603      	mov	r3, r0
 800262e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002630:	7dfb      	ldrb	r3, [r7, #23]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d16d      	bne.n	8002712 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800263a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800263e:	f023 0301 	bic.w	r3, r3, #1
 8002642:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a3a      	ldr	r2, [pc, #232]	; (8002738 <HAL_ADC_Start_DMA+0x184>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d009      	beq.n	8002668 <HAL_ADC_Start_DMA+0xb4>
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a3b      	ldr	r2, [pc, #236]	; (8002748 <HAL_ADC_Start_DMA+0x194>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d002      	beq.n	8002664 <HAL_ADC_Start_DMA+0xb0>
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	e003      	b.n	800266c <HAL_ADC_Start_DMA+0xb8>
 8002664:	4b39      	ldr	r3, [pc, #228]	; (800274c <HAL_ADC_Start_DMA+0x198>)
 8002666:	e001      	b.n	800266c <HAL_ADC_Start_DMA+0xb8>
 8002668:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800266c:	68fa      	ldr	r2, [r7, #12]
 800266e:	6812      	ldr	r2, [r2, #0]
 8002670:	4293      	cmp	r3, r2
 8002672:	d002      	beq.n	800267a <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d105      	bne.n	8002686 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800267e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800268a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d006      	beq.n	80026a0 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002696:	f023 0206 	bic.w	r2, r3, #6
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	661a      	str	r2, [r3, #96]	; 0x60
 800269e:	e002      	b.n	80026a6 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2200      	movs	r2, #0
 80026a4:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026aa:	4a29      	ldr	r2, [pc, #164]	; (8002750 <HAL_ADC_Start_DMA+0x19c>)
 80026ac:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026b2:	4a28      	ldr	r2, [pc, #160]	; (8002754 <HAL_ADC_Start_DMA+0x1a0>)
 80026b4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ba:	4a27      	ldr	r2, [pc, #156]	; (8002758 <HAL_ADC_Start_DMA+0x1a4>)
 80026bc:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	221c      	movs	r2, #28
 80026c4:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2200      	movs	r2, #0
 80026ca:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	685a      	ldr	r2, [r3, #4]
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f042 0210 	orr.w	r2, r2, #16
 80026dc:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	68da      	ldr	r2, [r3, #12]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f042 0201 	orr.w	r2, r2, #1
 80026ec:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	3340      	adds	r3, #64	; 0x40
 80026f8:	4619      	mov	r1, r3
 80026fa:	68ba      	ldr	r2, [r7, #8]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	f001 fb37 	bl	8003d70 <HAL_DMA_Start_IT>
 8002702:	4603      	mov	r3, r0
 8002704:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4618      	mov	r0, r3
 800270c:	f7ff fd5b 	bl	80021c6 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002710:	e00d      	b.n	800272e <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	2200      	movs	r2, #0
 8002716:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 800271a:	e008      	b.n	800272e <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2200      	movs	r2, #0
 8002724:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8002728:	e001      	b.n	800272e <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800272a:	2302      	movs	r3, #2
 800272c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800272e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002730:	4618      	mov	r0, r3
 8002732:	3718      	adds	r7, #24
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}
 8002738:	50000100 	.word	0x50000100
 800273c:	50000300 	.word	0x50000300
 8002740:	50000700 	.word	0x50000700
 8002744:	50000600 	.word	0x50000600
 8002748:	50000500 	.word	0x50000500
 800274c:	50000400 	.word	0x50000400
 8002750:	08003619 	.word	0x08003619
 8002754:	080036f1 	.word	0x080036f1
 8002758:	0800370d 	.word	0x0800370d

0800275c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b08a      	sub	sp, #40	; 0x28
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002764:	2300      	movs	r3, #0
 8002766:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002780:	d004      	beq.n	800278c <HAL_ADC_IRQHandler+0x30>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a8e      	ldr	r2, [pc, #568]	; (80029c0 <HAL_ADC_IRQHandler+0x264>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d101      	bne.n	8002790 <HAL_ADC_IRQHandler+0x34>
 800278c:	4b8d      	ldr	r3, [pc, #564]	; (80029c4 <HAL_ADC_IRQHandler+0x268>)
 800278e:	e000      	b.n	8002792 <HAL_ADC_IRQHandler+0x36>
 8002790:	4b8d      	ldr	r3, [pc, #564]	; (80029c8 <HAL_ADC_IRQHandler+0x26c>)
 8002792:	4618      	mov	r0, r3
 8002794:	f7ff fc86 	bl	80020a4 <LL_ADC_GetMultimode>
 8002798:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	f003 0302 	and.w	r3, r3, #2
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d017      	beq.n	80027d4 <HAL_ADC_IRQHandler+0x78>
 80027a4:	69bb      	ldr	r3, [r7, #24]
 80027a6:	f003 0302 	and.w	r3, r3, #2
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d012      	beq.n	80027d4 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027b2:	f003 0310 	and.w	r3, r3, #16
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d105      	bne.n	80027c6 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027be:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f001 f808 	bl	80037dc <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	2202      	movs	r2, #2
 80027d2:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80027d4:	69fb      	ldr	r3, [r7, #28]
 80027d6:	f003 0304 	and.w	r3, r3, #4
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d004      	beq.n	80027e8 <HAL_ADC_IRQHandler+0x8c>
 80027de:	69bb      	ldr	r3, [r7, #24]
 80027e0:	f003 0304 	and.w	r3, r3, #4
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d10b      	bne.n	8002800 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	f000 8094 	beq.w	800291c <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80027f4:	69bb      	ldr	r3, [r7, #24]
 80027f6:	f003 0308 	and.w	r3, r3, #8
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	f000 808e 	beq.w	800291c <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002804:	f003 0310 	and.w	r3, r3, #16
 8002808:	2b00      	cmp	r3, #0
 800280a:	d105      	bne.n	8002818 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002810:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4618      	mov	r0, r3
 800281e:	f7ff fb9f 	bl	8001f60 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002822:	4603      	mov	r3, r0
 8002824:	2b00      	cmp	r3, #0
 8002826:	d072      	beq.n	800290e <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a64      	ldr	r2, [pc, #400]	; (80029c0 <HAL_ADC_IRQHandler+0x264>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d009      	beq.n	8002846 <HAL_ADC_IRQHandler+0xea>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a65      	ldr	r2, [pc, #404]	; (80029cc <HAL_ADC_IRQHandler+0x270>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d002      	beq.n	8002842 <HAL_ADC_IRQHandler+0xe6>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	e003      	b.n	800284a <HAL_ADC_IRQHandler+0xee>
 8002842:	4b63      	ldr	r3, [pc, #396]	; (80029d0 <HAL_ADC_IRQHandler+0x274>)
 8002844:	e001      	b.n	800284a <HAL_ADC_IRQHandler+0xee>
 8002846:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	6812      	ldr	r2, [r2, #0]
 800284e:	4293      	cmp	r3, r2
 8002850:	d008      	beq.n	8002864 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d005      	beq.n	8002864 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	2b05      	cmp	r3, #5
 800285c:	d002      	beq.n	8002864 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	2b09      	cmp	r3, #9
 8002862:	d104      	bne.n	800286e <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	623b      	str	r3, [r7, #32]
 800286c:	e014      	b.n	8002898 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a53      	ldr	r2, [pc, #332]	; (80029c0 <HAL_ADC_IRQHandler+0x264>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d009      	beq.n	800288c <HAL_ADC_IRQHandler+0x130>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a53      	ldr	r2, [pc, #332]	; (80029cc <HAL_ADC_IRQHandler+0x270>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d002      	beq.n	8002888 <HAL_ADC_IRQHandler+0x12c>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	e003      	b.n	8002890 <HAL_ADC_IRQHandler+0x134>
 8002888:	4b51      	ldr	r3, [pc, #324]	; (80029d0 <HAL_ADC_IRQHandler+0x274>)
 800288a:	e001      	b.n	8002890 <HAL_ADC_IRQHandler+0x134>
 800288c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002890:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	68db      	ldr	r3, [r3, #12]
 8002896:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002898:	6a3b      	ldr	r3, [r7, #32]
 800289a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d135      	bne.n	800290e <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 0308 	and.w	r3, r3, #8
 80028ac:	2b08      	cmp	r3, #8
 80028ae:	d12e      	bne.n	800290e <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4618      	mov	r0, r3
 80028b6:	f7ff fc9a 	bl	80021ee <LL_ADC_REG_IsConversionOngoing>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d11a      	bne.n	80028f6 <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	685a      	ldr	r2, [r3, #4]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f022 020c 	bic.w	r2, r2, #12
 80028ce:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028d4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d112      	bne.n	800290e <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028ec:	f043 0201 	orr.w	r2, r3, #1
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	65da      	str	r2, [r3, #92]	; 0x5c
 80028f4:	e00b      	b.n	800290e <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028fa:	f043 0210 	orr.w	r2, r3, #16
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002906:	f043 0201 	orr.w	r2, r3, #1
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f000 f984 	bl	8002c1c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	220c      	movs	r2, #12
 800291a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	f003 0320 	and.w	r3, r3, #32
 8002922:	2b00      	cmp	r3, #0
 8002924:	d004      	beq.n	8002930 <HAL_ADC_IRQHandler+0x1d4>
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	f003 0320 	and.w	r3, r3, #32
 800292c:	2b00      	cmp	r3, #0
 800292e:	d10b      	bne.n	8002948 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002930:	69fb      	ldr	r3, [r7, #28]
 8002932:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002936:	2b00      	cmp	r3, #0
 8002938:	f000 80b3 	beq.w	8002aa2 <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800293c:	69bb      	ldr	r3, [r7, #24]
 800293e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002942:	2b00      	cmp	r3, #0
 8002944:	f000 80ad 	beq.w	8002aa2 <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800294c:	f003 0310 	and.w	r3, r3, #16
 8002950:	2b00      	cmp	r3, #0
 8002952:	d105      	bne.n	8002960 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002958:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4618      	mov	r0, r3
 8002966:	f7ff fb3a 	bl	8001fde <LL_ADC_INJ_IsTriggerSourceSWStart>
 800296a:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4618      	mov	r0, r3
 8002972:	f7ff faf5 	bl	8001f60 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002976:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a10      	ldr	r2, [pc, #64]	; (80029c0 <HAL_ADC_IRQHandler+0x264>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d009      	beq.n	8002996 <HAL_ADC_IRQHandler+0x23a>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a11      	ldr	r2, [pc, #68]	; (80029cc <HAL_ADC_IRQHandler+0x270>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d002      	beq.n	8002992 <HAL_ADC_IRQHandler+0x236>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	e003      	b.n	800299a <HAL_ADC_IRQHandler+0x23e>
 8002992:	4b0f      	ldr	r3, [pc, #60]	; (80029d0 <HAL_ADC_IRQHandler+0x274>)
 8002994:	e001      	b.n	800299a <HAL_ADC_IRQHandler+0x23e>
 8002996:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	6812      	ldr	r2, [r2, #0]
 800299e:	4293      	cmp	r3, r2
 80029a0:	d008      	beq.n	80029b4 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d005      	beq.n	80029b4 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	2b06      	cmp	r3, #6
 80029ac:	d002      	beq.n	80029b4 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	2b07      	cmp	r3, #7
 80029b2:	d10f      	bne.n	80029d4 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	68db      	ldr	r3, [r3, #12]
 80029ba:	623b      	str	r3, [r7, #32]
 80029bc:	e01f      	b.n	80029fe <HAL_ADC_IRQHandler+0x2a2>
 80029be:	bf00      	nop
 80029c0:	50000100 	.word	0x50000100
 80029c4:	50000300 	.word	0x50000300
 80029c8:	50000700 	.word	0x50000700
 80029cc:	50000500 	.word	0x50000500
 80029d0:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a8b      	ldr	r2, [pc, #556]	; (8002c08 <HAL_ADC_IRQHandler+0x4ac>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d009      	beq.n	80029f2 <HAL_ADC_IRQHandler+0x296>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a8a      	ldr	r2, [pc, #552]	; (8002c0c <HAL_ADC_IRQHandler+0x4b0>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d002      	beq.n	80029ee <HAL_ADC_IRQHandler+0x292>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	e003      	b.n	80029f6 <HAL_ADC_IRQHandler+0x29a>
 80029ee:	4b88      	ldr	r3, [pc, #544]	; (8002c10 <HAL_ADC_IRQHandler+0x4b4>)
 80029f0:	e001      	b.n	80029f6 <HAL_ADC_IRQHandler+0x29a>
 80029f2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80029f6:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	68db      	ldr	r3, [r3, #12]
 80029fc:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d047      	beq.n	8002a94 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002a04:	6a3b      	ldr	r3, [r7, #32]
 8002a06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d007      	beq.n	8002a1e <HAL_ADC_IRQHandler+0x2c2>
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d03f      	beq.n	8002a94 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002a14:	6a3b      	ldr	r3, [r7, #32]
 8002a16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d13a      	bne.n	8002a94 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a28:	2b40      	cmp	r3, #64	; 0x40
 8002a2a:	d133      	bne.n	8002a94 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002a2c:	6a3b      	ldr	r3, [r7, #32]
 8002a2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d12e      	bne.n	8002a94 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f7ff fbea 	bl	8002214 <LL_ADC_INJ_IsConversionOngoing>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d11a      	bne.n	8002a7c <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	685a      	ldr	r2, [r3, #4]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002a54:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a5a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d112      	bne.n	8002a94 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a72:	f043 0201 	orr.w	r2, r3, #1
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	65da      	str	r2, [r3, #92]	; 0x5c
 8002a7a:	e00b      	b.n	8002a94 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a80:	f043 0210 	orr.w	r2, r3, #16
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a8c:	f043 0201 	orr.w	r2, r3, #1
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	f000 fe79 	bl	800378c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	2260      	movs	r2, #96	; 0x60
 8002aa0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d011      	beq.n	8002ad0 <HAL_ADC_IRQHandler+0x374>
 8002aac:	69bb      	ldr	r3, [r7, #24]
 8002aae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d00c      	beq.n	8002ad0 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aba:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f000 f8be 	bl	8002c44 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	2280      	movs	r2, #128	; 0x80
 8002ace:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002ad0:	69fb      	ldr	r3, [r7, #28]
 8002ad2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d012      	beq.n	8002b00 <HAL_ADC_IRQHandler+0x3a4>
 8002ada:	69bb      	ldr	r3, [r7, #24]
 8002adc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d00d      	beq.n	8002b00 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ae8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002af0:	6878      	ldr	r0, [r7, #4]
 8002af2:	f000 fe5f 	bl	80037b4 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002afe:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d012      	beq.n	8002b30 <HAL_ADC_IRQHandler+0x3d4>
 8002b0a:	69bb      	ldr	r3, [r7, #24]
 8002b0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d00d      	beq.n	8002b30 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b18:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	f000 fe51 	bl	80037c8 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b2e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	f003 0310 	and.w	r3, r3, #16
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d043      	beq.n	8002bc2 <HAL_ADC_IRQHandler+0x466>
 8002b3a:	69bb      	ldr	r3, [r7, #24]
 8002b3c:	f003 0310 	and.w	r3, r3, #16
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d03e      	beq.n	8002bc2 <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d102      	bne.n	8002b52 <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	627b      	str	r3, [r7, #36]	; 0x24
 8002b50:	e021      	b.n	8002b96 <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d015      	beq.n	8002b84 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b60:	d004      	beq.n	8002b6c <HAL_ADC_IRQHandler+0x410>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a28      	ldr	r2, [pc, #160]	; (8002c08 <HAL_ADC_IRQHandler+0x4ac>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d101      	bne.n	8002b70 <HAL_ADC_IRQHandler+0x414>
 8002b6c:	4b29      	ldr	r3, [pc, #164]	; (8002c14 <HAL_ADC_IRQHandler+0x4b8>)
 8002b6e:	e000      	b.n	8002b72 <HAL_ADC_IRQHandler+0x416>
 8002b70:	4b29      	ldr	r3, [pc, #164]	; (8002c18 <HAL_ADC_IRQHandler+0x4bc>)
 8002b72:	4618      	mov	r0, r3
 8002b74:	f7ff faa4 	bl	80020c0 <LL_ADC_GetMultiDMATransfer>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d00b      	beq.n	8002b96 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	627b      	str	r3, [r7, #36]	; 0x24
 8002b82:	e008      	b.n	8002b96 <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	68db      	ldr	r3, [r3, #12]
 8002b8a:	f003 0301 	and.w	r3, r3, #1
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d001      	beq.n	8002b96 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8002b92:	2301      	movs	r3, #1
 8002b94:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d10e      	bne.n	8002bba <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ba0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bac:	f043 0202 	orr.w	r2, r3, #2
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	f000 f84f 	bl	8002c58 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	2210      	movs	r2, #16
 8002bc0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d018      	beq.n	8002bfe <HAL_ADC_IRQHandler+0x4a2>
 8002bcc:	69bb      	ldr	r3, [r7, #24]
 8002bce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d013      	beq.n	8002bfe <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bda:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002be6:	f043 0208 	orr.w	r2, r3, #8
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002bf6:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f000 fdd1 	bl	80037a0 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002bfe:	bf00      	nop
 8002c00:	3728      	adds	r7, #40	; 0x28
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	50000100 	.word	0x50000100
 8002c0c:	50000500 	.word	0x50000500
 8002c10:	50000400 	.word	0x50000400
 8002c14:	50000300 	.word	0x50000300
 8002c18:	50000700 	.word	0x50000700

08002c1c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002c24:	bf00      	nop
 8002c26:	370c      	adds	r7, #12
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr

08002c30 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b083      	sub	sp, #12
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002c38:	bf00      	nop
 8002c3a:	370c      	adds	r7, #12
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr

08002c44 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002c4c:	bf00      	nop
 8002c4e:	370c      	adds	r7, #12
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr

08002c58 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b083      	sub	sp, #12
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002c60:	bf00      	nop
 8002c62:	370c      	adds	r7, #12
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr

08002c6c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b0b6      	sub	sp, #216	; 0xd8
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
 8002c74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c76:	2300      	movs	r3, #0
 8002c78:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d102      	bne.n	8002c90 <HAL_ADC_ConfigChannel+0x24>
 8002c8a:	2302      	movs	r3, #2
 8002c8c:	f000 bc13 	b.w	80034b6 <HAL_ADC_ConfigChannel+0x84a>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2201      	movs	r2, #1
 8002c94:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f7ff faa6 	bl	80021ee <LL_ADC_REG_IsConversionOngoing>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	f040 83f3 	bne.w	8003490 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6818      	ldr	r0, [r3, #0]
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	6859      	ldr	r1, [r3, #4]
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	461a      	mov	r2, r3
 8002cb8:	f7ff f965 	bl	8001f86 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f7ff fa94 	bl	80021ee <LL_ADC_REG_IsConversionOngoing>
 8002cc6:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f7ff faa0 	bl	8002214 <LL_ADC_INJ_IsConversionOngoing>
 8002cd4:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002cd8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	f040 81d9 	bne.w	8003094 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002ce2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	f040 81d4 	bne.w	8003094 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002cf4:	d10f      	bne.n	8002d16 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6818      	ldr	r0, [r3, #0]
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	4619      	mov	r1, r3
 8002d02:	f7ff f97f 	bl	8002004 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f7ff f913 	bl	8001f3a <LL_ADC_SetSamplingTimeCommonConfig>
 8002d14:	e00e      	b.n	8002d34 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6818      	ldr	r0, [r3, #0]
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	6819      	ldr	r1, [r3, #0]
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	461a      	mov	r2, r3
 8002d24:	f7ff f96e 	bl	8002004 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	2100      	movs	r1, #0
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f7ff f903 	bl	8001f3a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	695a      	ldr	r2, [r3, #20]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	68db      	ldr	r3, [r3, #12]
 8002d3e:	08db      	lsrs	r3, r3, #3
 8002d40:	f003 0303 	and.w	r3, r3, #3
 8002d44:	005b      	lsls	r3, r3, #1
 8002d46:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	691b      	ldr	r3, [r3, #16]
 8002d52:	2b04      	cmp	r3, #4
 8002d54:	d022      	beq.n	8002d9c <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6818      	ldr	r0, [r3, #0]
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	6919      	ldr	r1, [r3, #16]
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002d66:	f7ff f85d 	bl	8001e24 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6818      	ldr	r0, [r3, #0]
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	6919      	ldr	r1, [r3, #16]
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	699b      	ldr	r3, [r3, #24]
 8002d76:	461a      	mov	r2, r3
 8002d78:	f7ff f8a9 	bl	8001ece <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6818      	ldr	r0, [r3, #0]
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d102      	bne.n	8002d92 <HAL_ADC_ConfigChannel+0x126>
 8002d8c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d90:	e000      	b.n	8002d94 <HAL_ADC_ConfigChannel+0x128>
 8002d92:	2300      	movs	r3, #0
 8002d94:	461a      	mov	r2, r3
 8002d96:	f7ff f8b5 	bl	8001f04 <LL_ADC_SetOffsetSaturation>
 8002d9a:	e17b      	b.n	8003094 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	2100      	movs	r1, #0
 8002da2:	4618      	mov	r0, r3
 8002da4:	f7ff f862 	bl	8001e6c <LL_ADC_GetOffsetChannel>
 8002da8:	4603      	mov	r3, r0
 8002daa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d10a      	bne.n	8002dc8 <HAL_ADC_ConfigChannel+0x15c>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	2100      	movs	r1, #0
 8002db8:	4618      	mov	r0, r3
 8002dba:	f7ff f857 	bl	8001e6c <LL_ADC_GetOffsetChannel>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	0e9b      	lsrs	r3, r3, #26
 8002dc2:	f003 021f 	and.w	r2, r3, #31
 8002dc6:	e01e      	b.n	8002e06 <HAL_ADC_ConfigChannel+0x19a>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	2100      	movs	r1, #0
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f7ff f84c 	bl	8001e6c <LL_ADC_GetOffsetChannel>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dda:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002dde:	fa93 f3a3 	rbit	r3, r3
 8002de2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002de6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002dea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002dee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d101      	bne.n	8002dfa <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002df6:	2320      	movs	r3, #32
 8002df8:	e004      	b.n	8002e04 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002dfa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002dfe:	fab3 f383 	clz	r3, r3
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d105      	bne.n	8002e1e <HAL_ADC_ConfigChannel+0x1b2>
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	0e9b      	lsrs	r3, r3, #26
 8002e18:	f003 031f 	and.w	r3, r3, #31
 8002e1c:	e018      	b.n	8002e50 <HAL_ADC_ConfigChannel+0x1e4>
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e26:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002e2a:	fa93 f3a3 	rbit	r3, r3
 8002e2e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002e32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002e36:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002e3a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d101      	bne.n	8002e46 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002e42:	2320      	movs	r3, #32
 8002e44:	e004      	b.n	8002e50 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002e46:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002e4a:	fab3 f383 	clz	r3, r3
 8002e4e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d106      	bne.n	8002e62 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	2100      	movs	r1, #0
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f7ff f81b 	bl	8001e98 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	2101      	movs	r1, #1
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f7fe ffff 	bl	8001e6c <LL_ADC_GetOffsetChannel>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d10a      	bne.n	8002e8e <HAL_ADC_ConfigChannel+0x222>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	2101      	movs	r1, #1
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f7fe fff4 	bl	8001e6c <LL_ADC_GetOffsetChannel>
 8002e84:	4603      	mov	r3, r0
 8002e86:	0e9b      	lsrs	r3, r3, #26
 8002e88:	f003 021f 	and.w	r2, r3, #31
 8002e8c:	e01e      	b.n	8002ecc <HAL_ADC_ConfigChannel+0x260>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	2101      	movs	r1, #1
 8002e94:	4618      	mov	r0, r3
 8002e96:	f7fe ffe9 	bl	8001e6c <LL_ADC_GetOffsetChannel>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ea0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002ea4:	fa93 f3a3 	rbit	r3, r3
 8002ea8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002eac:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002eb0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002eb4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d101      	bne.n	8002ec0 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002ebc:	2320      	movs	r3, #32
 8002ebe:	e004      	b.n	8002eca <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002ec0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002ec4:	fab3 f383 	clz	r3, r3
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d105      	bne.n	8002ee4 <HAL_ADC_ConfigChannel+0x278>
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	0e9b      	lsrs	r3, r3, #26
 8002ede:	f003 031f 	and.w	r3, r3, #31
 8002ee2:	e018      	b.n	8002f16 <HAL_ADC_ConfigChannel+0x2aa>
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002ef0:	fa93 f3a3 	rbit	r3, r3
 8002ef4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002ef8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002efc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002f00:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d101      	bne.n	8002f0c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002f08:	2320      	movs	r3, #32
 8002f0a:	e004      	b.n	8002f16 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002f0c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002f10:	fab3 f383 	clz	r3, r3
 8002f14:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d106      	bne.n	8002f28 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	2101      	movs	r1, #1
 8002f22:	4618      	mov	r0, r3
 8002f24:	f7fe ffb8 	bl	8001e98 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	2102      	movs	r1, #2
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f7fe ff9c 	bl	8001e6c <LL_ADC_GetOffsetChannel>
 8002f34:	4603      	mov	r3, r0
 8002f36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d10a      	bne.n	8002f54 <HAL_ADC_ConfigChannel+0x2e8>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	2102      	movs	r1, #2
 8002f44:	4618      	mov	r0, r3
 8002f46:	f7fe ff91 	bl	8001e6c <LL_ADC_GetOffsetChannel>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	0e9b      	lsrs	r3, r3, #26
 8002f4e:	f003 021f 	and.w	r2, r3, #31
 8002f52:	e01e      	b.n	8002f92 <HAL_ADC_ConfigChannel+0x326>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	2102      	movs	r1, #2
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f7fe ff86 	bl	8001e6c <LL_ADC_GetOffsetChannel>
 8002f60:	4603      	mov	r3, r0
 8002f62:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f66:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f6a:	fa93 f3a3 	rbit	r3, r3
 8002f6e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002f72:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002f76:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002f7a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d101      	bne.n	8002f86 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002f82:	2320      	movs	r3, #32
 8002f84:	e004      	b.n	8002f90 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002f86:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002f8a:	fab3 f383 	clz	r3, r3
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d105      	bne.n	8002faa <HAL_ADC_ConfigChannel+0x33e>
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	0e9b      	lsrs	r3, r3, #26
 8002fa4:	f003 031f 	and.w	r3, r3, #31
 8002fa8:	e016      	b.n	8002fd8 <HAL_ADC_ConfigChannel+0x36c>
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002fb6:	fa93 f3a3 	rbit	r3, r3
 8002fba:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002fbc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002fbe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002fc2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d101      	bne.n	8002fce <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002fca:	2320      	movs	r3, #32
 8002fcc:	e004      	b.n	8002fd8 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002fce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002fd2:	fab3 f383 	clz	r3, r3
 8002fd6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d106      	bne.n	8002fea <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	2102      	movs	r1, #2
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f7fe ff57 	bl	8001e98 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	2103      	movs	r1, #3
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f7fe ff3b 	bl	8001e6c <LL_ADC_GetOffsetChannel>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d10a      	bne.n	8003016 <HAL_ADC_ConfigChannel+0x3aa>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	2103      	movs	r1, #3
 8003006:	4618      	mov	r0, r3
 8003008:	f7fe ff30 	bl	8001e6c <LL_ADC_GetOffsetChannel>
 800300c:	4603      	mov	r3, r0
 800300e:	0e9b      	lsrs	r3, r3, #26
 8003010:	f003 021f 	and.w	r2, r3, #31
 8003014:	e017      	b.n	8003046 <HAL_ADC_ConfigChannel+0x3da>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	2103      	movs	r1, #3
 800301c:	4618      	mov	r0, r3
 800301e:	f7fe ff25 	bl	8001e6c <LL_ADC_GetOffsetChannel>
 8003022:	4603      	mov	r3, r0
 8003024:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003026:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003028:	fa93 f3a3 	rbit	r3, r3
 800302c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800302e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003030:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003032:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003034:	2b00      	cmp	r3, #0
 8003036:	d101      	bne.n	800303c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8003038:	2320      	movs	r3, #32
 800303a:	e003      	b.n	8003044 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 800303c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800303e:	fab3 f383 	clz	r3, r3
 8003042:	b2db      	uxtb	r3, r3
 8003044:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800304e:	2b00      	cmp	r3, #0
 8003050:	d105      	bne.n	800305e <HAL_ADC_ConfigChannel+0x3f2>
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	0e9b      	lsrs	r3, r3, #26
 8003058:	f003 031f 	and.w	r3, r3, #31
 800305c:	e011      	b.n	8003082 <HAL_ADC_ConfigChannel+0x416>
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003064:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003066:	fa93 f3a3 	rbit	r3, r3
 800306a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800306c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800306e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003070:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003072:	2b00      	cmp	r3, #0
 8003074:	d101      	bne.n	800307a <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8003076:	2320      	movs	r3, #32
 8003078:	e003      	b.n	8003082 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800307a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800307c:	fab3 f383 	clz	r3, r3
 8003080:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003082:	429a      	cmp	r2, r3
 8003084:	d106      	bne.n	8003094 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	2200      	movs	r2, #0
 800308c:	2103      	movs	r1, #3
 800308e:	4618      	mov	r0, r3
 8003090:	f7fe ff02 	bl	8001e98 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4618      	mov	r0, r3
 800309a:	f7ff f881 	bl	80021a0 <LL_ADC_IsEnabled>
 800309e:	4603      	mov	r3, r0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	f040 813d 	bne.w	8003320 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6818      	ldr	r0, [r3, #0]
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	6819      	ldr	r1, [r3, #0]
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	68db      	ldr	r3, [r3, #12]
 80030b2:	461a      	mov	r2, r3
 80030b4:	f7fe ffd2 	bl	800205c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	4aa2      	ldr	r2, [pc, #648]	; (8003348 <HAL_ADC_ConfigChannel+0x6dc>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	f040 812e 	bne.w	8003320 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d10b      	bne.n	80030ec <HAL_ADC_ConfigChannel+0x480>
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	0e9b      	lsrs	r3, r3, #26
 80030da:	3301      	adds	r3, #1
 80030dc:	f003 031f 	and.w	r3, r3, #31
 80030e0:	2b09      	cmp	r3, #9
 80030e2:	bf94      	ite	ls
 80030e4:	2301      	movls	r3, #1
 80030e6:	2300      	movhi	r3, #0
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	e019      	b.n	8003120 <HAL_ADC_ConfigChannel+0x4b4>
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030f4:	fa93 f3a3 	rbit	r3, r3
 80030f8:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80030fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80030fc:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80030fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003100:	2b00      	cmp	r3, #0
 8003102:	d101      	bne.n	8003108 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003104:	2320      	movs	r3, #32
 8003106:	e003      	b.n	8003110 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003108:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800310a:	fab3 f383 	clz	r3, r3
 800310e:	b2db      	uxtb	r3, r3
 8003110:	3301      	adds	r3, #1
 8003112:	f003 031f 	and.w	r3, r3, #31
 8003116:	2b09      	cmp	r3, #9
 8003118:	bf94      	ite	ls
 800311a:	2301      	movls	r3, #1
 800311c:	2300      	movhi	r3, #0
 800311e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003120:	2b00      	cmp	r3, #0
 8003122:	d079      	beq.n	8003218 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800312c:	2b00      	cmp	r3, #0
 800312e:	d107      	bne.n	8003140 <HAL_ADC_ConfigChannel+0x4d4>
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	0e9b      	lsrs	r3, r3, #26
 8003136:	3301      	adds	r3, #1
 8003138:	069b      	lsls	r3, r3, #26
 800313a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800313e:	e015      	b.n	800316c <HAL_ADC_ConfigChannel+0x500>
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003146:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003148:	fa93 f3a3 	rbit	r3, r3
 800314c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800314e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003150:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003152:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003154:	2b00      	cmp	r3, #0
 8003156:	d101      	bne.n	800315c <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8003158:	2320      	movs	r3, #32
 800315a:	e003      	b.n	8003164 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 800315c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800315e:	fab3 f383 	clz	r3, r3
 8003162:	b2db      	uxtb	r3, r3
 8003164:	3301      	adds	r3, #1
 8003166:	069b      	lsls	r3, r3, #26
 8003168:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003174:	2b00      	cmp	r3, #0
 8003176:	d109      	bne.n	800318c <HAL_ADC_ConfigChannel+0x520>
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	0e9b      	lsrs	r3, r3, #26
 800317e:	3301      	adds	r3, #1
 8003180:	f003 031f 	and.w	r3, r3, #31
 8003184:	2101      	movs	r1, #1
 8003186:	fa01 f303 	lsl.w	r3, r1, r3
 800318a:	e017      	b.n	80031bc <HAL_ADC_ConfigChannel+0x550>
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003192:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003194:	fa93 f3a3 	rbit	r3, r3
 8003198:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800319a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800319c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800319e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d101      	bne.n	80031a8 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80031a4:	2320      	movs	r3, #32
 80031a6:	e003      	b.n	80031b0 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80031a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031aa:	fab3 f383 	clz	r3, r3
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	3301      	adds	r3, #1
 80031b2:	f003 031f 	and.w	r3, r3, #31
 80031b6:	2101      	movs	r1, #1
 80031b8:	fa01 f303 	lsl.w	r3, r1, r3
 80031bc:	ea42 0103 	orr.w	r1, r2, r3
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d10a      	bne.n	80031e2 <HAL_ADC_ConfigChannel+0x576>
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	0e9b      	lsrs	r3, r3, #26
 80031d2:	3301      	adds	r3, #1
 80031d4:	f003 021f 	and.w	r2, r3, #31
 80031d8:	4613      	mov	r3, r2
 80031da:	005b      	lsls	r3, r3, #1
 80031dc:	4413      	add	r3, r2
 80031de:	051b      	lsls	r3, r3, #20
 80031e0:	e018      	b.n	8003214 <HAL_ADC_ConfigChannel+0x5a8>
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031ea:	fa93 f3a3 	rbit	r3, r3
 80031ee:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80031f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80031f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d101      	bne.n	80031fe <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80031fa:	2320      	movs	r3, #32
 80031fc:	e003      	b.n	8003206 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80031fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003200:	fab3 f383 	clz	r3, r3
 8003204:	b2db      	uxtb	r3, r3
 8003206:	3301      	adds	r3, #1
 8003208:	f003 021f 	and.w	r2, r3, #31
 800320c:	4613      	mov	r3, r2
 800320e:	005b      	lsls	r3, r3, #1
 8003210:	4413      	add	r3, r2
 8003212:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003214:	430b      	orrs	r3, r1
 8003216:	e07e      	b.n	8003316 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003220:	2b00      	cmp	r3, #0
 8003222:	d107      	bne.n	8003234 <HAL_ADC_ConfigChannel+0x5c8>
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	0e9b      	lsrs	r3, r3, #26
 800322a:	3301      	adds	r3, #1
 800322c:	069b      	lsls	r3, r3, #26
 800322e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003232:	e015      	b.n	8003260 <HAL_ADC_ConfigChannel+0x5f4>
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800323a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800323c:	fa93 f3a3 	rbit	r3, r3
 8003240:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003244:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003248:	2b00      	cmp	r3, #0
 800324a:	d101      	bne.n	8003250 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 800324c:	2320      	movs	r3, #32
 800324e:	e003      	b.n	8003258 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003252:	fab3 f383 	clz	r3, r3
 8003256:	b2db      	uxtb	r3, r3
 8003258:	3301      	adds	r3, #1
 800325a:	069b      	lsls	r3, r3, #26
 800325c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003268:	2b00      	cmp	r3, #0
 800326a:	d109      	bne.n	8003280 <HAL_ADC_ConfigChannel+0x614>
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	0e9b      	lsrs	r3, r3, #26
 8003272:	3301      	adds	r3, #1
 8003274:	f003 031f 	and.w	r3, r3, #31
 8003278:	2101      	movs	r1, #1
 800327a:	fa01 f303 	lsl.w	r3, r1, r3
 800327e:	e017      	b.n	80032b0 <HAL_ADC_ConfigChannel+0x644>
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003286:	6a3b      	ldr	r3, [r7, #32]
 8003288:	fa93 f3a3 	rbit	r3, r3
 800328c:	61fb      	str	r3, [r7, #28]
  return result;
 800328e:	69fb      	ldr	r3, [r7, #28]
 8003290:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003294:	2b00      	cmp	r3, #0
 8003296:	d101      	bne.n	800329c <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8003298:	2320      	movs	r3, #32
 800329a:	e003      	b.n	80032a4 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 800329c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329e:	fab3 f383 	clz	r3, r3
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	3301      	adds	r3, #1
 80032a6:	f003 031f 	and.w	r3, r3, #31
 80032aa:	2101      	movs	r1, #1
 80032ac:	fa01 f303 	lsl.w	r3, r1, r3
 80032b0:	ea42 0103 	orr.w	r1, r2, r3
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d10d      	bne.n	80032dc <HAL_ADC_ConfigChannel+0x670>
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	0e9b      	lsrs	r3, r3, #26
 80032c6:	3301      	adds	r3, #1
 80032c8:	f003 021f 	and.w	r2, r3, #31
 80032cc:	4613      	mov	r3, r2
 80032ce:	005b      	lsls	r3, r3, #1
 80032d0:	4413      	add	r3, r2
 80032d2:	3b1e      	subs	r3, #30
 80032d4:	051b      	lsls	r3, r3, #20
 80032d6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80032da:	e01b      	b.n	8003314 <HAL_ADC_ConfigChannel+0x6a8>
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	fa93 f3a3 	rbit	r3, r3
 80032e8:	613b      	str	r3, [r7, #16]
  return result;
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80032ee:	69bb      	ldr	r3, [r7, #24]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d101      	bne.n	80032f8 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80032f4:	2320      	movs	r3, #32
 80032f6:	e003      	b.n	8003300 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80032f8:	69bb      	ldr	r3, [r7, #24]
 80032fa:	fab3 f383 	clz	r3, r3
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	3301      	adds	r3, #1
 8003302:	f003 021f 	and.w	r2, r3, #31
 8003306:	4613      	mov	r3, r2
 8003308:	005b      	lsls	r3, r3, #1
 800330a:	4413      	add	r3, r2
 800330c:	3b1e      	subs	r3, #30
 800330e:	051b      	lsls	r3, r3, #20
 8003310:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003314:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003316:	683a      	ldr	r2, [r7, #0]
 8003318:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800331a:	4619      	mov	r1, r3
 800331c:	f7fe fe72 	bl	8002004 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	4b09      	ldr	r3, [pc, #36]	; (800334c <HAL_ADC_ConfigChannel+0x6e0>)
 8003326:	4013      	ands	r3, r2
 8003328:	2b00      	cmp	r3, #0
 800332a:	f000 80be 	beq.w	80034aa <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003336:	d004      	beq.n	8003342 <HAL_ADC_ConfigChannel+0x6d6>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a04      	ldr	r2, [pc, #16]	; (8003350 <HAL_ADC_ConfigChannel+0x6e4>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d10a      	bne.n	8003358 <HAL_ADC_ConfigChannel+0x6ec>
 8003342:	4b04      	ldr	r3, [pc, #16]	; (8003354 <HAL_ADC_ConfigChannel+0x6e8>)
 8003344:	e009      	b.n	800335a <HAL_ADC_ConfigChannel+0x6ee>
 8003346:	bf00      	nop
 8003348:	407f0000 	.word	0x407f0000
 800334c:	80080000 	.word	0x80080000
 8003350:	50000100 	.word	0x50000100
 8003354:	50000300 	.word	0x50000300
 8003358:	4b59      	ldr	r3, [pc, #356]	; (80034c0 <HAL_ADC_ConfigChannel+0x854>)
 800335a:	4618      	mov	r0, r3
 800335c:	f7fe fd54 	bl	8001e08 <LL_ADC_GetCommonPathInternalCh>
 8003360:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a56      	ldr	r2, [pc, #344]	; (80034c4 <HAL_ADC_ConfigChannel+0x858>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d004      	beq.n	8003378 <HAL_ADC_ConfigChannel+0x70c>
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a55      	ldr	r2, [pc, #340]	; (80034c8 <HAL_ADC_ConfigChannel+0x85c>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d13a      	bne.n	80033ee <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003378:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800337c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003380:	2b00      	cmp	r3, #0
 8003382:	d134      	bne.n	80033ee <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800338c:	d005      	beq.n	800339a <HAL_ADC_ConfigChannel+0x72e>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a4e      	ldr	r2, [pc, #312]	; (80034cc <HAL_ADC_ConfigChannel+0x860>)
 8003394:	4293      	cmp	r3, r2
 8003396:	f040 8085 	bne.w	80034a4 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80033a2:	d004      	beq.n	80033ae <HAL_ADC_ConfigChannel+0x742>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a49      	ldr	r2, [pc, #292]	; (80034d0 <HAL_ADC_ConfigChannel+0x864>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d101      	bne.n	80033b2 <HAL_ADC_ConfigChannel+0x746>
 80033ae:	4a49      	ldr	r2, [pc, #292]	; (80034d4 <HAL_ADC_ConfigChannel+0x868>)
 80033b0:	e000      	b.n	80033b4 <HAL_ADC_ConfigChannel+0x748>
 80033b2:	4a43      	ldr	r2, [pc, #268]	; (80034c0 <HAL_ADC_ConfigChannel+0x854>)
 80033b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80033b8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80033bc:	4619      	mov	r1, r3
 80033be:	4610      	mov	r0, r2
 80033c0:	f7fe fd0f 	bl	8001de2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80033c4:	4b44      	ldr	r3, [pc, #272]	; (80034d8 <HAL_ADC_ConfigChannel+0x86c>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	099b      	lsrs	r3, r3, #6
 80033ca:	4a44      	ldr	r2, [pc, #272]	; (80034dc <HAL_ADC_ConfigChannel+0x870>)
 80033cc:	fba2 2303 	umull	r2, r3, r2, r3
 80033d0:	099b      	lsrs	r3, r3, #6
 80033d2:	1c5a      	adds	r2, r3, #1
 80033d4:	4613      	mov	r3, r2
 80033d6:	005b      	lsls	r3, r3, #1
 80033d8:	4413      	add	r3, r2
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80033de:	e002      	b.n	80033e6 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	3b01      	subs	r3, #1
 80033e4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d1f9      	bne.n	80033e0 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80033ec:	e05a      	b.n	80034a4 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a3b      	ldr	r2, [pc, #236]	; (80034e0 <HAL_ADC_ConfigChannel+0x874>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d125      	bne.n	8003444 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80033f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80033fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003400:	2b00      	cmp	r3, #0
 8003402:	d11f      	bne.n	8003444 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a31      	ldr	r2, [pc, #196]	; (80034d0 <HAL_ADC_ConfigChannel+0x864>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d104      	bne.n	8003418 <HAL_ADC_ConfigChannel+0x7ac>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a34      	ldr	r2, [pc, #208]	; (80034e4 <HAL_ADC_ConfigChannel+0x878>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d047      	beq.n	80034a8 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003420:	d004      	beq.n	800342c <HAL_ADC_ConfigChannel+0x7c0>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a2a      	ldr	r2, [pc, #168]	; (80034d0 <HAL_ADC_ConfigChannel+0x864>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d101      	bne.n	8003430 <HAL_ADC_ConfigChannel+0x7c4>
 800342c:	4a29      	ldr	r2, [pc, #164]	; (80034d4 <HAL_ADC_ConfigChannel+0x868>)
 800342e:	e000      	b.n	8003432 <HAL_ADC_ConfigChannel+0x7c6>
 8003430:	4a23      	ldr	r2, [pc, #140]	; (80034c0 <HAL_ADC_ConfigChannel+0x854>)
 8003432:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003436:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800343a:	4619      	mov	r1, r3
 800343c:	4610      	mov	r0, r2
 800343e:	f7fe fcd0 	bl	8001de2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003442:	e031      	b.n	80034a8 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a27      	ldr	r2, [pc, #156]	; (80034e8 <HAL_ADC_ConfigChannel+0x87c>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d12d      	bne.n	80034aa <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800344e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003452:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d127      	bne.n	80034aa <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a1c      	ldr	r2, [pc, #112]	; (80034d0 <HAL_ADC_ConfigChannel+0x864>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d022      	beq.n	80034aa <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800346c:	d004      	beq.n	8003478 <HAL_ADC_ConfigChannel+0x80c>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a17      	ldr	r2, [pc, #92]	; (80034d0 <HAL_ADC_ConfigChannel+0x864>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d101      	bne.n	800347c <HAL_ADC_ConfigChannel+0x810>
 8003478:	4a16      	ldr	r2, [pc, #88]	; (80034d4 <HAL_ADC_ConfigChannel+0x868>)
 800347a:	e000      	b.n	800347e <HAL_ADC_ConfigChannel+0x812>
 800347c:	4a10      	ldr	r2, [pc, #64]	; (80034c0 <HAL_ADC_ConfigChannel+0x854>)
 800347e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003482:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003486:	4619      	mov	r1, r3
 8003488:	4610      	mov	r0, r2
 800348a:	f7fe fcaa 	bl	8001de2 <LL_ADC_SetCommonPathInternalCh>
 800348e:	e00c      	b.n	80034aa <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003494:	f043 0220 	orr.w	r2, r3, #32
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80034a2:	e002      	b.n	80034aa <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80034a4:	bf00      	nop
 80034a6:	e000      	b.n	80034aa <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80034a8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80034b2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	37d8      	adds	r7, #216	; 0xd8
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	50000700 	.word	0x50000700
 80034c4:	c3210000 	.word	0xc3210000
 80034c8:	90c00010 	.word	0x90c00010
 80034cc:	50000600 	.word	0x50000600
 80034d0:	50000100 	.word	0x50000100
 80034d4:	50000300 	.word	0x50000300
 80034d8:	20000018 	.word	0x20000018
 80034dc:	053e2d63 	.word	0x053e2d63
 80034e0:	c7520000 	.word	0xc7520000
 80034e4:	50000500 	.word	0x50000500
 80034e8:	cb840000 	.word	0xcb840000

080034ec <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b084      	sub	sp, #16
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80034f4:	2300      	movs	r3, #0
 80034f6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4618      	mov	r0, r3
 80034fe:	f7fe fe4f 	bl	80021a0 <LL_ADC_IsEnabled>
 8003502:	4603      	mov	r3, r0
 8003504:	2b00      	cmp	r3, #0
 8003506:	d176      	bne.n	80035f6 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	689a      	ldr	r2, [r3, #8]
 800350e:	4b3c      	ldr	r3, [pc, #240]	; (8003600 <ADC_Enable+0x114>)
 8003510:	4013      	ands	r3, r2
 8003512:	2b00      	cmp	r3, #0
 8003514:	d00d      	beq.n	8003532 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800351a:	f043 0210 	orr.w	r2, r3, #16
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003526:	f043 0201 	orr.w	r2, r3, #1
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e062      	b.n	80035f8 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4618      	mov	r0, r3
 8003538:	f7fe fe1e 	bl	8002178 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003544:	d004      	beq.n	8003550 <ADC_Enable+0x64>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a2e      	ldr	r2, [pc, #184]	; (8003604 <ADC_Enable+0x118>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d101      	bne.n	8003554 <ADC_Enable+0x68>
 8003550:	4b2d      	ldr	r3, [pc, #180]	; (8003608 <ADC_Enable+0x11c>)
 8003552:	e000      	b.n	8003556 <ADC_Enable+0x6a>
 8003554:	4b2d      	ldr	r3, [pc, #180]	; (800360c <ADC_Enable+0x120>)
 8003556:	4618      	mov	r0, r3
 8003558:	f7fe fc56 	bl	8001e08 <LL_ADC_GetCommonPathInternalCh>
 800355c:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800355e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003562:	2b00      	cmp	r3, #0
 8003564:	d013      	beq.n	800358e <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003566:	4b2a      	ldr	r3, [pc, #168]	; (8003610 <ADC_Enable+0x124>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	099b      	lsrs	r3, r3, #6
 800356c:	4a29      	ldr	r2, [pc, #164]	; (8003614 <ADC_Enable+0x128>)
 800356e:	fba2 2303 	umull	r2, r3, r2, r3
 8003572:	099b      	lsrs	r3, r3, #6
 8003574:	1c5a      	adds	r2, r3, #1
 8003576:	4613      	mov	r3, r2
 8003578:	005b      	lsls	r3, r3, #1
 800357a:	4413      	add	r3, r2
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003580:	e002      	b.n	8003588 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	3b01      	subs	r3, #1
 8003586:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d1f9      	bne.n	8003582 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800358e:	f7fe fc09 	bl	8001da4 <HAL_GetTick>
 8003592:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003594:	e028      	b.n	80035e8 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4618      	mov	r0, r3
 800359c:	f7fe fe00 	bl	80021a0 <LL_ADC_IsEnabled>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d104      	bne.n	80035b0 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4618      	mov	r0, r3
 80035ac:	f7fe fde4 	bl	8002178 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80035b0:	f7fe fbf8 	bl	8001da4 <HAL_GetTick>
 80035b4:	4602      	mov	r2, r0
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	2b02      	cmp	r3, #2
 80035bc:	d914      	bls.n	80035e8 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 0301 	and.w	r3, r3, #1
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d00d      	beq.n	80035e8 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035d0:	f043 0210 	orr.w	r2, r3, #16
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035dc:	f043 0201 	orr.w	r2, r3, #1
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	e007      	b.n	80035f8 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 0301 	and.w	r3, r3, #1
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d1cf      	bne.n	8003596 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80035f6:	2300      	movs	r3, #0
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	3710      	adds	r7, #16
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}
 8003600:	8000003f 	.word	0x8000003f
 8003604:	50000100 	.word	0x50000100
 8003608:	50000300 	.word	0x50000300
 800360c:	50000700 	.word	0x50000700
 8003610:	20000018 	.word	0x20000018
 8003614:	053e2d63 	.word	0x053e2d63

08003618 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b084      	sub	sp, #16
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003624:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800362a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800362e:	2b00      	cmp	r3, #0
 8003630:	d14b      	bne.n	80036ca <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003636:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 0308 	and.w	r3, r3, #8
 8003648:	2b00      	cmp	r3, #0
 800364a:	d021      	beq.n	8003690 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4618      	mov	r0, r3
 8003652:	f7fe fc85 	bl	8001f60 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003656:	4603      	mov	r3, r0
 8003658:	2b00      	cmp	r3, #0
 800365a:	d032      	beq.n	80036c2 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	68db      	ldr	r3, [r3, #12]
 8003662:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d12b      	bne.n	80036c2 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800366e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800367a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800367e:	2b00      	cmp	r3, #0
 8003680:	d11f      	bne.n	80036c2 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003686:	f043 0201 	orr.w	r2, r3, #1
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	65da      	str	r2, [r3, #92]	; 0x5c
 800368e:	e018      	b.n	80036c2 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	68db      	ldr	r3, [r3, #12]
 8003696:	f003 0302 	and.w	r3, r3, #2
 800369a:	2b00      	cmp	r3, #0
 800369c:	d111      	bne.n	80036c2 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d105      	bne.n	80036c2 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ba:	f043 0201 	orr.w	r2, r3, #1
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80036c2:	68f8      	ldr	r0, [r7, #12]
 80036c4:	f7ff faaa 	bl	8002c1c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80036c8:	e00e      	b.n	80036e8 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ce:	f003 0310 	and.w	r3, r3, #16
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d003      	beq.n	80036de <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80036d6:	68f8      	ldr	r0, [r7, #12]
 80036d8:	f7ff fabe 	bl	8002c58 <HAL_ADC_ErrorCallback>
}
 80036dc:	e004      	b.n	80036e8 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	4798      	blx	r3
}
 80036e8:	bf00      	nop
 80036ea:	3710      	adds	r7, #16
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}

080036f0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b084      	sub	sp, #16
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036fc:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80036fe:	68f8      	ldr	r0, [r7, #12]
 8003700:	f7ff fa96 	bl	8002c30 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003704:	bf00      	nop
 8003706:	3710      	adds	r7, #16
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}

0800370c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b084      	sub	sp, #16
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003718:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800371e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800372a:	f043 0204 	orr.w	r2, r3, #4
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003732:	68f8      	ldr	r0, [r7, #12]
 8003734:	f7ff fa90 	bl	8002c58 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003738:	bf00      	nop
 800373a:	3710      	adds	r7, #16
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}

08003740 <LL_ADC_IsEnabled>:
{
 8003740:	b480      	push	{r7}
 8003742:	b083      	sub	sp, #12
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	f003 0301 	and.w	r3, r3, #1
 8003750:	2b01      	cmp	r3, #1
 8003752:	d101      	bne.n	8003758 <LL_ADC_IsEnabled+0x18>
 8003754:	2301      	movs	r3, #1
 8003756:	e000      	b.n	800375a <LL_ADC_IsEnabled+0x1a>
 8003758:	2300      	movs	r3, #0
}
 800375a:	4618      	mov	r0, r3
 800375c:	370c      	adds	r7, #12
 800375e:	46bd      	mov	sp, r7
 8003760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003764:	4770      	bx	lr

08003766 <LL_ADC_REG_IsConversionOngoing>:
{
 8003766:	b480      	push	{r7}
 8003768:	b083      	sub	sp, #12
 800376a:	af00      	add	r7, sp, #0
 800376c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	f003 0304 	and.w	r3, r3, #4
 8003776:	2b04      	cmp	r3, #4
 8003778:	d101      	bne.n	800377e <LL_ADC_REG_IsConversionOngoing+0x18>
 800377a:	2301      	movs	r3, #1
 800377c:	e000      	b.n	8003780 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800377e:	2300      	movs	r3, #0
}
 8003780:	4618      	mov	r0, r3
 8003782:	370c      	adds	r7, #12
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr

0800378c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800378c:	b480      	push	{r7}
 800378e:	b083      	sub	sp, #12
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003794:	bf00      	nop
 8003796:	370c      	adds	r7, #12
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr

080037a0 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b083      	sub	sp, #12
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80037a8:	bf00      	nop
 80037aa:	370c      	adds	r7, #12
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr

080037b4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b083      	sub	sp, #12
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80037bc:	bf00      	nop
 80037be:	370c      	adds	r7, #12
 80037c0:	46bd      	mov	sp, r7
 80037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c6:	4770      	bx	lr

080037c8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b083      	sub	sp, #12
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80037d0:	bf00      	nop
 80037d2:	370c      	adds	r7, #12
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr

080037dc <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80037dc:	b480      	push	{r7}
 80037de:	b083      	sub	sp, #12
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80037e4:	bf00      	nop
 80037e6:	370c      	adds	r7, #12
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr

080037f0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80037f0:	b590      	push	{r4, r7, lr}
 80037f2:	b0a1      	sub	sp, #132	; 0x84
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80037fa:	2300      	movs	r3, #0
 80037fc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003806:	2b01      	cmp	r3, #1
 8003808:	d101      	bne.n	800380e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800380a:	2302      	movs	r3, #2
 800380c:	e0e7      	b.n	80039de <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2201      	movs	r2, #1
 8003812:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003816:	2300      	movs	r3, #0
 8003818:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800381a:	2300      	movs	r3, #0
 800381c:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003826:	d102      	bne.n	800382e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003828:	4b6f      	ldr	r3, [pc, #444]	; (80039e8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800382a:	60bb      	str	r3, [r7, #8]
 800382c:	e009      	b.n	8003842 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a6e      	ldr	r2, [pc, #440]	; (80039ec <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d102      	bne.n	800383e <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8003838:	4b6d      	ldr	r3, [pc, #436]	; (80039f0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800383a:	60bb      	str	r3, [r7, #8]
 800383c:	e001      	b.n	8003842 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800383e:	2300      	movs	r3, #0
 8003840:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d10b      	bne.n	8003860 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800384c:	f043 0220 	orr.w	r2, r3, #32
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2200      	movs	r2, #0
 8003858:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	e0be      	b.n	80039de <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	4618      	mov	r0, r3
 8003864:	f7ff ff7f 	bl	8003766 <LL_ADC_REG_IsConversionOngoing>
 8003868:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4618      	mov	r0, r3
 8003870:	f7ff ff79 	bl	8003766 <LL_ADC_REG_IsConversionOngoing>
 8003874:	4603      	mov	r3, r0
 8003876:	2b00      	cmp	r3, #0
 8003878:	f040 80a0 	bne.w	80039bc <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800387c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800387e:	2b00      	cmp	r3, #0
 8003880:	f040 809c 	bne.w	80039bc <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800388c:	d004      	beq.n	8003898 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a55      	ldr	r2, [pc, #340]	; (80039e8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d101      	bne.n	800389c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003898:	4b56      	ldr	r3, [pc, #344]	; (80039f4 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800389a:	e000      	b.n	800389e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800389c:	4b56      	ldr	r3, [pc, #344]	; (80039f8 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800389e:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d04b      	beq.n	8003940 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80038a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	6859      	ldr	r1, [r3, #4]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80038ba:	035b      	lsls	r3, r3, #13
 80038bc:	430b      	orrs	r3, r1
 80038be:	431a      	orrs	r2, r3
 80038c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038c2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80038cc:	d004      	beq.n	80038d8 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a45      	ldr	r2, [pc, #276]	; (80039e8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d10f      	bne.n	80038f8 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80038d8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80038dc:	f7ff ff30 	bl	8003740 <LL_ADC_IsEnabled>
 80038e0:	4604      	mov	r4, r0
 80038e2:	4841      	ldr	r0, [pc, #260]	; (80039e8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80038e4:	f7ff ff2c 	bl	8003740 <LL_ADC_IsEnabled>
 80038e8:	4603      	mov	r3, r0
 80038ea:	4323      	orrs	r3, r4
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	bf0c      	ite	eq
 80038f0:	2301      	moveq	r3, #1
 80038f2:	2300      	movne	r3, #0
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	e012      	b.n	800391e <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80038f8:	483c      	ldr	r0, [pc, #240]	; (80039ec <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80038fa:	f7ff ff21 	bl	8003740 <LL_ADC_IsEnabled>
 80038fe:	4604      	mov	r4, r0
 8003900:	483b      	ldr	r0, [pc, #236]	; (80039f0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003902:	f7ff ff1d 	bl	8003740 <LL_ADC_IsEnabled>
 8003906:	4603      	mov	r3, r0
 8003908:	431c      	orrs	r4, r3
 800390a:	483c      	ldr	r0, [pc, #240]	; (80039fc <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800390c:	f7ff ff18 	bl	8003740 <LL_ADC_IsEnabled>
 8003910:	4603      	mov	r3, r0
 8003912:	4323      	orrs	r3, r4
 8003914:	2b00      	cmp	r3, #0
 8003916:	bf0c      	ite	eq
 8003918:	2301      	moveq	r3, #1
 800391a:	2300      	movne	r3, #0
 800391c:	b2db      	uxtb	r3, r3
 800391e:	2b00      	cmp	r3, #0
 8003920:	d056      	beq.n	80039d0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003922:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800392a:	f023 030f 	bic.w	r3, r3, #15
 800392e:	683a      	ldr	r2, [r7, #0]
 8003930:	6811      	ldr	r1, [r2, #0]
 8003932:	683a      	ldr	r2, [r7, #0]
 8003934:	6892      	ldr	r2, [r2, #8]
 8003936:	430a      	orrs	r2, r1
 8003938:	431a      	orrs	r2, r3
 800393a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800393c:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800393e:	e047      	b.n	80039d0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003940:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003948:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800394a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003954:	d004      	beq.n	8003960 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a23      	ldr	r2, [pc, #140]	; (80039e8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d10f      	bne.n	8003980 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003960:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003964:	f7ff feec 	bl	8003740 <LL_ADC_IsEnabled>
 8003968:	4604      	mov	r4, r0
 800396a:	481f      	ldr	r0, [pc, #124]	; (80039e8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800396c:	f7ff fee8 	bl	8003740 <LL_ADC_IsEnabled>
 8003970:	4603      	mov	r3, r0
 8003972:	4323      	orrs	r3, r4
 8003974:	2b00      	cmp	r3, #0
 8003976:	bf0c      	ite	eq
 8003978:	2301      	moveq	r3, #1
 800397a:	2300      	movne	r3, #0
 800397c:	b2db      	uxtb	r3, r3
 800397e:	e012      	b.n	80039a6 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003980:	481a      	ldr	r0, [pc, #104]	; (80039ec <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003982:	f7ff fedd 	bl	8003740 <LL_ADC_IsEnabled>
 8003986:	4604      	mov	r4, r0
 8003988:	4819      	ldr	r0, [pc, #100]	; (80039f0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800398a:	f7ff fed9 	bl	8003740 <LL_ADC_IsEnabled>
 800398e:	4603      	mov	r3, r0
 8003990:	431c      	orrs	r4, r3
 8003992:	481a      	ldr	r0, [pc, #104]	; (80039fc <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003994:	f7ff fed4 	bl	8003740 <LL_ADC_IsEnabled>
 8003998:	4603      	mov	r3, r0
 800399a:	4323      	orrs	r3, r4
 800399c:	2b00      	cmp	r3, #0
 800399e:	bf0c      	ite	eq
 80039a0:	2301      	moveq	r3, #1
 80039a2:	2300      	movne	r3, #0
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d012      	beq.n	80039d0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80039aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80039b2:	f023 030f 	bic.w	r3, r3, #15
 80039b6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80039b8:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80039ba:	e009      	b.n	80039d0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039c0:	f043 0220 	orr.w	r2, r3, #32
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80039ce:	e000      	b.n	80039d2 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80039d0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2200      	movs	r2, #0
 80039d6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80039da:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3784      	adds	r7, #132	; 0x84
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd90      	pop	{r4, r7, pc}
 80039e6:	bf00      	nop
 80039e8:	50000100 	.word	0x50000100
 80039ec:	50000400 	.word	0x50000400
 80039f0:	50000500 	.word	0x50000500
 80039f4:	50000300 	.word	0x50000300
 80039f8:	50000700 	.word	0x50000700
 80039fc:	50000600 	.word	0x50000600

08003a00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b085      	sub	sp, #20
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	f003 0307 	and.w	r3, r3, #7
 8003a0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a10:	4b0c      	ldr	r3, [pc, #48]	; (8003a44 <__NVIC_SetPriorityGrouping+0x44>)
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a16:	68ba      	ldr	r2, [r7, #8]
 8003a18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003a2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a32:	4a04      	ldr	r2, [pc, #16]	; (8003a44 <__NVIC_SetPriorityGrouping+0x44>)
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	60d3      	str	r3, [r2, #12]
}
 8003a38:	bf00      	nop
 8003a3a:	3714      	adds	r7, #20
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr
 8003a44:	e000ed00 	.word	0xe000ed00

08003a48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a4c:	4b04      	ldr	r3, [pc, #16]	; (8003a60 <__NVIC_GetPriorityGrouping+0x18>)
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	0a1b      	lsrs	r3, r3, #8
 8003a52:	f003 0307 	and.w	r3, r3, #7
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5e:	4770      	bx	lr
 8003a60:	e000ed00 	.word	0xe000ed00

08003a64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b083      	sub	sp, #12
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	db0b      	blt.n	8003a8e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a76:	79fb      	ldrb	r3, [r7, #7]
 8003a78:	f003 021f 	and.w	r2, r3, #31
 8003a7c:	4907      	ldr	r1, [pc, #28]	; (8003a9c <__NVIC_EnableIRQ+0x38>)
 8003a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a82:	095b      	lsrs	r3, r3, #5
 8003a84:	2001      	movs	r0, #1
 8003a86:	fa00 f202 	lsl.w	r2, r0, r2
 8003a8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003a8e:	bf00      	nop
 8003a90:	370c      	adds	r7, #12
 8003a92:	46bd      	mov	sp, r7
 8003a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a98:	4770      	bx	lr
 8003a9a:	bf00      	nop
 8003a9c:	e000e100 	.word	0xe000e100

08003aa0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b083      	sub	sp, #12
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	6039      	str	r1, [r7, #0]
 8003aaa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003aac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	db0a      	blt.n	8003aca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	b2da      	uxtb	r2, r3
 8003ab8:	490c      	ldr	r1, [pc, #48]	; (8003aec <__NVIC_SetPriority+0x4c>)
 8003aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003abe:	0112      	lsls	r2, r2, #4
 8003ac0:	b2d2      	uxtb	r2, r2
 8003ac2:	440b      	add	r3, r1
 8003ac4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ac8:	e00a      	b.n	8003ae0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	b2da      	uxtb	r2, r3
 8003ace:	4908      	ldr	r1, [pc, #32]	; (8003af0 <__NVIC_SetPriority+0x50>)
 8003ad0:	79fb      	ldrb	r3, [r7, #7]
 8003ad2:	f003 030f 	and.w	r3, r3, #15
 8003ad6:	3b04      	subs	r3, #4
 8003ad8:	0112      	lsls	r2, r2, #4
 8003ada:	b2d2      	uxtb	r2, r2
 8003adc:	440b      	add	r3, r1
 8003ade:	761a      	strb	r2, [r3, #24]
}
 8003ae0:	bf00      	nop
 8003ae2:	370c      	adds	r7, #12
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aea:	4770      	bx	lr
 8003aec:	e000e100 	.word	0xe000e100
 8003af0:	e000ed00 	.word	0xe000ed00

08003af4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b089      	sub	sp, #36	; 0x24
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	60f8      	str	r0, [r7, #12]
 8003afc:	60b9      	str	r1, [r7, #8]
 8003afe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	f003 0307 	and.w	r3, r3, #7
 8003b06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b08:	69fb      	ldr	r3, [r7, #28]
 8003b0a:	f1c3 0307 	rsb	r3, r3, #7
 8003b0e:	2b04      	cmp	r3, #4
 8003b10:	bf28      	it	cs
 8003b12:	2304      	movcs	r3, #4
 8003b14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b16:	69fb      	ldr	r3, [r7, #28]
 8003b18:	3304      	adds	r3, #4
 8003b1a:	2b06      	cmp	r3, #6
 8003b1c:	d902      	bls.n	8003b24 <NVIC_EncodePriority+0x30>
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	3b03      	subs	r3, #3
 8003b22:	e000      	b.n	8003b26 <NVIC_EncodePriority+0x32>
 8003b24:	2300      	movs	r3, #0
 8003b26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b28:	f04f 32ff 	mov.w	r2, #4294967295
 8003b2c:	69bb      	ldr	r3, [r7, #24]
 8003b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b32:	43da      	mvns	r2, r3
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	401a      	ands	r2, r3
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b3c:	f04f 31ff 	mov.w	r1, #4294967295
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	fa01 f303 	lsl.w	r3, r1, r3
 8003b46:	43d9      	mvns	r1, r3
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b4c:	4313      	orrs	r3, r2
         );
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3724      	adds	r7, #36	; 0x24
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr
	...

08003b5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b082      	sub	sp, #8
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	3b01      	subs	r3, #1
 8003b68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b6c:	d301      	bcc.n	8003b72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e00f      	b.n	8003b92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b72:	4a0a      	ldr	r2, [pc, #40]	; (8003b9c <SysTick_Config+0x40>)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	3b01      	subs	r3, #1
 8003b78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b7a:	210f      	movs	r1, #15
 8003b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8003b80:	f7ff ff8e 	bl	8003aa0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b84:	4b05      	ldr	r3, [pc, #20]	; (8003b9c <SysTick_Config+0x40>)
 8003b86:	2200      	movs	r2, #0
 8003b88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b8a:	4b04      	ldr	r3, [pc, #16]	; (8003b9c <SysTick_Config+0x40>)
 8003b8c:	2207      	movs	r2, #7
 8003b8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b90:	2300      	movs	r3, #0
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3708      	adds	r7, #8
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}
 8003b9a:	bf00      	nop
 8003b9c:	e000e010 	.word	0xe000e010

08003ba0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b082      	sub	sp, #8
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f7ff ff29 	bl	8003a00 <__NVIC_SetPriorityGrouping>
}
 8003bae:	bf00      	nop
 8003bb0:	3708      	adds	r7, #8
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}

08003bb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003bb6:	b580      	push	{r7, lr}
 8003bb8:	b086      	sub	sp, #24
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	60b9      	str	r1, [r7, #8]
 8003bc0:	607a      	str	r2, [r7, #4]
 8003bc2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003bc4:	f7ff ff40 	bl	8003a48 <__NVIC_GetPriorityGrouping>
 8003bc8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	68b9      	ldr	r1, [r7, #8]
 8003bce:	6978      	ldr	r0, [r7, #20]
 8003bd0:	f7ff ff90 	bl	8003af4 <NVIC_EncodePriority>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bda:	4611      	mov	r1, r2
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f7ff ff5f 	bl	8003aa0 <__NVIC_SetPriority>
}
 8003be2:	bf00      	nop
 8003be4:	3718      	adds	r7, #24
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}

08003bea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bea:	b580      	push	{r7, lr}
 8003bec:	b082      	sub	sp, #8
 8003bee:	af00      	add	r7, sp, #0
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003bf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f7ff ff33 	bl	8003a64 <__NVIC_EnableIRQ>
}
 8003bfe:	bf00      	nop
 8003c00:	3708      	adds	r7, #8
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}

08003c06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003c06:	b580      	push	{r7, lr}
 8003c08:	b082      	sub	sp, #8
 8003c0a:	af00      	add	r7, sp, #0
 8003c0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f7ff ffa4 	bl	8003b5c <SysTick_Config>
 8003c14:	4603      	mov	r3, r0
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3708      	adds	r7, #8
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}
	...

08003c20 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b084      	sub	sp, #16
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d101      	bne.n	8003c32 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e08d      	b.n	8003d4e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	461a      	mov	r2, r3
 8003c38:	4b47      	ldr	r3, [pc, #284]	; (8003d58 <HAL_DMA_Init+0x138>)
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d80f      	bhi.n	8003c5e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	461a      	mov	r2, r3
 8003c44:	4b45      	ldr	r3, [pc, #276]	; (8003d5c <HAL_DMA_Init+0x13c>)
 8003c46:	4413      	add	r3, r2
 8003c48:	4a45      	ldr	r2, [pc, #276]	; (8003d60 <HAL_DMA_Init+0x140>)
 8003c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c4e:	091b      	lsrs	r3, r3, #4
 8003c50:	009a      	lsls	r2, r3, #2
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	4a42      	ldr	r2, [pc, #264]	; (8003d64 <HAL_DMA_Init+0x144>)
 8003c5a:	641a      	str	r2, [r3, #64]	; 0x40
 8003c5c:	e00e      	b.n	8003c7c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	461a      	mov	r2, r3
 8003c64:	4b40      	ldr	r3, [pc, #256]	; (8003d68 <HAL_DMA_Init+0x148>)
 8003c66:	4413      	add	r3, r2
 8003c68:	4a3d      	ldr	r2, [pc, #244]	; (8003d60 <HAL_DMA_Init+0x140>)
 8003c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c6e:	091b      	lsrs	r3, r3, #4
 8003c70:	009a      	lsls	r2, r3, #2
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4a3c      	ldr	r2, [pc, #240]	; (8003d6c <HAL_DMA_Init+0x14c>)
 8003c7a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2202      	movs	r2, #2
 8003c80:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003c92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c96:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003ca0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	691b      	ldr	r3, [r3, #16]
 8003ca6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003cac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	699b      	ldr	r3, [r3, #24]
 8003cb2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cb8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6a1b      	ldr	r3, [r3, #32]
 8003cbe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003cc0:	68fa      	ldr	r2, [r7, #12]
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	68fa      	ldr	r2, [r7, #12]
 8003ccc:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f000 fa76 	bl	80041c0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003cdc:	d102      	bne.n	8003ce4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	685a      	ldr	r2, [r3, #4]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cec:	b2d2      	uxtb	r2, r2
 8003cee:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cf4:	687a      	ldr	r2, [r7, #4]
 8003cf6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003cf8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d010      	beq.n	8003d24 <HAL_DMA_Init+0x104>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	2b04      	cmp	r3, #4
 8003d08:	d80c      	bhi.n	8003d24 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	f000 fa96 	bl	800423c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d14:	2200      	movs	r2, #0
 8003d16:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d1c:	687a      	ldr	r2, [r7, #4]
 8003d1e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003d20:	605a      	str	r2, [r3, #4]
 8003d22:	e008      	b.n	8003d36 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2200      	movs	r2, #0
 8003d28:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2200      	movs	r2, #0
 8003d34:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2200      	movs	r2, #0
 8003d48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003d4c:	2300      	movs	r3, #0
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3710      	adds	r7, #16
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	bf00      	nop
 8003d58:	40020407 	.word	0x40020407
 8003d5c:	bffdfff8 	.word	0xbffdfff8
 8003d60:	cccccccd 	.word	0xcccccccd
 8003d64:	40020000 	.word	0x40020000
 8003d68:	bffdfbf8 	.word	0xbffdfbf8
 8003d6c:	40020400 	.word	0x40020400

08003d70 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b086      	sub	sp, #24
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	60f8      	str	r0, [r7, #12]
 8003d78:	60b9      	str	r1, [r7, #8]
 8003d7a:	607a      	str	r2, [r7, #4]
 8003d7c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d101      	bne.n	8003d90 <HAL_DMA_Start_IT+0x20>
 8003d8c:	2302      	movs	r3, #2
 8003d8e:	e066      	b.n	8003e5e <HAL_DMA_Start_IT+0xee>
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2201      	movs	r2, #1
 8003d94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d155      	bne.n	8003e50 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2202      	movs	r2, #2
 8003da8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2200      	movs	r2, #0
 8003db0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f022 0201 	bic.w	r2, r2, #1
 8003dc0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	687a      	ldr	r2, [r7, #4]
 8003dc6:	68b9      	ldr	r1, [r7, #8]
 8003dc8:	68f8      	ldr	r0, [r7, #12]
 8003dca:	f000 f9bb 	bl	8004144 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d008      	beq.n	8003de8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f042 020e 	orr.w	r2, r2, #14
 8003de4:	601a      	str	r2, [r3, #0]
 8003de6:	e00f      	b.n	8003e08 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f022 0204 	bic.w	r2, r2, #4
 8003df6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f042 020a 	orr.w	r2, r2, #10
 8003e06:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d007      	beq.n	8003e26 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e24:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d007      	beq.n	8003e3e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e3c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f042 0201 	orr.w	r2, r2, #1
 8003e4c:	601a      	str	r2, [r3, #0]
 8003e4e:	e005      	b.n	8003e5c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2200      	movs	r2, #0
 8003e54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003e58:	2302      	movs	r3, #2
 8003e5a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003e5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3718      	adds	r7, #24
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}

08003e66 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003e66:	b480      	push	{r7}
 8003e68:	b085      	sub	sp, #20
 8003e6a:	af00      	add	r7, sp, #0
 8003e6c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	2b02      	cmp	r3, #2
 8003e7c:	d005      	beq.n	8003e8a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2204      	movs	r2, #4
 8003e82:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	73fb      	strb	r3, [r7, #15]
 8003e88:	e037      	b.n	8003efa <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f022 020e 	bic.w	r2, r2, #14
 8003e98:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ea4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ea8:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f022 0201 	bic.w	r2, r2, #1
 8003eb8:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ebe:	f003 021f 	and.w	r2, r3, #31
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec6:	2101      	movs	r1, #1
 8003ec8:	fa01 f202 	lsl.w	r2, r1, r2
 8003ecc:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ed2:	687a      	ldr	r2, [r7, #4]
 8003ed4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003ed6:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d00c      	beq.n	8003efa <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003eee:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ef4:	687a      	ldr	r2, [r7, #4]
 8003ef6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003ef8:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2201      	movs	r2, #1
 8003efe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2200      	movs	r2, #0
 8003f06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8003f0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	3714      	adds	r7, #20
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr

08003f18 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b084      	sub	sp, #16
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f20:	2300      	movs	r3, #0
 8003f22:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003f2a:	b2db      	uxtb	r3, r3
 8003f2c:	2b02      	cmp	r3, #2
 8003f2e:	d00d      	beq.n	8003f4c <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2204      	movs	r2, #4
 8003f34:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2201      	movs	r2, #1
 8003f3a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2200      	movs	r2, #0
 8003f42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	73fb      	strb	r3, [r7, #15]
 8003f4a:	e047      	b.n	8003fdc <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f022 020e 	bic.w	r2, r2, #14
 8003f5a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f022 0201 	bic.w	r2, r2, #1
 8003f6a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f76:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f7a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f80:	f003 021f 	and.w	r2, r3, #31
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f88:	2101      	movs	r1, #1
 8003f8a:	fa01 f202 	lsl.w	r2, r1, r2
 8003f8e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f94:	687a      	ldr	r2, [r7, #4]
 8003f96:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003f98:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d00c      	beq.n	8003fbc <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003fb0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fb6:	687a      	ldr	r2, [r7, #4]
 8003fb8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003fba:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d003      	beq.n	8003fdc <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	4798      	blx	r3
    }
  }
  return status;
 8003fdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3710      	adds	r7, #16
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}

08003fe6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003fe6:	b580      	push	{r7, lr}
 8003fe8:	b084      	sub	sp, #16
 8003fea:	af00      	add	r7, sp, #0
 8003fec:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004002:	f003 031f 	and.w	r3, r3, #31
 8004006:	2204      	movs	r2, #4
 8004008:	409a      	lsls	r2, r3
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	4013      	ands	r3, r2
 800400e:	2b00      	cmp	r3, #0
 8004010:	d026      	beq.n	8004060 <HAL_DMA_IRQHandler+0x7a>
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	f003 0304 	and.w	r3, r3, #4
 8004018:	2b00      	cmp	r3, #0
 800401a:	d021      	beq.n	8004060 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 0320 	and.w	r3, r3, #32
 8004026:	2b00      	cmp	r3, #0
 8004028:	d107      	bne.n	800403a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f022 0204 	bic.w	r2, r2, #4
 8004038:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800403e:	f003 021f 	and.w	r2, r3, #31
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004046:	2104      	movs	r1, #4
 8004048:	fa01 f202 	lsl.w	r2, r1, r2
 800404c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004052:	2b00      	cmp	r3, #0
 8004054:	d071      	beq.n	800413a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800405e:	e06c      	b.n	800413a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004064:	f003 031f 	and.w	r3, r3, #31
 8004068:	2202      	movs	r2, #2
 800406a:	409a      	lsls	r2, r3
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	4013      	ands	r3, r2
 8004070:	2b00      	cmp	r3, #0
 8004072:	d02e      	beq.n	80040d2 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	f003 0302 	and.w	r3, r3, #2
 800407a:	2b00      	cmp	r3, #0
 800407c:	d029      	beq.n	80040d2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f003 0320 	and.w	r3, r3, #32
 8004088:	2b00      	cmp	r3, #0
 800408a:	d10b      	bne.n	80040a4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f022 020a 	bic.w	r2, r2, #10
 800409a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2201      	movs	r2, #1
 80040a0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040a8:	f003 021f 	and.w	r2, r3, #31
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b0:	2102      	movs	r1, #2
 80040b2:	fa01 f202 	lsl.w	r2, r1, r2
 80040b6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2200      	movs	r2, #0
 80040bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d038      	beq.n	800413a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80040d0:	e033      	b.n	800413a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040d6:	f003 031f 	and.w	r3, r3, #31
 80040da:	2208      	movs	r2, #8
 80040dc:	409a      	lsls	r2, r3
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	4013      	ands	r3, r2
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d02a      	beq.n	800413c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	f003 0308 	and.w	r3, r3, #8
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d025      	beq.n	800413c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f022 020e 	bic.w	r2, r2, #14
 80040fe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004104:	f003 021f 	and.w	r2, r3, #31
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800410c:	2101      	movs	r1, #1
 800410e:	fa01 f202 	lsl.w	r2, r1, r2
 8004112:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2201      	movs	r2, #1
 8004118:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2201      	movs	r2, #1
 800411e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2200      	movs	r2, #0
 8004126:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800412e:	2b00      	cmp	r3, #0
 8004130:	d004      	beq.n	800413c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800413a:	bf00      	nop
 800413c:	bf00      	nop
}
 800413e:	3710      	adds	r7, #16
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}

08004144 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004144:	b480      	push	{r7}
 8004146:	b085      	sub	sp, #20
 8004148:	af00      	add	r7, sp, #0
 800414a:	60f8      	str	r0, [r7, #12]
 800414c:	60b9      	str	r1, [r7, #8]
 800414e:	607a      	str	r2, [r7, #4]
 8004150:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004156:	68fa      	ldr	r2, [r7, #12]
 8004158:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800415a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004160:	2b00      	cmp	r3, #0
 8004162:	d004      	beq.n	800416e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004168:	68fa      	ldr	r2, [r7, #12]
 800416a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800416c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004172:	f003 021f 	and.w	r2, r3, #31
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417a:	2101      	movs	r1, #1
 800417c:	fa01 f202 	lsl.w	r2, r1, r2
 8004180:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	683a      	ldr	r2, [r7, #0]
 8004188:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	2b10      	cmp	r3, #16
 8004190:	d108      	bne.n	80041a4 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	687a      	ldr	r2, [r7, #4]
 8004198:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	68ba      	ldr	r2, [r7, #8]
 80041a0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80041a2:	e007      	b.n	80041b4 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	68ba      	ldr	r2, [r7, #8]
 80041aa:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	687a      	ldr	r2, [r7, #4]
 80041b2:	60da      	str	r2, [r3, #12]
}
 80041b4:	bf00      	nop
 80041b6:	3714      	adds	r7, #20
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr

080041c0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b087      	sub	sp, #28
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	461a      	mov	r2, r3
 80041ce:	4b16      	ldr	r3, [pc, #88]	; (8004228 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d802      	bhi.n	80041da <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80041d4:	4b15      	ldr	r3, [pc, #84]	; (800422c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80041d6:	617b      	str	r3, [r7, #20]
 80041d8:	e001      	b.n	80041de <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80041da:	4b15      	ldr	r3, [pc, #84]	; (8004230 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80041dc:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	b2db      	uxtb	r3, r3
 80041e8:	3b08      	subs	r3, #8
 80041ea:	4a12      	ldr	r2, [pc, #72]	; (8004234 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80041ec:	fba2 2303 	umull	r2, r3, r2, r3
 80041f0:	091b      	lsrs	r3, r3, #4
 80041f2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041f8:	089b      	lsrs	r3, r3, #2
 80041fa:	009a      	lsls	r2, r3, #2
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	4413      	add	r3, r2
 8004200:	461a      	mov	r2, r3
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	4a0b      	ldr	r2, [pc, #44]	; (8004238 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800420a:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	f003 031f 	and.w	r3, r3, #31
 8004212:	2201      	movs	r2, #1
 8004214:	409a      	lsls	r2, r3
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	651a      	str	r2, [r3, #80]	; 0x50
}
 800421a:	bf00      	nop
 800421c:	371c      	adds	r7, #28
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr
 8004226:	bf00      	nop
 8004228:	40020407 	.word	0x40020407
 800422c:	40020800 	.word	0x40020800
 8004230:	40020820 	.word	0x40020820
 8004234:	cccccccd 	.word	0xcccccccd
 8004238:	40020880 	.word	0x40020880

0800423c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800423c:	b480      	push	{r7}
 800423e:	b085      	sub	sp, #20
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	b2db      	uxtb	r3, r3
 800424a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800424c:	68fa      	ldr	r2, [r7, #12]
 800424e:	4b0b      	ldr	r3, [pc, #44]	; (800427c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004250:	4413      	add	r3, r2
 8004252:	009b      	lsls	r3, r3, #2
 8004254:	461a      	mov	r2, r3
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	4a08      	ldr	r2, [pc, #32]	; (8004280 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800425e:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	3b01      	subs	r3, #1
 8004264:	f003 031f 	and.w	r3, r3, #31
 8004268:	2201      	movs	r2, #1
 800426a:	409a      	lsls	r2, r3
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004270:	bf00      	nop
 8004272:	3714      	adds	r7, #20
 8004274:	46bd      	mov	sp, r7
 8004276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427a:	4770      	bx	lr
 800427c:	1000823f 	.word	0x1000823f
 8004280:	40020940 	.word	0x40020940

08004284 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004284:	b480      	push	{r7}
 8004286:	b087      	sub	sp, #28
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
 800428c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800428e:	2300      	movs	r3, #0
 8004290:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004292:	e15a      	b.n	800454a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	2101      	movs	r1, #1
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	fa01 f303 	lsl.w	r3, r1, r3
 80042a0:	4013      	ands	r3, r2
 80042a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	f000 814c 	beq.w	8004544 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	f003 0303 	and.w	r3, r3, #3
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d005      	beq.n	80042c4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80042c0:	2b02      	cmp	r3, #2
 80042c2:	d130      	bne.n	8004326 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	005b      	lsls	r3, r3, #1
 80042ce:	2203      	movs	r2, #3
 80042d0:	fa02 f303 	lsl.w	r3, r2, r3
 80042d4:	43db      	mvns	r3, r3
 80042d6:	693a      	ldr	r2, [r7, #16]
 80042d8:	4013      	ands	r3, r2
 80042da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	68da      	ldr	r2, [r3, #12]
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	005b      	lsls	r3, r3, #1
 80042e4:	fa02 f303 	lsl.w	r3, r2, r3
 80042e8:	693a      	ldr	r2, [r7, #16]
 80042ea:	4313      	orrs	r3, r2
 80042ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	693a      	ldr	r2, [r7, #16]
 80042f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80042fa:	2201      	movs	r2, #1
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004302:	43db      	mvns	r3, r3
 8004304:	693a      	ldr	r2, [r7, #16]
 8004306:	4013      	ands	r3, r2
 8004308:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	091b      	lsrs	r3, r3, #4
 8004310:	f003 0201 	and.w	r2, r3, #1
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	fa02 f303 	lsl.w	r3, r2, r3
 800431a:	693a      	ldr	r2, [r7, #16]
 800431c:	4313      	orrs	r3, r2
 800431e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	693a      	ldr	r2, [r7, #16]
 8004324:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	f003 0303 	and.w	r3, r3, #3
 800432e:	2b03      	cmp	r3, #3
 8004330:	d017      	beq.n	8004362 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	68db      	ldr	r3, [r3, #12]
 8004336:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	005b      	lsls	r3, r3, #1
 800433c:	2203      	movs	r2, #3
 800433e:	fa02 f303 	lsl.w	r3, r2, r3
 8004342:	43db      	mvns	r3, r3
 8004344:	693a      	ldr	r2, [r7, #16]
 8004346:	4013      	ands	r3, r2
 8004348:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	689a      	ldr	r2, [r3, #8]
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	005b      	lsls	r3, r3, #1
 8004352:	fa02 f303 	lsl.w	r3, r2, r3
 8004356:	693a      	ldr	r2, [r7, #16]
 8004358:	4313      	orrs	r3, r2
 800435a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	693a      	ldr	r2, [r7, #16]
 8004360:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	f003 0303 	and.w	r3, r3, #3
 800436a:	2b02      	cmp	r3, #2
 800436c:	d123      	bne.n	80043b6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	08da      	lsrs	r2, r3, #3
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	3208      	adds	r2, #8
 8004376:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800437a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	f003 0307 	and.w	r3, r3, #7
 8004382:	009b      	lsls	r3, r3, #2
 8004384:	220f      	movs	r2, #15
 8004386:	fa02 f303 	lsl.w	r3, r2, r3
 800438a:	43db      	mvns	r3, r3
 800438c:	693a      	ldr	r2, [r7, #16]
 800438e:	4013      	ands	r3, r2
 8004390:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	691a      	ldr	r2, [r3, #16]
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	f003 0307 	and.w	r3, r3, #7
 800439c:	009b      	lsls	r3, r3, #2
 800439e:	fa02 f303 	lsl.w	r3, r2, r3
 80043a2:	693a      	ldr	r2, [r7, #16]
 80043a4:	4313      	orrs	r3, r2
 80043a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	08da      	lsrs	r2, r3, #3
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	3208      	adds	r2, #8
 80043b0:	6939      	ldr	r1, [r7, #16]
 80043b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	005b      	lsls	r3, r3, #1
 80043c0:	2203      	movs	r2, #3
 80043c2:	fa02 f303 	lsl.w	r3, r2, r3
 80043c6:	43db      	mvns	r3, r3
 80043c8:	693a      	ldr	r2, [r7, #16]
 80043ca:	4013      	ands	r3, r2
 80043cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	f003 0203 	and.w	r2, r3, #3
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	005b      	lsls	r3, r3, #1
 80043da:	fa02 f303 	lsl.w	r3, r2, r3
 80043de:	693a      	ldr	r2, [r7, #16]
 80043e0:	4313      	orrs	r3, r2
 80043e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	693a      	ldr	r2, [r7, #16]
 80043e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	f000 80a6 	beq.w	8004544 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043f8:	4b5b      	ldr	r3, [pc, #364]	; (8004568 <HAL_GPIO_Init+0x2e4>)
 80043fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043fc:	4a5a      	ldr	r2, [pc, #360]	; (8004568 <HAL_GPIO_Init+0x2e4>)
 80043fe:	f043 0301 	orr.w	r3, r3, #1
 8004402:	6613      	str	r3, [r2, #96]	; 0x60
 8004404:	4b58      	ldr	r3, [pc, #352]	; (8004568 <HAL_GPIO_Init+0x2e4>)
 8004406:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004408:	f003 0301 	and.w	r3, r3, #1
 800440c:	60bb      	str	r3, [r7, #8]
 800440e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004410:	4a56      	ldr	r2, [pc, #344]	; (800456c <HAL_GPIO_Init+0x2e8>)
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	089b      	lsrs	r3, r3, #2
 8004416:	3302      	adds	r3, #2
 8004418:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800441c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	f003 0303 	and.w	r3, r3, #3
 8004424:	009b      	lsls	r3, r3, #2
 8004426:	220f      	movs	r2, #15
 8004428:	fa02 f303 	lsl.w	r3, r2, r3
 800442c:	43db      	mvns	r3, r3
 800442e:	693a      	ldr	r2, [r7, #16]
 8004430:	4013      	ands	r3, r2
 8004432:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800443a:	d01f      	beq.n	800447c <HAL_GPIO_Init+0x1f8>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	4a4c      	ldr	r2, [pc, #304]	; (8004570 <HAL_GPIO_Init+0x2ec>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d019      	beq.n	8004478 <HAL_GPIO_Init+0x1f4>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	4a4b      	ldr	r2, [pc, #300]	; (8004574 <HAL_GPIO_Init+0x2f0>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d013      	beq.n	8004474 <HAL_GPIO_Init+0x1f0>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	4a4a      	ldr	r2, [pc, #296]	; (8004578 <HAL_GPIO_Init+0x2f4>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d00d      	beq.n	8004470 <HAL_GPIO_Init+0x1ec>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	4a49      	ldr	r2, [pc, #292]	; (800457c <HAL_GPIO_Init+0x2f8>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d007      	beq.n	800446c <HAL_GPIO_Init+0x1e8>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	4a48      	ldr	r2, [pc, #288]	; (8004580 <HAL_GPIO_Init+0x2fc>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d101      	bne.n	8004468 <HAL_GPIO_Init+0x1e4>
 8004464:	2305      	movs	r3, #5
 8004466:	e00a      	b.n	800447e <HAL_GPIO_Init+0x1fa>
 8004468:	2306      	movs	r3, #6
 800446a:	e008      	b.n	800447e <HAL_GPIO_Init+0x1fa>
 800446c:	2304      	movs	r3, #4
 800446e:	e006      	b.n	800447e <HAL_GPIO_Init+0x1fa>
 8004470:	2303      	movs	r3, #3
 8004472:	e004      	b.n	800447e <HAL_GPIO_Init+0x1fa>
 8004474:	2302      	movs	r3, #2
 8004476:	e002      	b.n	800447e <HAL_GPIO_Init+0x1fa>
 8004478:	2301      	movs	r3, #1
 800447a:	e000      	b.n	800447e <HAL_GPIO_Init+0x1fa>
 800447c:	2300      	movs	r3, #0
 800447e:	697a      	ldr	r2, [r7, #20]
 8004480:	f002 0203 	and.w	r2, r2, #3
 8004484:	0092      	lsls	r2, r2, #2
 8004486:	4093      	lsls	r3, r2
 8004488:	693a      	ldr	r2, [r7, #16]
 800448a:	4313      	orrs	r3, r2
 800448c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800448e:	4937      	ldr	r1, [pc, #220]	; (800456c <HAL_GPIO_Init+0x2e8>)
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	089b      	lsrs	r3, r3, #2
 8004494:	3302      	adds	r3, #2
 8004496:	693a      	ldr	r2, [r7, #16]
 8004498:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800449c:	4b39      	ldr	r3, [pc, #228]	; (8004584 <HAL_GPIO_Init+0x300>)
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	43db      	mvns	r3, r3
 80044a6:	693a      	ldr	r2, [r7, #16]
 80044a8:	4013      	ands	r3, r2
 80044aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d003      	beq.n	80044c0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80044b8:	693a      	ldr	r2, [r7, #16]
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	4313      	orrs	r3, r2
 80044be:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80044c0:	4a30      	ldr	r2, [pc, #192]	; (8004584 <HAL_GPIO_Init+0x300>)
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80044c6:	4b2f      	ldr	r3, [pc, #188]	; (8004584 <HAL_GPIO_Init+0x300>)
 80044c8:	68db      	ldr	r3, [r3, #12]
 80044ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	43db      	mvns	r3, r3
 80044d0:	693a      	ldr	r2, [r7, #16]
 80044d2:	4013      	ands	r3, r2
 80044d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d003      	beq.n	80044ea <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80044e2:	693a      	ldr	r2, [r7, #16]
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80044ea:	4a26      	ldr	r2, [pc, #152]	; (8004584 <HAL_GPIO_Init+0x300>)
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80044f0:	4b24      	ldr	r3, [pc, #144]	; (8004584 <HAL_GPIO_Init+0x300>)
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	43db      	mvns	r3, r3
 80044fa:	693a      	ldr	r2, [r7, #16]
 80044fc:	4013      	ands	r3, r2
 80044fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004508:	2b00      	cmp	r3, #0
 800450a:	d003      	beq.n	8004514 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800450c:	693a      	ldr	r2, [r7, #16]
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	4313      	orrs	r3, r2
 8004512:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004514:	4a1b      	ldr	r2, [pc, #108]	; (8004584 <HAL_GPIO_Init+0x300>)
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800451a:	4b1a      	ldr	r3, [pc, #104]	; (8004584 <HAL_GPIO_Init+0x300>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	43db      	mvns	r3, r3
 8004524:	693a      	ldr	r2, [r7, #16]
 8004526:	4013      	ands	r3, r2
 8004528:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004532:	2b00      	cmp	r3, #0
 8004534:	d003      	beq.n	800453e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004536:	693a      	ldr	r2, [r7, #16]
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	4313      	orrs	r3, r2
 800453c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800453e:	4a11      	ldr	r2, [pc, #68]	; (8004584 <HAL_GPIO_Init+0x300>)
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	3301      	adds	r3, #1
 8004548:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	fa22 f303 	lsr.w	r3, r2, r3
 8004554:	2b00      	cmp	r3, #0
 8004556:	f47f ae9d 	bne.w	8004294 <HAL_GPIO_Init+0x10>
  }
}
 800455a:	bf00      	nop
 800455c:	bf00      	nop
 800455e:	371c      	adds	r7, #28
 8004560:	46bd      	mov	sp, r7
 8004562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004566:	4770      	bx	lr
 8004568:	40021000 	.word	0x40021000
 800456c:	40010000 	.word	0x40010000
 8004570:	48000400 	.word	0x48000400
 8004574:	48000800 	.word	0x48000800
 8004578:	48000c00 	.word	0x48000c00
 800457c:	48001000 	.word	0x48001000
 8004580:	48001400 	.word	0x48001400
 8004584:	40010400 	.word	0x40010400

08004588 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004588:	b480      	push	{r7}
 800458a:	b083      	sub	sp, #12
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
 8004590:	460b      	mov	r3, r1
 8004592:	807b      	strh	r3, [r7, #2]
 8004594:	4613      	mov	r3, r2
 8004596:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004598:	787b      	ldrb	r3, [r7, #1]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d003      	beq.n	80045a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800459e:	887a      	ldrh	r2, [r7, #2]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80045a4:	e002      	b.n	80045ac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80045a6:	887a      	ldrh	r2, [r7, #2]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80045ac:	bf00      	nop
 80045ae:	370c      	adds	r7, #12
 80045b0:	46bd      	mov	sp, r7
 80045b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b6:	4770      	bx	lr

080045b8 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b085      	sub	sp, #20
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
 80045c0:	460b      	mov	r3, r1
 80045c2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	695b      	ldr	r3, [r3, #20]
 80045c8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80045ca:	887a      	ldrh	r2, [r7, #2]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	4013      	ands	r3, r2
 80045d0:	041a      	lsls	r2, r3, #16
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	43d9      	mvns	r1, r3
 80045d6:	887b      	ldrh	r3, [r7, #2]
 80045d8:	400b      	ands	r3, r1
 80045da:	431a      	orrs	r2, r3
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	619a      	str	r2, [r3, #24]
}
 80045e0:	bf00      	nop
 80045e2:	3714      	adds	r7, #20
 80045e4:	46bd      	mov	sp, r7
 80045e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ea:	4770      	bx	lr

080045ec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b082      	sub	sp, #8
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	4603      	mov	r3, r0
 80045f4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80045f6:	4b08      	ldr	r3, [pc, #32]	; (8004618 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80045f8:	695a      	ldr	r2, [r3, #20]
 80045fa:	88fb      	ldrh	r3, [r7, #6]
 80045fc:	4013      	ands	r3, r2
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d006      	beq.n	8004610 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004602:	4a05      	ldr	r2, [pc, #20]	; (8004618 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004604:	88fb      	ldrh	r3, [r7, #6]
 8004606:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004608:	88fb      	ldrh	r3, [r7, #6]
 800460a:	4618      	mov	r0, r3
 800460c:	f7fc ff98 	bl	8001540 <HAL_GPIO_EXTI_Callback>
  }
}
 8004610:	bf00      	nop
 8004612:	3708      	adds	r7, #8
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}
 8004618:	40010400 	.word	0x40010400

0800461c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800461c:	b480      	push	{r7}
 800461e:	b085      	sub	sp, #20
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d141      	bne.n	80046ae <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800462a:	4b4b      	ldr	r3, [pc, #300]	; (8004758 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004632:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004636:	d131      	bne.n	800469c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004638:	4b47      	ldr	r3, [pc, #284]	; (8004758 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800463a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800463e:	4a46      	ldr	r2, [pc, #280]	; (8004758 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004640:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004644:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004648:	4b43      	ldr	r3, [pc, #268]	; (8004758 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004650:	4a41      	ldr	r2, [pc, #260]	; (8004758 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004652:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004656:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004658:	4b40      	ldr	r3, [pc, #256]	; (800475c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	2232      	movs	r2, #50	; 0x32
 800465e:	fb02 f303 	mul.w	r3, r2, r3
 8004662:	4a3f      	ldr	r2, [pc, #252]	; (8004760 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004664:	fba2 2303 	umull	r2, r3, r2, r3
 8004668:	0c9b      	lsrs	r3, r3, #18
 800466a:	3301      	adds	r3, #1
 800466c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800466e:	e002      	b.n	8004676 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	3b01      	subs	r3, #1
 8004674:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004676:	4b38      	ldr	r3, [pc, #224]	; (8004758 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004678:	695b      	ldr	r3, [r3, #20]
 800467a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800467e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004682:	d102      	bne.n	800468a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d1f2      	bne.n	8004670 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800468a:	4b33      	ldr	r3, [pc, #204]	; (8004758 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800468c:	695b      	ldr	r3, [r3, #20]
 800468e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004692:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004696:	d158      	bne.n	800474a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004698:	2303      	movs	r3, #3
 800469a:	e057      	b.n	800474c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800469c:	4b2e      	ldr	r3, [pc, #184]	; (8004758 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800469e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046a2:	4a2d      	ldr	r2, [pc, #180]	; (8004758 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046a8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80046ac:	e04d      	b.n	800474a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046b4:	d141      	bne.n	800473a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80046b6:	4b28      	ldr	r3, [pc, #160]	; (8004758 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80046be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046c2:	d131      	bne.n	8004728 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80046c4:	4b24      	ldr	r3, [pc, #144]	; (8004758 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046ca:	4a23      	ldr	r2, [pc, #140]	; (8004758 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046d0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80046d4:	4b20      	ldr	r3, [pc, #128]	; (8004758 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80046dc:	4a1e      	ldr	r2, [pc, #120]	; (8004758 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80046e2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80046e4:	4b1d      	ldr	r3, [pc, #116]	; (800475c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	2232      	movs	r2, #50	; 0x32
 80046ea:	fb02 f303 	mul.w	r3, r2, r3
 80046ee:	4a1c      	ldr	r2, [pc, #112]	; (8004760 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80046f0:	fba2 2303 	umull	r2, r3, r2, r3
 80046f4:	0c9b      	lsrs	r3, r3, #18
 80046f6:	3301      	adds	r3, #1
 80046f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80046fa:	e002      	b.n	8004702 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	3b01      	subs	r3, #1
 8004700:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004702:	4b15      	ldr	r3, [pc, #84]	; (8004758 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004704:	695b      	ldr	r3, [r3, #20]
 8004706:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800470a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800470e:	d102      	bne.n	8004716 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d1f2      	bne.n	80046fc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004716:	4b10      	ldr	r3, [pc, #64]	; (8004758 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004718:	695b      	ldr	r3, [r3, #20]
 800471a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800471e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004722:	d112      	bne.n	800474a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004724:	2303      	movs	r3, #3
 8004726:	e011      	b.n	800474c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004728:	4b0b      	ldr	r3, [pc, #44]	; (8004758 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800472a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800472e:	4a0a      	ldr	r2, [pc, #40]	; (8004758 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004730:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004734:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004738:	e007      	b.n	800474a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800473a:	4b07      	ldr	r3, [pc, #28]	; (8004758 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004742:	4a05      	ldr	r2, [pc, #20]	; (8004758 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004744:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004748:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800474a:	2300      	movs	r3, #0
}
 800474c:	4618      	mov	r0, r3
 800474e:	3714      	adds	r7, #20
 8004750:	46bd      	mov	sp, r7
 8004752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004756:	4770      	bx	lr
 8004758:	40007000 	.word	0x40007000
 800475c:	20000018 	.word	0x20000018
 8004760:	431bde83 	.word	0x431bde83

08004764 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004764:	b480      	push	{r7}
 8004766:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004768:	4b05      	ldr	r3, [pc, #20]	; (8004780 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	4a04      	ldr	r2, [pc, #16]	; (8004780 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800476e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004772:	6093      	str	r3, [r2, #8]
}
 8004774:	bf00      	nop
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr
 800477e:	bf00      	nop
 8004780:	40007000 	.word	0x40007000

08004784 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b088      	sub	sp, #32
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d101      	bne.n	8004796 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	e2fe      	b.n	8004d94 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f003 0301 	and.w	r3, r3, #1
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d075      	beq.n	800488e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047a2:	4b97      	ldr	r3, [pc, #604]	; (8004a00 <HAL_RCC_OscConfig+0x27c>)
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	f003 030c 	and.w	r3, r3, #12
 80047aa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80047ac:	4b94      	ldr	r3, [pc, #592]	; (8004a00 <HAL_RCC_OscConfig+0x27c>)
 80047ae:	68db      	ldr	r3, [r3, #12]
 80047b0:	f003 0303 	and.w	r3, r3, #3
 80047b4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80047b6:	69bb      	ldr	r3, [r7, #24]
 80047b8:	2b0c      	cmp	r3, #12
 80047ba:	d102      	bne.n	80047c2 <HAL_RCC_OscConfig+0x3e>
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	2b03      	cmp	r3, #3
 80047c0:	d002      	beq.n	80047c8 <HAL_RCC_OscConfig+0x44>
 80047c2:	69bb      	ldr	r3, [r7, #24]
 80047c4:	2b08      	cmp	r3, #8
 80047c6:	d10b      	bne.n	80047e0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047c8:	4b8d      	ldr	r3, [pc, #564]	; (8004a00 <HAL_RCC_OscConfig+0x27c>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d05b      	beq.n	800488c <HAL_RCC_OscConfig+0x108>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d157      	bne.n	800488c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	e2d9      	b.n	8004d94 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047e8:	d106      	bne.n	80047f8 <HAL_RCC_OscConfig+0x74>
 80047ea:	4b85      	ldr	r3, [pc, #532]	; (8004a00 <HAL_RCC_OscConfig+0x27c>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a84      	ldr	r2, [pc, #528]	; (8004a00 <HAL_RCC_OscConfig+0x27c>)
 80047f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047f4:	6013      	str	r3, [r2, #0]
 80047f6:	e01d      	b.n	8004834 <HAL_RCC_OscConfig+0xb0>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004800:	d10c      	bne.n	800481c <HAL_RCC_OscConfig+0x98>
 8004802:	4b7f      	ldr	r3, [pc, #508]	; (8004a00 <HAL_RCC_OscConfig+0x27c>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a7e      	ldr	r2, [pc, #504]	; (8004a00 <HAL_RCC_OscConfig+0x27c>)
 8004808:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800480c:	6013      	str	r3, [r2, #0]
 800480e:	4b7c      	ldr	r3, [pc, #496]	; (8004a00 <HAL_RCC_OscConfig+0x27c>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a7b      	ldr	r2, [pc, #492]	; (8004a00 <HAL_RCC_OscConfig+0x27c>)
 8004814:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004818:	6013      	str	r3, [r2, #0]
 800481a:	e00b      	b.n	8004834 <HAL_RCC_OscConfig+0xb0>
 800481c:	4b78      	ldr	r3, [pc, #480]	; (8004a00 <HAL_RCC_OscConfig+0x27c>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a77      	ldr	r2, [pc, #476]	; (8004a00 <HAL_RCC_OscConfig+0x27c>)
 8004822:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004826:	6013      	str	r3, [r2, #0]
 8004828:	4b75      	ldr	r3, [pc, #468]	; (8004a00 <HAL_RCC_OscConfig+0x27c>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a74      	ldr	r2, [pc, #464]	; (8004a00 <HAL_RCC_OscConfig+0x27c>)
 800482e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004832:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d013      	beq.n	8004864 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800483c:	f7fd fab2 	bl	8001da4 <HAL_GetTick>
 8004840:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004842:	e008      	b.n	8004856 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004844:	f7fd faae 	bl	8001da4 <HAL_GetTick>
 8004848:	4602      	mov	r2, r0
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	1ad3      	subs	r3, r2, r3
 800484e:	2b64      	cmp	r3, #100	; 0x64
 8004850:	d901      	bls.n	8004856 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004852:	2303      	movs	r3, #3
 8004854:	e29e      	b.n	8004d94 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004856:	4b6a      	ldr	r3, [pc, #424]	; (8004a00 <HAL_RCC_OscConfig+0x27c>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800485e:	2b00      	cmp	r3, #0
 8004860:	d0f0      	beq.n	8004844 <HAL_RCC_OscConfig+0xc0>
 8004862:	e014      	b.n	800488e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004864:	f7fd fa9e 	bl	8001da4 <HAL_GetTick>
 8004868:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800486a:	e008      	b.n	800487e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800486c:	f7fd fa9a 	bl	8001da4 <HAL_GetTick>
 8004870:	4602      	mov	r2, r0
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	1ad3      	subs	r3, r2, r3
 8004876:	2b64      	cmp	r3, #100	; 0x64
 8004878:	d901      	bls.n	800487e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800487a:	2303      	movs	r3, #3
 800487c:	e28a      	b.n	8004d94 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800487e:	4b60      	ldr	r3, [pc, #384]	; (8004a00 <HAL_RCC_OscConfig+0x27c>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004886:	2b00      	cmp	r3, #0
 8004888:	d1f0      	bne.n	800486c <HAL_RCC_OscConfig+0xe8>
 800488a:	e000      	b.n	800488e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800488c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f003 0302 	and.w	r3, r3, #2
 8004896:	2b00      	cmp	r3, #0
 8004898:	d075      	beq.n	8004986 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800489a:	4b59      	ldr	r3, [pc, #356]	; (8004a00 <HAL_RCC_OscConfig+0x27c>)
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	f003 030c 	and.w	r3, r3, #12
 80048a2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80048a4:	4b56      	ldr	r3, [pc, #344]	; (8004a00 <HAL_RCC_OscConfig+0x27c>)
 80048a6:	68db      	ldr	r3, [r3, #12]
 80048a8:	f003 0303 	and.w	r3, r3, #3
 80048ac:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80048ae:	69bb      	ldr	r3, [r7, #24]
 80048b0:	2b0c      	cmp	r3, #12
 80048b2:	d102      	bne.n	80048ba <HAL_RCC_OscConfig+0x136>
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	2b02      	cmp	r3, #2
 80048b8:	d002      	beq.n	80048c0 <HAL_RCC_OscConfig+0x13c>
 80048ba:	69bb      	ldr	r3, [r7, #24]
 80048bc:	2b04      	cmp	r3, #4
 80048be:	d11f      	bne.n	8004900 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80048c0:	4b4f      	ldr	r3, [pc, #316]	; (8004a00 <HAL_RCC_OscConfig+0x27c>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d005      	beq.n	80048d8 <HAL_RCC_OscConfig+0x154>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	68db      	ldr	r3, [r3, #12]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d101      	bne.n	80048d8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	e25d      	b.n	8004d94 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048d8:	4b49      	ldr	r3, [pc, #292]	; (8004a00 <HAL_RCC_OscConfig+0x27c>)
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	691b      	ldr	r3, [r3, #16]
 80048e4:	061b      	lsls	r3, r3, #24
 80048e6:	4946      	ldr	r1, [pc, #280]	; (8004a00 <HAL_RCC_OscConfig+0x27c>)
 80048e8:	4313      	orrs	r3, r2
 80048ea:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80048ec:	4b45      	ldr	r3, [pc, #276]	; (8004a04 <HAL_RCC_OscConfig+0x280>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4618      	mov	r0, r3
 80048f2:	f7fd fa0b 	bl	8001d0c <HAL_InitTick>
 80048f6:	4603      	mov	r3, r0
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d043      	beq.n	8004984 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80048fc:	2301      	movs	r3, #1
 80048fe:	e249      	b.n	8004d94 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	68db      	ldr	r3, [r3, #12]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d023      	beq.n	8004950 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004908:	4b3d      	ldr	r3, [pc, #244]	; (8004a00 <HAL_RCC_OscConfig+0x27c>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a3c      	ldr	r2, [pc, #240]	; (8004a00 <HAL_RCC_OscConfig+0x27c>)
 800490e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004912:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004914:	f7fd fa46 	bl	8001da4 <HAL_GetTick>
 8004918:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800491a:	e008      	b.n	800492e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800491c:	f7fd fa42 	bl	8001da4 <HAL_GetTick>
 8004920:	4602      	mov	r2, r0
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	1ad3      	subs	r3, r2, r3
 8004926:	2b02      	cmp	r3, #2
 8004928:	d901      	bls.n	800492e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800492a:	2303      	movs	r3, #3
 800492c:	e232      	b.n	8004d94 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800492e:	4b34      	ldr	r3, [pc, #208]	; (8004a00 <HAL_RCC_OscConfig+0x27c>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004936:	2b00      	cmp	r3, #0
 8004938:	d0f0      	beq.n	800491c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800493a:	4b31      	ldr	r3, [pc, #196]	; (8004a00 <HAL_RCC_OscConfig+0x27c>)
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	691b      	ldr	r3, [r3, #16]
 8004946:	061b      	lsls	r3, r3, #24
 8004948:	492d      	ldr	r1, [pc, #180]	; (8004a00 <HAL_RCC_OscConfig+0x27c>)
 800494a:	4313      	orrs	r3, r2
 800494c:	604b      	str	r3, [r1, #4]
 800494e:	e01a      	b.n	8004986 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004950:	4b2b      	ldr	r3, [pc, #172]	; (8004a00 <HAL_RCC_OscConfig+0x27c>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a2a      	ldr	r2, [pc, #168]	; (8004a00 <HAL_RCC_OscConfig+0x27c>)
 8004956:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800495a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800495c:	f7fd fa22 	bl	8001da4 <HAL_GetTick>
 8004960:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004962:	e008      	b.n	8004976 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004964:	f7fd fa1e 	bl	8001da4 <HAL_GetTick>
 8004968:	4602      	mov	r2, r0
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	1ad3      	subs	r3, r2, r3
 800496e:	2b02      	cmp	r3, #2
 8004970:	d901      	bls.n	8004976 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004972:	2303      	movs	r3, #3
 8004974:	e20e      	b.n	8004d94 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004976:	4b22      	ldr	r3, [pc, #136]	; (8004a00 <HAL_RCC_OscConfig+0x27c>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800497e:	2b00      	cmp	r3, #0
 8004980:	d1f0      	bne.n	8004964 <HAL_RCC_OscConfig+0x1e0>
 8004982:	e000      	b.n	8004986 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004984:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f003 0308 	and.w	r3, r3, #8
 800498e:	2b00      	cmp	r3, #0
 8004990:	d041      	beq.n	8004a16 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	695b      	ldr	r3, [r3, #20]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d01c      	beq.n	80049d4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800499a:	4b19      	ldr	r3, [pc, #100]	; (8004a00 <HAL_RCC_OscConfig+0x27c>)
 800499c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049a0:	4a17      	ldr	r2, [pc, #92]	; (8004a00 <HAL_RCC_OscConfig+0x27c>)
 80049a2:	f043 0301 	orr.w	r3, r3, #1
 80049a6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049aa:	f7fd f9fb 	bl	8001da4 <HAL_GetTick>
 80049ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80049b0:	e008      	b.n	80049c4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049b2:	f7fd f9f7 	bl	8001da4 <HAL_GetTick>
 80049b6:	4602      	mov	r2, r0
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	1ad3      	subs	r3, r2, r3
 80049bc:	2b02      	cmp	r3, #2
 80049be:	d901      	bls.n	80049c4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80049c0:	2303      	movs	r3, #3
 80049c2:	e1e7      	b.n	8004d94 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80049c4:	4b0e      	ldr	r3, [pc, #56]	; (8004a00 <HAL_RCC_OscConfig+0x27c>)
 80049c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049ca:	f003 0302 	and.w	r3, r3, #2
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d0ef      	beq.n	80049b2 <HAL_RCC_OscConfig+0x22e>
 80049d2:	e020      	b.n	8004a16 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049d4:	4b0a      	ldr	r3, [pc, #40]	; (8004a00 <HAL_RCC_OscConfig+0x27c>)
 80049d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049da:	4a09      	ldr	r2, [pc, #36]	; (8004a00 <HAL_RCC_OscConfig+0x27c>)
 80049dc:	f023 0301 	bic.w	r3, r3, #1
 80049e0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049e4:	f7fd f9de 	bl	8001da4 <HAL_GetTick>
 80049e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80049ea:	e00d      	b.n	8004a08 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049ec:	f7fd f9da 	bl	8001da4 <HAL_GetTick>
 80049f0:	4602      	mov	r2, r0
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	1ad3      	subs	r3, r2, r3
 80049f6:	2b02      	cmp	r3, #2
 80049f8:	d906      	bls.n	8004a08 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80049fa:	2303      	movs	r3, #3
 80049fc:	e1ca      	b.n	8004d94 <HAL_RCC_OscConfig+0x610>
 80049fe:	bf00      	nop
 8004a00:	40021000 	.word	0x40021000
 8004a04:	2000001c 	.word	0x2000001c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004a08:	4b8c      	ldr	r3, [pc, #560]	; (8004c3c <HAL_RCC_OscConfig+0x4b8>)
 8004a0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a0e:	f003 0302 	and.w	r3, r3, #2
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d1ea      	bne.n	80049ec <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f003 0304 	and.w	r3, r3, #4
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	f000 80a6 	beq.w	8004b70 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a24:	2300      	movs	r3, #0
 8004a26:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004a28:	4b84      	ldr	r3, [pc, #528]	; (8004c3c <HAL_RCC_OscConfig+0x4b8>)
 8004a2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d101      	bne.n	8004a38 <HAL_RCC_OscConfig+0x2b4>
 8004a34:	2301      	movs	r3, #1
 8004a36:	e000      	b.n	8004a3a <HAL_RCC_OscConfig+0x2b6>
 8004a38:	2300      	movs	r3, #0
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d00d      	beq.n	8004a5a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a3e:	4b7f      	ldr	r3, [pc, #508]	; (8004c3c <HAL_RCC_OscConfig+0x4b8>)
 8004a40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a42:	4a7e      	ldr	r2, [pc, #504]	; (8004c3c <HAL_RCC_OscConfig+0x4b8>)
 8004a44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a48:	6593      	str	r3, [r2, #88]	; 0x58
 8004a4a:	4b7c      	ldr	r3, [pc, #496]	; (8004c3c <HAL_RCC_OscConfig+0x4b8>)
 8004a4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a52:	60fb      	str	r3, [r7, #12]
 8004a54:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004a56:	2301      	movs	r3, #1
 8004a58:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a5a:	4b79      	ldr	r3, [pc, #484]	; (8004c40 <HAL_RCC_OscConfig+0x4bc>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d118      	bne.n	8004a98 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a66:	4b76      	ldr	r3, [pc, #472]	; (8004c40 <HAL_RCC_OscConfig+0x4bc>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a75      	ldr	r2, [pc, #468]	; (8004c40 <HAL_RCC_OscConfig+0x4bc>)
 8004a6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a72:	f7fd f997 	bl	8001da4 <HAL_GetTick>
 8004a76:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a78:	e008      	b.n	8004a8c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a7a:	f7fd f993 	bl	8001da4 <HAL_GetTick>
 8004a7e:	4602      	mov	r2, r0
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	1ad3      	subs	r3, r2, r3
 8004a84:	2b02      	cmp	r3, #2
 8004a86:	d901      	bls.n	8004a8c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004a88:	2303      	movs	r3, #3
 8004a8a:	e183      	b.n	8004d94 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a8c:	4b6c      	ldr	r3, [pc, #432]	; (8004c40 <HAL_RCC_OscConfig+0x4bc>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d0f0      	beq.n	8004a7a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d108      	bne.n	8004ab2 <HAL_RCC_OscConfig+0x32e>
 8004aa0:	4b66      	ldr	r3, [pc, #408]	; (8004c3c <HAL_RCC_OscConfig+0x4b8>)
 8004aa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aa6:	4a65      	ldr	r2, [pc, #404]	; (8004c3c <HAL_RCC_OscConfig+0x4b8>)
 8004aa8:	f043 0301 	orr.w	r3, r3, #1
 8004aac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004ab0:	e024      	b.n	8004afc <HAL_RCC_OscConfig+0x378>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	2b05      	cmp	r3, #5
 8004ab8:	d110      	bne.n	8004adc <HAL_RCC_OscConfig+0x358>
 8004aba:	4b60      	ldr	r3, [pc, #384]	; (8004c3c <HAL_RCC_OscConfig+0x4b8>)
 8004abc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ac0:	4a5e      	ldr	r2, [pc, #376]	; (8004c3c <HAL_RCC_OscConfig+0x4b8>)
 8004ac2:	f043 0304 	orr.w	r3, r3, #4
 8004ac6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004aca:	4b5c      	ldr	r3, [pc, #368]	; (8004c3c <HAL_RCC_OscConfig+0x4b8>)
 8004acc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ad0:	4a5a      	ldr	r2, [pc, #360]	; (8004c3c <HAL_RCC_OscConfig+0x4b8>)
 8004ad2:	f043 0301 	orr.w	r3, r3, #1
 8004ad6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004ada:	e00f      	b.n	8004afc <HAL_RCC_OscConfig+0x378>
 8004adc:	4b57      	ldr	r3, [pc, #348]	; (8004c3c <HAL_RCC_OscConfig+0x4b8>)
 8004ade:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ae2:	4a56      	ldr	r2, [pc, #344]	; (8004c3c <HAL_RCC_OscConfig+0x4b8>)
 8004ae4:	f023 0301 	bic.w	r3, r3, #1
 8004ae8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004aec:	4b53      	ldr	r3, [pc, #332]	; (8004c3c <HAL_RCC_OscConfig+0x4b8>)
 8004aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004af2:	4a52      	ldr	r2, [pc, #328]	; (8004c3c <HAL_RCC_OscConfig+0x4b8>)
 8004af4:	f023 0304 	bic.w	r3, r3, #4
 8004af8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	689b      	ldr	r3, [r3, #8]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d016      	beq.n	8004b32 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b04:	f7fd f94e 	bl	8001da4 <HAL_GetTick>
 8004b08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b0a:	e00a      	b.n	8004b22 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b0c:	f7fd f94a 	bl	8001da4 <HAL_GetTick>
 8004b10:	4602      	mov	r2, r0
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	1ad3      	subs	r3, r2, r3
 8004b16:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d901      	bls.n	8004b22 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004b1e:	2303      	movs	r3, #3
 8004b20:	e138      	b.n	8004d94 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b22:	4b46      	ldr	r3, [pc, #280]	; (8004c3c <HAL_RCC_OscConfig+0x4b8>)
 8004b24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b28:	f003 0302 	and.w	r3, r3, #2
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d0ed      	beq.n	8004b0c <HAL_RCC_OscConfig+0x388>
 8004b30:	e015      	b.n	8004b5e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b32:	f7fd f937 	bl	8001da4 <HAL_GetTick>
 8004b36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004b38:	e00a      	b.n	8004b50 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b3a:	f7fd f933 	bl	8001da4 <HAL_GetTick>
 8004b3e:	4602      	mov	r2, r0
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	1ad3      	subs	r3, r2, r3
 8004b44:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d901      	bls.n	8004b50 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004b4c:	2303      	movs	r3, #3
 8004b4e:	e121      	b.n	8004d94 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004b50:	4b3a      	ldr	r3, [pc, #232]	; (8004c3c <HAL_RCC_OscConfig+0x4b8>)
 8004b52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b56:	f003 0302 	and.w	r3, r3, #2
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d1ed      	bne.n	8004b3a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004b5e:	7ffb      	ldrb	r3, [r7, #31]
 8004b60:	2b01      	cmp	r3, #1
 8004b62:	d105      	bne.n	8004b70 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b64:	4b35      	ldr	r3, [pc, #212]	; (8004c3c <HAL_RCC_OscConfig+0x4b8>)
 8004b66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b68:	4a34      	ldr	r2, [pc, #208]	; (8004c3c <HAL_RCC_OscConfig+0x4b8>)
 8004b6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b6e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f003 0320 	and.w	r3, r3, #32
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d03c      	beq.n	8004bf6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	699b      	ldr	r3, [r3, #24]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d01c      	beq.n	8004bbe <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004b84:	4b2d      	ldr	r3, [pc, #180]	; (8004c3c <HAL_RCC_OscConfig+0x4b8>)
 8004b86:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004b8a:	4a2c      	ldr	r2, [pc, #176]	; (8004c3c <HAL_RCC_OscConfig+0x4b8>)
 8004b8c:	f043 0301 	orr.w	r3, r3, #1
 8004b90:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b94:	f7fd f906 	bl	8001da4 <HAL_GetTick>
 8004b98:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004b9a:	e008      	b.n	8004bae <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004b9c:	f7fd f902 	bl	8001da4 <HAL_GetTick>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	1ad3      	subs	r3, r2, r3
 8004ba6:	2b02      	cmp	r3, #2
 8004ba8:	d901      	bls.n	8004bae <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004baa:	2303      	movs	r3, #3
 8004bac:	e0f2      	b.n	8004d94 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004bae:	4b23      	ldr	r3, [pc, #140]	; (8004c3c <HAL_RCC_OscConfig+0x4b8>)
 8004bb0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004bb4:	f003 0302 	and.w	r3, r3, #2
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d0ef      	beq.n	8004b9c <HAL_RCC_OscConfig+0x418>
 8004bbc:	e01b      	b.n	8004bf6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004bbe:	4b1f      	ldr	r3, [pc, #124]	; (8004c3c <HAL_RCC_OscConfig+0x4b8>)
 8004bc0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004bc4:	4a1d      	ldr	r2, [pc, #116]	; (8004c3c <HAL_RCC_OscConfig+0x4b8>)
 8004bc6:	f023 0301 	bic.w	r3, r3, #1
 8004bca:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bce:	f7fd f8e9 	bl	8001da4 <HAL_GetTick>
 8004bd2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004bd4:	e008      	b.n	8004be8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004bd6:	f7fd f8e5 	bl	8001da4 <HAL_GetTick>
 8004bda:	4602      	mov	r2, r0
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	1ad3      	subs	r3, r2, r3
 8004be0:	2b02      	cmp	r3, #2
 8004be2:	d901      	bls.n	8004be8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004be4:	2303      	movs	r3, #3
 8004be6:	e0d5      	b.n	8004d94 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004be8:	4b14      	ldr	r3, [pc, #80]	; (8004c3c <HAL_RCC_OscConfig+0x4b8>)
 8004bea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004bee:	f003 0302 	and.w	r3, r3, #2
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d1ef      	bne.n	8004bd6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	69db      	ldr	r3, [r3, #28]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	f000 80c9 	beq.w	8004d92 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c00:	4b0e      	ldr	r3, [pc, #56]	; (8004c3c <HAL_RCC_OscConfig+0x4b8>)
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	f003 030c 	and.w	r3, r3, #12
 8004c08:	2b0c      	cmp	r3, #12
 8004c0a:	f000 8083 	beq.w	8004d14 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	69db      	ldr	r3, [r3, #28]
 8004c12:	2b02      	cmp	r3, #2
 8004c14:	d15e      	bne.n	8004cd4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c16:	4b09      	ldr	r3, [pc, #36]	; (8004c3c <HAL_RCC_OscConfig+0x4b8>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a08      	ldr	r2, [pc, #32]	; (8004c3c <HAL_RCC_OscConfig+0x4b8>)
 8004c1c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c22:	f7fd f8bf 	bl	8001da4 <HAL_GetTick>
 8004c26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c28:	e00c      	b.n	8004c44 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c2a:	f7fd f8bb 	bl	8001da4 <HAL_GetTick>
 8004c2e:	4602      	mov	r2, r0
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	1ad3      	subs	r3, r2, r3
 8004c34:	2b02      	cmp	r3, #2
 8004c36:	d905      	bls.n	8004c44 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004c38:	2303      	movs	r3, #3
 8004c3a:	e0ab      	b.n	8004d94 <HAL_RCC_OscConfig+0x610>
 8004c3c:	40021000 	.word	0x40021000
 8004c40:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c44:	4b55      	ldr	r3, [pc, #340]	; (8004d9c <HAL_RCC_OscConfig+0x618>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d1ec      	bne.n	8004c2a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c50:	4b52      	ldr	r3, [pc, #328]	; (8004d9c <HAL_RCC_OscConfig+0x618>)
 8004c52:	68da      	ldr	r2, [r3, #12]
 8004c54:	4b52      	ldr	r3, [pc, #328]	; (8004da0 <HAL_RCC_OscConfig+0x61c>)
 8004c56:	4013      	ands	r3, r2
 8004c58:	687a      	ldr	r2, [r7, #4]
 8004c5a:	6a11      	ldr	r1, [r2, #32]
 8004c5c:	687a      	ldr	r2, [r7, #4]
 8004c5e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004c60:	3a01      	subs	r2, #1
 8004c62:	0112      	lsls	r2, r2, #4
 8004c64:	4311      	orrs	r1, r2
 8004c66:	687a      	ldr	r2, [r7, #4]
 8004c68:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004c6a:	0212      	lsls	r2, r2, #8
 8004c6c:	4311      	orrs	r1, r2
 8004c6e:	687a      	ldr	r2, [r7, #4]
 8004c70:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004c72:	0852      	lsrs	r2, r2, #1
 8004c74:	3a01      	subs	r2, #1
 8004c76:	0552      	lsls	r2, r2, #21
 8004c78:	4311      	orrs	r1, r2
 8004c7a:	687a      	ldr	r2, [r7, #4]
 8004c7c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004c7e:	0852      	lsrs	r2, r2, #1
 8004c80:	3a01      	subs	r2, #1
 8004c82:	0652      	lsls	r2, r2, #25
 8004c84:	4311      	orrs	r1, r2
 8004c86:	687a      	ldr	r2, [r7, #4]
 8004c88:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004c8a:	06d2      	lsls	r2, r2, #27
 8004c8c:	430a      	orrs	r2, r1
 8004c8e:	4943      	ldr	r1, [pc, #268]	; (8004d9c <HAL_RCC_OscConfig+0x618>)
 8004c90:	4313      	orrs	r3, r2
 8004c92:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c94:	4b41      	ldr	r3, [pc, #260]	; (8004d9c <HAL_RCC_OscConfig+0x618>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a40      	ldr	r2, [pc, #256]	; (8004d9c <HAL_RCC_OscConfig+0x618>)
 8004c9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c9e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004ca0:	4b3e      	ldr	r3, [pc, #248]	; (8004d9c <HAL_RCC_OscConfig+0x618>)
 8004ca2:	68db      	ldr	r3, [r3, #12]
 8004ca4:	4a3d      	ldr	r2, [pc, #244]	; (8004d9c <HAL_RCC_OscConfig+0x618>)
 8004ca6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004caa:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cac:	f7fd f87a 	bl	8001da4 <HAL_GetTick>
 8004cb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004cb2:	e008      	b.n	8004cc6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cb4:	f7fd f876 	bl	8001da4 <HAL_GetTick>
 8004cb8:	4602      	mov	r2, r0
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	1ad3      	subs	r3, r2, r3
 8004cbe:	2b02      	cmp	r3, #2
 8004cc0:	d901      	bls.n	8004cc6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004cc2:	2303      	movs	r3, #3
 8004cc4:	e066      	b.n	8004d94 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004cc6:	4b35      	ldr	r3, [pc, #212]	; (8004d9c <HAL_RCC_OscConfig+0x618>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d0f0      	beq.n	8004cb4 <HAL_RCC_OscConfig+0x530>
 8004cd2:	e05e      	b.n	8004d92 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cd4:	4b31      	ldr	r3, [pc, #196]	; (8004d9c <HAL_RCC_OscConfig+0x618>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a30      	ldr	r2, [pc, #192]	; (8004d9c <HAL_RCC_OscConfig+0x618>)
 8004cda:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004cde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ce0:	f7fd f860 	bl	8001da4 <HAL_GetTick>
 8004ce4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ce6:	e008      	b.n	8004cfa <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ce8:	f7fd f85c 	bl	8001da4 <HAL_GetTick>
 8004cec:	4602      	mov	r2, r0
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	1ad3      	subs	r3, r2, r3
 8004cf2:	2b02      	cmp	r3, #2
 8004cf4:	d901      	bls.n	8004cfa <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004cf6:	2303      	movs	r3, #3
 8004cf8:	e04c      	b.n	8004d94 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004cfa:	4b28      	ldr	r3, [pc, #160]	; (8004d9c <HAL_RCC_OscConfig+0x618>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d1f0      	bne.n	8004ce8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004d06:	4b25      	ldr	r3, [pc, #148]	; (8004d9c <HAL_RCC_OscConfig+0x618>)
 8004d08:	68da      	ldr	r2, [r3, #12]
 8004d0a:	4924      	ldr	r1, [pc, #144]	; (8004d9c <HAL_RCC_OscConfig+0x618>)
 8004d0c:	4b25      	ldr	r3, [pc, #148]	; (8004da4 <HAL_RCC_OscConfig+0x620>)
 8004d0e:	4013      	ands	r3, r2
 8004d10:	60cb      	str	r3, [r1, #12]
 8004d12:	e03e      	b.n	8004d92 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	69db      	ldr	r3, [r3, #28]
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	d101      	bne.n	8004d20 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	e039      	b.n	8004d94 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004d20:	4b1e      	ldr	r3, [pc, #120]	; (8004d9c <HAL_RCC_OscConfig+0x618>)
 8004d22:	68db      	ldr	r3, [r3, #12]
 8004d24:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	f003 0203 	and.w	r2, r3, #3
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6a1b      	ldr	r3, [r3, #32]
 8004d30:	429a      	cmp	r2, r3
 8004d32:	d12c      	bne.n	8004d8e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d3e:	3b01      	subs	r3, #1
 8004d40:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d42:	429a      	cmp	r2, r3
 8004d44:	d123      	bne.n	8004d8e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d50:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004d52:	429a      	cmp	r2, r3
 8004d54:	d11b      	bne.n	8004d8e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d60:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d62:	429a      	cmp	r2, r3
 8004d64:	d113      	bne.n	8004d8e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d70:	085b      	lsrs	r3, r3, #1
 8004d72:	3b01      	subs	r3, #1
 8004d74:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004d76:	429a      	cmp	r2, r3
 8004d78:	d109      	bne.n	8004d8e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d84:	085b      	lsrs	r3, r3, #1
 8004d86:	3b01      	subs	r3, #1
 8004d88:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	d001      	beq.n	8004d92 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e000      	b.n	8004d94 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004d92:	2300      	movs	r3, #0
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	3720      	adds	r7, #32
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}
 8004d9c:	40021000 	.word	0x40021000
 8004da0:	019f800c 	.word	0x019f800c
 8004da4:	feeefffc 	.word	0xfeeefffc

08004da8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b086      	sub	sp, #24
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
 8004db0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004db2:	2300      	movs	r3, #0
 8004db4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d101      	bne.n	8004dc0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	e11e      	b.n	8004ffe <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004dc0:	4b91      	ldr	r3, [pc, #580]	; (8005008 <HAL_RCC_ClockConfig+0x260>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f003 030f 	and.w	r3, r3, #15
 8004dc8:	683a      	ldr	r2, [r7, #0]
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d910      	bls.n	8004df0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dce:	4b8e      	ldr	r3, [pc, #568]	; (8005008 <HAL_RCC_ClockConfig+0x260>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f023 020f 	bic.w	r2, r3, #15
 8004dd6:	498c      	ldr	r1, [pc, #560]	; (8005008 <HAL_RCC_ClockConfig+0x260>)
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dde:	4b8a      	ldr	r3, [pc, #552]	; (8005008 <HAL_RCC_ClockConfig+0x260>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f003 030f 	and.w	r3, r3, #15
 8004de6:	683a      	ldr	r2, [r7, #0]
 8004de8:	429a      	cmp	r2, r3
 8004dea:	d001      	beq.n	8004df0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
 8004dee:	e106      	b.n	8004ffe <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f003 0301 	and.w	r3, r3, #1
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d073      	beq.n	8004ee4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	2b03      	cmp	r3, #3
 8004e02:	d129      	bne.n	8004e58 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e04:	4b81      	ldr	r3, [pc, #516]	; (800500c <HAL_RCC_ClockConfig+0x264>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d101      	bne.n	8004e14 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004e10:	2301      	movs	r3, #1
 8004e12:	e0f4      	b.n	8004ffe <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004e14:	f000 f99e 	bl	8005154 <RCC_GetSysClockFreqFromPLLSource>
 8004e18:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	4a7c      	ldr	r2, [pc, #496]	; (8005010 <HAL_RCC_ClockConfig+0x268>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d93f      	bls.n	8004ea2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004e22:	4b7a      	ldr	r3, [pc, #488]	; (800500c <HAL_RCC_ClockConfig+0x264>)
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d009      	beq.n	8004e42 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d033      	beq.n	8004ea2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d12f      	bne.n	8004ea2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004e42:	4b72      	ldr	r3, [pc, #456]	; (800500c <HAL_RCC_ClockConfig+0x264>)
 8004e44:	689b      	ldr	r3, [r3, #8]
 8004e46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e4a:	4a70      	ldr	r2, [pc, #448]	; (800500c <HAL_RCC_ClockConfig+0x264>)
 8004e4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e50:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004e52:	2380      	movs	r3, #128	; 0x80
 8004e54:	617b      	str	r3, [r7, #20]
 8004e56:	e024      	b.n	8004ea2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	2b02      	cmp	r3, #2
 8004e5e:	d107      	bne.n	8004e70 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e60:	4b6a      	ldr	r3, [pc, #424]	; (800500c <HAL_RCC_ClockConfig+0x264>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d109      	bne.n	8004e80 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	e0c6      	b.n	8004ffe <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e70:	4b66      	ldr	r3, [pc, #408]	; (800500c <HAL_RCC_ClockConfig+0x264>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d101      	bne.n	8004e80 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	e0be      	b.n	8004ffe <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004e80:	f000 f8ce 	bl	8005020 <HAL_RCC_GetSysClockFreq>
 8004e84:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	4a61      	ldr	r2, [pc, #388]	; (8005010 <HAL_RCC_ClockConfig+0x268>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d909      	bls.n	8004ea2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004e8e:	4b5f      	ldr	r3, [pc, #380]	; (800500c <HAL_RCC_ClockConfig+0x264>)
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e96:	4a5d      	ldr	r2, [pc, #372]	; (800500c <HAL_RCC_ClockConfig+0x264>)
 8004e98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e9c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004e9e:	2380      	movs	r3, #128	; 0x80
 8004ea0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004ea2:	4b5a      	ldr	r3, [pc, #360]	; (800500c <HAL_RCC_ClockConfig+0x264>)
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	f023 0203 	bic.w	r2, r3, #3
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	4957      	ldr	r1, [pc, #348]	; (800500c <HAL_RCC_ClockConfig+0x264>)
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004eb4:	f7fc ff76 	bl	8001da4 <HAL_GetTick>
 8004eb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004eba:	e00a      	b.n	8004ed2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ebc:	f7fc ff72 	bl	8001da4 <HAL_GetTick>
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	1ad3      	subs	r3, r2, r3
 8004ec6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d901      	bls.n	8004ed2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004ece:	2303      	movs	r3, #3
 8004ed0:	e095      	b.n	8004ffe <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ed2:	4b4e      	ldr	r3, [pc, #312]	; (800500c <HAL_RCC_ClockConfig+0x264>)
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	f003 020c 	and.w	r2, r3, #12
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	009b      	lsls	r3, r3, #2
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	d1eb      	bne.n	8004ebc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f003 0302 	and.w	r3, r3, #2
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d023      	beq.n	8004f38 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f003 0304 	and.w	r3, r3, #4
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d005      	beq.n	8004f08 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004efc:	4b43      	ldr	r3, [pc, #268]	; (800500c <HAL_RCC_ClockConfig+0x264>)
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	4a42      	ldr	r2, [pc, #264]	; (800500c <HAL_RCC_ClockConfig+0x264>)
 8004f02:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004f06:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f003 0308 	and.w	r3, r3, #8
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d007      	beq.n	8004f24 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004f14:	4b3d      	ldr	r3, [pc, #244]	; (800500c <HAL_RCC_ClockConfig+0x264>)
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004f1c:	4a3b      	ldr	r2, [pc, #236]	; (800500c <HAL_RCC_ClockConfig+0x264>)
 8004f1e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004f22:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f24:	4b39      	ldr	r3, [pc, #228]	; (800500c <HAL_RCC_ClockConfig+0x264>)
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	4936      	ldr	r1, [pc, #216]	; (800500c <HAL_RCC_ClockConfig+0x264>)
 8004f32:	4313      	orrs	r3, r2
 8004f34:	608b      	str	r3, [r1, #8]
 8004f36:	e008      	b.n	8004f4a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	2b80      	cmp	r3, #128	; 0x80
 8004f3c:	d105      	bne.n	8004f4a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004f3e:	4b33      	ldr	r3, [pc, #204]	; (800500c <HAL_RCC_ClockConfig+0x264>)
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	4a32      	ldr	r2, [pc, #200]	; (800500c <HAL_RCC_ClockConfig+0x264>)
 8004f44:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f48:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004f4a:	4b2f      	ldr	r3, [pc, #188]	; (8005008 <HAL_RCC_ClockConfig+0x260>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f003 030f 	and.w	r3, r3, #15
 8004f52:	683a      	ldr	r2, [r7, #0]
 8004f54:	429a      	cmp	r2, r3
 8004f56:	d21d      	bcs.n	8004f94 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f58:	4b2b      	ldr	r3, [pc, #172]	; (8005008 <HAL_RCC_ClockConfig+0x260>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f023 020f 	bic.w	r2, r3, #15
 8004f60:	4929      	ldr	r1, [pc, #164]	; (8005008 <HAL_RCC_ClockConfig+0x260>)
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	4313      	orrs	r3, r2
 8004f66:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004f68:	f7fc ff1c 	bl	8001da4 <HAL_GetTick>
 8004f6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f6e:	e00a      	b.n	8004f86 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f70:	f7fc ff18 	bl	8001da4 <HAL_GetTick>
 8004f74:	4602      	mov	r2, r0
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	1ad3      	subs	r3, r2, r3
 8004f7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d901      	bls.n	8004f86 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004f82:	2303      	movs	r3, #3
 8004f84:	e03b      	b.n	8004ffe <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f86:	4b20      	ldr	r3, [pc, #128]	; (8005008 <HAL_RCC_ClockConfig+0x260>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f003 030f 	and.w	r3, r3, #15
 8004f8e:	683a      	ldr	r2, [r7, #0]
 8004f90:	429a      	cmp	r2, r3
 8004f92:	d1ed      	bne.n	8004f70 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f003 0304 	and.w	r3, r3, #4
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d008      	beq.n	8004fb2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004fa0:	4b1a      	ldr	r3, [pc, #104]	; (800500c <HAL_RCC_ClockConfig+0x264>)
 8004fa2:	689b      	ldr	r3, [r3, #8]
 8004fa4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	68db      	ldr	r3, [r3, #12]
 8004fac:	4917      	ldr	r1, [pc, #92]	; (800500c <HAL_RCC_ClockConfig+0x264>)
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f003 0308 	and.w	r3, r3, #8
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d009      	beq.n	8004fd2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004fbe:	4b13      	ldr	r3, [pc, #76]	; (800500c <HAL_RCC_ClockConfig+0x264>)
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	691b      	ldr	r3, [r3, #16]
 8004fca:	00db      	lsls	r3, r3, #3
 8004fcc:	490f      	ldr	r1, [pc, #60]	; (800500c <HAL_RCC_ClockConfig+0x264>)
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004fd2:	f000 f825 	bl	8005020 <HAL_RCC_GetSysClockFreq>
 8004fd6:	4602      	mov	r2, r0
 8004fd8:	4b0c      	ldr	r3, [pc, #48]	; (800500c <HAL_RCC_ClockConfig+0x264>)
 8004fda:	689b      	ldr	r3, [r3, #8]
 8004fdc:	091b      	lsrs	r3, r3, #4
 8004fde:	f003 030f 	and.w	r3, r3, #15
 8004fe2:	490c      	ldr	r1, [pc, #48]	; (8005014 <HAL_RCC_ClockConfig+0x26c>)
 8004fe4:	5ccb      	ldrb	r3, [r1, r3]
 8004fe6:	f003 031f 	and.w	r3, r3, #31
 8004fea:	fa22 f303 	lsr.w	r3, r2, r3
 8004fee:	4a0a      	ldr	r2, [pc, #40]	; (8005018 <HAL_RCC_ClockConfig+0x270>)
 8004ff0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004ff2:	4b0a      	ldr	r3, [pc, #40]	; (800501c <HAL_RCC_ClockConfig+0x274>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f7fc fe88 	bl	8001d0c <HAL_InitTick>
 8004ffc:	4603      	mov	r3, r0
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3718      	adds	r7, #24
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}
 8005006:	bf00      	nop
 8005008:	40022000 	.word	0x40022000
 800500c:	40021000 	.word	0x40021000
 8005010:	04c4b400 	.word	0x04c4b400
 8005014:	08008c60 	.word	0x08008c60
 8005018:	20000018 	.word	0x20000018
 800501c:	2000001c 	.word	0x2000001c

08005020 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005020:	b480      	push	{r7}
 8005022:	b087      	sub	sp, #28
 8005024:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005026:	4b2c      	ldr	r3, [pc, #176]	; (80050d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	f003 030c 	and.w	r3, r3, #12
 800502e:	2b04      	cmp	r3, #4
 8005030:	d102      	bne.n	8005038 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005032:	4b2a      	ldr	r3, [pc, #168]	; (80050dc <HAL_RCC_GetSysClockFreq+0xbc>)
 8005034:	613b      	str	r3, [r7, #16]
 8005036:	e047      	b.n	80050c8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005038:	4b27      	ldr	r3, [pc, #156]	; (80050d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	f003 030c 	and.w	r3, r3, #12
 8005040:	2b08      	cmp	r3, #8
 8005042:	d102      	bne.n	800504a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005044:	4b26      	ldr	r3, [pc, #152]	; (80050e0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005046:	613b      	str	r3, [r7, #16]
 8005048:	e03e      	b.n	80050c8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800504a:	4b23      	ldr	r3, [pc, #140]	; (80050d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	f003 030c 	and.w	r3, r3, #12
 8005052:	2b0c      	cmp	r3, #12
 8005054:	d136      	bne.n	80050c4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005056:	4b20      	ldr	r3, [pc, #128]	; (80050d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005058:	68db      	ldr	r3, [r3, #12]
 800505a:	f003 0303 	and.w	r3, r3, #3
 800505e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005060:	4b1d      	ldr	r3, [pc, #116]	; (80050d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005062:	68db      	ldr	r3, [r3, #12]
 8005064:	091b      	lsrs	r3, r3, #4
 8005066:	f003 030f 	and.w	r3, r3, #15
 800506a:	3301      	adds	r3, #1
 800506c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2b03      	cmp	r3, #3
 8005072:	d10c      	bne.n	800508e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005074:	4a1a      	ldr	r2, [pc, #104]	; (80050e0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	fbb2 f3f3 	udiv	r3, r2, r3
 800507c:	4a16      	ldr	r2, [pc, #88]	; (80050d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800507e:	68d2      	ldr	r2, [r2, #12]
 8005080:	0a12      	lsrs	r2, r2, #8
 8005082:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005086:	fb02 f303 	mul.w	r3, r2, r3
 800508a:	617b      	str	r3, [r7, #20]
      break;
 800508c:	e00c      	b.n	80050a8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800508e:	4a13      	ldr	r2, [pc, #76]	; (80050dc <HAL_RCC_GetSysClockFreq+0xbc>)
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	fbb2 f3f3 	udiv	r3, r2, r3
 8005096:	4a10      	ldr	r2, [pc, #64]	; (80050d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005098:	68d2      	ldr	r2, [r2, #12]
 800509a:	0a12      	lsrs	r2, r2, #8
 800509c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80050a0:	fb02 f303 	mul.w	r3, r2, r3
 80050a4:	617b      	str	r3, [r7, #20]
      break;
 80050a6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80050a8:	4b0b      	ldr	r3, [pc, #44]	; (80050d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80050aa:	68db      	ldr	r3, [r3, #12]
 80050ac:	0e5b      	lsrs	r3, r3, #25
 80050ae:	f003 0303 	and.w	r3, r3, #3
 80050b2:	3301      	adds	r3, #1
 80050b4:	005b      	lsls	r3, r3, #1
 80050b6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80050b8:	697a      	ldr	r2, [r7, #20]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80050c0:	613b      	str	r3, [r7, #16]
 80050c2:	e001      	b.n	80050c8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80050c4:	2300      	movs	r3, #0
 80050c6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80050c8:	693b      	ldr	r3, [r7, #16]
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	371c      	adds	r7, #28
 80050ce:	46bd      	mov	sp, r7
 80050d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d4:	4770      	bx	lr
 80050d6:	bf00      	nop
 80050d8:	40021000 	.word	0x40021000
 80050dc:	00f42400 	.word	0x00f42400
 80050e0:	016e3600 	.word	0x016e3600

080050e4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050e4:	b480      	push	{r7}
 80050e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80050e8:	4b03      	ldr	r3, [pc, #12]	; (80050f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80050ea:	681b      	ldr	r3, [r3, #0]
}
 80050ec:	4618      	mov	r0, r3
 80050ee:	46bd      	mov	sp, r7
 80050f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f4:	4770      	bx	lr
 80050f6:	bf00      	nop
 80050f8:	20000018 	.word	0x20000018

080050fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005100:	f7ff fff0 	bl	80050e4 <HAL_RCC_GetHCLKFreq>
 8005104:	4602      	mov	r2, r0
 8005106:	4b06      	ldr	r3, [pc, #24]	; (8005120 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	0a1b      	lsrs	r3, r3, #8
 800510c:	f003 0307 	and.w	r3, r3, #7
 8005110:	4904      	ldr	r1, [pc, #16]	; (8005124 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005112:	5ccb      	ldrb	r3, [r1, r3]
 8005114:	f003 031f 	and.w	r3, r3, #31
 8005118:	fa22 f303 	lsr.w	r3, r2, r3
}
 800511c:	4618      	mov	r0, r3
 800511e:	bd80      	pop	{r7, pc}
 8005120:	40021000 	.word	0x40021000
 8005124:	08008c70 	.word	0x08008c70

08005128 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800512c:	f7ff ffda 	bl	80050e4 <HAL_RCC_GetHCLKFreq>
 8005130:	4602      	mov	r2, r0
 8005132:	4b06      	ldr	r3, [pc, #24]	; (800514c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005134:	689b      	ldr	r3, [r3, #8]
 8005136:	0adb      	lsrs	r3, r3, #11
 8005138:	f003 0307 	and.w	r3, r3, #7
 800513c:	4904      	ldr	r1, [pc, #16]	; (8005150 <HAL_RCC_GetPCLK2Freq+0x28>)
 800513e:	5ccb      	ldrb	r3, [r1, r3]
 8005140:	f003 031f 	and.w	r3, r3, #31
 8005144:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005148:	4618      	mov	r0, r3
 800514a:	bd80      	pop	{r7, pc}
 800514c:	40021000 	.word	0x40021000
 8005150:	08008c70 	.word	0x08008c70

08005154 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005154:	b480      	push	{r7}
 8005156:	b087      	sub	sp, #28
 8005158:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800515a:	4b1e      	ldr	r3, [pc, #120]	; (80051d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800515c:	68db      	ldr	r3, [r3, #12]
 800515e:	f003 0303 	and.w	r3, r3, #3
 8005162:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005164:	4b1b      	ldr	r3, [pc, #108]	; (80051d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005166:	68db      	ldr	r3, [r3, #12]
 8005168:	091b      	lsrs	r3, r3, #4
 800516a:	f003 030f 	and.w	r3, r3, #15
 800516e:	3301      	adds	r3, #1
 8005170:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	2b03      	cmp	r3, #3
 8005176:	d10c      	bne.n	8005192 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005178:	4a17      	ldr	r2, [pc, #92]	; (80051d8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005180:	4a14      	ldr	r2, [pc, #80]	; (80051d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005182:	68d2      	ldr	r2, [r2, #12]
 8005184:	0a12      	lsrs	r2, r2, #8
 8005186:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800518a:	fb02 f303 	mul.w	r3, r2, r3
 800518e:	617b      	str	r3, [r7, #20]
    break;
 8005190:	e00c      	b.n	80051ac <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005192:	4a12      	ldr	r2, [pc, #72]	; (80051dc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	fbb2 f3f3 	udiv	r3, r2, r3
 800519a:	4a0e      	ldr	r2, [pc, #56]	; (80051d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800519c:	68d2      	ldr	r2, [r2, #12]
 800519e:	0a12      	lsrs	r2, r2, #8
 80051a0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80051a4:	fb02 f303 	mul.w	r3, r2, r3
 80051a8:	617b      	str	r3, [r7, #20]
    break;
 80051aa:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80051ac:	4b09      	ldr	r3, [pc, #36]	; (80051d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80051ae:	68db      	ldr	r3, [r3, #12]
 80051b0:	0e5b      	lsrs	r3, r3, #25
 80051b2:	f003 0303 	and.w	r3, r3, #3
 80051b6:	3301      	adds	r3, #1
 80051b8:	005b      	lsls	r3, r3, #1
 80051ba:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80051bc:	697a      	ldr	r2, [r7, #20]
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80051c4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80051c6:	687b      	ldr	r3, [r7, #4]
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	371c      	adds	r7, #28
 80051cc:	46bd      	mov	sp, r7
 80051ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d2:	4770      	bx	lr
 80051d4:	40021000 	.word	0x40021000
 80051d8:	016e3600 	.word	0x016e3600
 80051dc:	00f42400 	.word	0x00f42400

080051e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b086      	sub	sp, #24
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80051e8:	2300      	movs	r3, #0
 80051ea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80051ec:	2300      	movs	r3, #0
 80051ee:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	f000 8098 	beq.w	800532e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051fe:	2300      	movs	r3, #0
 8005200:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005202:	4b43      	ldr	r3, [pc, #268]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005204:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005206:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800520a:	2b00      	cmp	r3, #0
 800520c:	d10d      	bne.n	800522a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800520e:	4b40      	ldr	r3, [pc, #256]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005210:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005212:	4a3f      	ldr	r2, [pc, #252]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005214:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005218:	6593      	str	r3, [r2, #88]	; 0x58
 800521a:	4b3d      	ldr	r3, [pc, #244]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800521c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800521e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005222:	60bb      	str	r3, [r7, #8]
 8005224:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005226:	2301      	movs	r3, #1
 8005228:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800522a:	4b3a      	ldr	r3, [pc, #232]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a39      	ldr	r2, [pc, #228]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005230:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005234:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005236:	f7fc fdb5 	bl	8001da4 <HAL_GetTick>
 800523a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800523c:	e009      	b.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800523e:	f7fc fdb1 	bl	8001da4 <HAL_GetTick>
 8005242:	4602      	mov	r2, r0
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	1ad3      	subs	r3, r2, r3
 8005248:	2b02      	cmp	r3, #2
 800524a:	d902      	bls.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800524c:	2303      	movs	r3, #3
 800524e:	74fb      	strb	r3, [r7, #19]
        break;
 8005250:	e005      	b.n	800525e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005252:	4b30      	ldr	r3, [pc, #192]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800525a:	2b00      	cmp	r3, #0
 800525c:	d0ef      	beq.n	800523e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800525e:	7cfb      	ldrb	r3, [r7, #19]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d159      	bne.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005264:	4b2a      	ldr	r3, [pc, #168]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005266:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800526a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800526e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d01e      	beq.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800527a:	697a      	ldr	r2, [r7, #20]
 800527c:	429a      	cmp	r2, r3
 800527e:	d019      	beq.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005280:	4b23      	ldr	r3, [pc, #140]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005282:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005286:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800528a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800528c:	4b20      	ldr	r3, [pc, #128]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800528e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005292:	4a1f      	ldr	r2, [pc, #124]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005294:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005298:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800529c:	4b1c      	ldr	r3, [pc, #112]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800529e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052a2:	4a1b      	ldr	r2, [pc, #108]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80052ac:	4a18      	ldr	r2, [pc, #96]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	f003 0301 	and.w	r3, r3, #1
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d016      	beq.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052be:	f7fc fd71 	bl	8001da4 <HAL_GetTick>
 80052c2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052c4:	e00b      	b.n	80052de <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052c6:	f7fc fd6d 	bl	8001da4 <HAL_GetTick>
 80052ca:	4602      	mov	r2, r0
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	1ad3      	subs	r3, r2, r3
 80052d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d902      	bls.n	80052de <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80052d8:	2303      	movs	r3, #3
 80052da:	74fb      	strb	r3, [r7, #19]
            break;
 80052dc:	e006      	b.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052de:	4b0c      	ldr	r3, [pc, #48]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052e4:	f003 0302 	and.w	r3, r3, #2
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d0ec      	beq.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80052ec:	7cfb      	ldrb	r3, [r7, #19]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d10b      	bne.n	800530a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80052f2:	4b07      	ldr	r3, [pc, #28]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005300:	4903      	ldr	r1, [pc, #12]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005302:	4313      	orrs	r3, r2
 8005304:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005308:	e008      	b.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800530a:	7cfb      	ldrb	r3, [r7, #19]
 800530c:	74bb      	strb	r3, [r7, #18]
 800530e:	e005      	b.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005310:	40021000 	.word	0x40021000
 8005314:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005318:	7cfb      	ldrb	r3, [r7, #19]
 800531a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800531c:	7c7b      	ldrb	r3, [r7, #17]
 800531e:	2b01      	cmp	r3, #1
 8005320:	d105      	bne.n	800532e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005322:	4ba7      	ldr	r3, [pc, #668]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005326:	4aa6      	ldr	r2, [pc, #664]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005328:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800532c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f003 0301 	and.w	r3, r3, #1
 8005336:	2b00      	cmp	r3, #0
 8005338:	d00a      	beq.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800533a:	4ba1      	ldr	r3, [pc, #644]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800533c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005340:	f023 0203 	bic.w	r2, r3, #3
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	499d      	ldr	r1, [pc, #628]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800534a:	4313      	orrs	r3, r2
 800534c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f003 0302 	and.w	r3, r3, #2
 8005358:	2b00      	cmp	r3, #0
 800535a:	d00a      	beq.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800535c:	4b98      	ldr	r3, [pc, #608]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800535e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005362:	f023 020c 	bic.w	r2, r3, #12
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	4995      	ldr	r1, [pc, #596]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800536c:	4313      	orrs	r3, r2
 800536e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f003 0304 	and.w	r3, r3, #4
 800537a:	2b00      	cmp	r3, #0
 800537c:	d00a      	beq.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800537e:	4b90      	ldr	r3, [pc, #576]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005380:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005384:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	68db      	ldr	r3, [r3, #12]
 800538c:	498c      	ldr	r1, [pc, #560]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800538e:	4313      	orrs	r3, r2
 8005390:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f003 0308 	and.w	r3, r3, #8
 800539c:	2b00      	cmp	r3, #0
 800539e:	d00a      	beq.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80053a0:	4b87      	ldr	r3, [pc, #540]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053a6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	691b      	ldr	r3, [r3, #16]
 80053ae:	4984      	ldr	r1, [pc, #528]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053b0:	4313      	orrs	r3, r2
 80053b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f003 0310 	and.w	r3, r3, #16
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d00a      	beq.n	80053d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80053c2:	4b7f      	ldr	r3, [pc, #508]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	695b      	ldr	r3, [r3, #20]
 80053d0:	497b      	ldr	r1, [pc, #492]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053d2:	4313      	orrs	r3, r2
 80053d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f003 0320 	and.w	r3, r3, #32
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d00a      	beq.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80053e4:	4b76      	ldr	r3, [pc, #472]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053ea:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	699b      	ldr	r3, [r3, #24]
 80053f2:	4973      	ldr	r1, [pc, #460]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053f4:	4313      	orrs	r3, r2
 80053f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005402:	2b00      	cmp	r3, #0
 8005404:	d00a      	beq.n	800541c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005406:	4b6e      	ldr	r3, [pc, #440]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005408:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800540c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	69db      	ldr	r3, [r3, #28]
 8005414:	496a      	ldr	r1, [pc, #424]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005416:	4313      	orrs	r3, r2
 8005418:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005424:	2b00      	cmp	r3, #0
 8005426:	d00a      	beq.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005428:	4b65      	ldr	r3, [pc, #404]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800542a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800542e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6a1b      	ldr	r3, [r3, #32]
 8005436:	4962      	ldr	r1, [pc, #392]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005438:	4313      	orrs	r3, r2
 800543a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005446:	2b00      	cmp	r3, #0
 8005448:	d00a      	beq.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800544a:	4b5d      	ldr	r3, [pc, #372]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800544c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005450:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005458:	4959      	ldr	r1, [pc, #356]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800545a:	4313      	orrs	r3, r2
 800545c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005468:	2b00      	cmp	r3, #0
 800546a:	d00a      	beq.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800546c:	4b54      	ldr	r3, [pc, #336]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800546e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005472:	f023 0203 	bic.w	r2, r3, #3
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800547a:	4951      	ldr	r1, [pc, #324]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800547c:	4313      	orrs	r3, r2
 800547e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800548a:	2b00      	cmp	r3, #0
 800548c:	d00a      	beq.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800548e:	4b4c      	ldr	r3, [pc, #304]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005490:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005494:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800549c:	4948      	ldr	r1, [pc, #288]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800549e:	4313      	orrs	r3, r2
 80054a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d015      	beq.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80054b0:	4b43      	ldr	r3, [pc, #268]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054b6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054be:	4940      	ldr	r1, [pc, #256]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054c0:	4313      	orrs	r3, r2
 80054c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054ce:	d105      	bne.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80054d0:	4b3b      	ldr	r3, [pc, #236]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054d2:	68db      	ldr	r3, [r3, #12]
 80054d4:	4a3a      	ldr	r2, [pc, #232]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80054da:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d015      	beq.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80054e8:	4b35      	ldr	r3, [pc, #212]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054ee:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054f6:	4932      	ldr	r1, [pc, #200]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054f8:	4313      	orrs	r3, r2
 80054fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005502:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005506:	d105      	bne.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005508:	4b2d      	ldr	r3, [pc, #180]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800550a:	68db      	ldr	r3, [r3, #12]
 800550c:	4a2c      	ldr	r2, [pc, #176]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800550e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005512:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800551c:	2b00      	cmp	r3, #0
 800551e:	d015      	beq.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005520:	4b27      	ldr	r3, [pc, #156]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005522:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005526:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800552e:	4924      	ldr	r1, [pc, #144]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005530:	4313      	orrs	r3, r2
 8005532:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800553a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800553e:	d105      	bne.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005540:	4b1f      	ldr	r3, [pc, #124]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005542:	68db      	ldr	r3, [r3, #12]
 8005544:	4a1e      	ldr	r2, [pc, #120]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005546:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800554a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005554:	2b00      	cmp	r3, #0
 8005556:	d015      	beq.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005558:	4b19      	ldr	r3, [pc, #100]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800555a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800555e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005566:	4916      	ldr	r1, [pc, #88]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005568:	4313      	orrs	r3, r2
 800556a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005572:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005576:	d105      	bne.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005578:	4b11      	ldr	r3, [pc, #68]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800557a:	68db      	ldr	r3, [r3, #12]
 800557c:	4a10      	ldr	r2, [pc, #64]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800557e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005582:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800558c:	2b00      	cmp	r3, #0
 800558e:	d019      	beq.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005590:	4b0b      	ldr	r3, [pc, #44]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005592:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005596:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800559e:	4908      	ldr	r1, [pc, #32]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055a0:	4313      	orrs	r3, r2
 80055a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80055ae:	d109      	bne.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80055b0:	4b03      	ldr	r3, [pc, #12]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055b2:	68db      	ldr	r3, [r3, #12]
 80055b4:	4a02      	ldr	r2, [pc, #8]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80055ba:	60d3      	str	r3, [r2, #12]
 80055bc:	e002      	b.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80055be:	bf00      	nop
 80055c0:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d015      	beq.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80055d0:	4b29      	ldr	r3, [pc, #164]	; (8005678 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80055d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055d6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055de:	4926      	ldr	r1, [pc, #152]	; (8005678 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80055e0:	4313      	orrs	r3, r2
 80055e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80055ee:	d105      	bne.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80055f0:	4b21      	ldr	r3, [pc, #132]	; (8005678 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80055f2:	68db      	ldr	r3, [r3, #12]
 80055f4:	4a20      	ldr	r2, [pc, #128]	; (8005678 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80055f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055fa:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005604:	2b00      	cmp	r3, #0
 8005606:	d015      	beq.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005608:	4b1b      	ldr	r3, [pc, #108]	; (8005678 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800560a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800560e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005616:	4918      	ldr	r1, [pc, #96]	; (8005678 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005618:	4313      	orrs	r3, r2
 800561a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005622:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005626:	d105      	bne.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005628:	4b13      	ldr	r3, [pc, #76]	; (8005678 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800562a:	68db      	ldr	r3, [r3, #12]
 800562c:	4a12      	ldr	r2, [pc, #72]	; (8005678 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800562e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005632:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800563c:	2b00      	cmp	r3, #0
 800563e:	d015      	beq.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005640:	4b0d      	ldr	r3, [pc, #52]	; (8005678 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005642:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005646:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800564e:	490a      	ldr	r1, [pc, #40]	; (8005678 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005650:	4313      	orrs	r3, r2
 8005652:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800565a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800565e:	d105      	bne.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005660:	4b05      	ldr	r3, [pc, #20]	; (8005678 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005662:	68db      	ldr	r3, [r3, #12]
 8005664:	4a04      	ldr	r2, [pc, #16]	; (8005678 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005666:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800566a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800566c:	7cbb      	ldrb	r3, [r7, #18]
}
 800566e:	4618      	mov	r0, r3
 8005670:	3718      	adds	r7, #24
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}
 8005676:	bf00      	nop
 8005678:	40021000 	.word	0x40021000

0800567c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b082      	sub	sp, #8
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d101      	bne.n	800568e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800568a:	2301      	movs	r3, #1
 800568c:	e049      	b.n	8005722 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005694:	b2db      	uxtb	r3, r3
 8005696:	2b00      	cmp	r3, #0
 8005698:	d106      	bne.n	80056a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2200      	movs	r2, #0
 800569e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f7fc f96e 	bl	8001984 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2202      	movs	r2, #2
 80056ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681a      	ldr	r2, [r3, #0]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	3304      	adds	r3, #4
 80056b8:	4619      	mov	r1, r3
 80056ba:	4610      	mov	r0, r2
 80056bc:	f000 ff5e 	bl	800657c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2201      	movs	r2, #1
 80056c4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2201      	movs	r2, #1
 80056cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2201      	movs	r2, #1
 80056d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2201      	movs	r2, #1
 80056dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2201      	movs	r2, #1
 80056e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2201      	movs	r2, #1
 80056ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2201      	movs	r2, #1
 80056f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2201      	movs	r2, #1
 80056fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2201      	movs	r2, #1
 8005704:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2201      	movs	r2, #1
 800570c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2201      	movs	r2, #1
 8005714:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2201      	movs	r2, #1
 800571c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005720:	2300      	movs	r3, #0
}
 8005722:	4618      	mov	r0, r3
 8005724:	3708      	adds	r7, #8
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}
	...

0800572c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800572c:	b480      	push	{r7}
 800572e:	b085      	sub	sp, #20
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800573a:	b2db      	uxtb	r3, r3
 800573c:	2b01      	cmp	r3, #1
 800573e:	d001      	beq.n	8005744 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005740:	2301      	movs	r3, #1
 8005742:	e04c      	b.n	80057de <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2202      	movs	r2, #2
 8005748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a26      	ldr	r2, [pc, #152]	; (80057ec <HAL_TIM_Base_Start+0xc0>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d022      	beq.n	800579c <HAL_TIM_Base_Start+0x70>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800575e:	d01d      	beq.n	800579c <HAL_TIM_Base_Start+0x70>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a22      	ldr	r2, [pc, #136]	; (80057f0 <HAL_TIM_Base_Start+0xc4>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d018      	beq.n	800579c <HAL_TIM_Base_Start+0x70>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a21      	ldr	r2, [pc, #132]	; (80057f4 <HAL_TIM_Base_Start+0xc8>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d013      	beq.n	800579c <HAL_TIM_Base_Start+0x70>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a1f      	ldr	r2, [pc, #124]	; (80057f8 <HAL_TIM_Base_Start+0xcc>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d00e      	beq.n	800579c <HAL_TIM_Base_Start+0x70>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a1e      	ldr	r2, [pc, #120]	; (80057fc <HAL_TIM_Base_Start+0xd0>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d009      	beq.n	800579c <HAL_TIM_Base_Start+0x70>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a1c      	ldr	r2, [pc, #112]	; (8005800 <HAL_TIM_Base_Start+0xd4>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d004      	beq.n	800579c <HAL_TIM_Base_Start+0x70>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a1b      	ldr	r2, [pc, #108]	; (8005804 <HAL_TIM_Base_Start+0xd8>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d115      	bne.n	80057c8 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	689a      	ldr	r2, [r3, #8]
 80057a2:	4b19      	ldr	r3, [pc, #100]	; (8005808 <HAL_TIM_Base_Start+0xdc>)
 80057a4:	4013      	ands	r3, r2
 80057a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	2b06      	cmp	r3, #6
 80057ac:	d015      	beq.n	80057da <HAL_TIM_Base_Start+0xae>
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057b4:	d011      	beq.n	80057da <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	681a      	ldr	r2, [r3, #0]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f042 0201 	orr.w	r2, r2, #1
 80057c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057c6:	e008      	b.n	80057da <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	681a      	ldr	r2, [r3, #0]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f042 0201 	orr.w	r2, r2, #1
 80057d6:	601a      	str	r2, [r3, #0]
 80057d8:	e000      	b.n	80057dc <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057da:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80057dc:	2300      	movs	r3, #0
}
 80057de:	4618      	mov	r0, r3
 80057e0:	3714      	adds	r7, #20
 80057e2:	46bd      	mov	sp, r7
 80057e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e8:	4770      	bx	lr
 80057ea:	bf00      	nop
 80057ec:	40012c00 	.word	0x40012c00
 80057f0:	40000400 	.word	0x40000400
 80057f4:	40000800 	.word	0x40000800
 80057f8:	40000c00 	.word	0x40000c00
 80057fc:	40013400 	.word	0x40013400
 8005800:	40014000 	.word	0x40014000
 8005804:	40015000 	.word	0x40015000
 8005808:	00010007 	.word	0x00010007

0800580c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800580c:	b480      	push	{r7}
 800580e:	b085      	sub	sp, #20
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800581a:	b2db      	uxtb	r3, r3
 800581c:	2b01      	cmp	r3, #1
 800581e:	d001      	beq.n	8005824 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005820:	2301      	movs	r3, #1
 8005822:	e054      	b.n	80058ce <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2202      	movs	r2, #2
 8005828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	68da      	ldr	r2, [r3, #12]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f042 0201 	orr.w	r2, r2, #1
 800583a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a26      	ldr	r2, [pc, #152]	; (80058dc <HAL_TIM_Base_Start_IT+0xd0>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d022      	beq.n	800588c <HAL_TIM_Base_Start_IT+0x80>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800584e:	d01d      	beq.n	800588c <HAL_TIM_Base_Start_IT+0x80>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a22      	ldr	r2, [pc, #136]	; (80058e0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d018      	beq.n	800588c <HAL_TIM_Base_Start_IT+0x80>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a21      	ldr	r2, [pc, #132]	; (80058e4 <HAL_TIM_Base_Start_IT+0xd8>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d013      	beq.n	800588c <HAL_TIM_Base_Start_IT+0x80>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a1f      	ldr	r2, [pc, #124]	; (80058e8 <HAL_TIM_Base_Start_IT+0xdc>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d00e      	beq.n	800588c <HAL_TIM_Base_Start_IT+0x80>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a1e      	ldr	r2, [pc, #120]	; (80058ec <HAL_TIM_Base_Start_IT+0xe0>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d009      	beq.n	800588c <HAL_TIM_Base_Start_IT+0x80>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a1c      	ldr	r2, [pc, #112]	; (80058f0 <HAL_TIM_Base_Start_IT+0xe4>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d004      	beq.n	800588c <HAL_TIM_Base_Start_IT+0x80>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a1b      	ldr	r2, [pc, #108]	; (80058f4 <HAL_TIM_Base_Start_IT+0xe8>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d115      	bne.n	80058b8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	689a      	ldr	r2, [r3, #8]
 8005892:	4b19      	ldr	r3, [pc, #100]	; (80058f8 <HAL_TIM_Base_Start_IT+0xec>)
 8005894:	4013      	ands	r3, r2
 8005896:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	2b06      	cmp	r3, #6
 800589c:	d015      	beq.n	80058ca <HAL_TIM_Base_Start_IT+0xbe>
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058a4:	d011      	beq.n	80058ca <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	681a      	ldr	r2, [r3, #0]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f042 0201 	orr.w	r2, r2, #1
 80058b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058b6:	e008      	b.n	80058ca <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	681a      	ldr	r2, [r3, #0]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f042 0201 	orr.w	r2, r2, #1
 80058c6:	601a      	str	r2, [r3, #0]
 80058c8:	e000      	b.n	80058cc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058ca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80058cc:	2300      	movs	r3, #0
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	3714      	adds	r7, #20
 80058d2:	46bd      	mov	sp, r7
 80058d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d8:	4770      	bx	lr
 80058da:	bf00      	nop
 80058dc:	40012c00 	.word	0x40012c00
 80058e0:	40000400 	.word	0x40000400
 80058e4:	40000800 	.word	0x40000800
 80058e8:	40000c00 	.word	0x40000c00
 80058ec:	40013400 	.word	0x40013400
 80058f0:	40014000 	.word	0x40014000
 80058f4:	40015000 	.word	0x40015000
 80058f8:	00010007 	.word	0x00010007

080058fc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b082      	sub	sp, #8
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d101      	bne.n	800590e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800590a:	2301      	movs	r3, #1
 800590c:	e049      	b.n	80059a2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005914:	b2db      	uxtb	r3, r3
 8005916:	2b00      	cmp	r3, #0
 8005918:	d106      	bne.n	8005928 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2200      	movs	r2, #0
 800591e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f7fb fff4 	bl	8001910 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2202      	movs	r2, #2
 800592c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681a      	ldr	r2, [r3, #0]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	3304      	adds	r3, #4
 8005938:	4619      	mov	r1, r3
 800593a:	4610      	mov	r0, r2
 800593c:	f000 fe1e 	bl	800657c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2201      	movs	r2, #1
 8005944:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2201      	movs	r2, #1
 800594c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2201      	movs	r2, #1
 8005954:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2201      	movs	r2, #1
 800595c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2201      	movs	r2, #1
 8005964:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2201      	movs	r2, #1
 800596c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2201      	movs	r2, #1
 8005974:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2201      	movs	r2, #1
 800597c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2201      	movs	r2, #1
 8005984:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2201      	movs	r2, #1
 800598c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2201      	movs	r2, #1
 8005994:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2201      	movs	r2, #1
 800599c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80059a0:	2300      	movs	r3, #0
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	3708      	adds	r7, #8
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bd80      	pop	{r7, pc}
	...

080059ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b084      	sub	sp, #16
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
 80059b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d109      	bne.n	80059d0 <HAL_TIM_PWM_Start+0x24>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80059c2:	b2db      	uxtb	r3, r3
 80059c4:	2b01      	cmp	r3, #1
 80059c6:	bf14      	ite	ne
 80059c8:	2301      	movne	r3, #1
 80059ca:	2300      	moveq	r3, #0
 80059cc:	b2db      	uxtb	r3, r3
 80059ce:	e03c      	b.n	8005a4a <HAL_TIM_PWM_Start+0x9e>
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	2b04      	cmp	r3, #4
 80059d4:	d109      	bne.n	80059ea <HAL_TIM_PWM_Start+0x3e>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80059dc:	b2db      	uxtb	r3, r3
 80059de:	2b01      	cmp	r3, #1
 80059e0:	bf14      	ite	ne
 80059e2:	2301      	movne	r3, #1
 80059e4:	2300      	moveq	r3, #0
 80059e6:	b2db      	uxtb	r3, r3
 80059e8:	e02f      	b.n	8005a4a <HAL_TIM_PWM_Start+0x9e>
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	2b08      	cmp	r3, #8
 80059ee:	d109      	bne.n	8005a04 <HAL_TIM_PWM_Start+0x58>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80059f6:	b2db      	uxtb	r3, r3
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	bf14      	ite	ne
 80059fc:	2301      	movne	r3, #1
 80059fe:	2300      	moveq	r3, #0
 8005a00:	b2db      	uxtb	r3, r3
 8005a02:	e022      	b.n	8005a4a <HAL_TIM_PWM_Start+0x9e>
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	2b0c      	cmp	r3, #12
 8005a08:	d109      	bne.n	8005a1e <HAL_TIM_PWM_Start+0x72>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a10:	b2db      	uxtb	r3, r3
 8005a12:	2b01      	cmp	r3, #1
 8005a14:	bf14      	ite	ne
 8005a16:	2301      	movne	r3, #1
 8005a18:	2300      	moveq	r3, #0
 8005a1a:	b2db      	uxtb	r3, r3
 8005a1c:	e015      	b.n	8005a4a <HAL_TIM_PWM_Start+0x9e>
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	2b10      	cmp	r3, #16
 8005a22:	d109      	bne.n	8005a38 <HAL_TIM_PWM_Start+0x8c>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005a2a:	b2db      	uxtb	r3, r3
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	bf14      	ite	ne
 8005a30:	2301      	movne	r3, #1
 8005a32:	2300      	moveq	r3, #0
 8005a34:	b2db      	uxtb	r3, r3
 8005a36:	e008      	b.n	8005a4a <HAL_TIM_PWM_Start+0x9e>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005a3e:	b2db      	uxtb	r3, r3
 8005a40:	2b01      	cmp	r3, #1
 8005a42:	bf14      	ite	ne
 8005a44:	2301      	movne	r3, #1
 8005a46:	2300      	moveq	r3, #0
 8005a48:	b2db      	uxtb	r3, r3
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d001      	beq.n	8005a52 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	e0a6      	b.n	8005ba0 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d104      	bne.n	8005a62 <HAL_TIM_PWM_Start+0xb6>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2202      	movs	r2, #2
 8005a5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a60:	e023      	b.n	8005aaa <HAL_TIM_PWM_Start+0xfe>
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	2b04      	cmp	r3, #4
 8005a66:	d104      	bne.n	8005a72 <HAL_TIM_PWM_Start+0xc6>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2202      	movs	r2, #2
 8005a6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a70:	e01b      	b.n	8005aaa <HAL_TIM_PWM_Start+0xfe>
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	2b08      	cmp	r3, #8
 8005a76:	d104      	bne.n	8005a82 <HAL_TIM_PWM_Start+0xd6>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2202      	movs	r2, #2
 8005a7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a80:	e013      	b.n	8005aaa <HAL_TIM_PWM_Start+0xfe>
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	2b0c      	cmp	r3, #12
 8005a86:	d104      	bne.n	8005a92 <HAL_TIM_PWM_Start+0xe6>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2202      	movs	r2, #2
 8005a8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005a90:	e00b      	b.n	8005aaa <HAL_TIM_PWM_Start+0xfe>
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	2b10      	cmp	r3, #16
 8005a96:	d104      	bne.n	8005aa2 <HAL_TIM_PWM_Start+0xf6>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2202      	movs	r2, #2
 8005a9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005aa0:	e003      	b.n	8005aaa <HAL_TIM_PWM_Start+0xfe>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2202      	movs	r2, #2
 8005aa6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	2201      	movs	r2, #1
 8005ab0:	6839      	ldr	r1, [r7, #0]
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	f001 f9dc 	bl	8006e70 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a3a      	ldr	r2, [pc, #232]	; (8005ba8 <HAL_TIM_PWM_Start+0x1fc>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d018      	beq.n	8005af4 <HAL_TIM_PWM_Start+0x148>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a39      	ldr	r2, [pc, #228]	; (8005bac <HAL_TIM_PWM_Start+0x200>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d013      	beq.n	8005af4 <HAL_TIM_PWM_Start+0x148>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a37      	ldr	r2, [pc, #220]	; (8005bb0 <HAL_TIM_PWM_Start+0x204>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d00e      	beq.n	8005af4 <HAL_TIM_PWM_Start+0x148>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a36      	ldr	r2, [pc, #216]	; (8005bb4 <HAL_TIM_PWM_Start+0x208>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d009      	beq.n	8005af4 <HAL_TIM_PWM_Start+0x148>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a34      	ldr	r2, [pc, #208]	; (8005bb8 <HAL_TIM_PWM_Start+0x20c>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d004      	beq.n	8005af4 <HAL_TIM_PWM_Start+0x148>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a33      	ldr	r2, [pc, #204]	; (8005bbc <HAL_TIM_PWM_Start+0x210>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d101      	bne.n	8005af8 <HAL_TIM_PWM_Start+0x14c>
 8005af4:	2301      	movs	r3, #1
 8005af6:	e000      	b.n	8005afa <HAL_TIM_PWM_Start+0x14e>
 8005af8:	2300      	movs	r3, #0
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d007      	beq.n	8005b0e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005b0c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a25      	ldr	r2, [pc, #148]	; (8005ba8 <HAL_TIM_PWM_Start+0x1fc>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d022      	beq.n	8005b5e <HAL_TIM_PWM_Start+0x1b2>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b20:	d01d      	beq.n	8005b5e <HAL_TIM_PWM_Start+0x1b2>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a26      	ldr	r2, [pc, #152]	; (8005bc0 <HAL_TIM_PWM_Start+0x214>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d018      	beq.n	8005b5e <HAL_TIM_PWM_Start+0x1b2>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a24      	ldr	r2, [pc, #144]	; (8005bc4 <HAL_TIM_PWM_Start+0x218>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d013      	beq.n	8005b5e <HAL_TIM_PWM_Start+0x1b2>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a23      	ldr	r2, [pc, #140]	; (8005bc8 <HAL_TIM_PWM_Start+0x21c>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d00e      	beq.n	8005b5e <HAL_TIM_PWM_Start+0x1b2>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a19      	ldr	r2, [pc, #100]	; (8005bac <HAL_TIM_PWM_Start+0x200>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d009      	beq.n	8005b5e <HAL_TIM_PWM_Start+0x1b2>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a18      	ldr	r2, [pc, #96]	; (8005bb0 <HAL_TIM_PWM_Start+0x204>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d004      	beq.n	8005b5e <HAL_TIM_PWM_Start+0x1b2>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a18      	ldr	r2, [pc, #96]	; (8005bbc <HAL_TIM_PWM_Start+0x210>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d115      	bne.n	8005b8a <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	689a      	ldr	r2, [r3, #8]
 8005b64:	4b19      	ldr	r3, [pc, #100]	; (8005bcc <HAL_TIM_PWM_Start+0x220>)
 8005b66:	4013      	ands	r3, r2
 8005b68:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	2b06      	cmp	r3, #6
 8005b6e:	d015      	beq.n	8005b9c <HAL_TIM_PWM_Start+0x1f0>
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b76:	d011      	beq.n	8005b9c <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	681a      	ldr	r2, [r3, #0]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f042 0201 	orr.w	r2, r2, #1
 8005b86:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b88:	e008      	b.n	8005b9c <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	681a      	ldr	r2, [r3, #0]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f042 0201 	orr.w	r2, r2, #1
 8005b98:	601a      	str	r2, [r3, #0]
 8005b9a:	e000      	b.n	8005b9e <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b9c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005b9e:	2300      	movs	r3, #0
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	3710      	adds	r7, #16
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}
 8005ba8:	40012c00 	.word	0x40012c00
 8005bac:	40013400 	.word	0x40013400
 8005bb0:	40014000 	.word	0x40014000
 8005bb4:	40014400 	.word	0x40014400
 8005bb8:	40014800 	.word	0x40014800
 8005bbc:	40015000 	.word	0x40015000
 8005bc0:	40000400 	.word	0x40000400
 8005bc4:	40000800 	.word	0x40000800
 8005bc8:	40000c00 	.word	0x40000c00
 8005bcc:	00010007 	.word	0x00010007

08005bd0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b086      	sub	sp, #24
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
 8005bd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d101      	bne.n	8005be4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005be0:	2301      	movs	r3, #1
 8005be2:	e097      	b.n	8005d14 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bea:	b2db      	uxtb	r3, r3
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d106      	bne.n	8005bfe <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	f7fb ff17 	bl	8001a2c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2202      	movs	r2, #2
 8005c02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	689b      	ldr	r3, [r3, #8]
 8005c0c:	687a      	ldr	r2, [r7, #4]
 8005c0e:	6812      	ldr	r2, [r2, #0]
 8005c10:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8005c14:	f023 0307 	bic.w	r3, r3, #7
 8005c18:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681a      	ldr	r2, [r3, #0]
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	3304      	adds	r3, #4
 8005c22:	4619      	mov	r1, r3
 8005c24:	4610      	mov	r0, r2
 8005c26:	f000 fca9 	bl	800657c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	689b      	ldr	r3, [r3, #8]
 8005c30:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	699b      	ldr	r3, [r3, #24]
 8005c38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	6a1b      	ldr	r3, [r3, #32]
 8005c40:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	697a      	ldr	r2, [r7, #20]
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c52:	f023 0303 	bic.w	r3, r3, #3
 8005c56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	689a      	ldr	r2, [r3, #8]
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	699b      	ldr	r3, [r3, #24]
 8005c60:	021b      	lsls	r3, r3, #8
 8005c62:	4313      	orrs	r3, r2
 8005c64:	693a      	ldr	r2, [r7, #16]
 8005c66:	4313      	orrs	r3, r2
 8005c68:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005c70:	f023 030c 	bic.w	r3, r3, #12
 8005c74:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005c7c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c80:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	68da      	ldr	r2, [r3, #12]
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	69db      	ldr	r3, [r3, #28]
 8005c8a:	021b      	lsls	r3, r3, #8
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	693a      	ldr	r2, [r7, #16]
 8005c90:	4313      	orrs	r3, r2
 8005c92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	691b      	ldr	r3, [r3, #16]
 8005c98:	011a      	lsls	r2, r3, #4
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	6a1b      	ldr	r3, [r3, #32]
 8005c9e:	031b      	lsls	r3, r3, #12
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	693a      	ldr	r2, [r7, #16]
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005cae:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005cb6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	685a      	ldr	r2, [r3, #4]
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	695b      	ldr	r3, [r3, #20]
 8005cc0:	011b      	lsls	r3, r3, #4
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	68fa      	ldr	r2, [r7, #12]
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	697a      	ldr	r2, [r7, #20]
 8005cd0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	693a      	ldr	r2, [r7, #16]
 8005cd8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	68fa      	ldr	r2, [r7, #12]
 8005ce0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2201      	movs	r2, #1
 8005ce6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2201      	movs	r2, #1
 8005cee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2201      	movs	r2, #1
 8005cf6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2201      	movs	r2, #1
 8005cfe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2201      	movs	r2, #1
 8005d06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2201      	movs	r2, #1
 8005d0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d12:	2300      	movs	r3, #0
}
 8005d14:	4618      	mov	r0, r3
 8005d16:	3718      	adds	r7, #24
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}

08005d1c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b084      	sub	sp, #16
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
 8005d24:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d2c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005d34:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d3c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d44:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d110      	bne.n	8005d6e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005d4c:	7bfb      	ldrb	r3, [r7, #15]
 8005d4e:	2b01      	cmp	r3, #1
 8005d50:	d102      	bne.n	8005d58 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005d52:	7b7b      	ldrb	r3, [r7, #13]
 8005d54:	2b01      	cmp	r3, #1
 8005d56:	d001      	beq.n	8005d5c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005d58:	2301      	movs	r3, #1
 8005d5a:	e069      	b.n	8005e30 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2202      	movs	r2, #2
 8005d60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2202      	movs	r2, #2
 8005d68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d6c:	e031      	b.n	8005dd2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	2b04      	cmp	r3, #4
 8005d72:	d110      	bne.n	8005d96 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005d74:	7bbb      	ldrb	r3, [r7, #14]
 8005d76:	2b01      	cmp	r3, #1
 8005d78:	d102      	bne.n	8005d80 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005d7a:	7b3b      	ldrb	r3, [r7, #12]
 8005d7c:	2b01      	cmp	r3, #1
 8005d7e:	d001      	beq.n	8005d84 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005d80:	2301      	movs	r3, #1
 8005d82:	e055      	b.n	8005e30 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2202      	movs	r2, #2
 8005d88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2202      	movs	r2, #2
 8005d90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d94:	e01d      	b.n	8005dd2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005d96:	7bfb      	ldrb	r3, [r7, #15]
 8005d98:	2b01      	cmp	r3, #1
 8005d9a:	d108      	bne.n	8005dae <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005d9c:	7bbb      	ldrb	r3, [r7, #14]
 8005d9e:	2b01      	cmp	r3, #1
 8005da0:	d105      	bne.n	8005dae <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005da2:	7b7b      	ldrb	r3, [r7, #13]
 8005da4:	2b01      	cmp	r3, #1
 8005da6:	d102      	bne.n	8005dae <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005da8:	7b3b      	ldrb	r3, [r7, #12]
 8005daa:	2b01      	cmp	r3, #1
 8005dac:	d001      	beq.n	8005db2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005dae:	2301      	movs	r3, #1
 8005db0:	e03e      	b.n	8005e30 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2202      	movs	r2, #2
 8005db6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2202      	movs	r2, #2
 8005dbe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2202      	movs	r2, #2
 8005dc6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2202      	movs	r2, #2
 8005dce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d003      	beq.n	8005de0 <HAL_TIM_Encoder_Start+0xc4>
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	2b04      	cmp	r3, #4
 8005ddc:	d008      	beq.n	8005df0 <HAL_TIM_Encoder_Start+0xd4>
 8005dde:	e00f      	b.n	8005e00 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	2201      	movs	r2, #1
 8005de6:	2100      	movs	r1, #0
 8005de8:	4618      	mov	r0, r3
 8005dea:	f001 f841 	bl	8006e70 <TIM_CCxChannelCmd>
      break;
 8005dee:	e016      	b.n	8005e1e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	2201      	movs	r2, #1
 8005df6:	2104      	movs	r1, #4
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f001 f839 	bl	8006e70 <TIM_CCxChannelCmd>
      break;
 8005dfe:	e00e      	b.n	8005e1e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	2201      	movs	r2, #1
 8005e06:	2100      	movs	r1, #0
 8005e08:	4618      	mov	r0, r3
 8005e0a:	f001 f831 	bl	8006e70 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	2201      	movs	r2, #1
 8005e14:	2104      	movs	r1, #4
 8005e16:	4618      	mov	r0, r3
 8005e18:	f001 f82a 	bl	8006e70 <TIM_CCxChannelCmd>
      break;
 8005e1c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	681a      	ldr	r2, [r3, #0]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f042 0201 	orr.w	r2, r2, #1
 8005e2c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005e2e:	2300      	movs	r3, #0
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	3710      	adds	r7, #16
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}

08005e38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b084      	sub	sp, #16
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	68db      	ldr	r3, [r3, #12]
 8005e46:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	691b      	ldr	r3, [r3, #16]
 8005e4e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	f003 0302 	and.w	r3, r3, #2
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d020      	beq.n	8005e9c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	f003 0302 	and.w	r3, r3, #2
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d01b      	beq.n	8005e9c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f06f 0202 	mvn.w	r2, #2
 8005e6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2201      	movs	r2, #1
 8005e72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	699b      	ldr	r3, [r3, #24]
 8005e7a:	f003 0303 	and.w	r3, r3, #3
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d003      	beq.n	8005e8a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	f000 fb5c 	bl	8006540 <HAL_TIM_IC_CaptureCallback>
 8005e88:	e005      	b.n	8005e96 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f000 fb4e 	bl	800652c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	f000 fb5f 	bl	8006554 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	f003 0304 	and.w	r3, r3, #4
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d020      	beq.n	8005ee8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	f003 0304 	and.w	r3, r3, #4
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d01b      	beq.n	8005ee8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f06f 0204 	mvn.w	r2, #4
 8005eb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2202      	movs	r2, #2
 8005ebe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	699b      	ldr	r3, [r3, #24]
 8005ec6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d003      	beq.n	8005ed6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	f000 fb36 	bl	8006540 <HAL_TIM_IC_CaptureCallback>
 8005ed4:	e005      	b.n	8005ee2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f000 fb28 	bl	800652c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005edc:	6878      	ldr	r0, [r7, #4]
 8005ede:	f000 fb39 	bl	8006554 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	f003 0308 	and.w	r3, r3, #8
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d020      	beq.n	8005f34 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	f003 0308 	and.w	r3, r3, #8
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d01b      	beq.n	8005f34 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f06f 0208 	mvn.w	r2, #8
 8005f04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2204      	movs	r2, #4
 8005f0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	69db      	ldr	r3, [r3, #28]
 8005f12:	f003 0303 	and.w	r3, r3, #3
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d003      	beq.n	8005f22 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f000 fb10 	bl	8006540 <HAL_TIM_IC_CaptureCallback>
 8005f20:	e005      	b.n	8005f2e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f000 fb02 	bl	800652c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f000 fb13 	bl	8006554 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2200      	movs	r2, #0
 8005f32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	f003 0310 	and.w	r3, r3, #16
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d020      	beq.n	8005f80 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	f003 0310 	and.w	r3, r3, #16
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d01b      	beq.n	8005f80 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f06f 0210 	mvn.w	r2, #16
 8005f50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2208      	movs	r2, #8
 8005f56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	69db      	ldr	r3, [r3, #28]
 8005f5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d003      	beq.n	8005f6e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	f000 faea 	bl	8006540 <HAL_TIM_IC_CaptureCallback>
 8005f6c:	e005      	b.n	8005f7a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f000 fadc 	bl	800652c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f74:	6878      	ldr	r0, [r7, #4]
 8005f76:	f000 faed 	bl	8006554 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	f003 0301 	and.w	r3, r3, #1
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d00c      	beq.n	8005fa4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	f003 0301 	and.w	r3, r3, #1
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d007      	beq.n	8005fa4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f06f 0201 	mvn.w	r2, #1
 8005f9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f7fa ffb8 	bl	8000f14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d104      	bne.n	8005fb8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d00c      	beq.n	8005fd2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d007      	beq.n	8005fd2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8005fca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005fcc:	6878      	ldr	r0, [r7, #4]
 8005fce:	f001 f8a9 	bl	8007124 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d00c      	beq.n	8005ff6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d007      	beq.n	8005ff6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005fee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	f001 f8a1 	bl	8007138 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d00c      	beq.n	800601a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006006:	2b00      	cmp	r3, #0
 8006008:	d007      	beq.n	800601a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006012:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f000 faa7 	bl	8006568 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	f003 0320 	and.w	r3, r3, #32
 8006020:	2b00      	cmp	r3, #0
 8006022:	d00c      	beq.n	800603e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	f003 0320 	and.w	r3, r3, #32
 800602a:	2b00      	cmp	r3, #0
 800602c:	d007      	beq.n	800603e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f06f 0220 	mvn.w	r2, #32
 8006036:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	f001 f869 	bl	8007110 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006044:	2b00      	cmp	r3, #0
 8006046:	d00c      	beq.n	8006062 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800604e:	2b00      	cmp	r3, #0
 8006050:	d007      	beq.n	8006062 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800605a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	f001 f875 	bl	800714c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006068:	2b00      	cmp	r3, #0
 800606a:	d00c      	beq.n	8006086 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006072:	2b00      	cmp	r3, #0
 8006074:	d007      	beq.n	8006086 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800607e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	f001 f86d 	bl	8007160 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800608c:	2b00      	cmp	r3, #0
 800608e:	d00c      	beq.n	80060aa <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006096:	2b00      	cmp	r3, #0
 8006098:	d007      	beq.n	80060aa <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80060a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	f001 f865 	bl	8007174 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d00c      	beq.n	80060ce <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d007      	beq.n	80060ce <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80060c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	f001 f85d 	bl	8007188 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80060ce:	bf00      	nop
 80060d0:	3710      	adds	r7, #16
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd80      	pop	{r7, pc}
	...

080060d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b086      	sub	sp, #24
 80060dc:	af00      	add	r7, sp, #0
 80060de:	60f8      	str	r0, [r7, #12]
 80060e0:	60b9      	str	r1, [r7, #8]
 80060e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80060e4:	2300      	movs	r3, #0
 80060e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060ee:	2b01      	cmp	r3, #1
 80060f0:	d101      	bne.n	80060f6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80060f2:	2302      	movs	r3, #2
 80060f4:	e0ff      	b.n	80062f6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	2201      	movs	r2, #1
 80060fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2b14      	cmp	r3, #20
 8006102:	f200 80f0 	bhi.w	80062e6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006106:	a201      	add	r2, pc, #4	; (adr r2, 800610c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800610c:	08006161 	.word	0x08006161
 8006110:	080062e7 	.word	0x080062e7
 8006114:	080062e7 	.word	0x080062e7
 8006118:	080062e7 	.word	0x080062e7
 800611c:	080061a1 	.word	0x080061a1
 8006120:	080062e7 	.word	0x080062e7
 8006124:	080062e7 	.word	0x080062e7
 8006128:	080062e7 	.word	0x080062e7
 800612c:	080061e3 	.word	0x080061e3
 8006130:	080062e7 	.word	0x080062e7
 8006134:	080062e7 	.word	0x080062e7
 8006138:	080062e7 	.word	0x080062e7
 800613c:	08006223 	.word	0x08006223
 8006140:	080062e7 	.word	0x080062e7
 8006144:	080062e7 	.word	0x080062e7
 8006148:	080062e7 	.word	0x080062e7
 800614c:	08006265 	.word	0x08006265
 8006150:	080062e7 	.word	0x080062e7
 8006154:	080062e7 	.word	0x080062e7
 8006158:	080062e7 	.word	0x080062e7
 800615c:	080062a5 	.word	0x080062a5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	68b9      	ldr	r1, [r7, #8]
 8006166:	4618      	mov	r0, r3
 8006168:	f000 fabc 	bl	80066e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	699a      	ldr	r2, [r3, #24]
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f042 0208 	orr.w	r2, r2, #8
 800617a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	699a      	ldr	r2, [r3, #24]
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f022 0204 	bic.w	r2, r2, #4
 800618a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	6999      	ldr	r1, [r3, #24]
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	691a      	ldr	r2, [r3, #16]
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	430a      	orrs	r2, r1
 800619c:	619a      	str	r2, [r3, #24]
      break;
 800619e:	e0a5      	b.n	80062ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	68b9      	ldr	r1, [r7, #8]
 80061a6:	4618      	mov	r0, r3
 80061a8:	f000 fb36 	bl	8006818 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	699a      	ldr	r2, [r3, #24]
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80061ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	699a      	ldr	r2, [r3, #24]
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	6999      	ldr	r1, [r3, #24]
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	691b      	ldr	r3, [r3, #16]
 80061d6:	021a      	lsls	r2, r3, #8
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	430a      	orrs	r2, r1
 80061de:	619a      	str	r2, [r3, #24]
      break;
 80061e0:	e084      	b.n	80062ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	68b9      	ldr	r1, [r7, #8]
 80061e8:	4618      	mov	r0, r3
 80061ea:	f000 fba9 	bl	8006940 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	69da      	ldr	r2, [r3, #28]
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f042 0208 	orr.w	r2, r2, #8
 80061fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	69da      	ldr	r2, [r3, #28]
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f022 0204 	bic.w	r2, r2, #4
 800620c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	69d9      	ldr	r1, [r3, #28]
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	691a      	ldr	r2, [r3, #16]
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	430a      	orrs	r2, r1
 800621e:	61da      	str	r2, [r3, #28]
      break;
 8006220:	e064      	b.n	80062ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	68b9      	ldr	r1, [r7, #8]
 8006228:	4618      	mov	r0, r3
 800622a:	f000 fc1b 	bl	8006a64 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	69da      	ldr	r2, [r3, #28]
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800623c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	69da      	ldr	r2, [r3, #28]
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800624c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	69d9      	ldr	r1, [r3, #28]
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	691b      	ldr	r3, [r3, #16]
 8006258:	021a      	lsls	r2, r3, #8
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	430a      	orrs	r2, r1
 8006260:	61da      	str	r2, [r3, #28]
      break;
 8006262:	e043      	b.n	80062ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	68b9      	ldr	r1, [r7, #8]
 800626a:	4618      	mov	r0, r3
 800626c:	f000 fc8e 	bl	8006b8c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f042 0208 	orr.w	r2, r2, #8
 800627e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f022 0204 	bic.w	r2, r2, #4
 800628e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	691a      	ldr	r2, [r3, #16]
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	430a      	orrs	r2, r1
 80062a0:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80062a2:	e023      	b.n	80062ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	68b9      	ldr	r1, [r7, #8]
 80062aa:	4618      	mov	r0, r3
 80062ac:	f000 fcd8 	bl	8006c60 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80062be:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062ce:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	691b      	ldr	r3, [r3, #16]
 80062da:	021a      	lsls	r2, r3, #8
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	430a      	orrs	r2, r1
 80062e2:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80062e4:	e002      	b.n	80062ec <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80062e6:	2301      	movs	r3, #1
 80062e8:	75fb      	strb	r3, [r7, #23]
      break;
 80062ea:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	2200      	movs	r2, #0
 80062f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80062f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	3718      	adds	r7, #24
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bd80      	pop	{r7, pc}
 80062fe:	bf00      	nop

08006300 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b084      	sub	sp, #16
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
 8006308:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800630a:	2300      	movs	r3, #0
 800630c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006314:	2b01      	cmp	r3, #1
 8006316:	d101      	bne.n	800631c <HAL_TIM_ConfigClockSource+0x1c>
 8006318:	2302      	movs	r3, #2
 800631a:	e0f6      	b.n	800650a <HAL_TIM_ConfigClockSource+0x20a>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2201      	movs	r2, #1
 8006320:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2202      	movs	r2, #2
 8006328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	689b      	ldr	r3, [r3, #8]
 8006332:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800633a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800633e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006346:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	68ba      	ldr	r2, [r7, #8]
 800634e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a6f      	ldr	r2, [pc, #444]	; (8006514 <HAL_TIM_ConfigClockSource+0x214>)
 8006356:	4293      	cmp	r3, r2
 8006358:	f000 80c1 	beq.w	80064de <HAL_TIM_ConfigClockSource+0x1de>
 800635c:	4a6d      	ldr	r2, [pc, #436]	; (8006514 <HAL_TIM_ConfigClockSource+0x214>)
 800635e:	4293      	cmp	r3, r2
 8006360:	f200 80c6 	bhi.w	80064f0 <HAL_TIM_ConfigClockSource+0x1f0>
 8006364:	4a6c      	ldr	r2, [pc, #432]	; (8006518 <HAL_TIM_ConfigClockSource+0x218>)
 8006366:	4293      	cmp	r3, r2
 8006368:	f000 80b9 	beq.w	80064de <HAL_TIM_ConfigClockSource+0x1de>
 800636c:	4a6a      	ldr	r2, [pc, #424]	; (8006518 <HAL_TIM_ConfigClockSource+0x218>)
 800636e:	4293      	cmp	r3, r2
 8006370:	f200 80be 	bhi.w	80064f0 <HAL_TIM_ConfigClockSource+0x1f0>
 8006374:	4a69      	ldr	r2, [pc, #420]	; (800651c <HAL_TIM_ConfigClockSource+0x21c>)
 8006376:	4293      	cmp	r3, r2
 8006378:	f000 80b1 	beq.w	80064de <HAL_TIM_ConfigClockSource+0x1de>
 800637c:	4a67      	ldr	r2, [pc, #412]	; (800651c <HAL_TIM_ConfigClockSource+0x21c>)
 800637e:	4293      	cmp	r3, r2
 8006380:	f200 80b6 	bhi.w	80064f0 <HAL_TIM_ConfigClockSource+0x1f0>
 8006384:	4a66      	ldr	r2, [pc, #408]	; (8006520 <HAL_TIM_ConfigClockSource+0x220>)
 8006386:	4293      	cmp	r3, r2
 8006388:	f000 80a9 	beq.w	80064de <HAL_TIM_ConfigClockSource+0x1de>
 800638c:	4a64      	ldr	r2, [pc, #400]	; (8006520 <HAL_TIM_ConfigClockSource+0x220>)
 800638e:	4293      	cmp	r3, r2
 8006390:	f200 80ae 	bhi.w	80064f0 <HAL_TIM_ConfigClockSource+0x1f0>
 8006394:	4a63      	ldr	r2, [pc, #396]	; (8006524 <HAL_TIM_ConfigClockSource+0x224>)
 8006396:	4293      	cmp	r3, r2
 8006398:	f000 80a1 	beq.w	80064de <HAL_TIM_ConfigClockSource+0x1de>
 800639c:	4a61      	ldr	r2, [pc, #388]	; (8006524 <HAL_TIM_ConfigClockSource+0x224>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	f200 80a6 	bhi.w	80064f0 <HAL_TIM_ConfigClockSource+0x1f0>
 80063a4:	4a60      	ldr	r2, [pc, #384]	; (8006528 <HAL_TIM_ConfigClockSource+0x228>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	f000 8099 	beq.w	80064de <HAL_TIM_ConfigClockSource+0x1de>
 80063ac:	4a5e      	ldr	r2, [pc, #376]	; (8006528 <HAL_TIM_ConfigClockSource+0x228>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	f200 809e 	bhi.w	80064f0 <HAL_TIM_ConfigClockSource+0x1f0>
 80063b4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80063b8:	f000 8091 	beq.w	80064de <HAL_TIM_ConfigClockSource+0x1de>
 80063bc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80063c0:	f200 8096 	bhi.w	80064f0 <HAL_TIM_ConfigClockSource+0x1f0>
 80063c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80063c8:	f000 8089 	beq.w	80064de <HAL_TIM_ConfigClockSource+0x1de>
 80063cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80063d0:	f200 808e 	bhi.w	80064f0 <HAL_TIM_ConfigClockSource+0x1f0>
 80063d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063d8:	d03e      	beq.n	8006458 <HAL_TIM_ConfigClockSource+0x158>
 80063da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063de:	f200 8087 	bhi.w	80064f0 <HAL_TIM_ConfigClockSource+0x1f0>
 80063e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063e6:	f000 8086 	beq.w	80064f6 <HAL_TIM_ConfigClockSource+0x1f6>
 80063ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063ee:	d87f      	bhi.n	80064f0 <HAL_TIM_ConfigClockSource+0x1f0>
 80063f0:	2b70      	cmp	r3, #112	; 0x70
 80063f2:	d01a      	beq.n	800642a <HAL_TIM_ConfigClockSource+0x12a>
 80063f4:	2b70      	cmp	r3, #112	; 0x70
 80063f6:	d87b      	bhi.n	80064f0 <HAL_TIM_ConfigClockSource+0x1f0>
 80063f8:	2b60      	cmp	r3, #96	; 0x60
 80063fa:	d050      	beq.n	800649e <HAL_TIM_ConfigClockSource+0x19e>
 80063fc:	2b60      	cmp	r3, #96	; 0x60
 80063fe:	d877      	bhi.n	80064f0 <HAL_TIM_ConfigClockSource+0x1f0>
 8006400:	2b50      	cmp	r3, #80	; 0x50
 8006402:	d03c      	beq.n	800647e <HAL_TIM_ConfigClockSource+0x17e>
 8006404:	2b50      	cmp	r3, #80	; 0x50
 8006406:	d873      	bhi.n	80064f0 <HAL_TIM_ConfigClockSource+0x1f0>
 8006408:	2b40      	cmp	r3, #64	; 0x40
 800640a:	d058      	beq.n	80064be <HAL_TIM_ConfigClockSource+0x1be>
 800640c:	2b40      	cmp	r3, #64	; 0x40
 800640e:	d86f      	bhi.n	80064f0 <HAL_TIM_ConfigClockSource+0x1f0>
 8006410:	2b30      	cmp	r3, #48	; 0x30
 8006412:	d064      	beq.n	80064de <HAL_TIM_ConfigClockSource+0x1de>
 8006414:	2b30      	cmp	r3, #48	; 0x30
 8006416:	d86b      	bhi.n	80064f0 <HAL_TIM_ConfigClockSource+0x1f0>
 8006418:	2b20      	cmp	r3, #32
 800641a:	d060      	beq.n	80064de <HAL_TIM_ConfigClockSource+0x1de>
 800641c:	2b20      	cmp	r3, #32
 800641e:	d867      	bhi.n	80064f0 <HAL_TIM_ConfigClockSource+0x1f0>
 8006420:	2b00      	cmp	r3, #0
 8006422:	d05c      	beq.n	80064de <HAL_TIM_ConfigClockSource+0x1de>
 8006424:	2b10      	cmp	r3, #16
 8006426:	d05a      	beq.n	80064de <HAL_TIM_ConfigClockSource+0x1de>
 8006428:	e062      	b.n	80064f0 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800643a:	f000 fcf9 	bl	8006e30 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	689b      	ldr	r3, [r3, #8]
 8006444:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800644c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	68ba      	ldr	r2, [r7, #8]
 8006454:	609a      	str	r2, [r3, #8]
      break;
 8006456:	e04f      	b.n	80064f8 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006468:	f000 fce2 	bl	8006e30 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	689a      	ldr	r2, [r3, #8]
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800647a:	609a      	str	r2, [r3, #8]
      break;
 800647c:	e03c      	b.n	80064f8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800648a:	461a      	mov	r2, r3
 800648c:	f000 fc54 	bl	8006d38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	2150      	movs	r1, #80	; 0x50
 8006496:	4618      	mov	r0, r3
 8006498:	f000 fcad 	bl	8006df6 <TIM_ITRx_SetConfig>
      break;
 800649c:	e02c      	b.n	80064f8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80064aa:	461a      	mov	r2, r3
 80064ac:	f000 fc73 	bl	8006d96 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	2160      	movs	r1, #96	; 0x60
 80064b6:	4618      	mov	r0, r3
 80064b8:	f000 fc9d 	bl	8006df6 <TIM_ITRx_SetConfig>
      break;
 80064bc:	e01c      	b.n	80064f8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80064ca:	461a      	mov	r2, r3
 80064cc:	f000 fc34 	bl	8006d38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	2140      	movs	r1, #64	; 0x40
 80064d6:	4618      	mov	r0, r3
 80064d8:	f000 fc8d 	bl	8006df6 <TIM_ITRx_SetConfig>
      break;
 80064dc:	e00c      	b.n	80064f8 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681a      	ldr	r2, [r3, #0]
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4619      	mov	r1, r3
 80064e8:	4610      	mov	r0, r2
 80064ea:	f000 fc84 	bl	8006df6 <TIM_ITRx_SetConfig>
      break;
 80064ee:	e003      	b.n	80064f8 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 80064f0:	2301      	movs	r3, #1
 80064f2:	73fb      	strb	r3, [r7, #15]
      break;
 80064f4:	e000      	b.n	80064f8 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80064f6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2201      	movs	r2, #1
 80064fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2200      	movs	r2, #0
 8006504:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006508:	7bfb      	ldrb	r3, [r7, #15]
}
 800650a:	4618      	mov	r0, r3
 800650c:	3710      	adds	r7, #16
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}
 8006512:	bf00      	nop
 8006514:	00100070 	.word	0x00100070
 8006518:	00100060 	.word	0x00100060
 800651c:	00100050 	.word	0x00100050
 8006520:	00100040 	.word	0x00100040
 8006524:	00100030 	.word	0x00100030
 8006528:	00100020 	.word	0x00100020

0800652c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800652c:	b480      	push	{r7}
 800652e:	b083      	sub	sp, #12
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006534:	bf00      	nop
 8006536:	370c      	adds	r7, #12
 8006538:	46bd      	mov	sp, r7
 800653a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653e:	4770      	bx	lr

08006540 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006540:	b480      	push	{r7}
 8006542:	b083      	sub	sp, #12
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006548:	bf00      	nop
 800654a:	370c      	adds	r7, #12
 800654c:	46bd      	mov	sp, r7
 800654e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006552:	4770      	bx	lr

08006554 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006554:	b480      	push	{r7}
 8006556:	b083      	sub	sp, #12
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800655c:	bf00      	nop
 800655e:	370c      	adds	r7, #12
 8006560:	46bd      	mov	sp, r7
 8006562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006566:	4770      	bx	lr

08006568 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006568:	b480      	push	{r7}
 800656a:	b083      	sub	sp, #12
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006570:	bf00      	nop
 8006572:	370c      	adds	r7, #12
 8006574:	46bd      	mov	sp, r7
 8006576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657a:	4770      	bx	lr

0800657c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800657c:	b480      	push	{r7}
 800657e:	b085      	sub	sp, #20
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
 8006584:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	4a4c      	ldr	r2, [pc, #304]	; (80066c0 <TIM_Base_SetConfig+0x144>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d017      	beq.n	80065c4 <TIM_Base_SetConfig+0x48>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800659a:	d013      	beq.n	80065c4 <TIM_Base_SetConfig+0x48>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	4a49      	ldr	r2, [pc, #292]	; (80066c4 <TIM_Base_SetConfig+0x148>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d00f      	beq.n	80065c4 <TIM_Base_SetConfig+0x48>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	4a48      	ldr	r2, [pc, #288]	; (80066c8 <TIM_Base_SetConfig+0x14c>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d00b      	beq.n	80065c4 <TIM_Base_SetConfig+0x48>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	4a47      	ldr	r2, [pc, #284]	; (80066cc <TIM_Base_SetConfig+0x150>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d007      	beq.n	80065c4 <TIM_Base_SetConfig+0x48>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	4a46      	ldr	r2, [pc, #280]	; (80066d0 <TIM_Base_SetConfig+0x154>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d003      	beq.n	80065c4 <TIM_Base_SetConfig+0x48>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	4a45      	ldr	r2, [pc, #276]	; (80066d4 <TIM_Base_SetConfig+0x158>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d108      	bne.n	80065d6 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	685b      	ldr	r3, [r3, #4]
 80065d0:	68fa      	ldr	r2, [r7, #12]
 80065d2:	4313      	orrs	r3, r2
 80065d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	4a39      	ldr	r2, [pc, #228]	; (80066c0 <TIM_Base_SetConfig+0x144>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d023      	beq.n	8006626 <TIM_Base_SetConfig+0xaa>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065e4:	d01f      	beq.n	8006626 <TIM_Base_SetConfig+0xaa>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	4a36      	ldr	r2, [pc, #216]	; (80066c4 <TIM_Base_SetConfig+0x148>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d01b      	beq.n	8006626 <TIM_Base_SetConfig+0xaa>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	4a35      	ldr	r2, [pc, #212]	; (80066c8 <TIM_Base_SetConfig+0x14c>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d017      	beq.n	8006626 <TIM_Base_SetConfig+0xaa>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	4a34      	ldr	r2, [pc, #208]	; (80066cc <TIM_Base_SetConfig+0x150>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d013      	beq.n	8006626 <TIM_Base_SetConfig+0xaa>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	4a33      	ldr	r2, [pc, #204]	; (80066d0 <TIM_Base_SetConfig+0x154>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d00f      	beq.n	8006626 <TIM_Base_SetConfig+0xaa>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	4a33      	ldr	r2, [pc, #204]	; (80066d8 <TIM_Base_SetConfig+0x15c>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d00b      	beq.n	8006626 <TIM_Base_SetConfig+0xaa>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	4a32      	ldr	r2, [pc, #200]	; (80066dc <TIM_Base_SetConfig+0x160>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d007      	beq.n	8006626 <TIM_Base_SetConfig+0xaa>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	4a31      	ldr	r2, [pc, #196]	; (80066e0 <TIM_Base_SetConfig+0x164>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d003      	beq.n	8006626 <TIM_Base_SetConfig+0xaa>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	4a2c      	ldr	r2, [pc, #176]	; (80066d4 <TIM_Base_SetConfig+0x158>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d108      	bne.n	8006638 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800662c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	68db      	ldr	r3, [r3, #12]
 8006632:	68fa      	ldr	r2, [r7, #12]
 8006634:	4313      	orrs	r3, r2
 8006636:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	695b      	ldr	r3, [r3, #20]
 8006642:	4313      	orrs	r3, r2
 8006644:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	68fa      	ldr	r2, [r7, #12]
 800664a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	689a      	ldr	r2, [r3, #8]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	681a      	ldr	r2, [r3, #0]
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	4a18      	ldr	r2, [pc, #96]	; (80066c0 <TIM_Base_SetConfig+0x144>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d013      	beq.n	800668c <TIM_Base_SetConfig+0x110>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	4a1a      	ldr	r2, [pc, #104]	; (80066d0 <TIM_Base_SetConfig+0x154>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d00f      	beq.n	800668c <TIM_Base_SetConfig+0x110>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	4a1a      	ldr	r2, [pc, #104]	; (80066d8 <TIM_Base_SetConfig+0x15c>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d00b      	beq.n	800668c <TIM_Base_SetConfig+0x110>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	4a19      	ldr	r2, [pc, #100]	; (80066dc <TIM_Base_SetConfig+0x160>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d007      	beq.n	800668c <TIM_Base_SetConfig+0x110>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	4a18      	ldr	r2, [pc, #96]	; (80066e0 <TIM_Base_SetConfig+0x164>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d003      	beq.n	800668c <TIM_Base_SetConfig+0x110>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	4a13      	ldr	r2, [pc, #76]	; (80066d4 <TIM_Base_SetConfig+0x158>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d103      	bne.n	8006694 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	691a      	ldr	r2, [r3, #16]
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2201      	movs	r2, #1
 8006698:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	691b      	ldr	r3, [r3, #16]
 800669e:	f003 0301 	and.w	r3, r3, #1
 80066a2:	2b01      	cmp	r3, #1
 80066a4:	d105      	bne.n	80066b2 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	691b      	ldr	r3, [r3, #16]
 80066aa:	f023 0201 	bic.w	r2, r3, #1
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	611a      	str	r2, [r3, #16]
  }
}
 80066b2:	bf00      	nop
 80066b4:	3714      	adds	r7, #20
 80066b6:	46bd      	mov	sp, r7
 80066b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066bc:	4770      	bx	lr
 80066be:	bf00      	nop
 80066c0:	40012c00 	.word	0x40012c00
 80066c4:	40000400 	.word	0x40000400
 80066c8:	40000800 	.word	0x40000800
 80066cc:	40000c00 	.word	0x40000c00
 80066d0:	40013400 	.word	0x40013400
 80066d4:	40015000 	.word	0x40015000
 80066d8:	40014000 	.word	0x40014000
 80066dc:	40014400 	.word	0x40014400
 80066e0:	40014800 	.word	0x40014800

080066e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80066e4:	b480      	push	{r7}
 80066e6:	b087      	sub	sp, #28
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
 80066ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6a1b      	ldr	r3, [r3, #32]
 80066f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6a1b      	ldr	r3, [r3, #32]
 80066f8:	f023 0201 	bic.w	r2, r3, #1
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	699b      	ldr	r3, [r3, #24]
 800670a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006712:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006716:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	f023 0303 	bic.w	r3, r3, #3
 800671e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	68fa      	ldr	r2, [r7, #12]
 8006726:	4313      	orrs	r3, r2
 8006728:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	f023 0302 	bic.w	r3, r3, #2
 8006730:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	689b      	ldr	r3, [r3, #8]
 8006736:	697a      	ldr	r2, [r7, #20]
 8006738:	4313      	orrs	r3, r2
 800673a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	4a30      	ldr	r2, [pc, #192]	; (8006800 <TIM_OC1_SetConfig+0x11c>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d013      	beq.n	800676c <TIM_OC1_SetConfig+0x88>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	4a2f      	ldr	r2, [pc, #188]	; (8006804 <TIM_OC1_SetConfig+0x120>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d00f      	beq.n	800676c <TIM_OC1_SetConfig+0x88>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	4a2e      	ldr	r2, [pc, #184]	; (8006808 <TIM_OC1_SetConfig+0x124>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d00b      	beq.n	800676c <TIM_OC1_SetConfig+0x88>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	4a2d      	ldr	r2, [pc, #180]	; (800680c <TIM_OC1_SetConfig+0x128>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d007      	beq.n	800676c <TIM_OC1_SetConfig+0x88>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	4a2c      	ldr	r2, [pc, #176]	; (8006810 <TIM_OC1_SetConfig+0x12c>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d003      	beq.n	800676c <TIM_OC1_SetConfig+0x88>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	4a2b      	ldr	r2, [pc, #172]	; (8006814 <TIM_OC1_SetConfig+0x130>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d10c      	bne.n	8006786 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800676c:	697b      	ldr	r3, [r7, #20]
 800676e:	f023 0308 	bic.w	r3, r3, #8
 8006772:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	68db      	ldr	r3, [r3, #12]
 8006778:	697a      	ldr	r2, [r7, #20]
 800677a:	4313      	orrs	r3, r2
 800677c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800677e:	697b      	ldr	r3, [r7, #20]
 8006780:	f023 0304 	bic.w	r3, r3, #4
 8006784:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	4a1d      	ldr	r2, [pc, #116]	; (8006800 <TIM_OC1_SetConfig+0x11c>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d013      	beq.n	80067b6 <TIM_OC1_SetConfig+0xd2>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	4a1c      	ldr	r2, [pc, #112]	; (8006804 <TIM_OC1_SetConfig+0x120>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d00f      	beq.n	80067b6 <TIM_OC1_SetConfig+0xd2>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	4a1b      	ldr	r2, [pc, #108]	; (8006808 <TIM_OC1_SetConfig+0x124>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d00b      	beq.n	80067b6 <TIM_OC1_SetConfig+0xd2>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	4a1a      	ldr	r2, [pc, #104]	; (800680c <TIM_OC1_SetConfig+0x128>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d007      	beq.n	80067b6 <TIM_OC1_SetConfig+0xd2>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	4a19      	ldr	r2, [pc, #100]	; (8006810 <TIM_OC1_SetConfig+0x12c>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d003      	beq.n	80067b6 <TIM_OC1_SetConfig+0xd2>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	4a18      	ldr	r2, [pc, #96]	; (8006814 <TIM_OC1_SetConfig+0x130>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d111      	bne.n	80067da <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80067bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80067be:	693b      	ldr	r3, [r7, #16]
 80067c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80067c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	695b      	ldr	r3, [r3, #20]
 80067ca:	693a      	ldr	r2, [r7, #16]
 80067cc:	4313      	orrs	r3, r2
 80067ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	699b      	ldr	r3, [r3, #24]
 80067d4:	693a      	ldr	r2, [r7, #16]
 80067d6:	4313      	orrs	r3, r2
 80067d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	693a      	ldr	r2, [r7, #16]
 80067de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	68fa      	ldr	r2, [r7, #12]
 80067e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	685a      	ldr	r2, [r3, #4]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	697a      	ldr	r2, [r7, #20]
 80067f2:	621a      	str	r2, [r3, #32]
}
 80067f4:	bf00      	nop
 80067f6:	371c      	adds	r7, #28
 80067f8:	46bd      	mov	sp, r7
 80067fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fe:	4770      	bx	lr
 8006800:	40012c00 	.word	0x40012c00
 8006804:	40013400 	.word	0x40013400
 8006808:	40014000 	.word	0x40014000
 800680c:	40014400 	.word	0x40014400
 8006810:	40014800 	.word	0x40014800
 8006814:	40015000 	.word	0x40015000

08006818 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006818:	b480      	push	{r7}
 800681a:	b087      	sub	sp, #28
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
 8006820:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6a1b      	ldr	r3, [r3, #32]
 8006826:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6a1b      	ldr	r3, [r3, #32]
 800682c:	f023 0210 	bic.w	r2, r3, #16
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	685b      	ldr	r3, [r3, #4]
 8006838:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	699b      	ldr	r3, [r3, #24]
 800683e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006846:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800684a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006852:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	021b      	lsls	r3, r3, #8
 800685a:	68fa      	ldr	r2, [r7, #12]
 800685c:	4313      	orrs	r3, r2
 800685e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006860:	697b      	ldr	r3, [r7, #20]
 8006862:	f023 0320 	bic.w	r3, r3, #32
 8006866:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	689b      	ldr	r3, [r3, #8]
 800686c:	011b      	lsls	r3, r3, #4
 800686e:	697a      	ldr	r2, [r7, #20]
 8006870:	4313      	orrs	r3, r2
 8006872:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	4a2c      	ldr	r2, [pc, #176]	; (8006928 <TIM_OC2_SetConfig+0x110>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d007      	beq.n	800688c <TIM_OC2_SetConfig+0x74>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	4a2b      	ldr	r2, [pc, #172]	; (800692c <TIM_OC2_SetConfig+0x114>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d003      	beq.n	800688c <TIM_OC2_SetConfig+0x74>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	4a2a      	ldr	r2, [pc, #168]	; (8006930 <TIM_OC2_SetConfig+0x118>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d10d      	bne.n	80068a8 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800688c:	697b      	ldr	r3, [r7, #20]
 800688e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006892:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	68db      	ldr	r3, [r3, #12]
 8006898:	011b      	lsls	r3, r3, #4
 800689a:	697a      	ldr	r2, [r7, #20]
 800689c:	4313      	orrs	r3, r2
 800689e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80068a0:	697b      	ldr	r3, [r7, #20]
 80068a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068a6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	4a1f      	ldr	r2, [pc, #124]	; (8006928 <TIM_OC2_SetConfig+0x110>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d013      	beq.n	80068d8 <TIM_OC2_SetConfig+0xc0>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	4a1e      	ldr	r2, [pc, #120]	; (800692c <TIM_OC2_SetConfig+0x114>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d00f      	beq.n	80068d8 <TIM_OC2_SetConfig+0xc0>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	4a1e      	ldr	r2, [pc, #120]	; (8006934 <TIM_OC2_SetConfig+0x11c>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d00b      	beq.n	80068d8 <TIM_OC2_SetConfig+0xc0>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	4a1d      	ldr	r2, [pc, #116]	; (8006938 <TIM_OC2_SetConfig+0x120>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d007      	beq.n	80068d8 <TIM_OC2_SetConfig+0xc0>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	4a1c      	ldr	r2, [pc, #112]	; (800693c <TIM_OC2_SetConfig+0x124>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d003      	beq.n	80068d8 <TIM_OC2_SetConfig+0xc0>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	4a17      	ldr	r2, [pc, #92]	; (8006930 <TIM_OC2_SetConfig+0x118>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d113      	bne.n	8006900 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80068de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80068e0:	693b      	ldr	r3, [r7, #16]
 80068e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80068e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	695b      	ldr	r3, [r3, #20]
 80068ec:	009b      	lsls	r3, r3, #2
 80068ee:	693a      	ldr	r2, [r7, #16]
 80068f0:	4313      	orrs	r3, r2
 80068f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	699b      	ldr	r3, [r3, #24]
 80068f8:	009b      	lsls	r3, r3, #2
 80068fa:	693a      	ldr	r2, [r7, #16]
 80068fc:	4313      	orrs	r3, r2
 80068fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	693a      	ldr	r2, [r7, #16]
 8006904:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	68fa      	ldr	r2, [r7, #12]
 800690a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	685a      	ldr	r2, [r3, #4]
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	697a      	ldr	r2, [r7, #20]
 8006918:	621a      	str	r2, [r3, #32]
}
 800691a:	bf00      	nop
 800691c:	371c      	adds	r7, #28
 800691e:	46bd      	mov	sp, r7
 8006920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006924:	4770      	bx	lr
 8006926:	bf00      	nop
 8006928:	40012c00 	.word	0x40012c00
 800692c:	40013400 	.word	0x40013400
 8006930:	40015000 	.word	0x40015000
 8006934:	40014000 	.word	0x40014000
 8006938:	40014400 	.word	0x40014400
 800693c:	40014800 	.word	0x40014800

08006940 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006940:	b480      	push	{r7}
 8006942:	b087      	sub	sp, #28
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
 8006948:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6a1b      	ldr	r3, [r3, #32]
 800694e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6a1b      	ldr	r3, [r3, #32]
 8006954:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	685b      	ldr	r3, [r3, #4]
 8006960:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	69db      	ldr	r3, [r3, #28]
 8006966:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800696e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006972:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	f023 0303 	bic.w	r3, r3, #3
 800697a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	68fa      	ldr	r2, [r7, #12]
 8006982:	4313      	orrs	r3, r2
 8006984:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006986:	697b      	ldr	r3, [r7, #20]
 8006988:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800698c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	689b      	ldr	r3, [r3, #8]
 8006992:	021b      	lsls	r3, r3, #8
 8006994:	697a      	ldr	r2, [r7, #20]
 8006996:	4313      	orrs	r3, r2
 8006998:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	4a2b      	ldr	r2, [pc, #172]	; (8006a4c <TIM_OC3_SetConfig+0x10c>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d007      	beq.n	80069b2 <TIM_OC3_SetConfig+0x72>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	4a2a      	ldr	r2, [pc, #168]	; (8006a50 <TIM_OC3_SetConfig+0x110>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d003      	beq.n	80069b2 <TIM_OC3_SetConfig+0x72>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	4a29      	ldr	r2, [pc, #164]	; (8006a54 <TIM_OC3_SetConfig+0x114>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d10d      	bne.n	80069ce <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80069b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	68db      	ldr	r3, [r3, #12]
 80069be:	021b      	lsls	r3, r3, #8
 80069c0:	697a      	ldr	r2, [r7, #20]
 80069c2:	4313      	orrs	r3, r2
 80069c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80069c6:	697b      	ldr	r3, [r7, #20]
 80069c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80069cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	4a1e      	ldr	r2, [pc, #120]	; (8006a4c <TIM_OC3_SetConfig+0x10c>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d013      	beq.n	80069fe <TIM_OC3_SetConfig+0xbe>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	4a1d      	ldr	r2, [pc, #116]	; (8006a50 <TIM_OC3_SetConfig+0x110>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d00f      	beq.n	80069fe <TIM_OC3_SetConfig+0xbe>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	4a1d      	ldr	r2, [pc, #116]	; (8006a58 <TIM_OC3_SetConfig+0x118>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d00b      	beq.n	80069fe <TIM_OC3_SetConfig+0xbe>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	4a1c      	ldr	r2, [pc, #112]	; (8006a5c <TIM_OC3_SetConfig+0x11c>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d007      	beq.n	80069fe <TIM_OC3_SetConfig+0xbe>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	4a1b      	ldr	r2, [pc, #108]	; (8006a60 <TIM_OC3_SetConfig+0x120>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d003      	beq.n	80069fe <TIM_OC3_SetConfig+0xbe>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	4a16      	ldr	r2, [pc, #88]	; (8006a54 <TIM_OC3_SetConfig+0x114>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d113      	bne.n	8006a26 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80069fe:	693b      	ldr	r3, [r7, #16]
 8006a00:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006a04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006a06:	693b      	ldr	r3, [r7, #16]
 8006a08:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006a0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	695b      	ldr	r3, [r3, #20]
 8006a12:	011b      	lsls	r3, r3, #4
 8006a14:	693a      	ldr	r2, [r7, #16]
 8006a16:	4313      	orrs	r3, r2
 8006a18:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	699b      	ldr	r3, [r3, #24]
 8006a1e:	011b      	lsls	r3, r3, #4
 8006a20:	693a      	ldr	r2, [r7, #16]
 8006a22:	4313      	orrs	r3, r2
 8006a24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	693a      	ldr	r2, [r7, #16]
 8006a2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	68fa      	ldr	r2, [r7, #12]
 8006a30:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	685a      	ldr	r2, [r3, #4]
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	697a      	ldr	r2, [r7, #20]
 8006a3e:	621a      	str	r2, [r3, #32]
}
 8006a40:	bf00      	nop
 8006a42:	371c      	adds	r7, #28
 8006a44:	46bd      	mov	sp, r7
 8006a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4a:	4770      	bx	lr
 8006a4c:	40012c00 	.word	0x40012c00
 8006a50:	40013400 	.word	0x40013400
 8006a54:	40015000 	.word	0x40015000
 8006a58:	40014000 	.word	0x40014000
 8006a5c:	40014400 	.word	0x40014400
 8006a60:	40014800 	.word	0x40014800

08006a64 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a64:	b480      	push	{r7}
 8006a66:	b087      	sub	sp, #28
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
 8006a6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6a1b      	ldr	r3, [r3, #32]
 8006a72:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6a1b      	ldr	r3, [r3, #32]
 8006a78:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	685b      	ldr	r3, [r3, #4]
 8006a84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	69db      	ldr	r3, [r3, #28]
 8006a8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006a92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	021b      	lsls	r3, r3, #8
 8006aa6:	68fa      	ldr	r2, [r7, #12]
 8006aa8:	4313      	orrs	r3, r2
 8006aaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006ab2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	689b      	ldr	r3, [r3, #8]
 8006ab8:	031b      	lsls	r3, r3, #12
 8006aba:	697a      	ldr	r2, [r7, #20]
 8006abc:	4313      	orrs	r3, r2
 8006abe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	4a2c      	ldr	r2, [pc, #176]	; (8006b74 <TIM_OC4_SetConfig+0x110>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d007      	beq.n	8006ad8 <TIM_OC4_SetConfig+0x74>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	4a2b      	ldr	r2, [pc, #172]	; (8006b78 <TIM_OC4_SetConfig+0x114>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d003      	beq.n	8006ad8 <TIM_OC4_SetConfig+0x74>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	4a2a      	ldr	r2, [pc, #168]	; (8006b7c <TIM_OC4_SetConfig+0x118>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d10d      	bne.n	8006af4 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006ad8:	697b      	ldr	r3, [r7, #20]
 8006ada:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006ade:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	68db      	ldr	r3, [r3, #12]
 8006ae4:	031b      	lsls	r3, r3, #12
 8006ae6:	697a      	ldr	r2, [r7, #20]
 8006ae8:	4313      	orrs	r3, r2
 8006aea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006aec:	697b      	ldr	r3, [r7, #20]
 8006aee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006af2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	4a1f      	ldr	r2, [pc, #124]	; (8006b74 <TIM_OC4_SetConfig+0x110>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d013      	beq.n	8006b24 <TIM_OC4_SetConfig+0xc0>
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	4a1e      	ldr	r2, [pc, #120]	; (8006b78 <TIM_OC4_SetConfig+0x114>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d00f      	beq.n	8006b24 <TIM_OC4_SetConfig+0xc0>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	4a1e      	ldr	r2, [pc, #120]	; (8006b80 <TIM_OC4_SetConfig+0x11c>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d00b      	beq.n	8006b24 <TIM_OC4_SetConfig+0xc0>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	4a1d      	ldr	r2, [pc, #116]	; (8006b84 <TIM_OC4_SetConfig+0x120>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d007      	beq.n	8006b24 <TIM_OC4_SetConfig+0xc0>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	4a1c      	ldr	r2, [pc, #112]	; (8006b88 <TIM_OC4_SetConfig+0x124>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d003      	beq.n	8006b24 <TIM_OC4_SetConfig+0xc0>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	4a17      	ldr	r2, [pc, #92]	; (8006b7c <TIM_OC4_SetConfig+0x118>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d113      	bne.n	8006b4c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006b24:	693b      	ldr	r3, [r7, #16]
 8006b26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b2a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006b32:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	695b      	ldr	r3, [r3, #20]
 8006b38:	019b      	lsls	r3, r3, #6
 8006b3a:	693a      	ldr	r2, [r7, #16]
 8006b3c:	4313      	orrs	r3, r2
 8006b3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	699b      	ldr	r3, [r3, #24]
 8006b44:	019b      	lsls	r3, r3, #6
 8006b46:	693a      	ldr	r2, [r7, #16]
 8006b48:	4313      	orrs	r3, r2
 8006b4a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	693a      	ldr	r2, [r7, #16]
 8006b50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	68fa      	ldr	r2, [r7, #12]
 8006b56:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	685a      	ldr	r2, [r3, #4]
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	697a      	ldr	r2, [r7, #20]
 8006b64:	621a      	str	r2, [r3, #32]
}
 8006b66:	bf00      	nop
 8006b68:	371c      	adds	r7, #28
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b70:	4770      	bx	lr
 8006b72:	bf00      	nop
 8006b74:	40012c00 	.word	0x40012c00
 8006b78:	40013400 	.word	0x40013400
 8006b7c:	40015000 	.word	0x40015000
 8006b80:	40014000 	.word	0x40014000
 8006b84:	40014400 	.word	0x40014400
 8006b88:	40014800 	.word	0x40014800

08006b8c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b087      	sub	sp, #28
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
 8006b94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6a1b      	ldr	r3, [r3, #32]
 8006b9a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6a1b      	ldr	r3, [r3, #32]
 8006ba0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	685b      	ldr	r3, [r3, #4]
 8006bac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006bba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	68fa      	ldr	r2, [r7, #12]
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006bca:	693b      	ldr	r3, [r7, #16]
 8006bcc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006bd0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	689b      	ldr	r3, [r3, #8]
 8006bd6:	041b      	lsls	r3, r3, #16
 8006bd8:	693a      	ldr	r2, [r7, #16]
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	4a19      	ldr	r2, [pc, #100]	; (8006c48 <TIM_OC5_SetConfig+0xbc>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d013      	beq.n	8006c0e <TIM_OC5_SetConfig+0x82>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	4a18      	ldr	r2, [pc, #96]	; (8006c4c <TIM_OC5_SetConfig+0xc0>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d00f      	beq.n	8006c0e <TIM_OC5_SetConfig+0x82>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	4a17      	ldr	r2, [pc, #92]	; (8006c50 <TIM_OC5_SetConfig+0xc4>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d00b      	beq.n	8006c0e <TIM_OC5_SetConfig+0x82>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	4a16      	ldr	r2, [pc, #88]	; (8006c54 <TIM_OC5_SetConfig+0xc8>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d007      	beq.n	8006c0e <TIM_OC5_SetConfig+0x82>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	4a15      	ldr	r2, [pc, #84]	; (8006c58 <TIM_OC5_SetConfig+0xcc>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d003      	beq.n	8006c0e <TIM_OC5_SetConfig+0x82>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	4a14      	ldr	r2, [pc, #80]	; (8006c5c <TIM_OC5_SetConfig+0xd0>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d109      	bne.n	8006c22 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006c0e:	697b      	ldr	r3, [r7, #20]
 8006c10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c14:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	695b      	ldr	r3, [r3, #20]
 8006c1a:	021b      	lsls	r3, r3, #8
 8006c1c:	697a      	ldr	r2, [r7, #20]
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	697a      	ldr	r2, [r7, #20]
 8006c26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	68fa      	ldr	r2, [r7, #12]
 8006c2c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	685a      	ldr	r2, [r3, #4]
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	693a      	ldr	r2, [r7, #16]
 8006c3a:	621a      	str	r2, [r3, #32]
}
 8006c3c:	bf00      	nop
 8006c3e:	371c      	adds	r7, #28
 8006c40:	46bd      	mov	sp, r7
 8006c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c46:	4770      	bx	lr
 8006c48:	40012c00 	.word	0x40012c00
 8006c4c:	40013400 	.word	0x40013400
 8006c50:	40014000 	.word	0x40014000
 8006c54:	40014400 	.word	0x40014400
 8006c58:	40014800 	.word	0x40014800
 8006c5c:	40015000 	.word	0x40015000

08006c60 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006c60:	b480      	push	{r7}
 8006c62:	b087      	sub	sp, #28
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
 8006c68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6a1b      	ldr	r3, [r3, #32]
 8006c6e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6a1b      	ldr	r3, [r3, #32]
 8006c74:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	685b      	ldr	r3, [r3, #4]
 8006c80:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006c8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	021b      	lsls	r3, r3, #8
 8006c9a:	68fa      	ldr	r2, [r7, #12]
 8006c9c:	4313      	orrs	r3, r2
 8006c9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006ca6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	689b      	ldr	r3, [r3, #8]
 8006cac:	051b      	lsls	r3, r3, #20
 8006cae:	693a      	ldr	r2, [r7, #16]
 8006cb0:	4313      	orrs	r3, r2
 8006cb2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	4a1a      	ldr	r2, [pc, #104]	; (8006d20 <TIM_OC6_SetConfig+0xc0>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d013      	beq.n	8006ce4 <TIM_OC6_SetConfig+0x84>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	4a19      	ldr	r2, [pc, #100]	; (8006d24 <TIM_OC6_SetConfig+0xc4>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d00f      	beq.n	8006ce4 <TIM_OC6_SetConfig+0x84>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	4a18      	ldr	r2, [pc, #96]	; (8006d28 <TIM_OC6_SetConfig+0xc8>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d00b      	beq.n	8006ce4 <TIM_OC6_SetConfig+0x84>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	4a17      	ldr	r2, [pc, #92]	; (8006d2c <TIM_OC6_SetConfig+0xcc>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d007      	beq.n	8006ce4 <TIM_OC6_SetConfig+0x84>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	4a16      	ldr	r2, [pc, #88]	; (8006d30 <TIM_OC6_SetConfig+0xd0>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d003      	beq.n	8006ce4 <TIM_OC6_SetConfig+0x84>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	4a15      	ldr	r2, [pc, #84]	; (8006d34 <TIM_OC6_SetConfig+0xd4>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d109      	bne.n	8006cf8 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006ce4:	697b      	ldr	r3, [r7, #20]
 8006ce6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006cea:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	695b      	ldr	r3, [r3, #20]
 8006cf0:	029b      	lsls	r3, r3, #10
 8006cf2:	697a      	ldr	r2, [r7, #20]
 8006cf4:	4313      	orrs	r3, r2
 8006cf6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	697a      	ldr	r2, [r7, #20]
 8006cfc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	68fa      	ldr	r2, [r7, #12]
 8006d02:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	685a      	ldr	r2, [r3, #4]
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	693a      	ldr	r2, [r7, #16]
 8006d10:	621a      	str	r2, [r3, #32]
}
 8006d12:	bf00      	nop
 8006d14:	371c      	adds	r7, #28
 8006d16:	46bd      	mov	sp, r7
 8006d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1c:	4770      	bx	lr
 8006d1e:	bf00      	nop
 8006d20:	40012c00 	.word	0x40012c00
 8006d24:	40013400 	.word	0x40013400
 8006d28:	40014000 	.word	0x40014000
 8006d2c:	40014400 	.word	0x40014400
 8006d30:	40014800 	.word	0x40014800
 8006d34:	40015000 	.word	0x40015000

08006d38 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b087      	sub	sp, #28
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	60f8      	str	r0, [r7, #12]
 8006d40:	60b9      	str	r1, [r7, #8]
 8006d42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	6a1b      	ldr	r3, [r3, #32]
 8006d48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	6a1b      	ldr	r3, [r3, #32]
 8006d4e:	f023 0201 	bic.w	r2, r3, #1
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	699b      	ldr	r3, [r3, #24]
 8006d5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006d5c:	693b      	ldr	r3, [r7, #16]
 8006d5e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006d62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	011b      	lsls	r3, r3, #4
 8006d68:	693a      	ldr	r2, [r7, #16]
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	f023 030a 	bic.w	r3, r3, #10
 8006d74:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006d76:	697a      	ldr	r2, [r7, #20]
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	4313      	orrs	r3, r2
 8006d7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	693a      	ldr	r2, [r7, #16]
 8006d82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	697a      	ldr	r2, [r7, #20]
 8006d88:	621a      	str	r2, [r3, #32]
}
 8006d8a:	bf00      	nop
 8006d8c:	371c      	adds	r7, #28
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d94:	4770      	bx	lr

08006d96 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d96:	b480      	push	{r7}
 8006d98:	b087      	sub	sp, #28
 8006d9a:	af00      	add	r7, sp, #0
 8006d9c:	60f8      	str	r0, [r7, #12]
 8006d9e:	60b9      	str	r1, [r7, #8]
 8006da0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	6a1b      	ldr	r3, [r3, #32]
 8006da6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	6a1b      	ldr	r3, [r3, #32]
 8006dac:	f023 0210 	bic.w	r2, r3, #16
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	699b      	ldr	r3, [r3, #24]
 8006db8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006dba:	693b      	ldr	r3, [r7, #16]
 8006dbc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006dc0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	031b      	lsls	r3, r3, #12
 8006dc6:	693a      	ldr	r2, [r7, #16]
 8006dc8:	4313      	orrs	r3, r2
 8006dca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006dd2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	011b      	lsls	r3, r3, #4
 8006dd8:	697a      	ldr	r2, [r7, #20]
 8006dda:	4313      	orrs	r3, r2
 8006ddc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	693a      	ldr	r2, [r7, #16]
 8006de2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	697a      	ldr	r2, [r7, #20]
 8006de8:	621a      	str	r2, [r3, #32]
}
 8006dea:	bf00      	nop
 8006dec:	371c      	adds	r7, #28
 8006dee:	46bd      	mov	sp, r7
 8006df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df4:	4770      	bx	lr

08006df6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006df6:	b480      	push	{r7}
 8006df8:	b085      	sub	sp, #20
 8006dfa:	af00      	add	r7, sp, #0
 8006dfc:	6078      	str	r0, [r7, #4]
 8006dfe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	689b      	ldr	r3, [r3, #8]
 8006e04:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006e0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e10:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006e12:	683a      	ldr	r2, [r7, #0]
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	4313      	orrs	r3, r2
 8006e18:	f043 0307 	orr.w	r3, r3, #7
 8006e1c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	68fa      	ldr	r2, [r7, #12]
 8006e22:	609a      	str	r2, [r3, #8]
}
 8006e24:	bf00      	nop
 8006e26:	3714      	adds	r7, #20
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2e:	4770      	bx	lr

08006e30 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006e30:	b480      	push	{r7}
 8006e32:	b087      	sub	sp, #28
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	60f8      	str	r0, [r7, #12]
 8006e38:	60b9      	str	r1, [r7, #8]
 8006e3a:	607a      	str	r2, [r7, #4]
 8006e3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	689b      	ldr	r3, [r3, #8]
 8006e42:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e44:	697b      	ldr	r3, [r7, #20]
 8006e46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006e4a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	021a      	lsls	r2, r3, #8
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	431a      	orrs	r2, r3
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	4313      	orrs	r3, r2
 8006e58:	697a      	ldr	r2, [r7, #20]
 8006e5a:	4313      	orrs	r3, r2
 8006e5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	697a      	ldr	r2, [r7, #20]
 8006e62:	609a      	str	r2, [r3, #8]
}
 8006e64:	bf00      	nop
 8006e66:	371c      	adds	r7, #28
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6e:	4770      	bx	lr

08006e70 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006e70:	b480      	push	{r7}
 8006e72:	b087      	sub	sp, #28
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	60f8      	str	r0, [r7, #12]
 8006e78:	60b9      	str	r1, [r7, #8]
 8006e7a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	f003 031f 	and.w	r3, r3, #31
 8006e82:	2201      	movs	r2, #1
 8006e84:	fa02 f303 	lsl.w	r3, r2, r3
 8006e88:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	6a1a      	ldr	r2, [r3, #32]
 8006e8e:	697b      	ldr	r3, [r7, #20]
 8006e90:	43db      	mvns	r3, r3
 8006e92:	401a      	ands	r2, r3
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	6a1a      	ldr	r2, [r3, #32]
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	f003 031f 	and.w	r3, r3, #31
 8006ea2:	6879      	ldr	r1, [r7, #4]
 8006ea4:	fa01 f303 	lsl.w	r3, r1, r3
 8006ea8:	431a      	orrs	r2, r3
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	621a      	str	r2, [r3, #32]
}
 8006eae:	bf00      	nop
 8006eb0:	371c      	adds	r7, #28
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb8:	4770      	bx	lr
	...

08006ebc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	b085      	sub	sp, #20
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
 8006ec4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ecc:	2b01      	cmp	r3, #1
 8006ece:	d101      	bne.n	8006ed4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006ed0:	2302      	movs	r3, #2
 8006ed2:	e074      	b.n	8006fbe <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2201      	movs	r2, #1
 8006ed8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2202      	movs	r2, #2
 8006ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	685b      	ldr	r3, [r3, #4]
 8006eea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	689b      	ldr	r3, [r3, #8]
 8006ef2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	4a34      	ldr	r2, [pc, #208]	; (8006fcc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d009      	beq.n	8006f12 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	4a33      	ldr	r2, [pc, #204]	; (8006fd0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d004      	beq.n	8006f12 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	4a31      	ldr	r2, [pc, #196]	; (8006fd4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d108      	bne.n	8006f24 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006f18:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	685b      	ldr	r3, [r3, #4]
 8006f1e:	68fa      	ldr	r2, [r7, #12]
 8006f20:	4313      	orrs	r3, r2
 8006f22:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006f2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f2e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	68fa      	ldr	r2, [r7, #12]
 8006f36:	4313      	orrs	r3, r2
 8006f38:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	68fa      	ldr	r2, [r7, #12]
 8006f40:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4a21      	ldr	r2, [pc, #132]	; (8006fcc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d022      	beq.n	8006f92 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f54:	d01d      	beq.n	8006f92 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	4a1f      	ldr	r2, [pc, #124]	; (8006fd8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d018      	beq.n	8006f92 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	4a1d      	ldr	r2, [pc, #116]	; (8006fdc <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d013      	beq.n	8006f92 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4a1c      	ldr	r2, [pc, #112]	; (8006fe0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d00e      	beq.n	8006f92 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4a15      	ldr	r2, [pc, #84]	; (8006fd0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d009      	beq.n	8006f92 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4a18      	ldr	r2, [pc, #96]	; (8006fe4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d004      	beq.n	8006f92 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4a11      	ldr	r2, [pc, #68]	; (8006fd4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d10c      	bne.n	8006fac <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f98:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	689b      	ldr	r3, [r3, #8]
 8006f9e:	68ba      	ldr	r2, [r7, #8]
 8006fa0:	4313      	orrs	r3, r2
 8006fa2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	68ba      	ldr	r2, [r7, #8]
 8006faa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2201      	movs	r2, #1
 8006fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006fbc:	2300      	movs	r3, #0
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	3714      	adds	r7, #20
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc8:	4770      	bx	lr
 8006fca:	bf00      	nop
 8006fcc:	40012c00 	.word	0x40012c00
 8006fd0:	40013400 	.word	0x40013400
 8006fd4:	40015000 	.word	0x40015000
 8006fd8:	40000400 	.word	0x40000400
 8006fdc:	40000800 	.word	0x40000800
 8006fe0:	40000c00 	.word	0x40000c00
 8006fe4:	40014000 	.word	0x40014000

08006fe8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006fe8:	b480      	push	{r7}
 8006fea:	b085      	sub	sp, #20
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
 8006ff0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ffc:	2b01      	cmp	r3, #1
 8006ffe:	d101      	bne.n	8007004 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007000:	2302      	movs	r3, #2
 8007002:	e078      	b.n	80070f6 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2201      	movs	r2, #1
 8007008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	68db      	ldr	r3, [r3, #12]
 8007016:	4313      	orrs	r3, r2
 8007018:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	689b      	ldr	r3, [r3, #8]
 8007024:	4313      	orrs	r3, r2
 8007026:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	685b      	ldr	r3, [r3, #4]
 8007032:	4313      	orrs	r3, r2
 8007034:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	4313      	orrs	r3, r2
 8007042:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	691b      	ldr	r3, [r3, #16]
 800704e:	4313      	orrs	r3, r2
 8007050:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	695b      	ldr	r3, [r3, #20]
 800705c:	4313      	orrs	r3, r2
 800705e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800706a:	4313      	orrs	r3, r2
 800706c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	699b      	ldr	r3, [r3, #24]
 8007078:	041b      	lsls	r3, r3, #16
 800707a:	4313      	orrs	r3, r2
 800707c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	69db      	ldr	r3, [r3, #28]
 8007088:	4313      	orrs	r3, r2
 800708a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4a1c      	ldr	r2, [pc, #112]	; (8007104 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d009      	beq.n	80070aa <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	4a1b      	ldr	r2, [pc, #108]	; (8007108 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d004      	beq.n	80070aa <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4a19      	ldr	r2, [pc, #100]	; (800710c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d11c      	bne.n	80070e4 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070b4:	051b      	lsls	r3, r3, #20
 80070b6:	4313      	orrs	r3, r2
 80070b8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	6a1b      	ldr	r3, [r3, #32]
 80070c4:	4313      	orrs	r3, r2
 80070c6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070d2:	4313      	orrs	r3, r2
 80070d4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070e0:	4313      	orrs	r3, r2
 80070e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	68fa      	ldr	r2, [r7, #12]
 80070ea:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2200      	movs	r2, #0
 80070f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80070f4:	2300      	movs	r3, #0
}
 80070f6:	4618      	mov	r0, r3
 80070f8:	3714      	adds	r7, #20
 80070fa:	46bd      	mov	sp, r7
 80070fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007100:	4770      	bx	lr
 8007102:	bf00      	nop
 8007104:	40012c00 	.word	0x40012c00
 8007108:	40013400 	.word	0x40013400
 800710c:	40015000 	.word	0x40015000

08007110 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007110:	b480      	push	{r7}
 8007112:	b083      	sub	sp, #12
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007118:	bf00      	nop
 800711a:	370c      	adds	r7, #12
 800711c:	46bd      	mov	sp, r7
 800711e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007122:	4770      	bx	lr

08007124 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007124:	b480      	push	{r7}
 8007126:	b083      	sub	sp, #12
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800712c:	bf00      	nop
 800712e:	370c      	adds	r7, #12
 8007130:	46bd      	mov	sp, r7
 8007132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007136:	4770      	bx	lr

08007138 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007138:	b480      	push	{r7}
 800713a:	b083      	sub	sp, #12
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007140:	bf00      	nop
 8007142:	370c      	adds	r7, #12
 8007144:	46bd      	mov	sp, r7
 8007146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714a:	4770      	bx	lr

0800714c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800714c:	b480      	push	{r7}
 800714e:	b083      	sub	sp, #12
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007154:	bf00      	nop
 8007156:	370c      	adds	r7, #12
 8007158:	46bd      	mov	sp, r7
 800715a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715e:	4770      	bx	lr

08007160 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007160:	b480      	push	{r7}
 8007162:	b083      	sub	sp, #12
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007168:	bf00      	nop
 800716a:	370c      	adds	r7, #12
 800716c:	46bd      	mov	sp, r7
 800716e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007172:	4770      	bx	lr

08007174 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007174:	b480      	push	{r7}
 8007176:	b083      	sub	sp, #12
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800717c:	bf00      	nop
 800717e:	370c      	adds	r7, #12
 8007180:	46bd      	mov	sp, r7
 8007182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007186:	4770      	bx	lr

08007188 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007188:	b480      	push	{r7}
 800718a:	b083      	sub	sp, #12
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007190:	bf00      	nop
 8007192:	370c      	adds	r7, #12
 8007194:	46bd      	mov	sp, r7
 8007196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719a:	4770      	bx	lr

0800719c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b082      	sub	sp, #8
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d101      	bne.n	80071ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80071aa:	2301      	movs	r3, #1
 80071ac:	e042      	b.n	8007234 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d106      	bne.n	80071c6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2200      	movs	r2, #0
 80071bc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f7fa fae9 	bl	8001798 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2224      	movs	r2, #36	; 0x24
 80071ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	681a      	ldr	r2, [r3, #0]
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f022 0201 	bic.w	r2, r2, #1
 80071dc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d002      	beq.n	80071ec <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f000 ff48 	bl	800807c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	f000 fc49 	bl	8007a84 <UART_SetConfig>
 80071f2:	4603      	mov	r3, r0
 80071f4:	2b01      	cmp	r3, #1
 80071f6:	d101      	bne.n	80071fc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80071f8:	2301      	movs	r3, #1
 80071fa:	e01b      	b.n	8007234 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	685a      	ldr	r2, [r3, #4]
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800720a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	689a      	ldr	r2, [r3, #8]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800721a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	681a      	ldr	r2, [r3, #0]
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f042 0201 	orr.w	r2, r2, #1
 800722a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800722c:	6878      	ldr	r0, [r7, #4]
 800722e:	f000 ffc7 	bl	80081c0 <UART_CheckIdleState>
 8007232:	4603      	mov	r3, r0
}
 8007234:	4618      	mov	r0, r3
 8007236:	3708      	adds	r7, #8
 8007238:	46bd      	mov	sp, r7
 800723a:	bd80      	pop	{r7, pc}

0800723c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b08a      	sub	sp, #40	; 0x28
 8007240:	af00      	add	r7, sp, #0
 8007242:	60f8      	str	r0, [r7, #12]
 8007244:	60b9      	str	r1, [r7, #8]
 8007246:	4613      	mov	r3, r2
 8007248:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007250:	2b20      	cmp	r3, #32
 8007252:	d167      	bne.n	8007324 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d002      	beq.n	8007260 <HAL_UART_Transmit_DMA+0x24>
 800725a:	88fb      	ldrh	r3, [r7, #6]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d101      	bne.n	8007264 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8007260:	2301      	movs	r3, #1
 8007262:	e060      	b.n	8007326 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	68ba      	ldr	r2, [r7, #8]
 8007268:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	88fa      	ldrh	r2, [r7, #6]
 800726e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	88fa      	ldrh	r2, [r7, #6]
 8007276:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	2200      	movs	r2, #0
 800727e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	2221      	movs	r2, #33	; 0x21
 8007286:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800728e:	2b00      	cmp	r3, #0
 8007290:	d028      	beq.n	80072e4 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007296:	4a26      	ldr	r2, [pc, #152]	; (8007330 <HAL_UART_Transmit_DMA+0xf4>)
 8007298:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800729e:	4a25      	ldr	r2, [pc, #148]	; (8007334 <HAL_UART_Transmit_DMA+0xf8>)
 80072a0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80072a6:	4a24      	ldr	r2, [pc, #144]	; (8007338 <HAL_UART_Transmit_DMA+0xfc>)
 80072a8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80072ae:	2200      	movs	r2, #0
 80072b0:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072ba:	4619      	mov	r1, r3
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	3328      	adds	r3, #40	; 0x28
 80072c2:	461a      	mov	r2, r3
 80072c4:	88fb      	ldrh	r3, [r7, #6]
 80072c6:	f7fc fd53 	bl	8003d70 <HAL_DMA_Start_IT>
 80072ca:	4603      	mov	r3, r0
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d009      	beq.n	80072e4 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	2210      	movs	r2, #16
 80072d4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	2220      	movs	r2, #32
 80072dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 80072e0:	2301      	movs	r3, #1
 80072e2:	e020      	b.n	8007326 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	2240      	movs	r2, #64	; 0x40
 80072ea:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	3308      	adds	r3, #8
 80072f2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072f4:	697b      	ldr	r3, [r7, #20]
 80072f6:	e853 3f00 	ldrex	r3, [r3]
 80072fa:	613b      	str	r3, [r7, #16]
   return(result);
 80072fc:	693b      	ldr	r3, [r7, #16]
 80072fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007302:	627b      	str	r3, [r7, #36]	; 0x24
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	3308      	adds	r3, #8
 800730a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800730c:	623a      	str	r2, [r7, #32]
 800730e:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007310:	69f9      	ldr	r1, [r7, #28]
 8007312:	6a3a      	ldr	r2, [r7, #32]
 8007314:	e841 2300 	strex	r3, r2, [r1]
 8007318:	61bb      	str	r3, [r7, #24]
   return(result);
 800731a:	69bb      	ldr	r3, [r7, #24]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d1e5      	bne.n	80072ec <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8007320:	2300      	movs	r3, #0
 8007322:	e000      	b.n	8007326 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8007324:	2302      	movs	r3, #2
  }
}
 8007326:	4618      	mov	r0, r3
 8007328:	3728      	adds	r7, #40	; 0x28
 800732a:	46bd      	mov	sp, r7
 800732c:	bd80      	pop	{r7, pc}
 800732e:	bf00      	nop
 8007330:	0800868b 	.word	0x0800868b
 8007334:	08008725 	.word	0x08008725
 8007338:	080088ab 	.word	0x080088ab

0800733c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b08a      	sub	sp, #40	; 0x28
 8007340:	af00      	add	r7, sp, #0
 8007342:	60f8      	str	r0, [r7, #12]
 8007344:	60b9      	str	r1, [r7, #8]
 8007346:	4613      	mov	r3, r2
 8007348:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007350:	2b20      	cmp	r3, #32
 8007352:	d137      	bne.n	80073c4 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007354:	68bb      	ldr	r3, [r7, #8]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d002      	beq.n	8007360 <HAL_UART_Receive_DMA+0x24>
 800735a:	88fb      	ldrh	r3, [r7, #6]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d101      	bne.n	8007364 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8007360:	2301      	movs	r3, #1
 8007362:	e030      	b.n	80073c6 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	2200      	movs	r2, #0
 8007368:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	4a18      	ldr	r2, [pc, #96]	; (80073d0 <HAL_UART_Receive_DMA+0x94>)
 8007370:	4293      	cmp	r3, r2
 8007372:	d01f      	beq.n	80073b4 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	685b      	ldr	r3, [r3, #4]
 800737a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800737e:	2b00      	cmp	r3, #0
 8007380:	d018      	beq.n	80073b4 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007388:	697b      	ldr	r3, [r7, #20]
 800738a:	e853 3f00 	ldrex	r3, [r3]
 800738e:	613b      	str	r3, [r7, #16]
   return(result);
 8007390:	693b      	ldr	r3, [r7, #16]
 8007392:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007396:	627b      	str	r3, [r7, #36]	; 0x24
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	461a      	mov	r2, r3
 800739e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073a0:	623b      	str	r3, [r7, #32]
 80073a2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073a4:	69f9      	ldr	r1, [r7, #28]
 80073a6:	6a3a      	ldr	r2, [r7, #32]
 80073a8:	e841 2300 	strex	r3, r2, [r1]
 80073ac:	61bb      	str	r3, [r7, #24]
   return(result);
 80073ae:	69bb      	ldr	r3, [r7, #24]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d1e6      	bne.n	8007382 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80073b4:	88fb      	ldrh	r3, [r7, #6]
 80073b6:	461a      	mov	r2, r3
 80073b8:	68b9      	ldr	r1, [r7, #8]
 80073ba:	68f8      	ldr	r0, [r7, #12]
 80073bc:	f001 f818 	bl	80083f0 <UART_Start_Receive_DMA>
 80073c0:	4603      	mov	r3, r0
 80073c2:	e000      	b.n	80073c6 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80073c4:	2302      	movs	r3, #2
  }
}
 80073c6:	4618      	mov	r0, r3
 80073c8:	3728      	adds	r7, #40	; 0x28
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bd80      	pop	{r7, pc}
 80073ce:	bf00      	nop
 80073d0:	40008000 	.word	0x40008000

080073d4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b0ba      	sub	sp, #232	; 0xe8
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	69db      	ldr	r3, [r3, #28]
 80073e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	689b      	ldr	r3, [r3, #8]
 80073f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80073fa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80073fe:	f640 030f 	movw	r3, #2063	; 0x80f
 8007402:	4013      	ands	r3, r2
 8007404:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007408:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800740c:	2b00      	cmp	r3, #0
 800740e:	d11b      	bne.n	8007448 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007410:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007414:	f003 0320 	and.w	r3, r3, #32
 8007418:	2b00      	cmp	r3, #0
 800741a:	d015      	beq.n	8007448 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800741c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007420:	f003 0320 	and.w	r3, r3, #32
 8007424:	2b00      	cmp	r3, #0
 8007426:	d105      	bne.n	8007434 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007428:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800742c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007430:	2b00      	cmp	r3, #0
 8007432:	d009      	beq.n	8007448 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007438:	2b00      	cmp	r3, #0
 800743a:	f000 82e3 	beq.w	8007a04 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	4798      	blx	r3
      }
      return;
 8007446:	e2dd      	b.n	8007a04 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007448:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800744c:	2b00      	cmp	r3, #0
 800744e:	f000 8123 	beq.w	8007698 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007452:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007456:	4b8d      	ldr	r3, [pc, #564]	; (800768c <HAL_UART_IRQHandler+0x2b8>)
 8007458:	4013      	ands	r3, r2
 800745a:	2b00      	cmp	r3, #0
 800745c:	d106      	bne.n	800746c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800745e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007462:	4b8b      	ldr	r3, [pc, #556]	; (8007690 <HAL_UART_IRQHandler+0x2bc>)
 8007464:	4013      	ands	r3, r2
 8007466:	2b00      	cmp	r3, #0
 8007468:	f000 8116 	beq.w	8007698 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800746c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007470:	f003 0301 	and.w	r3, r3, #1
 8007474:	2b00      	cmp	r3, #0
 8007476:	d011      	beq.n	800749c <HAL_UART_IRQHandler+0xc8>
 8007478:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800747c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007480:	2b00      	cmp	r3, #0
 8007482:	d00b      	beq.n	800749c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	2201      	movs	r2, #1
 800748a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007492:	f043 0201 	orr.w	r2, r3, #1
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800749c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074a0:	f003 0302 	and.w	r3, r3, #2
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d011      	beq.n	80074cc <HAL_UART_IRQHandler+0xf8>
 80074a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80074ac:	f003 0301 	and.w	r3, r3, #1
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d00b      	beq.n	80074cc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	2202      	movs	r2, #2
 80074ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074c2:	f043 0204 	orr.w	r2, r3, #4
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80074cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074d0:	f003 0304 	and.w	r3, r3, #4
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d011      	beq.n	80074fc <HAL_UART_IRQHandler+0x128>
 80074d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80074dc:	f003 0301 	and.w	r3, r3, #1
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d00b      	beq.n	80074fc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	2204      	movs	r2, #4
 80074ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074f2:	f043 0202 	orr.w	r2, r3, #2
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80074fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007500:	f003 0308 	and.w	r3, r3, #8
 8007504:	2b00      	cmp	r3, #0
 8007506:	d017      	beq.n	8007538 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007508:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800750c:	f003 0320 	and.w	r3, r3, #32
 8007510:	2b00      	cmp	r3, #0
 8007512:	d105      	bne.n	8007520 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007514:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007518:	4b5c      	ldr	r3, [pc, #368]	; (800768c <HAL_UART_IRQHandler+0x2b8>)
 800751a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800751c:	2b00      	cmp	r3, #0
 800751e:	d00b      	beq.n	8007538 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	2208      	movs	r2, #8
 8007526:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800752e:	f043 0208 	orr.w	r2, r3, #8
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007538:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800753c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007540:	2b00      	cmp	r3, #0
 8007542:	d012      	beq.n	800756a <HAL_UART_IRQHandler+0x196>
 8007544:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007548:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800754c:	2b00      	cmp	r3, #0
 800754e:	d00c      	beq.n	800756a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007558:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007560:	f043 0220 	orr.w	r2, r3, #32
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007570:	2b00      	cmp	r3, #0
 8007572:	f000 8249 	beq.w	8007a08 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007576:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800757a:	f003 0320 	and.w	r3, r3, #32
 800757e:	2b00      	cmp	r3, #0
 8007580:	d013      	beq.n	80075aa <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007582:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007586:	f003 0320 	and.w	r3, r3, #32
 800758a:	2b00      	cmp	r3, #0
 800758c:	d105      	bne.n	800759a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800758e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007592:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007596:	2b00      	cmp	r3, #0
 8007598:	d007      	beq.n	80075aa <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d003      	beq.n	80075aa <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075b0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	689b      	ldr	r3, [r3, #8]
 80075ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075be:	2b40      	cmp	r3, #64	; 0x40
 80075c0:	d005      	beq.n	80075ce <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80075c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80075c6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d054      	beq.n	8007678 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80075ce:	6878      	ldr	r0, [r7, #4]
 80075d0:	f000 fff5 	bl	80085be <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	689b      	ldr	r3, [r3, #8]
 80075da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075de:	2b40      	cmp	r3, #64	; 0x40
 80075e0:	d146      	bne.n	8007670 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	3308      	adds	r3, #8
 80075e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80075f0:	e853 3f00 	ldrex	r3, [r3]
 80075f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80075f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80075fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007600:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	3308      	adds	r3, #8
 800760a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800760e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007612:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007616:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800761a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800761e:	e841 2300 	strex	r3, r2, [r1]
 8007622:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007626:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800762a:	2b00      	cmp	r3, #0
 800762c:	d1d9      	bne.n	80075e2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007634:	2b00      	cmp	r3, #0
 8007636:	d017      	beq.n	8007668 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800763e:	4a15      	ldr	r2, [pc, #84]	; (8007694 <HAL_UART_IRQHandler+0x2c0>)
 8007640:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007648:	4618      	mov	r0, r3
 800764a:	f7fc fc65 	bl	8003f18 <HAL_DMA_Abort_IT>
 800764e:	4603      	mov	r3, r0
 8007650:	2b00      	cmp	r3, #0
 8007652:	d019      	beq.n	8007688 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800765a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800765c:	687a      	ldr	r2, [r7, #4]
 800765e:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8007662:	4610      	mov	r0, r2
 8007664:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007666:	e00f      	b.n	8007688 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007668:	6878      	ldr	r0, [r7, #4]
 800766a:	f000 f9f5 	bl	8007a58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800766e:	e00b      	b.n	8007688 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	f000 f9f1 	bl	8007a58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007676:	e007      	b.n	8007688 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007678:	6878      	ldr	r0, [r7, #4]
 800767a:	f000 f9ed 	bl	8007a58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2200      	movs	r2, #0
 8007682:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8007686:	e1bf      	b.n	8007a08 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007688:	bf00      	nop
    return;
 800768a:	e1bd      	b.n	8007a08 <HAL_UART_IRQHandler+0x634>
 800768c:	10000001 	.word	0x10000001
 8007690:	04000120 	.word	0x04000120
 8007694:	0800892b 	.word	0x0800892b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800769c:	2b01      	cmp	r3, #1
 800769e:	f040 8153 	bne.w	8007948 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80076a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076a6:	f003 0310 	and.w	r3, r3, #16
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	f000 814c 	beq.w	8007948 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80076b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076b4:	f003 0310 	and.w	r3, r3, #16
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	f000 8145 	beq.w	8007948 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	2210      	movs	r2, #16
 80076c4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	689b      	ldr	r3, [r3, #8]
 80076cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076d0:	2b40      	cmp	r3, #64	; 0x40
 80076d2:	f040 80bb 	bne.w	800784c <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	685b      	ldr	r3, [r3, #4]
 80076e0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80076e4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	f000 818f 	beq.w	8007a0c <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80076f4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80076f8:	429a      	cmp	r2, r3
 80076fa:	f080 8187 	bcs.w	8007a0c <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007704:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f003 0320 	and.w	r3, r3, #32
 8007716:	2b00      	cmp	r3, #0
 8007718:	f040 8087 	bne.w	800782a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007724:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007728:	e853 3f00 	ldrex	r3, [r3]
 800772c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007730:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007734:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007738:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	461a      	mov	r2, r3
 8007742:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007746:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800774a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800774e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007752:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007756:	e841 2300 	strex	r3, r2, [r1]
 800775a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800775e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007762:	2b00      	cmp	r3, #0
 8007764:	d1da      	bne.n	800771c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	3308      	adds	r3, #8
 800776c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800776e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007770:	e853 3f00 	ldrex	r3, [r3]
 8007774:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007776:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007778:	f023 0301 	bic.w	r3, r3, #1
 800777c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	3308      	adds	r3, #8
 8007786:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800778a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800778e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007790:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007792:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007796:	e841 2300 	strex	r3, r2, [r1]
 800779a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800779c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d1e1      	bne.n	8007766 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	3308      	adds	r3, #8
 80077a8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80077ac:	e853 3f00 	ldrex	r3, [r3]
 80077b0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80077b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80077b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	3308      	adds	r3, #8
 80077c2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80077c6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80077c8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ca:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80077cc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80077ce:	e841 2300 	strex	r3, r2, [r1]
 80077d2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80077d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d1e3      	bne.n	80077a2 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2220      	movs	r2, #32
 80077de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2200      	movs	r2, #0
 80077e6:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077f0:	e853 3f00 	ldrex	r3, [r3]
 80077f4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80077f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80077f8:	f023 0310 	bic.w	r3, r3, #16
 80077fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	461a      	mov	r2, r3
 8007806:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800780a:	65bb      	str	r3, [r7, #88]	; 0x58
 800780c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800780e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007810:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007812:	e841 2300 	strex	r3, r2, [r1]
 8007816:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007818:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800781a:	2b00      	cmp	r3, #0
 800781c:	d1e4      	bne.n	80077e8 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007824:	4618      	mov	r0, r3
 8007826:	f7fc fb1e 	bl	8003e66 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2202      	movs	r2, #2
 800782e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800783c:	b29b      	uxth	r3, r3
 800783e:	1ad3      	subs	r3, r2, r3
 8007840:	b29b      	uxth	r3, r3
 8007842:	4619      	mov	r1, r3
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f000 f911 	bl	8007a6c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800784a:	e0df      	b.n	8007a0c <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007858:	b29b      	uxth	r3, r3
 800785a:	1ad3      	subs	r3, r2, r3
 800785c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007866:	b29b      	uxth	r3, r3
 8007868:	2b00      	cmp	r3, #0
 800786a:	f000 80d1 	beq.w	8007a10 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800786e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007872:	2b00      	cmp	r3, #0
 8007874:	f000 80cc 	beq.w	8007a10 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800787e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007880:	e853 3f00 	ldrex	r3, [r3]
 8007884:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007886:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007888:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800788c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	461a      	mov	r2, r3
 8007896:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800789a:	647b      	str	r3, [r7, #68]	; 0x44
 800789c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800789e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80078a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80078a2:	e841 2300 	strex	r3, r2, [r1]
 80078a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80078a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d1e4      	bne.n	8007878 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	3308      	adds	r3, #8
 80078b4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078b8:	e853 3f00 	ldrex	r3, [r3]
 80078bc:	623b      	str	r3, [r7, #32]
   return(result);
 80078be:	6a3b      	ldr	r3, [r7, #32]
 80078c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80078c4:	f023 0301 	bic.w	r3, r3, #1
 80078c8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	3308      	adds	r3, #8
 80078d2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80078d6:	633a      	str	r2, [r7, #48]	; 0x30
 80078d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80078dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078de:	e841 2300 	strex	r3, r2, [r1]
 80078e2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80078e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d1e1      	bne.n	80078ae <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2220      	movs	r2, #32
 80078ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2200      	movs	r2, #0
 80078f6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2200      	movs	r2, #0
 80078fc:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007904:	693b      	ldr	r3, [r7, #16]
 8007906:	e853 3f00 	ldrex	r3, [r3]
 800790a:	60fb      	str	r3, [r7, #12]
   return(result);
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	f023 0310 	bic.w	r3, r3, #16
 8007912:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	461a      	mov	r2, r3
 800791c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007920:	61fb      	str	r3, [r7, #28]
 8007922:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007924:	69b9      	ldr	r1, [r7, #24]
 8007926:	69fa      	ldr	r2, [r7, #28]
 8007928:	e841 2300 	strex	r3, r2, [r1]
 800792c:	617b      	str	r3, [r7, #20]
   return(result);
 800792e:	697b      	ldr	r3, [r7, #20]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d1e4      	bne.n	80078fe <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2202      	movs	r2, #2
 8007938:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800793a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800793e:	4619      	mov	r1, r3
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	f000 f893 	bl	8007a6c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007946:	e063      	b.n	8007a10 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007948:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800794c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007950:	2b00      	cmp	r3, #0
 8007952:	d00e      	beq.n	8007972 <HAL_UART_IRQHandler+0x59e>
 8007954:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007958:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800795c:	2b00      	cmp	r3, #0
 800795e:	d008      	beq.n	8007972 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007968:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f001 f81e 	bl	80089ac <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007970:	e051      	b.n	8007a16 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007972:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007976:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800797a:	2b00      	cmp	r3, #0
 800797c:	d014      	beq.n	80079a8 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800797e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007982:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007986:	2b00      	cmp	r3, #0
 8007988:	d105      	bne.n	8007996 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800798a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800798e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007992:	2b00      	cmp	r3, #0
 8007994:	d008      	beq.n	80079a8 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800799a:	2b00      	cmp	r3, #0
 800799c:	d03a      	beq.n	8007a14 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	4798      	blx	r3
    }
    return;
 80079a6:	e035      	b.n	8007a14 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80079a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d009      	beq.n	80079c8 <HAL_UART_IRQHandler+0x5f4>
 80079b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d003      	beq.n	80079c8 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 80079c0:	6878      	ldr	r0, [r7, #4]
 80079c2:	f000 ffc8 	bl	8008956 <UART_EndTransmit_IT>
    return;
 80079c6:	e026      	b.n	8007a16 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80079c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d009      	beq.n	80079e8 <HAL_UART_IRQHandler+0x614>
 80079d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079d8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d003      	beq.n	80079e8 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	f000 fff7 	bl	80089d4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80079e6:	e016      	b.n	8007a16 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80079e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d010      	beq.n	8007a16 <HAL_UART_IRQHandler+0x642>
 80079f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	da0c      	bge.n	8007a16 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	f000 ffdf 	bl	80089c0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007a02:	e008      	b.n	8007a16 <HAL_UART_IRQHandler+0x642>
      return;
 8007a04:	bf00      	nop
 8007a06:	e006      	b.n	8007a16 <HAL_UART_IRQHandler+0x642>
    return;
 8007a08:	bf00      	nop
 8007a0a:	e004      	b.n	8007a16 <HAL_UART_IRQHandler+0x642>
      return;
 8007a0c:	bf00      	nop
 8007a0e:	e002      	b.n	8007a16 <HAL_UART_IRQHandler+0x642>
      return;
 8007a10:	bf00      	nop
 8007a12:	e000      	b.n	8007a16 <HAL_UART_IRQHandler+0x642>
    return;
 8007a14:	bf00      	nop
  }
}
 8007a16:	37e8      	adds	r7, #232	; 0xe8
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bd80      	pop	{r7, pc}

08007a1c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b083      	sub	sp, #12
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007a24:	bf00      	nop
 8007a26:	370c      	adds	r7, #12
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2e:	4770      	bx	lr

08007a30 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007a30:	b480      	push	{r7}
 8007a32:	b083      	sub	sp, #12
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8007a38:	bf00      	nop
 8007a3a:	370c      	adds	r7, #12
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a42:	4770      	bx	lr

08007a44 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007a44:	b480      	push	{r7}
 8007a46:	b083      	sub	sp, #12
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8007a4c:	bf00      	nop
 8007a4e:	370c      	adds	r7, #12
 8007a50:	46bd      	mov	sp, r7
 8007a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a56:	4770      	bx	lr

08007a58 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007a58:	b480      	push	{r7}
 8007a5a:	b083      	sub	sp, #12
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007a60:	bf00      	nop
 8007a62:	370c      	adds	r7, #12
 8007a64:	46bd      	mov	sp, r7
 8007a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6a:	4770      	bx	lr

08007a6c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007a6c:	b480      	push	{r7}
 8007a6e:	b083      	sub	sp, #12
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
 8007a74:	460b      	mov	r3, r1
 8007a76:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007a78:	bf00      	nop
 8007a7a:	370c      	adds	r7, #12
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a82:	4770      	bx	lr

08007a84 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007a84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007a88:	b08c      	sub	sp, #48	; 0x30
 8007a8a:	af00      	add	r7, sp, #0
 8007a8c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007a8e:	2300      	movs	r3, #0
 8007a90:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007a94:	697b      	ldr	r3, [r7, #20]
 8007a96:	689a      	ldr	r2, [r3, #8]
 8007a98:	697b      	ldr	r3, [r7, #20]
 8007a9a:	691b      	ldr	r3, [r3, #16]
 8007a9c:	431a      	orrs	r2, r3
 8007a9e:	697b      	ldr	r3, [r7, #20]
 8007aa0:	695b      	ldr	r3, [r3, #20]
 8007aa2:	431a      	orrs	r2, r3
 8007aa4:	697b      	ldr	r3, [r7, #20]
 8007aa6:	69db      	ldr	r3, [r3, #28]
 8007aa8:	4313      	orrs	r3, r2
 8007aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007aac:	697b      	ldr	r3, [r7, #20]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	681a      	ldr	r2, [r3, #0]
 8007ab2:	4baa      	ldr	r3, [pc, #680]	; (8007d5c <UART_SetConfig+0x2d8>)
 8007ab4:	4013      	ands	r3, r2
 8007ab6:	697a      	ldr	r2, [r7, #20]
 8007ab8:	6812      	ldr	r2, [r2, #0]
 8007aba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007abc:	430b      	orrs	r3, r1
 8007abe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ac0:	697b      	ldr	r3, [r7, #20]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	685b      	ldr	r3, [r3, #4]
 8007ac6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007aca:	697b      	ldr	r3, [r7, #20]
 8007acc:	68da      	ldr	r2, [r3, #12]
 8007ace:	697b      	ldr	r3, [r7, #20]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	430a      	orrs	r2, r1
 8007ad4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007ad6:	697b      	ldr	r3, [r7, #20]
 8007ad8:	699b      	ldr	r3, [r3, #24]
 8007ada:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007adc:	697b      	ldr	r3, [r7, #20]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	4a9f      	ldr	r2, [pc, #636]	; (8007d60 <UART_SetConfig+0x2dc>)
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	d004      	beq.n	8007af0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007ae6:	697b      	ldr	r3, [r7, #20]
 8007ae8:	6a1b      	ldr	r3, [r3, #32]
 8007aea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007aec:	4313      	orrs	r3, r2
 8007aee:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007af0:	697b      	ldr	r3, [r7, #20]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	689b      	ldr	r3, [r3, #8]
 8007af6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007afa:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007afe:	697a      	ldr	r2, [r7, #20]
 8007b00:	6812      	ldr	r2, [r2, #0]
 8007b02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007b04:	430b      	orrs	r3, r1
 8007b06:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007b08:	697b      	ldr	r3, [r7, #20]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b0e:	f023 010f 	bic.w	r1, r3, #15
 8007b12:	697b      	ldr	r3, [r7, #20]
 8007b14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007b16:	697b      	ldr	r3, [r7, #20]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	430a      	orrs	r2, r1
 8007b1c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007b1e:	697b      	ldr	r3, [r7, #20]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	4a90      	ldr	r2, [pc, #576]	; (8007d64 <UART_SetConfig+0x2e0>)
 8007b24:	4293      	cmp	r3, r2
 8007b26:	d125      	bne.n	8007b74 <UART_SetConfig+0xf0>
 8007b28:	4b8f      	ldr	r3, [pc, #572]	; (8007d68 <UART_SetConfig+0x2e4>)
 8007b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b2e:	f003 0303 	and.w	r3, r3, #3
 8007b32:	2b03      	cmp	r3, #3
 8007b34:	d81a      	bhi.n	8007b6c <UART_SetConfig+0xe8>
 8007b36:	a201      	add	r2, pc, #4	; (adr r2, 8007b3c <UART_SetConfig+0xb8>)
 8007b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b3c:	08007b4d 	.word	0x08007b4d
 8007b40:	08007b5d 	.word	0x08007b5d
 8007b44:	08007b55 	.word	0x08007b55
 8007b48:	08007b65 	.word	0x08007b65
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b52:	e116      	b.n	8007d82 <UART_SetConfig+0x2fe>
 8007b54:	2302      	movs	r3, #2
 8007b56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b5a:	e112      	b.n	8007d82 <UART_SetConfig+0x2fe>
 8007b5c:	2304      	movs	r3, #4
 8007b5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b62:	e10e      	b.n	8007d82 <UART_SetConfig+0x2fe>
 8007b64:	2308      	movs	r3, #8
 8007b66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b6a:	e10a      	b.n	8007d82 <UART_SetConfig+0x2fe>
 8007b6c:	2310      	movs	r3, #16
 8007b6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b72:	e106      	b.n	8007d82 <UART_SetConfig+0x2fe>
 8007b74:	697b      	ldr	r3, [r7, #20]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	4a7c      	ldr	r2, [pc, #496]	; (8007d6c <UART_SetConfig+0x2e8>)
 8007b7a:	4293      	cmp	r3, r2
 8007b7c:	d138      	bne.n	8007bf0 <UART_SetConfig+0x16c>
 8007b7e:	4b7a      	ldr	r3, [pc, #488]	; (8007d68 <UART_SetConfig+0x2e4>)
 8007b80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b84:	f003 030c 	and.w	r3, r3, #12
 8007b88:	2b0c      	cmp	r3, #12
 8007b8a:	d82d      	bhi.n	8007be8 <UART_SetConfig+0x164>
 8007b8c:	a201      	add	r2, pc, #4	; (adr r2, 8007b94 <UART_SetConfig+0x110>)
 8007b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b92:	bf00      	nop
 8007b94:	08007bc9 	.word	0x08007bc9
 8007b98:	08007be9 	.word	0x08007be9
 8007b9c:	08007be9 	.word	0x08007be9
 8007ba0:	08007be9 	.word	0x08007be9
 8007ba4:	08007bd9 	.word	0x08007bd9
 8007ba8:	08007be9 	.word	0x08007be9
 8007bac:	08007be9 	.word	0x08007be9
 8007bb0:	08007be9 	.word	0x08007be9
 8007bb4:	08007bd1 	.word	0x08007bd1
 8007bb8:	08007be9 	.word	0x08007be9
 8007bbc:	08007be9 	.word	0x08007be9
 8007bc0:	08007be9 	.word	0x08007be9
 8007bc4:	08007be1 	.word	0x08007be1
 8007bc8:	2300      	movs	r3, #0
 8007bca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007bce:	e0d8      	b.n	8007d82 <UART_SetConfig+0x2fe>
 8007bd0:	2302      	movs	r3, #2
 8007bd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007bd6:	e0d4      	b.n	8007d82 <UART_SetConfig+0x2fe>
 8007bd8:	2304      	movs	r3, #4
 8007bda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007bde:	e0d0      	b.n	8007d82 <UART_SetConfig+0x2fe>
 8007be0:	2308      	movs	r3, #8
 8007be2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007be6:	e0cc      	b.n	8007d82 <UART_SetConfig+0x2fe>
 8007be8:	2310      	movs	r3, #16
 8007bea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007bee:	e0c8      	b.n	8007d82 <UART_SetConfig+0x2fe>
 8007bf0:	697b      	ldr	r3, [r7, #20]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	4a5e      	ldr	r2, [pc, #376]	; (8007d70 <UART_SetConfig+0x2ec>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d125      	bne.n	8007c46 <UART_SetConfig+0x1c2>
 8007bfa:	4b5b      	ldr	r3, [pc, #364]	; (8007d68 <UART_SetConfig+0x2e4>)
 8007bfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c00:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007c04:	2b30      	cmp	r3, #48	; 0x30
 8007c06:	d016      	beq.n	8007c36 <UART_SetConfig+0x1b2>
 8007c08:	2b30      	cmp	r3, #48	; 0x30
 8007c0a:	d818      	bhi.n	8007c3e <UART_SetConfig+0x1ba>
 8007c0c:	2b20      	cmp	r3, #32
 8007c0e:	d00a      	beq.n	8007c26 <UART_SetConfig+0x1a2>
 8007c10:	2b20      	cmp	r3, #32
 8007c12:	d814      	bhi.n	8007c3e <UART_SetConfig+0x1ba>
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d002      	beq.n	8007c1e <UART_SetConfig+0x19a>
 8007c18:	2b10      	cmp	r3, #16
 8007c1a:	d008      	beq.n	8007c2e <UART_SetConfig+0x1aa>
 8007c1c:	e00f      	b.n	8007c3e <UART_SetConfig+0x1ba>
 8007c1e:	2300      	movs	r3, #0
 8007c20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c24:	e0ad      	b.n	8007d82 <UART_SetConfig+0x2fe>
 8007c26:	2302      	movs	r3, #2
 8007c28:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c2c:	e0a9      	b.n	8007d82 <UART_SetConfig+0x2fe>
 8007c2e:	2304      	movs	r3, #4
 8007c30:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c34:	e0a5      	b.n	8007d82 <UART_SetConfig+0x2fe>
 8007c36:	2308      	movs	r3, #8
 8007c38:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c3c:	e0a1      	b.n	8007d82 <UART_SetConfig+0x2fe>
 8007c3e:	2310      	movs	r3, #16
 8007c40:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c44:	e09d      	b.n	8007d82 <UART_SetConfig+0x2fe>
 8007c46:	697b      	ldr	r3, [r7, #20]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	4a4a      	ldr	r2, [pc, #296]	; (8007d74 <UART_SetConfig+0x2f0>)
 8007c4c:	4293      	cmp	r3, r2
 8007c4e:	d125      	bne.n	8007c9c <UART_SetConfig+0x218>
 8007c50:	4b45      	ldr	r3, [pc, #276]	; (8007d68 <UART_SetConfig+0x2e4>)
 8007c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c56:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007c5a:	2bc0      	cmp	r3, #192	; 0xc0
 8007c5c:	d016      	beq.n	8007c8c <UART_SetConfig+0x208>
 8007c5e:	2bc0      	cmp	r3, #192	; 0xc0
 8007c60:	d818      	bhi.n	8007c94 <UART_SetConfig+0x210>
 8007c62:	2b80      	cmp	r3, #128	; 0x80
 8007c64:	d00a      	beq.n	8007c7c <UART_SetConfig+0x1f8>
 8007c66:	2b80      	cmp	r3, #128	; 0x80
 8007c68:	d814      	bhi.n	8007c94 <UART_SetConfig+0x210>
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d002      	beq.n	8007c74 <UART_SetConfig+0x1f0>
 8007c6e:	2b40      	cmp	r3, #64	; 0x40
 8007c70:	d008      	beq.n	8007c84 <UART_SetConfig+0x200>
 8007c72:	e00f      	b.n	8007c94 <UART_SetConfig+0x210>
 8007c74:	2300      	movs	r3, #0
 8007c76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c7a:	e082      	b.n	8007d82 <UART_SetConfig+0x2fe>
 8007c7c:	2302      	movs	r3, #2
 8007c7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c82:	e07e      	b.n	8007d82 <UART_SetConfig+0x2fe>
 8007c84:	2304      	movs	r3, #4
 8007c86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c8a:	e07a      	b.n	8007d82 <UART_SetConfig+0x2fe>
 8007c8c:	2308      	movs	r3, #8
 8007c8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c92:	e076      	b.n	8007d82 <UART_SetConfig+0x2fe>
 8007c94:	2310      	movs	r3, #16
 8007c96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c9a:	e072      	b.n	8007d82 <UART_SetConfig+0x2fe>
 8007c9c:	697b      	ldr	r3, [r7, #20]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	4a35      	ldr	r2, [pc, #212]	; (8007d78 <UART_SetConfig+0x2f4>)
 8007ca2:	4293      	cmp	r3, r2
 8007ca4:	d12a      	bne.n	8007cfc <UART_SetConfig+0x278>
 8007ca6:	4b30      	ldr	r3, [pc, #192]	; (8007d68 <UART_SetConfig+0x2e4>)
 8007ca8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007cb0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007cb4:	d01a      	beq.n	8007cec <UART_SetConfig+0x268>
 8007cb6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007cba:	d81b      	bhi.n	8007cf4 <UART_SetConfig+0x270>
 8007cbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007cc0:	d00c      	beq.n	8007cdc <UART_SetConfig+0x258>
 8007cc2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007cc6:	d815      	bhi.n	8007cf4 <UART_SetConfig+0x270>
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d003      	beq.n	8007cd4 <UART_SetConfig+0x250>
 8007ccc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007cd0:	d008      	beq.n	8007ce4 <UART_SetConfig+0x260>
 8007cd2:	e00f      	b.n	8007cf4 <UART_SetConfig+0x270>
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007cda:	e052      	b.n	8007d82 <UART_SetConfig+0x2fe>
 8007cdc:	2302      	movs	r3, #2
 8007cde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007ce2:	e04e      	b.n	8007d82 <UART_SetConfig+0x2fe>
 8007ce4:	2304      	movs	r3, #4
 8007ce6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007cea:	e04a      	b.n	8007d82 <UART_SetConfig+0x2fe>
 8007cec:	2308      	movs	r3, #8
 8007cee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007cf2:	e046      	b.n	8007d82 <UART_SetConfig+0x2fe>
 8007cf4:	2310      	movs	r3, #16
 8007cf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007cfa:	e042      	b.n	8007d82 <UART_SetConfig+0x2fe>
 8007cfc:	697b      	ldr	r3, [r7, #20]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	4a17      	ldr	r2, [pc, #92]	; (8007d60 <UART_SetConfig+0x2dc>)
 8007d02:	4293      	cmp	r3, r2
 8007d04:	d13a      	bne.n	8007d7c <UART_SetConfig+0x2f8>
 8007d06:	4b18      	ldr	r3, [pc, #96]	; (8007d68 <UART_SetConfig+0x2e4>)
 8007d08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d0c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007d10:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007d14:	d01a      	beq.n	8007d4c <UART_SetConfig+0x2c8>
 8007d16:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007d1a:	d81b      	bhi.n	8007d54 <UART_SetConfig+0x2d0>
 8007d1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d20:	d00c      	beq.n	8007d3c <UART_SetConfig+0x2b8>
 8007d22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d26:	d815      	bhi.n	8007d54 <UART_SetConfig+0x2d0>
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d003      	beq.n	8007d34 <UART_SetConfig+0x2b0>
 8007d2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d30:	d008      	beq.n	8007d44 <UART_SetConfig+0x2c0>
 8007d32:	e00f      	b.n	8007d54 <UART_SetConfig+0x2d0>
 8007d34:	2300      	movs	r3, #0
 8007d36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d3a:	e022      	b.n	8007d82 <UART_SetConfig+0x2fe>
 8007d3c:	2302      	movs	r3, #2
 8007d3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d42:	e01e      	b.n	8007d82 <UART_SetConfig+0x2fe>
 8007d44:	2304      	movs	r3, #4
 8007d46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d4a:	e01a      	b.n	8007d82 <UART_SetConfig+0x2fe>
 8007d4c:	2308      	movs	r3, #8
 8007d4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d52:	e016      	b.n	8007d82 <UART_SetConfig+0x2fe>
 8007d54:	2310      	movs	r3, #16
 8007d56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d5a:	e012      	b.n	8007d82 <UART_SetConfig+0x2fe>
 8007d5c:	cfff69f3 	.word	0xcfff69f3
 8007d60:	40008000 	.word	0x40008000
 8007d64:	40013800 	.word	0x40013800
 8007d68:	40021000 	.word	0x40021000
 8007d6c:	40004400 	.word	0x40004400
 8007d70:	40004800 	.word	0x40004800
 8007d74:	40004c00 	.word	0x40004c00
 8007d78:	40005000 	.word	0x40005000
 8007d7c:	2310      	movs	r3, #16
 8007d7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007d82:	697b      	ldr	r3, [r7, #20]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	4aae      	ldr	r2, [pc, #696]	; (8008040 <UART_SetConfig+0x5bc>)
 8007d88:	4293      	cmp	r3, r2
 8007d8a:	f040 8097 	bne.w	8007ebc <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007d8e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007d92:	2b08      	cmp	r3, #8
 8007d94:	d823      	bhi.n	8007dde <UART_SetConfig+0x35a>
 8007d96:	a201      	add	r2, pc, #4	; (adr r2, 8007d9c <UART_SetConfig+0x318>)
 8007d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d9c:	08007dc1 	.word	0x08007dc1
 8007da0:	08007ddf 	.word	0x08007ddf
 8007da4:	08007dc9 	.word	0x08007dc9
 8007da8:	08007ddf 	.word	0x08007ddf
 8007dac:	08007dcf 	.word	0x08007dcf
 8007db0:	08007ddf 	.word	0x08007ddf
 8007db4:	08007ddf 	.word	0x08007ddf
 8007db8:	08007ddf 	.word	0x08007ddf
 8007dbc:	08007dd7 	.word	0x08007dd7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007dc0:	f7fd f99c 	bl	80050fc <HAL_RCC_GetPCLK1Freq>
 8007dc4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007dc6:	e010      	b.n	8007dea <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007dc8:	4b9e      	ldr	r3, [pc, #632]	; (8008044 <UART_SetConfig+0x5c0>)
 8007dca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007dcc:	e00d      	b.n	8007dea <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007dce:	f7fd f927 	bl	8005020 <HAL_RCC_GetSysClockFreq>
 8007dd2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007dd4:	e009      	b.n	8007dea <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007dd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007dda:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007ddc:	e005      	b.n	8007dea <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8007dde:	2300      	movs	r3, #0
 8007de0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007de2:	2301      	movs	r3, #1
 8007de4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007de8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	f000 8130 	beq.w	8008052 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007df2:	697b      	ldr	r3, [r7, #20]
 8007df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007df6:	4a94      	ldr	r2, [pc, #592]	; (8008048 <UART_SetConfig+0x5c4>)
 8007df8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007dfc:	461a      	mov	r2, r3
 8007dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e00:	fbb3 f3f2 	udiv	r3, r3, r2
 8007e04:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007e06:	697b      	ldr	r3, [r7, #20]
 8007e08:	685a      	ldr	r2, [r3, #4]
 8007e0a:	4613      	mov	r3, r2
 8007e0c:	005b      	lsls	r3, r3, #1
 8007e0e:	4413      	add	r3, r2
 8007e10:	69ba      	ldr	r2, [r7, #24]
 8007e12:	429a      	cmp	r2, r3
 8007e14:	d305      	bcc.n	8007e22 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007e16:	697b      	ldr	r3, [r7, #20]
 8007e18:	685b      	ldr	r3, [r3, #4]
 8007e1a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007e1c:	69ba      	ldr	r2, [r7, #24]
 8007e1e:	429a      	cmp	r2, r3
 8007e20:	d903      	bls.n	8007e2a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8007e22:	2301      	movs	r3, #1
 8007e24:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007e28:	e113      	b.n	8008052 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	60bb      	str	r3, [r7, #8]
 8007e30:	60fa      	str	r2, [r7, #12]
 8007e32:	697b      	ldr	r3, [r7, #20]
 8007e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e36:	4a84      	ldr	r2, [pc, #528]	; (8008048 <UART_SetConfig+0x5c4>)
 8007e38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e3c:	b29b      	uxth	r3, r3
 8007e3e:	2200      	movs	r2, #0
 8007e40:	603b      	str	r3, [r7, #0]
 8007e42:	607a      	str	r2, [r7, #4]
 8007e44:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e48:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007e4c:	f7f8 f9e4 	bl	8000218 <__aeabi_uldivmod>
 8007e50:	4602      	mov	r2, r0
 8007e52:	460b      	mov	r3, r1
 8007e54:	4610      	mov	r0, r2
 8007e56:	4619      	mov	r1, r3
 8007e58:	f04f 0200 	mov.w	r2, #0
 8007e5c:	f04f 0300 	mov.w	r3, #0
 8007e60:	020b      	lsls	r3, r1, #8
 8007e62:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007e66:	0202      	lsls	r2, r0, #8
 8007e68:	6979      	ldr	r1, [r7, #20]
 8007e6a:	6849      	ldr	r1, [r1, #4]
 8007e6c:	0849      	lsrs	r1, r1, #1
 8007e6e:	2000      	movs	r0, #0
 8007e70:	460c      	mov	r4, r1
 8007e72:	4605      	mov	r5, r0
 8007e74:	eb12 0804 	adds.w	r8, r2, r4
 8007e78:	eb43 0905 	adc.w	r9, r3, r5
 8007e7c:	697b      	ldr	r3, [r7, #20]
 8007e7e:	685b      	ldr	r3, [r3, #4]
 8007e80:	2200      	movs	r2, #0
 8007e82:	469a      	mov	sl, r3
 8007e84:	4693      	mov	fp, r2
 8007e86:	4652      	mov	r2, sl
 8007e88:	465b      	mov	r3, fp
 8007e8a:	4640      	mov	r0, r8
 8007e8c:	4649      	mov	r1, r9
 8007e8e:	f7f8 f9c3 	bl	8000218 <__aeabi_uldivmod>
 8007e92:	4602      	mov	r2, r0
 8007e94:	460b      	mov	r3, r1
 8007e96:	4613      	mov	r3, r2
 8007e98:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007e9a:	6a3b      	ldr	r3, [r7, #32]
 8007e9c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ea0:	d308      	bcc.n	8007eb4 <UART_SetConfig+0x430>
 8007ea2:	6a3b      	ldr	r3, [r7, #32]
 8007ea4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007ea8:	d204      	bcs.n	8007eb4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8007eaa:	697b      	ldr	r3, [r7, #20]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	6a3a      	ldr	r2, [r7, #32]
 8007eb0:	60da      	str	r2, [r3, #12]
 8007eb2:	e0ce      	b.n	8008052 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007eb4:	2301      	movs	r3, #1
 8007eb6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007eba:	e0ca      	b.n	8008052 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007ebc:	697b      	ldr	r3, [r7, #20]
 8007ebe:	69db      	ldr	r3, [r3, #28]
 8007ec0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ec4:	d166      	bne.n	8007f94 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8007ec6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007eca:	2b08      	cmp	r3, #8
 8007ecc:	d827      	bhi.n	8007f1e <UART_SetConfig+0x49a>
 8007ece:	a201      	add	r2, pc, #4	; (adr r2, 8007ed4 <UART_SetConfig+0x450>)
 8007ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ed4:	08007ef9 	.word	0x08007ef9
 8007ed8:	08007f01 	.word	0x08007f01
 8007edc:	08007f09 	.word	0x08007f09
 8007ee0:	08007f1f 	.word	0x08007f1f
 8007ee4:	08007f0f 	.word	0x08007f0f
 8007ee8:	08007f1f 	.word	0x08007f1f
 8007eec:	08007f1f 	.word	0x08007f1f
 8007ef0:	08007f1f 	.word	0x08007f1f
 8007ef4:	08007f17 	.word	0x08007f17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ef8:	f7fd f900 	bl	80050fc <HAL_RCC_GetPCLK1Freq>
 8007efc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007efe:	e014      	b.n	8007f2a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007f00:	f7fd f912 	bl	8005128 <HAL_RCC_GetPCLK2Freq>
 8007f04:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007f06:	e010      	b.n	8007f2a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007f08:	4b4e      	ldr	r3, [pc, #312]	; (8008044 <UART_SetConfig+0x5c0>)
 8007f0a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007f0c:	e00d      	b.n	8007f2a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007f0e:	f7fd f887 	bl	8005020 <HAL_RCC_GetSysClockFreq>
 8007f12:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007f14:	e009      	b.n	8007f2a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f1a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007f1c:	e005      	b.n	8007f2a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8007f1e:	2300      	movs	r3, #0
 8007f20:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007f22:	2301      	movs	r3, #1
 8007f24:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007f28:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	f000 8090 	beq.w	8008052 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007f32:	697b      	ldr	r3, [r7, #20]
 8007f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f36:	4a44      	ldr	r2, [pc, #272]	; (8008048 <UART_SetConfig+0x5c4>)
 8007f38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f3c:	461a      	mov	r2, r3
 8007f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f40:	fbb3 f3f2 	udiv	r3, r3, r2
 8007f44:	005a      	lsls	r2, r3, #1
 8007f46:	697b      	ldr	r3, [r7, #20]
 8007f48:	685b      	ldr	r3, [r3, #4]
 8007f4a:	085b      	lsrs	r3, r3, #1
 8007f4c:	441a      	add	r2, r3
 8007f4e:	697b      	ldr	r3, [r7, #20]
 8007f50:	685b      	ldr	r3, [r3, #4]
 8007f52:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f56:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007f58:	6a3b      	ldr	r3, [r7, #32]
 8007f5a:	2b0f      	cmp	r3, #15
 8007f5c:	d916      	bls.n	8007f8c <UART_SetConfig+0x508>
 8007f5e:	6a3b      	ldr	r3, [r7, #32]
 8007f60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f64:	d212      	bcs.n	8007f8c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007f66:	6a3b      	ldr	r3, [r7, #32]
 8007f68:	b29b      	uxth	r3, r3
 8007f6a:	f023 030f 	bic.w	r3, r3, #15
 8007f6e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007f70:	6a3b      	ldr	r3, [r7, #32]
 8007f72:	085b      	lsrs	r3, r3, #1
 8007f74:	b29b      	uxth	r3, r3
 8007f76:	f003 0307 	and.w	r3, r3, #7
 8007f7a:	b29a      	uxth	r2, r3
 8007f7c:	8bfb      	ldrh	r3, [r7, #30]
 8007f7e:	4313      	orrs	r3, r2
 8007f80:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007f82:	697b      	ldr	r3, [r7, #20]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	8bfa      	ldrh	r2, [r7, #30]
 8007f88:	60da      	str	r2, [r3, #12]
 8007f8a:	e062      	b.n	8008052 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007f8c:	2301      	movs	r3, #1
 8007f8e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007f92:	e05e      	b.n	8008052 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007f94:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007f98:	2b08      	cmp	r3, #8
 8007f9a:	d828      	bhi.n	8007fee <UART_SetConfig+0x56a>
 8007f9c:	a201      	add	r2, pc, #4	; (adr r2, 8007fa4 <UART_SetConfig+0x520>)
 8007f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fa2:	bf00      	nop
 8007fa4:	08007fc9 	.word	0x08007fc9
 8007fa8:	08007fd1 	.word	0x08007fd1
 8007fac:	08007fd9 	.word	0x08007fd9
 8007fb0:	08007fef 	.word	0x08007fef
 8007fb4:	08007fdf 	.word	0x08007fdf
 8007fb8:	08007fef 	.word	0x08007fef
 8007fbc:	08007fef 	.word	0x08007fef
 8007fc0:	08007fef 	.word	0x08007fef
 8007fc4:	08007fe7 	.word	0x08007fe7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007fc8:	f7fd f898 	bl	80050fc <HAL_RCC_GetPCLK1Freq>
 8007fcc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007fce:	e014      	b.n	8007ffa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007fd0:	f7fd f8aa 	bl	8005128 <HAL_RCC_GetPCLK2Freq>
 8007fd4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007fd6:	e010      	b.n	8007ffa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007fd8:	4b1a      	ldr	r3, [pc, #104]	; (8008044 <UART_SetConfig+0x5c0>)
 8007fda:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007fdc:	e00d      	b.n	8007ffa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007fde:	f7fd f81f 	bl	8005020 <HAL_RCC_GetSysClockFreq>
 8007fe2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007fe4:	e009      	b.n	8007ffa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007fe6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007fea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007fec:	e005      	b.n	8007ffa <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8007fee:	2300      	movs	r3, #0
 8007ff0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007ff2:	2301      	movs	r3, #1
 8007ff4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007ff8:	bf00      	nop
    }

    if (pclk != 0U)
 8007ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d028      	beq.n	8008052 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008000:	697b      	ldr	r3, [r7, #20]
 8008002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008004:	4a10      	ldr	r2, [pc, #64]	; (8008048 <UART_SetConfig+0x5c4>)
 8008006:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800800a:	461a      	mov	r2, r3
 800800c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800800e:	fbb3 f2f2 	udiv	r2, r3, r2
 8008012:	697b      	ldr	r3, [r7, #20]
 8008014:	685b      	ldr	r3, [r3, #4]
 8008016:	085b      	lsrs	r3, r3, #1
 8008018:	441a      	add	r2, r3
 800801a:	697b      	ldr	r3, [r7, #20]
 800801c:	685b      	ldr	r3, [r3, #4]
 800801e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008022:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008024:	6a3b      	ldr	r3, [r7, #32]
 8008026:	2b0f      	cmp	r3, #15
 8008028:	d910      	bls.n	800804c <UART_SetConfig+0x5c8>
 800802a:	6a3b      	ldr	r3, [r7, #32]
 800802c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008030:	d20c      	bcs.n	800804c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008032:	6a3b      	ldr	r3, [r7, #32]
 8008034:	b29a      	uxth	r2, r3
 8008036:	697b      	ldr	r3, [r7, #20]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	60da      	str	r2, [r3, #12]
 800803c:	e009      	b.n	8008052 <UART_SetConfig+0x5ce>
 800803e:	bf00      	nop
 8008040:	40008000 	.word	0x40008000
 8008044:	00f42400 	.word	0x00f42400
 8008048:	08008c78 	.word	0x08008c78
      }
      else
      {
        ret = HAL_ERROR;
 800804c:	2301      	movs	r3, #1
 800804e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008052:	697b      	ldr	r3, [r7, #20]
 8008054:	2201      	movs	r2, #1
 8008056:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800805a:	697b      	ldr	r3, [r7, #20]
 800805c:	2201      	movs	r2, #1
 800805e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008062:	697b      	ldr	r3, [r7, #20]
 8008064:	2200      	movs	r2, #0
 8008066:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8008068:	697b      	ldr	r3, [r7, #20]
 800806a:	2200      	movs	r2, #0
 800806c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800806e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8008072:	4618      	mov	r0, r3
 8008074:	3730      	adds	r7, #48	; 0x30
 8008076:	46bd      	mov	sp, r7
 8008078:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800807c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800807c:	b480      	push	{r7}
 800807e:	b083      	sub	sp, #12
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008088:	f003 0308 	and.w	r3, r3, #8
 800808c:	2b00      	cmp	r3, #0
 800808e:	d00a      	beq.n	80080a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	685b      	ldr	r3, [r3, #4]
 8008096:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	430a      	orrs	r2, r1
 80080a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080aa:	f003 0301 	and.w	r3, r3, #1
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d00a      	beq.n	80080c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	685b      	ldr	r3, [r3, #4]
 80080b8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	430a      	orrs	r2, r1
 80080c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080cc:	f003 0302 	and.w	r3, r3, #2
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d00a      	beq.n	80080ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	685b      	ldr	r3, [r3, #4]
 80080da:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	430a      	orrs	r2, r1
 80080e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080ee:	f003 0304 	and.w	r3, r3, #4
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d00a      	beq.n	800810c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	685b      	ldr	r3, [r3, #4]
 80080fc:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	430a      	orrs	r2, r1
 800810a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008110:	f003 0310 	and.w	r3, r3, #16
 8008114:	2b00      	cmp	r3, #0
 8008116:	d00a      	beq.n	800812e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	689b      	ldr	r3, [r3, #8]
 800811e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	430a      	orrs	r2, r1
 800812c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008132:	f003 0320 	and.w	r3, r3, #32
 8008136:	2b00      	cmp	r3, #0
 8008138:	d00a      	beq.n	8008150 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	689b      	ldr	r3, [r3, #8]
 8008140:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	430a      	orrs	r2, r1
 800814e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008154:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008158:	2b00      	cmp	r3, #0
 800815a:	d01a      	beq.n	8008192 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	685b      	ldr	r3, [r3, #4]
 8008162:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	430a      	orrs	r2, r1
 8008170:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008176:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800817a:	d10a      	bne.n	8008192 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	685b      	ldr	r3, [r3, #4]
 8008182:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	430a      	orrs	r2, r1
 8008190:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008196:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800819a:	2b00      	cmp	r3, #0
 800819c:	d00a      	beq.n	80081b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	685b      	ldr	r3, [r3, #4]
 80081a4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	430a      	orrs	r2, r1
 80081b2:	605a      	str	r2, [r3, #4]
  }
}
 80081b4:	bf00      	nop
 80081b6:	370c      	adds	r7, #12
 80081b8:	46bd      	mov	sp, r7
 80081ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081be:	4770      	bx	lr

080081c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b098      	sub	sp, #96	; 0x60
 80081c4:	af02      	add	r7, sp, #8
 80081c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2200      	movs	r2, #0
 80081cc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80081d0:	f7f9 fde8 	bl	8001da4 <HAL_GetTick>
 80081d4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f003 0308 	and.w	r3, r3, #8
 80081e0:	2b08      	cmp	r3, #8
 80081e2:	d12f      	bne.n	8008244 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80081e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80081e8:	9300      	str	r3, [sp, #0]
 80081ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80081ec:	2200      	movs	r2, #0
 80081ee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80081f2:	6878      	ldr	r0, [r7, #4]
 80081f4:	f000 f88e 	bl	8008314 <UART_WaitOnFlagUntilTimeout>
 80081f8:	4603      	mov	r3, r0
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d022      	beq.n	8008244 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008206:	e853 3f00 	ldrex	r3, [r3]
 800820a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800820c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800820e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008212:	653b      	str	r3, [r7, #80]	; 0x50
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	461a      	mov	r2, r3
 800821a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800821c:	647b      	str	r3, [r7, #68]	; 0x44
 800821e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008220:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008222:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008224:	e841 2300 	strex	r3, r2, [r1]
 8008228:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800822a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800822c:	2b00      	cmp	r3, #0
 800822e:	d1e6      	bne.n	80081fe <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2220      	movs	r2, #32
 8008234:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2200      	movs	r2, #0
 800823c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008240:	2303      	movs	r3, #3
 8008242:	e063      	b.n	800830c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	f003 0304 	and.w	r3, r3, #4
 800824e:	2b04      	cmp	r3, #4
 8008250:	d149      	bne.n	80082e6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008252:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008256:	9300      	str	r3, [sp, #0]
 8008258:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800825a:	2200      	movs	r2, #0
 800825c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008260:	6878      	ldr	r0, [r7, #4]
 8008262:	f000 f857 	bl	8008314 <UART_WaitOnFlagUntilTimeout>
 8008266:	4603      	mov	r3, r0
 8008268:	2b00      	cmp	r3, #0
 800826a:	d03c      	beq.n	80082e6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008274:	e853 3f00 	ldrex	r3, [r3]
 8008278:	623b      	str	r3, [r7, #32]
   return(result);
 800827a:	6a3b      	ldr	r3, [r7, #32]
 800827c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008280:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	461a      	mov	r2, r3
 8008288:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800828a:	633b      	str	r3, [r7, #48]	; 0x30
 800828c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800828e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008290:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008292:	e841 2300 	strex	r3, r2, [r1]
 8008296:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800829a:	2b00      	cmp	r3, #0
 800829c:	d1e6      	bne.n	800826c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	3308      	adds	r3, #8
 80082a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082a6:	693b      	ldr	r3, [r7, #16]
 80082a8:	e853 3f00 	ldrex	r3, [r3]
 80082ac:	60fb      	str	r3, [r7, #12]
   return(result);
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	f023 0301 	bic.w	r3, r3, #1
 80082b4:	64bb      	str	r3, [r7, #72]	; 0x48
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	3308      	adds	r3, #8
 80082bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80082be:	61fa      	str	r2, [r7, #28]
 80082c0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082c2:	69b9      	ldr	r1, [r7, #24]
 80082c4:	69fa      	ldr	r2, [r7, #28]
 80082c6:	e841 2300 	strex	r3, r2, [r1]
 80082ca:	617b      	str	r3, [r7, #20]
   return(result);
 80082cc:	697b      	ldr	r3, [r7, #20]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d1e5      	bne.n	800829e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2220      	movs	r2, #32
 80082d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2200      	movs	r2, #0
 80082de:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80082e2:	2303      	movs	r3, #3
 80082e4:	e012      	b.n	800830c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2220      	movs	r2, #32
 80082ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2220      	movs	r2, #32
 80082f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2200      	movs	r2, #0
 80082fa:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2200      	movs	r2, #0
 8008300:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2200      	movs	r2, #0
 8008306:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800830a:	2300      	movs	r3, #0
}
 800830c:	4618      	mov	r0, r3
 800830e:	3758      	adds	r7, #88	; 0x58
 8008310:	46bd      	mov	sp, r7
 8008312:	bd80      	pop	{r7, pc}

08008314 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b084      	sub	sp, #16
 8008318:	af00      	add	r7, sp, #0
 800831a:	60f8      	str	r0, [r7, #12]
 800831c:	60b9      	str	r1, [r7, #8]
 800831e:	603b      	str	r3, [r7, #0]
 8008320:	4613      	mov	r3, r2
 8008322:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008324:	e04f      	b.n	80083c6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008326:	69bb      	ldr	r3, [r7, #24]
 8008328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800832c:	d04b      	beq.n	80083c6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800832e:	f7f9 fd39 	bl	8001da4 <HAL_GetTick>
 8008332:	4602      	mov	r2, r0
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	1ad3      	subs	r3, r2, r3
 8008338:	69ba      	ldr	r2, [r7, #24]
 800833a:	429a      	cmp	r2, r3
 800833c:	d302      	bcc.n	8008344 <UART_WaitOnFlagUntilTimeout+0x30>
 800833e:	69bb      	ldr	r3, [r7, #24]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d101      	bne.n	8008348 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008344:	2303      	movs	r3, #3
 8008346:	e04e      	b.n	80083e6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f003 0304 	and.w	r3, r3, #4
 8008352:	2b00      	cmp	r3, #0
 8008354:	d037      	beq.n	80083c6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008356:	68bb      	ldr	r3, [r7, #8]
 8008358:	2b80      	cmp	r3, #128	; 0x80
 800835a:	d034      	beq.n	80083c6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800835c:	68bb      	ldr	r3, [r7, #8]
 800835e:	2b40      	cmp	r3, #64	; 0x40
 8008360:	d031      	beq.n	80083c6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	69db      	ldr	r3, [r3, #28]
 8008368:	f003 0308 	and.w	r3, r3, #8
 800836c:	2b08      	cmp	r3, #8
 800836e:	d110      	bne.n	8008392 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	2208      	movs	r2, #8
 8008376:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008378:	68f8      	ldr	r0, [r7, #12]
 800837a:	f000 f920 	bl	80085be <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	2208      	movs	r2, #8
 8008382:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	2200      	movs	r2, #0
 800838a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800838e:	2301      	movs	r3, #1
 8008390:	e029      	b.n	80083e6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	69db      	ldr	r3, [r3, #28]
 8008398:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800839c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80083a0:	d111      	bne.n	80083c6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80083aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80083ac:	68f8      	ldr	r0, [r7, #12]
 80083ae:	f000 f906 	bl	80085be <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	2220      	movs	r2, #32
 80083b6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	2200      	movs	r2, #0
 80083be:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80083c2:	2303      	movs	r3, #3
 80083c4:	e00f      	b.n	80083e6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	69da      	ldr	r2, [r3, #28]
 80083cc:	68bb      	ldr	r3, [r7, #8]
 80083ce:	4013      	ands	r3, r2
 80083d0:	68ba      	ldr	r2, [r7, #8]
 80083d2:	429a      	cmp	r2, r3
 80083d4:	bf0c      	ite	eq
 80083d6:	2301      	moveq	r3, #1
 80083d8:	2300      	movne	r3, #0
 80083da:	b2db      	uxtb	r3, r3
 80083dc:	461a      	mov	r2, r3
 80083de:	79fb      	ldrb	r3, [r7, #7]
 80083e0:	429a      	cmp	r2, r3
 80083e2:	d0a0      	beq.n	8008326 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80083e4:	2300      	movs	r3, #0
}
 80083e6:	4618      	mov	r0, r3
 80083e8:	3710      	adds	r7, #16
 80083ea:	46bd      	mov	sp, r7
 80083ec:	bd80      	pop	{r7, pc}
	...

080083f0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b096      	sub	sp, #88	; 0x58
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	60f8      	str	r0, [r7, #12]
 80083f8:	60b9      	str	r1, [r7, #8]
 80083fa:	4613      	mov	r3, r2
 80083fc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	68ba      	ldr	r2, [r7, #8]
 8008402:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	88fa      	ldrh	r2, [r7, #6]
 8008408:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	2200      	movs	r2, #0
 8008410:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	2222      	movs	r2, #34	; 0x22
 8008418:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008422:	2b00      	cmp	r3, #0
 8008424:	d02d      	beq.n	8008482 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800842c:	4a40      	ldr	r2, [pc, #256]	; (8008530 <UART_Start_Receive_DMA+0x140>)
 800842e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008436:	4a3f      	ldr	r2, [pc, #252]	; (8008534 <UART_Start_Receive_DMA+0x144>)
 8008438:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008440:	4a3d      	ldr	r2, [pc, #244]	; (8008538 <UART_Start_Receive_DMA+0x148>)
 8008442:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800844a:	2200      	movs	r2, #0
 800844c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	3324      	adds	r3, #36	; 0x24
 800845a:	4619      	mov	r1, r3
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008460:	461a      	mov	r2, r3
 8008462:	88fb      	ldrh	r3, [r7, #6]
 8008464:	f7fb fc84 	bl	8003d70 <HAL_DMA_Start_IT>
 8008468:	4603      	mov	r3, r0
 800846a:	2b00      	cmp	r3, #0
 800846c:	d009      	beq.n	8008482 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	2210      	movs	r2, #16
 8008472:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	2220      	movs	r2, #32
 800847a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 800847e:	2301      	movs	r3, #1
 8008480:	e051      	b.n	8008526 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	691b      	ldr	r3, [r3, #16]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d018      	beq.n	80084bc <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008490:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008492:	e853 3f00 	ldrex	r3, [r3]
 8008496:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800849a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800849e:	657b      	str	r3, [r7, #84]	; 0x54
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	461a      	mov	r2, r3
 80084a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80084a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80084aa:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ac:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80084ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80084b0:	e841 2300 	strex	r3, r2, [r1]
 80084b4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80084b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d1e6      	bne.n	800848a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	3308      	adds	r3, #8
 80084c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084c6:	e853 3f00 	ldrex	r3, [r3]
 80084ca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80084cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ce:	f043 0301 	orr.w	r3, r3, #1
 80084d2:	653b      	str	r3, [r7, #80]	; 0x50
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	3308      	adds	r3, #8
 80084da:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80084dc:	637a      	str	r2, [r7, #52]	; 0x34
 80084de:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084e0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80084e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80084e4:	e841 2300 	strex	r3, r2, [r1]
 80084e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80084ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d1e5      	bne.n	80084bc <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	3308      	adds	r3, #8
 80084f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084f8:	697b      	ldr	r3, [r7, #20]
 80084fa:	e853 3f00 	ldrex	r3, [r3]
 80084fe:	613b      	str	r3, [r7, #16]
   return(result);
 8008500:	693b      	ldr	r3, [r7, #16]
 8008502:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008506:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	3308      	adds	r3, #8
 800850e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008510:	623a      	str	r2, [r7, #32]
 8008512:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008514:	69f9      	ldr	r1, [r7, #28]
 8008516:	6a3a      	ldr	r2, [r7, #32]
 8008518:	e841 2300 	strex	r3, r2, [r1]
 800851c:	61bb      	str	r3, [r7, #24]
   return(result);
 800851e:	69bb      	ldr	r3, [r7, #24]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d1e5      	bne.n	80084f0 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8008524:	2300      	movs	r3, #0
}
 8008526:	4618      	mov	r0, r3
 8008528:	3758      	adds	r7, #88	; 0x58
 800852a:	46bd      	mov	sp, r7
 800852c:	bd80      	pop	{r7, pc}
 800852e:	bf00      	nop
 8008530:	08008741 	.word	0x08008741
 8008534:	0800886d 	.word	0x0800886d
 8008538:	080088ab 	.word	0x080088ab

0800853c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800853c:	b480      	push	{r7}
 800853e:	b08f      	sub	sp, #60	; 0x3c
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800854a:	6a3b      	ldr	r3, [r7, #32]
 800854c:	e853 3f00 	ldrex	r3, [r3]
 8008550:	61fb      	str	r3, [r7, #28]
   return(result);
 8008552:	69fb      	ldr	r3, [r7, #28]
 8008554:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008558:	637b      	str	r3, [r7, #52]	; 0x34
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	461a      	mov	r2, r3
 8008560:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008562:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008564:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008566:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008568:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800856a:	e841 2300 	strex	r3, r2, [r1]
 800856e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008572:	2b00      	cmp	r3, #0
 8008574:	d1e6      	bne.n	8008544 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	3308      	adds	r3, #8
 800857c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	e853 3f00 	ldrex	r3, [r3]
 8008584:	60bb      	str	r3, [r7, #8]
   return(result);
 8008586:	68bb      	ldr	r3, [r7, #8]
 8008588:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800858c:	633b      	str	r3, [r7, #48]	; 0x30
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	3308      	adds	r3, #8
 8008594:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008596:	61ba      	str	r2, [r7, #24]
 8008598:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800859a:	6979      	ldr	r1, [r7, #20]
 800859c:	69ba      	ldr	r2, [r7, #24]
 800859e:	e841 2300 	strex	r3, r2, [r1]
 80085a2:	613b      	str	r3, [r7, #16]
   return(result);
 80085a4:	693b      	ldr	r3, [r7, #16]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d1e5      	bne.n	8008576 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2220      	movs	r2, #32
 80085ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 80085b2:	bf00      	nop
 80085b4:	373c      	adds	r7, #60	; 0x3c
 80085b6:	46bd      	mov	sp, r7
 80085b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085bc:	4770      	bx	lr

080085be <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80085be:	b480      	push	{r7}
 80085c0:	b095      	sub	sp, #84	; 0x54
 80085c2:	af00      	add	r7, sp, #0
 80085c4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085ce:	e853 3f00 	ldrex	r3, [r3]
 80085d2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80085d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085d6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80085da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	461a      	mov	r2, r3
 80085e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085e4:	643b      	str	r3, [r7, #64]	; 0x40
 80085e6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085e8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80085ea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80085ec:	e841 2300 	strex	r3, r2, [r1]
 80085f0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80085f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d1e6      	bne.n	80085c6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	3308      	adds	r3, #8
 80085fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008600:	6a3b      	ldr	r3, [r7, #32]
 8008602:	e853 3f00 	ldrex	r3, [r3]
 8008606:	61fb      	str	r3, [r7, #28]
   return(result);
 8008608:	69fb      	ldr	r3, [r7, #28]
 800860a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800860e:	f023 0301 	bic.w	r3, r3, #1
 8008612:	64bb      	str	r3, [r7, #72]	; 0x48
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	3308      	adds	r3, #8
 800861a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800861c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800861e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008620:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008622:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008624:	e841 2300 	strex	r3, r2, [r1]
 8008628:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800862a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800862c:	2b00      	cmp	r3, #0
 800862e:	d1e3      	bne.n	80085f8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008634:	2b01      	cmp	r3, #1
 8008636:	d118      	bne.n	800866a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	e853 3f00 	ldrex	r3, [r3]
 8008644:	60bb      	str	r3, [r7, #8]
   return(result);
 8008646:	68bb      	ldr	r3, [r7, #8]
 8008648:	f023 0310 	bic.w	r3, r3, #16
 800864c:	647b      	str	r3, [r7, #68]	; 0x44
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	461a      	mov	r2, r3
 8008654:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008656:	61bb      	str	r3, [r7, #24]
 8008658:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800865a:	6979      	ldr	r1, [r7, #20]
 800865c:	69ba      	ldr	r2, [r7, #24]
 800865e:	e841 2300 	strex	r3, r2, [r1]
 8008662:	613b      	str	r3, [r7, #16]
   return(result);
 8008664:	693b      	ldr	r3, [r7, #16]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d1e6      	bne.n	8008638 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	2220      	movs	r2, #32
 800866e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	2200      	movs	r2, #0
 8008676:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2200      	movs	r2, #0
 800867c:	675a      	str	r2, [r3, #116]	; 0x74
}
 800867e:	bf00      	nop
 8008680:	3754      	adds	r7, #84	; 0x54
 8008682:	46bd      	mov	sp, r7
 8008684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008688:	4770      	bx	lr

0800868a <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800868a:	b580      	push	{r7, lr}
 800868c:	b090      	sub	sp, #64	; 0x40
 800868e:	af00      	add	r7, sp, #0
 8008690:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008696:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	f003 0320 	and.w	r3, r3, #32
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d137      	bne.n	8008716 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 80086a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086a8:	2200      	movs	r2, #0
 80086aa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80086ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	3308      	adds	r3, #8
 80086b4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086b8:	e853 3f00 	ldrex	r3, [r3]
 80086bc:	623b      	str	r3, [r7, #32]
   return(result);
 80086be:	6a3b      	ldr	r3, [r7, #32]
 80086c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80086c4:	63bb      	str	r3, [r7, #56]	; 0x38
 80086c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	3308      	adds	r3, #8
 80086cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80086ce:	633a      	str	r2, [r7, #48]	; 0x30
 80086d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80086d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086d6:	e841 2300 	strex	r3, r2, [r1]
 80086da:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80086dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d1e5      	bne.n	80086ae <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80086e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086e8:	693b      	ldr	r3, [r7, #16]
 80086ea:	e853 3f00 	ldrex	r3, [r3]
 80086ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80086f6:	637b      	str	r3, [r7, #52]	; 0x34
 80086f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	461a      	mov	r2, r3
 80086fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008700:	61fb      	str	r3, [r7, #28]
 8008702:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008704:	69b9      	ldr	r1, [r7, #24]
 8008706:	69fa      	ldr	r2, [r7, #28]
 8008708:	e841 2300 	strex	r3, r2, [r1]
 800870c:	617b      	str	r3, [r7, #20]
   return(result);
 800870e:	697b      	ldr	r3, [r7, #20]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d1e6      	bne.n	80086e2 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008714:	e002      	b.n	800871c <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8008716:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008718:	f7ff f980 	bl	8007a1c <HAL_UART_TxCpltCallback>
}
 800871c:	bf00      	nop
 800871e:	3740      	adds	r7, #64	; 0x40
 8008720:	46bd      	mov	sp, r7
 8008722:	bd80      	pop	{r7, pc}

08008724 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b084      	sub	sp, #16
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008730:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008732:	68f8      	ldr	r0, [r7, #12]
 8008734:	f7ff f97c 	bl	8007a30 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008738:	bf00      	nop
 800873a:	3710      	adds	r7, #16
 800873c:	46bd      	mov	sp, r7
 800873e:	bd80      	pop	{r7, pc}

08008740 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b09c      	sub	sp, #112	; 0x70
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800874c:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	f003 0320 	and.w	r3, r3, #32
 8008758:	2b00      	cmp	r3, #0
 800875a:	d171      	bne.n	8008840 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800875c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800875e:	2200      	movs	r2, #0
 8008760:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008764:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800876a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800876c:	e853 3f00 	ldrex	r3, [r3]
 8008770:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008772:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008774:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008778:	66bb      	str	r3, [r7, #104]	; 0x68
 800877a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	461a      	mov	r2, r3
 8008780:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008782:	65bb      	str	r3, [r7, #88]	; 0x58
 8008784:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008786:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008788:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800878a:	e841 2300 	strex	r3, r2, [r1]
 800878e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008790:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008792:	2b00      	cmp	r3, #0
 8008794:	d1e6      	bne.n	8008764 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008796:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	3308      	adds	r3, #8
 800879c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800879e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087a0:	e853 3f00 	ldrex	r3, [r3]
 80087a4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80087a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087a8:	f023 0301 	bic.w	r3, r3, #1
 80087ac:	667b      	str	r3, [r7, #100]	; 0x64
 80087ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	3308      	adds	r3, #8
 80087b4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80087b6:	647a      	str	r2, [r7, #68]	; 0x44
 80087b8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087ba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80087bc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80087be:	e841 2300 	strex	r3, r2, [r1]
 80087c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80087c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d1e5      	bne.n	8008796 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80087ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	3308      	adds	r3, #8
 80087d0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087d4:	e853 3f00 	ldrex	r3, [r3]
 80087d8:	623b      	str	r3, [r7, #32]
   return(result);
 80087da:	6a3b      	ldr	r3, [r7, #32]
 80087dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80087e0:	663b      	str	r3, [r7, #96]	; 0x60
 80087e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	3308      	adds	r3, #8
 80087e8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80087ea:	633a      	str	r2, [r7, #48]	; 0x30
 80087ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80087f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80087f2:	e841 2300 	strex	r3, r2, [r1]
 80087f6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80087f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d1e5      	bne.n	80087ca <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80087fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008800:	2220      	movs	r2, #32
 8008802:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008806:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008808:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800880a:	2b01      	cmp	r3, #1
 800880c:	d118      	bne.n	8008840 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800880e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008814:	693b      	ldr	r3, [r7, #16]
 8008816:	e853 3f00 	ldrex	r3, [r3]
 800881a:	60fb      	str	r3, [r7, #12]
   return(result);
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	f023 0310 	bic.w	r3, r3, #16
 8008822:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008824:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	461a      	mov	r2, r3
 800882a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800882c:	61fb      	str	r3, [r7, #28]
 800882e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008830:	69b9      	ldr	r1, [r7, #24]
 8008832:	69fa      	ldr	r2, [r7, #28]
 8008834:	e841 2300 	strex	r3, r2, [r1]
 8008838:	617b      	str	r3, [r7, #20]
   return(result);
 800883a:	697b      	ldr	r3, [r7, #20]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d1e6      	bne.n	800880e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008840:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008842:	2200      	movs	r2, #0
 8008844:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008846:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008848:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800884a:	2b01      	cmp	r3, #1
 800884c:	d107      	bne.n	800885e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800884e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008850:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008854:	4619      	mov	r1, r3
 8008856:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008858:	f7ff f908 	bl	8007a6c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800885c:	e002      	b.n	8008864 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800885e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008860:	f7f8 fd86 	bl	8001370 <HAL_UART_RxCpltCallback>
}
 8008864:	bf00      	nop
 8008866:	3770      	adds	r7, #112	; 0x70
 8008868:	46bd      	mov	sp, r7
 800886a:	bd80      	pop	{r7, pc}

0800886c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b084      	sub	sp, #16
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008878:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	2201      	movs	r2, #1
 800887e:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008884:	2b01      	cmp	r3, #1
 8008886:	d109      	bne.n	800889c <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800888e:	085b      	lsrs	r3, r3, #1
 8008890:	b29b      	uxth	r3, r3
 8008892:	4619      	mov	r1, r3
 8008894:	68f8      	ldr	r0, [r7, #12]
 8008896:	f7ff f8e9 	bl	8007a6c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800889a:	e002      	b.n	80088a2 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800889c:	68f8      	ldr	r0, [r7, #12]
 800889e:	f7ff f8d1 	bl	8007a44 <HAL_UART_RxHalfCpltCallback>
}
 80088a2:	bf00      	nop
 80088a4:	3710      	adds	r7, #16
 80088a6:	46bd      	mov	sp, r7
 80088a8:	bd80      	pop	{r7, pc}

080088aa <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80088aa:	b580      	push	{r7, lr}
 80088ac:	b086      	sub	sp, #24
 80088ae:	af00      	add	r7, sp, #0
 80088b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088b6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80088b8:	697b      	ldr	r3, [r7, #20]
 80088ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088be:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80088c0:	697b      	ldr	r3, [r7, #20]
 80088c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80088c6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80088c8:	697b      	ldr	r3, [r7, #20]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	689b      	ldr	r3, [r3, #8]
 80088ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088d2:	2b80      	cmp	r3, #128	; 0x80
 80088d4:	d109      	bne.n	80088ea <UART_DMAError+0x40>
 80088d6:	693b      	ldr	r3, [r7, #16]
 80088d8:	2b21      	cmp	r3, #33	; 0x21
 80088da:	d106      	bne.n	80088ea <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80088dc:	697b      	ldr	r3, [r7, #20]
 80088de:	2200      	movs	r2, #0
 80088e0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 80088e4:	6978      	ldr	r0, [r7, #20]
 80088e6:	f7ff fe29 	bl	800853c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80088ea:	697b      	ldr	r3, [r7, #20]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	689b      	ldr	r3, [r3, #8]
 80088f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088f4:	2b40      	cmp	r3, #64	; 0x40
 80088f6:	d109      	bne.n	800890c <UART_DMAError+0x62>
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	2b22      	cmp	r3, #34	; 0x22
 80088fc:	d106      	bne.n	800890c <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80088fe:	697b      	ldr	r3, [r7, #20]
 8008900:	2200      	movs	r2, #0
 8008902:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8008906:	6978      	ldr	r0, [r7, #20]
 8008908:	f7ff fe59 	bl	80085be <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800890c:	697b      	ldr	r3, [r7, #20]
 800890e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008912:	f043 0210 	orr.w	r2, r3, #16
 8008916:	697b      	ldr	r3, [r7, #20]
 8008918:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800891c:	6978      	ldr	r0, [r7, #20]
 800891e:	f7ff f89b 	bl	8007a58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008922:	bf00      	nop
 8008924:	3718      	adds	r7, #24
 8008926:	46bd      	mov	sp, r7
 8008928:	bd80      	pop	{r7, pc}

0800892a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800892a:	b580      	push	{r7, lr}
 800892c:	b084      	sub	sp, #16
 800892e:	af00      	add	r7, sp, #0
 8008930:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008936:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	2200      	movs	r2, #0
 800893c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	2200      	movs	r2, #0
 8008944:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008948:	68f8      	ldr	r0, [r7, #12]
 800894a:	f7ff f885 	bl	8007a58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800894e:	bf00      	nop
 8008950:	3710      	adds	r7, #16
 8008952:	46bd      	mov	sp, r7
 8008954:	bd80      	pop	{r7, pc}

08008956 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008956:	b580      	push	{r7, lr}
 8008958:	b088      	sub	sp, #32
 800895a:	af00      	add	r7, sp, #0
 800895c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	e853 3f00 	ldrex	r3, [r3]
 800896a:	60bb      	str	r3, [r7, #8]
   return(result);
 800896c:	68bb      	ldr	r3, [r7, #8]
 800896e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008972:	61fb      	str	r3, [r7, #28]
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	461a      	mov	r2, r3
 800897a:	69fb      	ldr	r3, [r7, #28]
 800897c:	61bb      	str	r3, [r7, #24]
 800897e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008980:	6979      	ldr	r1, [r7, #20]
 8008982:	69ba      	ldr	r2, [r7, #24]
 8008984:	e841 2300 	strex	r3, r2, [r1]
 8008988:	613b      	str	r3, [r7, #16]
   return(result);
 800898a:	693b      	ldr	r3, [r7, #16]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d1e6      	bne.n	800895e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2220      	movs	r2, #32
 8008994:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2200      	movs	r2, #0
 800899c:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800899e:	6878      	ldr	r0, [r7, #4]
 80089a0:	f7ff f83c 	bl	8007a1c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80089a4:	bf00      	nop
 80089a6:	3720      	adds	r7, #32
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bd80      	pop	{r7, pc}

080089ac <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80089ac:	b480      	push	{r7}
 80089ae:	b083      	sub	sp, #12
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80089b4:	bf00      	nop
 80089b6:	370c      	adds	r7, #12
 80089b8:	46bd      	mov	sp, r7
 80089ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089be:	4770      	bx	lr

080089c0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80089c0:	b480      	push	{r7}
 80089c2:	b083      	sub	sp, #12
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80089c8:	bf00      	nop
 80089ca:	370c      	adds	r7, #12
 80089cc:	46bd      	mov	sp, r7
 80089ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d2:	4770      	bx	lr

080089d4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80089d4:	b480      	push	{r7}
 80089d6:	b083      	sub	sp, #12
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80089dc:	bf00      	nop
 80089de:	370c      	adds	r7, #12
 80089e0:	46bd      	mov	sp, r7
 80089e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e6:	4770      	bx	lr

080089e8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80089e8:	b480      	push	{r7}
 80089ea:	b085      	sub	sp, #20
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80089f6:	2b01      	cmp	r3, #1
 80089f8:	d101      	bne.n	80089fe <HAL_UARTEx_DisableFifoMode+0x16>
 80089fa:	2302      	movs	r3, #2
 80089fc:	e027      	b.n	8008a4e <HAL_UARTEx_DisableFifoMode+0x66>
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2201      	movs	r2, #1
 8008a02:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	2224      	movs	r2, #36	; 0x24
 8008a0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	681a      	ldr	r2, [r3, #0]
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	f022 0201 	bic.w	r2, r2, #1
 8008a24:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008a2c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	2200      	movs	r2, #0
 8008a32:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	68fa      	ldr	r2, [r7, #12]
 8008a3a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2220      	movs	r2, #32
 8008a40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2200      	movs	r2, #0
 8008a48:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008a4c:	2300      	movs	r3, #0
}
 8008a4e:	4618      	mov	r0, r3
 8008a50:	3714      	adds	r7, #20
 8008a52:	46bd      	mov	sp, r7
 8008a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a58:	4770      	bx	lr

08008a5a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008a5a:	b580      	push	{r7, lr}
 8008a5c:	b084      	sub	sp, #16
 8008a5e:	af00      	add	r7, sp, #0
 8008a60:	6078      	str	r0, [r7, #4]
 8008a62:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008a6a:	2b01      	cmp	r3, #1
 8008a6c:	d101      	bne.n	8008a72 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008a6e:	2302      	movs	r3, #2
 8008a70:	e02d      	b.n	8008ace <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	2201      	movs	r2, #1
 8008a76:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	2224      	movs	r2, #36	; 0x24
 8008a7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	681a      	ldr	r2, [r3, #0]
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	f022 0201 	bic.w	r2, r2, #1
 8008a98:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	689b      	ldr	r3, [r3, #8]
 8008aa0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	683a      	ldr	r2, [r7, #0]
 8008aaa:	430a      	orrs	r2, r1
 8008aac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008aae:	6878      	ldr	r0, [r7, #4]
 8008ab0:	f000 f850 	bl	8008b54 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	68fa      	ldr	r2, [r7, #12]
 8008aba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2220      	movs	r2, #32
 8008ac0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008acc:	2300      	movs	r3, #0
}
 8008ace:	4618      	mov	r0, r3
 8008ad0:	3710      	adds	r7, #16
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	bd80      	pop	{r7, pc}

08008ad6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008ad6:	b580      	push	{r7, lr}
 8008ad8:	b084      	sub	sp, #16
 8008ada:	af00      	add	r7, sp, #0
 8008adc:	6078      	str	r0, [r7, #4]
 8008ade:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008ae6:	2b01      	cmp	r3, #1
 8008ae8:	d101      	bne.n	8008aee <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008aea:	2302      	movs	r3, #2
 8008aec:	e02d      	b.n	8008b4a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	2201      	movs	r2, #1
 8008af2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	2224      	movs	r2, #36	; 0x24
 8008afa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	681a      	ldr	r2, [r3, #0]
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	f022 0201 	bic.w	r2, r2, #1
 8008b14:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	689b      	ldr	r3, [r3, #8]
 8008b1c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	683a      	ldr	r2, [r7, #0]
 8008b26:	430a      	orrs	r2, r1
 8008b28:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008b2a:	6878      	ldr	r0, [r7, #4]
 8008b2c:	f000 f812 	bl	8008b54 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	68fa      	ldr	r2, [r7, #12]
 8008b36:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2220      	movs	r2, #32
 8008b3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2200      	movs	r2, #0
 8008b44:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008b48:	2300      	movs	r3, #0
}
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	3710      	adds	r7, #16
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	bd80      	pop	{r7, pc}
	...

08008b54 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008b54:	b480      	push	{r7}
 8008b56:	b085      	sub	sp, #20
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d108      	bne.n	8008b76 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2201      	movs	r2, #1
 8008b68:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2201      	movs	r2, #1
 8008b70:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008b74:	e031      	b.n	8008bda <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008b76:	2308      	movs	r3, #8
 8008b78:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008b7a:	2308      	movs	r3, #8
 8008b7c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	689b      	ldr	r3, [r3, #8]
 8008b84:	0e5b      	lsrs	r3, r3, #25
 8008b86:	b2db      	uxtb	r3, r3
 8008b88:	f003 0307 	and.w	r3, r3, #7
 8008b8c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	689b      	ldr	r3, [r3, #8]
 8008b94:	0f5b      	lsrs	r3, r3, #29
 8008b96:	b2db      	uxtb	r3, r3
 8008b98:	f003 0307 	and.w	r3, r3, #7
 8008b9c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008b9e:	7bbb      	ldrb	r3, [r7, #14]
 8008ba0:	7b3a      	ldrb	r2, [r7, #12]
 8008ba2:	4911      	ldr	r1, [pc, #68]	; (8008be8 <UARTEx_SetNbDataToProcess+0x94>)
 8008ba4:	5c8a      	ldrb	r2, [r1, r2]
 8008ba6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008baa:	7b3a      	ldrb	r2, [r7, #12]
 8008bac:	490f      	ldr	r1, [pc, #60]	; (8008bec <UARTEx_SetNbDataToProcess+0x98>)
 8008bae:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008bb0:	fb93 f3f2 	sdiv	r3, r3, r2
 8008bb4:	b29a      	uxth	r2, r3
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008bbc:	7bfb      	ldrb	r3, [r7, #15]
 8008bbe:	7b7a      	ldrb	r2, [r7, #13]
 8008bc0:	4909      	ldr	r1, [pc, #36]	; (8008be8 <UARTEx_SetNbDataToProcess+0x94>)
 8008bc2:	5c8a      	ldrb	r2, [r1, r2]
 8008bc4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008bc8:	7b7a      	ldrb	r2, [r7, #13]
 8008bca:	4908      	ldr	r1, [pc, #32]	; (8008bec <UARTEx_SetNbDataToProcess+0x98>)
 8008bcc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008bce:	fb93 f3f2 	sdiv	r3, r3, r2
 8008bd2:	b29a      	uxth	r2, r3
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008bda:	bf00      	nop
 8008bdc:	3714      	adds	r7, #20
 8008bde:	46bd      	mov	sp, r7
 8008be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be4:	4770      	bx	lr
 8008be6:	bf00      	nop
 8008be8:	08008c90 	.word	0x08008c90
 8008bec:	08008c98 	.word	0x08008c98

08008bf0 <memset>:
 8008bf0:	4402      	add	r2, r0
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	4293      	cmp	r3, r2
 8008bf6:	d100      	bne.n	8008bfa <memset+0xa>
 8008bf8:	4770      	bx	lr
 8008bfa:	f803 1b01 	strb.w	r1, [r3], #1
 8008bfe:	e7f9      	b.n	8008bf4 <memset+0x4>

08008c00 <__libc_init_array>:
 8008c00:	b570      	push	{r4, r5, r6, lr}
 8008c02:	4d0d      	ldr	r5, [pc, #52]	; (8008c38 <__libc_init_array+0x38>)
 8008c04:	4c0d      	ldr	r4, [pc, #52]	; (8008c3c <__libc_init_array+0x3c>)
 8008c06:	1b64      	subs	r4, r4, r5
 8008c08:	10a4      	asrs	r4, r4, #2
 8008c0a:	2600      	movs	r6, #0
 8008c0c:	42a6      	cmp	r6, r4
 8008c0e:	d109      	bne.n	8008c24 <__libc_init_array+0x24>
 8008c10:	4d0b      	ldr	r5, [pc, #44]	; (8008c40 <__libc_init_array+0x40>)
 8008c12:	4c0c      	ldr	r4, [pc, #48]	; (8008c44 <__libc_init_array+0x44>)
 8008c14:	f000 f818 	bl	8008c48 <_init>
 8008c18:	1b64      	subs	r4, r4, r5
 8008c1a:	10a4      	asrs	r4, r4, #2
 8008c1c:	2600      	movs	r6, #0
 8008c1e:	42a6      	cmp	r6, r4
 8008c20:	d105      	bne.n	8008c2e <__libc_init_array+0x2e>
 8008c22:	bd70      	pop	{r4, r5, r6, pc}
 8008c24:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c28:	4798      	blx	r3
 8008c2a:	3601      	adds	r6, #1
 8008c2c:	e7ee      	b.n	8008c0c <__libc_init_array+0xc>
 8008c2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c32:	4798      	blx	r3
 8008c34:	3601      	adds	r6, #1
 8008c36:	e7f2      	b.n	8008c1e <__libc_init_array+0x1e>
 8008c38:	08008ca8 	.word	0x08008ca8
 8008c3c:	08008ca8 	.word	0x08008ca8
 8008c40:	08008ca8 	.word	0x08008ca8
 8008c44:	08008cac 	.word	0x08008cac

08008c48 <_init>:
 8008c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c4a:	bf00      	nop
 8008c4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c4e:	bc08      	pop	{r3}
 8008c50:	469e      	mov	lr, r3
 8008c52:	4770      	bx	lr

08008c54 <_fini>:
 8008c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c56:	bf00      	nop
 8008c58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c5a:	bc08      	pop	{r3}
 8008c5c:	469e      	mov	lr, r3
 8008c5e:	4770      	bx	lr
